#!/bin/sh
# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: src/tools/scripts/signSbeImage $
#
# OpenPOWER sbe Project
#
# Contributors Listed Below - COPYRIGHT 2016,2021
# [+] International Business Machines Corp.
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# IBM_PROLOG_END_TAG

# Exit if any command fails
set -e

# @brief Checks whether the file that is the input argument exists on the file
# system. The function
#        exits with an error status if the file DNE.
#
# @param[in] Full path to the file to check
check_path()
{
    if [ ! -f $1 ]; then
        echo "***ERROR | SBE | signSbeImage : $1 DNE!"
        exit -1
    fi
}

# @brief Pad zero's to a binary file to make it 8 byte aligned
#
# @param[in] Full path of the file to be padded
alignFileSize()
{
    ALIGN=8
    PAD_BYTE="\x00"

    FILESIZE=$(wc -c <"$1")
    echo " "
    echo "Size of $1 = $FILESIZE bytes."

    if [ $((FILESIZE % ALIGN)) -ne 0 ]; then
        echo "File: $1 unaligned. Aligning to nearest 8Byte."
        PAD_BYTES=$((ALIGN - (FILESIZE % ALIGN)))

        while [ $PAD_BYTES -ne 0 ]
            do
                echo -n -e $PAD_BYTE >> $1
                PAD_BYTES=$(($PAD_BYTES - 1))
            done

        FILESIZE=$(wc -c <"$1")
        echo "Size of $1 after alignment = $FILESIZE bytes."
    fi
}

# @brief Print the help/usage info to the console
usage()
{
    echo "Usage"
    echo "!!!RUN ON A RHEL7 MACHINE!!!"
    echo "Sign SBE image"
    echo "signSbeImage -i <SBE image to sign> -t <IPL Image tool path> -s <scratch dir path> [-h ]"
    echo ""
    echo "Options:"
    echo "  -h: print this message."
    echo "  -s: scratch dir path."
    echo "  -i: SBE image to sign. "
    echo "  -t: IPL Image tool path."
    echo "  -S: Secure Version."
    echo "  -b: Build Type PNOR/STANDALONE (Default PNOR)."
    echo "  -d: SBE Image Dir path in op-build"
    echo "  -f: signing Mode. Production/Development(Default)"
}

while getopts "h?s:i:t:b:d:S:f:" opt;
do
    case $opt in

        h)
            usage
            exit 0
        ;;

        s)
            SCRATCH_DIR=$OPTARG
        ;;

        i)
            SBEBINSIMIMAGE=$OPTARG
        ;;

        t)
            IPL_IMAGE_TOOL=$OPTARG
        ;;

        b)
            BUILD_TYPE=$OPTARG
        ;;

	    d)
            SBE_IMG_DIR_OP=$OPTARG
        ;;

        S)
            SV=$OPTARG
        ;;

        f)
            SIGNING_MODE=$OPTARG
        ;;

        *)
            echo "Bad option: $OPTARG"
            usage
            exit -1
        ;;

    esac
done

#Check if user has passed all required arguments
if [ -z $SCRATCH_DIR ]; then
    echo "***ERROR | SBE | signSbeImage : Scratch directory path not set. Please supply the -s option."
    usage
    exit -1
fi

if [ -z $SBEBINSIMIMAGE ]; then
    echo "***ERROR | SBE | signSbeImage : SBE Image path not set. Please supply the -i option."
    usage
    exit -1
fi

if [ -z $IPL_IMAGE_TOOL ]; then
    echo "***ERROR | SBE | signSbeImage : IPL Image tool path not set. Please supply the -t option."
    usage
    exit -1
fi

if [ -z $BUILD_TYPE ]; then
    echo "***INFO | SBE | signSbeImage : Build Type not entered. Defaulting to PNOR build type"
    BUILD_TYPE="PNOR" #Default Build Type
fi

SIGNING_DIR=
DEV_KEY_DIR=
SIGNTOOL_ARGS=

# Determine if our path setup has been provided by the environment
if [ ! -z $SIGNING_BASE_DIR ]; then
    echo "***INFO | SBE | signSbeImage : Fetching signing tools from provided environment"
    RH_DIR=`sed "s/^.*release \([0-9]*\)\..*$/rh\1/" /etc/redhat-release`
    SIGNING_DIR=$SIGNING_BASE_DIR/$RH_DIR/$SIGNING_UTILS_DIR
    DEV_KEY_DIR=${SIGNING_BASE_DIR}/sb-signing-keys

elif [ -z $SBE_IMG_DIR_OP ]; then
    echo "***INFO | SBE | signSbeImage : Not OP_build. Fetching keys and signing scripts from /afs/..."
    RH_DIR=`sed 's/^.*release \([0-9]*\)\..*$/rh\1/' /etc/redhat-release`
    DEV_KEY_DIR=/afs/rchland.ibm.com/projects/esw/bin/sb-signing/sb-signing-keys/
    SIGNING_DIR=/afs/rchland.ibm.com/projects/esw/bin/sb-signing/$RH_DIR/sb-signing-utils

else
    echo "***INFO | SBE | signSbeImage : OP_build. Fetching keys and signing scripts from OP-Build Tree"
    DEV_KEY_DIR=${SBE_IMG_DIR_OP}/../../../host/etc/keys/
    SIGNING_DIR=${SBE_IMG_DIR_OP}/../../../host/usr/bin/
fi

# Adjust paths to pick up the signing tools
LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$SIGNING_DIR
PATH=$SIGNING_DIR:$PATH

# Check for signing mode passed in by environment
if [ $BR2_OPENPOWER_SECUREBOOT_SIGN_MODE = "production" ]; then
    SIGNING_MODE="Production"
fi

#Check if user has passed signing mode
if [ -z $SIGNING_MODE ]; then
    SIGNING_MODE="Development"
    echo "***INFO | SBE | signSbeImage : Defaulting signing mode to $SIGNING_MODE "
fi

#Set flag basis Development or production mode.
if [ "$SIGNING_MODE" = "Development" ]; then
    echo "***INFO | SBE | signSbeImage : Development Mode Signing"
    SIGNTOOL_ARGS="$SIGNTOOL_ARGS --mode development --flags 0x40080000 \
                   --hwKeyA ${DEV_KEY_DIR}/hw_key_a.key --hwKeyB ${DEV_KEY_DIR}/hw_key_b.key \
                   --hwKeyC ${DEV_KEY_DIR}/hw_key_c.key --swKeyP ${DEV_KEY_DIR}/sw_key_a.key "

elif [ "$SIGNING_MODE" = "Production" ]; then
    echo "***INFO | SBE | signSbeImage : Production Mode Signing"

    if [ -z $SB_PROJECT_INI ] || [ ! -e $SB_PROJECT_INI ]; then
        echo "***ERROR | SBE | signSbeImage : Unable to locate production signing project ini file : $SB_PROJECT_INI"
        exit -1
    fi
    if [ -z $SB_ARCHIVE_IN ] || [ ! -e $SB_ARCHIVE_IN ]; then
        echo "***ERROR | SBE | signSbeImage : Unable to locate production signing key archive : $SB_ARCHIVE_IN"
        exit -1
    fi

    SIGNTOOL_ARGS="$SIGNTOOL_ARGS --mode production --flags 0x40000000 \
                   --hwKeyA __getkey --hwKeyB __getkey --hwKeyC __getkey --swKeyP __get \
                   --sign-project-config $SB_PROJECT_INI --archiveIn $SB_ARCHIVE_IN"

    # Need path to SF client to access signing server
    PATH=$SIGNING_DIR/../sb-signing-framework/sb-signing-framework/src/client:$PATH


else
    echo "***ERROR | SBE | signSbeImage : Invalid signing mode option. Enter correct -f option"
    usage
    exit -1
fi

#Determine secure version setting
if [ -z $SV ]; then
    # Build process can pass in the secure version through the environment
    if [ ! -z $SIGNING_SECURITY_VERSION ]; then
        SV=$SIGNING_SECURITY_VERSION
        echo "***INFO | SBE | signSbeImage : SV(Secure Version) passed via SIGNING_SECURITY_VERSION as $SV"
    else
        SV=0
        echo "***INFO | SBE | signSbeImage : SV(Secure Version) not entered. Defaulting to $SV"
    fi
else
    echo "***INFO | SBE | signSbeImage : SV( Secure Version) entered: $SV"
fi

# Do some sanity checks on things we expect the script to consume
check_path ${DEV_KEY_DIR}/hw_key_a.key
check_path ${DEV_KEY_DIR}/hw_key_b.key
check_path ${DEV_KEY_DIR}/hw_key_c.key
check_path ${DEV_KEY_DIR}/sw_key_a.key
check_path ${IPL_IMAGE_TOOL}
check_path ${SBEBINSIMIMAGE}
check_path ${SIGNING_DIR}/crtSignedContainer.sh

#Create the scratch dir
mkdir -p ${SCRATCH_DIR}

printf "\nSign SBE Image\n"

if [ "$BUILD_TYPE" = "STANDALONE" ]; then

    #Extract .hbbl section from SBE image
    $IPL_IMAGE_TOOL $SBEBINSIMIMAGE extract .hbbl $SCRATCH_DIR/hbbl.bin || exit -1

    # Sign the .hbbl binary
    echo "Sign .hbbl section"
    $SIGNING_DIR/crtSignedContainer.sh --scratchDir ${SCRATCH_DIR} $SIGNTOOL_ARGS \
       --sign-project-FW-token HBBL --protectedPayload ${SCRATCH_DIR}/hbbl.bin \
       --contrHdrOut ${SCRATCH_DIR}/SBE_HBBL.header --out ${SCRATCH_DIR}/SBE_HBBL.protected_payload.bin \
       --validate --security-version $SV

    #Strip out padding zeros from SBE_HBBL.header i.e only 1282 bytes is actual data. Keep it 8 byte alligned i.e 1288
    echo "Strip SBE_HBBL.header content"
    dd bs=1 count=1288 if=${SCRATCH_DIR}/SBE_HBBL.header of=${SCRATCH_DIR}/SBE_HBBL_stripped.header

    #Append the stripped SBE_HBBL_stripped.header into .sbh_hbbl xip section
    echo "Appending secure header into .sbh_hbbl xip section"
    $IPL_IMAGE_TOOL $SBEBINSIMIMAGE append .sbh_hbbl $SCRATCH_DIR/SBE_HBBL_stripped.header || exit -1

elif [ "$BUILD_TYPE" = "PNOR" ]; then

    echo "Skipping signing of HBBL section....."

else

    echo "***ERROR | SBE | signSbeImage : Invalid Build Type entered : $BUILD_TYPE. Please supply the -t option."
    usage
    exit -1

fi

#Extract .loader_text section from SBE image
$IPL_IMAGE_TOOL $SBEBINSIMIMAGE extract .loader_text $SCRATCH_DIR/loader_text.bin || exit -1

#Extract .text section from SBE image
$IPL_IMAGE_TOOL $SBEBINSIMIMAGE extract .text $SCRATCH_DIR/text.bin || exit -1

#Extract .base section from SBE image
$IPL_IMAGE_TOOL $SBEBINSIMIMAGE extract .base $SCRATCH_DIR/base.bin || exit -1

#Extract .baseloader section from SBE image
$IPL_IMAGE_TOOL $SBEBINSIMIMAGE extract .baseloader $SCRATCH_DIR/baseloader.bin || exit -1

#Align all files which are related to FW secure HDR to overcome alignment issues
#during SHA512 calculation in verification process.
alignFileSize $SCRATCH_DIR/loader_text.bin
alignFileSize $SCRATCH_DIR/text.bin
alignFileSize $SCRATCH_DIR/base.bin
alignFileSize $SCRATCH_DIR/baseloader.bin

#Combine .loader_text,.test,.baseloader,.base
cat $SCRATCH_DIR/loader_text.bin $SCRATCH_DIR/text.bin $SCRATCH_DIR/baseloader.bin $SCRATCH_DIR/base.bin > $SCRATCH_DIR/sbe_fw.bin

# Sign the SBE firmware binary image(payload.bin)
CMD="$SIGNING_DIR/crtSignedContainer.sh --scratchDir ${SCRATCH_DIR} $SIGNTOOL_ARGS \
    --sign-project-FW-token SBE_FW --protectedPayload ${SCRATCH_DIR}/sbe_fw.bin \
    --contrHdrOut ${SCRATCH_DIR}/SBE_FW.header --out ${SCRATCH_DIR}/SBE_FW.protected_payload.bin \
    --validate --security-version $SV"
echo "Sign SBE FW image : $CMD"
$CMD

#Strip out padding zeros from SBE_FW.header i.e only 1282 bytes is actual data. Keep it 8 byte alligned i.e 1288
echo "Strip SBE_FW.header content"
dd bs=1 count=1288 if=${SCRATCH_DIR}/SBE_FW.header of=${SCRATCH_DIR}/SBE_FW_stripped.header

#Append the stripped SBE_FW_stripped.header into .sbh_firmware xip section
echo "Appending secure header into .sbh_firmware xip section"
$IPL_IMAGE_TOOL $SBEBINSIMIMAGE delete .sbh_firmware
$IPL_IMAGE_TOOL $SBEBINSIMIMAGE append .sbh_firmware $SCRATCH_DIR/SBE_FW_stripped.header || exit -1

#Hash of the HW keys. Fetch the value from any of the secure container which is created.
#We need to filter out the HW keys from the print container output and convert the output to .bin format
echo "Calculate/Fetch Hash of HW keys"
print-container -w0 --imagefile ${SCRATCH_DIR}/SBE_FW.header | grep -A1 "HW keys hash" | grep "           " | head -1 | tr -d " " | tr -d "\n" | xxd -r -p > $SCRATCH_DIR/hw_keys_hash.bin

# Append minumum secure version into .sb_settings xip section after HW key hash
RESERVED="\x00\x00\x00\x00\x00\x00\x00"
SB_SV=`printf %02d $SV`
SB_SV="\x${SB_SV}"
echo "Appending SV $SB_SV and reserved bytes $RESERVED to sb_settings"
echo -n -e $SB_SV$RESERVED >> $SCRATCH_DIR/hw_keys_hash.bin
echo $SCRATCH_DIR
#Append the HW key hash into .sb_settings xip section
echo "Appending HW key hash into .sb_settings xip section"
$IPL_IMAGE_TOOL $SBEBINSIMIMAGE delete .sb_settings
$IPL_IMAGE_TOOL $SBEBINSIMIMAGE append .sb_settings $SCRATCH_DIR/hw_keys_hash.bin || exit -1

#Lets delete the scratch dir
rm -rf $SCRATCH_DIR

echo "SBE Image Signed Successfully"
echo " "

exit 0
