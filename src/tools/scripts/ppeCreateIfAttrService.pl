#!/usr/bin/perl
# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: src/tools/scripts/ppeCreateIfAttrService.pl $
#
# OpenPOWER sbe Project
#
# Contributors Listed Below - COPYRIGHT 2016
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# IBM_PROLOG_END_TAG
# Purpose:  This perl script will parse HWP Attribute XML files and
# initfile attr files and create the fapiGetInitFileAttr() function
# in a file called fapi2AttributeService.C

use strict;

#------------------------------------------------------------------------------
# Print Command Line Help
#------------------------------------------------------------------------------
my $numArgs = $#ARGV + 1;
if ($numArgs < 3)
{
    print ("Usage: fapi2CreateIfAttrService.pl <output dir>\n");
    print ("           [<if-attr-file1> <if-attr-file2> ...]\n");
    print ("           -a <attr-xml-file1> [<attr-xml-file2> ...]\n");
    print ("  This perl script will parse if-attr files (containing the\n");
    print ("  attributes used by the initfile) and attribute XML files\n");
    print ("  (containing all HWPF attributes) and create the\n");
    print ("  fapiGetInitFileAttr() function in a file called\n");
    print ("  fapiAttributeService.C. Only the attributes specified in\n");
    print ("  the if-attr files are supported. If no if-attr files are\n");
    print ("  specified then all attributes are supported\n");
    exit(1);
}

#------------------------------------------------------------------------------
# Specify perl modules to use
#------------------------------------------------------------------------------
use XML::Simple;
my $xml = new XML::Simple (KeyAttr=>[]);

# Uncomment to enable debug output
#use Data::Dumper;

#------------------------------------------------------------------------------
# Open output file for writing
#------------------------------------------------------------------------------
my $asFile = $ARGV[0];
$asFile .= "/";
$asFile .= "fapi2AttributeService.C";
open(ASFILE, ">", $asFile);

#------------------------------------------------------------------------------
# Print Start of file information to fapiAttributeService.C
#------------------------------------------------------------------------------
print ASFILE "// fapi2AttributeService.C\n";
print ASFILE "// This file is generated by perl script fapi2CreateIfAttrService.pl\n\n";
print ASFILE "#include <fapi2AttributeService.H>\n";
print ASFILE "//#include <fapi2ChipEcFeature.H>\n";
print ASFILE "//#include <fapi2PlatTrace.H>\n\n";
print ASFILE "namespace fapi2\n";
print ASFILE "{\n\n";
print ASFILE "ReturnCode fapiGetInitFileAttr(const AttributeId i_id,\n";
print ASFILE "                               const Target * i_pTarget,\n";
print ASFILE "                               uint64_t & o_val,\n";
print ASFILE "                               const uint32_t i_arrayIndex1,\n";
print ASFILE "                               const uint32_t i_arrayIndex2,\n";
print ASFILE "                               const uint32_t i_arrayIndex3,\n";
print ASFILE "                               const uint32_t i_arrayIndex4)\n";
print ASFILE "{\n";
print ASFILE "    ReturnCode l_rc;\n\n";

my $xmlFiles = 0;
my $attCount = 0;
my $numIfAttrFiles = 0;
my @attrIds;

#------------------------------------------------------------------------------
# Element names
#------------------------------------------------------------------------------
my $attribute = 'attribute';

#------------------------------------------------------------------------------
# For each argument
#------------------------------------------------------------------------------
my $argfile = $ARGV[1];
my $entries = $xml->XMLin($argfile, ForceArray => ['entry']);
foreach my $entr (@{$entries->{entry}}) {

    my $inname = $entr->{name};

    # read XML file. The ForceArray option ensures that there is an array of
    # elements even if there is only one such element in the file

    foreach my $argnum (2 .. $#ARGV)
    {
        my $infile = $ARGV[$argnum];

        my $attributes = $xml->XMLin($infile, ForceArray => ['attribute']);

        # Uncomment to get debug output of all attributes
        #print "\nFile: ", $infile, "\n", Dumper($attributes), "\n";

        #--------------------------------------------------------------------------
        # For each Attribute
        #--------------------------------------------------------------------------
        foreach my $attr (@{$attributes->{attribute}})
        {



            if($attr->{id} eq $inname) {

            #------------------------------------------------------------------
            # Check that the AttributeId exists
            #------------------------------------------------------------------
            if (! exists $attr->{id})
            {
                print ("fapiParseAttributeInfo.pl ERROR. Att 'id' missing\n");
                exit(1);
            }


            #------------------------------------------------------------------
            # Figure out the number of attribute array dimensions
            #------------------------------------------------------------------
            my $numArrayDimensions = 0;
            if ($attr->{array})
            {
                # Remove leading whitespace
                my $dimText = $attr->{array};
                $dimText =~ s/^\s+//;

                # Split on commas or whitespace
                my @vals = split(/\s*,\s*|\s+/, $dimText);

                $numArrayDimensions=@vals;
            }

            #------------------------------------------------------------------
            # Print the attribute get code to fapiAttributeService.C
            #------------------------------------------------------------------
            if ($attCount > 0)
            {
                print ASFILE "    else ";
            }
            else
            {
                print ASFILE "    ";
            }
            $attCount++;

            print ASFILE "if (i_id == $attr->{id})\n";
            print ASFILE "    {\n"; 
            print ASFILE "        $attr->{id}_Type l_attr;\n";

            if (exists $attr->{privileged})
            {
                print ASFILE "        l_rc = FAPI_ATTR_GET_PRIVILEGED($attr->{id}, i_pTarget, l_attr);\n";
            }
            else
            {
                print ASFILE "        l_rc = FAPI_ATTR_GET($attr->{id}, i_pTarget, l_attr);\n";
            }
            print ASFILE "        o_val = l_attr";

            if ($numArrayDimensions >= 5)
            {
                print ("fapiParseAttributeInfo.pl ERROR. More than 4 array dimensions!!\n");
                exit(1);
            }
            else
            {
                for (my $i = 0; $i < $numArrayDimensions; $i++)
                {
                    print ASFILE "[i_arrayIndex";
                    print ASFILE $i+1;
                    print ASFILE "]";
                }
            }

            print ASFILE ";\n";
            print ASFILE "    }\n";
                


            }
        }
    }

}

#------------------------------------------------------------------------------
# Print End of file information to fapiAttributeService.C
#--------------------------------------------------------------------------
if ($attCount > 0)
{
    print ASFILE "    else\n";
}
print ASFILE "    {\n";
print ASFILE "        FAPI_ERR(\"fapiGetInitFileAttr: Unrecognized attr ID: 0x%x\", i_id);\n";
print ASFILE "        l_rc.setFapiError(FAPI_RC_INVALID_ATTR_GET);\n";
print ASFILE "        l_rc.addEIFfdc(0, &i_id, sizeof(i_id));\n";
print ASFILE "    }\n\n";
print ASFILE "    if (l_rc)\n";
print ASFILE "    {\n";
print ASFILE "        if (i_pTarget)\n";
print ASFILE "        {\n";
print ASFILE "            FAPI_ERR(\"fapiGetInitFileAttr: Error getting attr ID 0x%x from targType 0x%x\",\n";
print ASFILE "                     i_id, i_pTarget->getType());\n";
print ASFILE "        }\n";
print ASFILE "        else\n";
print ASFILE "        {\n";
print ASFILE "            FAPI_ERR(\"fapiGetInitFileAttr: Error getting attr ID 0x%x from system target\",\n";
print ASFILE "                     i_id);\n";
print ASFILE "        }\n";
print ASFILE "    }\n\n";
print ASFILE "    return l_rc;\n";
print ASFILE "}\n\n";
print ASFILE "}\n";


#------------------------------------------------------------------------------
# Close output file
#------------------------------------------------------------------------------
close(ASFILE);
