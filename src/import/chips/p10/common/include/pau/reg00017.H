/* IBM_PROLOG_BEGIN_TAG                                                   */
/* This is an automatically generated prolog.                             */
/*                                                                        */
/* $Source: src/import/chips/p10/common/include/pau/reg00017.H $          */
/*                                                                        */
/* OpenPOWER sbe Project                                                  */
/*                                                                        */
/* Contributors Listed Below - COPYRIGHT 2019,2020                        */
/* [+] International Business Machines Corp.                              */
/*                                                                        */
/*                                                                        */
/* Licensed under the Apache License, Version 2.0 (the "License");        */
/* you may not use this file except in compliance with the License.       */
/* You may obtain a copy of the License at                                */
/*                                                                        */
/*     http://www.apache.org/licenses/LICENSE-2.0                         */
/*                                                                        */
/* Unless required by applicable law or agreed to in writing, software    */
/* distributed under the License is distributed on an "AS IS" BASIS,      */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        */
/* implied. See the License for the specific language governing           */
/* permissions and limitations under the License.                         */
/*                                                                        */
/* IBM_PROLOG_END_TAG                                                     */
#include "fapi2.H"

#ifndef __PAU_REG00017_H_
#define __PAU_REG00017_H_

#ifndef __PPE_HCODE__
namespace scomt
{
namespace pau
{
#endif


//>> PREP_[AME_AME1_MISC_AMM_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AME_AME1_MISC_AMM_CONFIG1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME1_MISC_AMM_CONFIG1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AME_AME1_MISC_AMM_CONFIG1]

//>> GET_[AME_AME1_MISC_AMM_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AME_AME1_MISC_AMM_CONFIG1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME1_MISC_AMM_CONFIG1;
#endif
    return fapi2::getScom(i_target, AME_AME1_MISC_AMM_CONFIG1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AME_AME1_MISC_AMM_CONFIG1]

//>> PUT_[AME_AME1_MISC_AMM_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AME_AME1_MISC_AMM_CONFIG1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_AMM_CONFIG1));
#endif
    return fapi2::putScom(i_target, AME_AME1_MISC_AMM_CONFIG1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AME_AME1_MISC_AMM_CONFIG1]


//>> SET_[AME_AME1_MISC_AMM_CONFIG1_1_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_AMM_CONFIG1_1_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_AMM_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_AMM_CONFIG1_1_RESERVED,
           AME_AME1_MISC_AMM_CONFIG1_1_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_AMM_CONFIG1_1_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_AMM_CONFIG1_1_RESERVED]

//>> SET_[AME_AME1_MISC_AMM_CONFIG1_1_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_AMM_CONFIG1_1_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_AMM_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_AMM_CONFIG1_1_RESERVED,
           AME_AME1_MISC_AMM_CONFIG1_1_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_AMM_CONFIG1_1_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_AMM_CONFIG1_1_RESERVED]

//>> GET_[AME_AME1_MISC_AMM_CONFIG1_1_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_AMM_CONFIG1_1_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_AMM_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME1_MISC_AMM_CONFIG1_1_RESERVED,
           AME_AME1_MISC_AMM_CONFIG1_1_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_AMM_CONFIG1_1_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_AMM_CONFIG1_1_RESERVED]

//>> SET_[AME_AME1_MISC_AMM_CONFIG1_MRQ_WD_CRD]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_AMM_CONFIG1_MRQ_WD_CRD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_AMM_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_AMM_CONFIG1_MRQ_WD_CRD,
           AME_AME1_MISC_AMM_CONFIG1_MRQ_WD_CRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_AMM_CONFIG1_MRQ_WD_CRD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_AMM_CONFIG1_MRQ_WD_CRD]

//>> SET_[AME_AME1_MISC_AMM_CONFIG1_MRQ_WD_CRD]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_AMM_CONFIG1_MRQ_WD_CRD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_AMM_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_AMM_CONFIG1_MRQ_WD_CRD,
           AME_AME1_MISC_AMM_CONFIG1_MRQ_WD_CRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_AMM_CONFIG1_MRQ_WD_CRD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_AMM_CONFIG1_MRQ_WD_CRD]

//>> GET_[AME_AME1_MISC_AMM_CONFIG1_MRQ_WD_CRD]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_AMM_CONFIG1_MRQ_WD_CRD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_AMM_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME1_MISC_AMM_CONFIG1_MRQ_WD_CRD,
           AME_AME1_MISC_AMM_CONFIG1_MRQ_WD_CRD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_AMM_CONFIG1_MRQ_WD_CRD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_AMM_CONFIG1_MRQ_WD_CRD]

//>> SET_[AME_AME1_MISC_AMM_CONFIG1_MRQ_SD_CRD]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_AMM_CONFIG1_MRQ_SD_CRD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_AMM_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_AMM_CONFIG1_MRQ_SD_CRD,
           AME_AME1_MISC_AMM_CONFIG1_MRQ_SD_CRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_AMM_CONFIG1_MRQ_SD_CRD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_AMM_CONFIG1_MRQ_SD_CRD]

//>> SET_[AME_AME1_MISC_AMM_CONFIG1_MRQ_SD_CRD]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_AMM_CONFIG1_MRQ_SD_CRD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_AMM_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_AMM_CONFIG1_MRQ_SD_CRD,
           AME_AME1_MISC_AMM_CONFIG1_MRQ_SD_CRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_AMM_CONFIG1_MRQ_SD_CRD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_AMM_CONFIG1_MRQ_SD_CRD]

//>> GET_[AME_AME1_MISC_AMM_CONFIG1_MRQ_SD_CRD]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_AMM_CONFIG1_MRQ_SD_CRD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_AMM_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME1_MISC_AMM_CONFIG1_MRQ_SD_CRD,
           AME_AME1_MISC_AMM_CONFIG1_MRQ_SD_CRD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_AMM_CONFIG1_MRQ_SD_CRD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_AMM_CONFIG1_MRQ_SD_CRD]

//>> SET_[AME_AME1_MISC_AMM_CONFIG1_MRQ_ACT_TIMER]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_AMM_CONFIG1_MRQ_ACT_TIMER(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_AMM_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_AMM_CONFIG1_MRQ_ACT_TIMER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_AMM_CONFIG1_MRQ_ACT_TIMER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_AMM_CONFIG1_MRQ_ACT_TIMER]

//>> SET_[AME_AME1_MISC_AMM_CONFIG1_MRQ_ACT_TIMER]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_AMM_CONFIG1_MRQ_ACT_TIMER(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_AMM_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_AMM_CONFIG1_MRQ_ACT_TIMER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_AMM_CONFIG1_MRQ_ACT_TIMER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_AMM_CONFIG1_MRQ_ACT_TIMER]

//>> SET_[AME_AME1_MISC_AMM_CONFIG1_MRQ_ACT_TIMER]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_AMM_CONFIG1_MRQ_ACT_TIMER(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_AMM_CONFIG1));
#endif
    return o_data.setBit<AME_AME1_MISC_AMM_CONFIG1_MRQ_ACT_TIMER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_AMM_CONFIG1_MRQ_ACT_TIMER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_AMM_CONFIG1_MRQ_ACT_TIMER]

//>> CLEAR_[AME_AME1_MISC_AMM_CONFIG1_MRQ_ACT_TIMER]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_AMM_CONFIG1_MRQ_ACT_TIMER(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_AMM_CONFIG1));
#endif
    return o_data.clearBit<AME_AME1_MISC_AMM_CONFIG1_MRQ_ACT_TIMER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_AMM_CONFIG1_MRQ_ACT_TIMER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_AMM_CONFIG1_MRQ_ACT_TIMER]

//>> GET_[AME_AME1_MISC_AMM_CONFIG1_MRQ_ACT_TIMER]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_AMM_CONFIG1_MRQ_ACT_TIMER(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_AMM_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME1_MISC_AMM_CONFIG1_MRQ_ACT_TIMER,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_AMM_CONFIG1_MRQ_ACT_TIMER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_AMM_CONFIG1_MRQ_ACT_TIMER]

//>> GET_[AME_AME1_MISC_AMM_CONFIG1_MRQ_ACT_TIMER]
static inline bool GET_AME_AME1_MISC_AMM_CONFIG1_MRQ_ACT_TIMER(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_AMM_CONFIG1));
#endif
    return i_data.getBit<AME_AME1_MISC_AMM_CONFIG1_MRQ_ACT_TIMER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_AMM_CONFIG1_MRQ_ACT_TIMER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_AMM_CONFIG1_MRQ_ACT_TIMER]

//>> SET_[AME_AME1_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_AMM_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR]

//>> SET_[AME_AME1_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_AMM_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR]

//>> SET_[AME_AME1_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_AMM_CONFIG1));
#endif
    return o_data.setBit<AME_AME1_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR]

//>> CLEAR_[AME_AME1_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_AMM_CONFIG1));
#endif
    return o_data.clearBit<AME_AME1_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR]

//>> GET_[AME_AME1_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_AMM_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME1_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR]

//>> GET_[AME_AME1_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR]
static inline bool GET_AME_AME1_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_AMM_CONFIG1));
#endif
    return i_data.getBit<AME_AME1_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR]

//>> SET_[AME_AME1_MISC_AMM_CONFIG1_MRQ_SMR_MAX]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_AMM_CONFIG1_MRQ_SMR_MAX(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_AMM_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_AMM_CONFIG1_MRQ_SMR_MAX,
           AME_AME1_MISC_AMM_CONFIG1_MRQ_SMR_MAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_AMM_CONFIG1_MRQ_SMR_MAX chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_AMM_CONFIG1_MRQ_SMR_MAX]

//>> SET_[AME_AME1_MISC_AMM_CONFIG1_MRQ_SMR_MAX]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_AMM_CONFIG1_MRQ_SMR_MAX(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_AMM_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_AMM_CONFIG1_MRQ_SMR_MAX,
           AME_AME1_MISC_AMM_CONFIG1_MRQ_SMR_MAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_AMM_CONFIG1_MRQ_SMR_MAX chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_AMM_CONFIG1_MRQ_SMR_MAX]

//>> GET_[AME_AME1_MISC_AMM_CONFIG1_MRQ_SMR_MAX]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_AMM_CONFIG1_MRQ_SMR_MAX(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_AMM_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME1_MISC_AMM_CONFIG1_MRQ_SMR_MAX,
           AME_AME1_MISC_AMM_CONFIG1_MRQ_SMR_MAX_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_AMM_CONFIG1_MRQ_SMR_MAX chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_AMM_CONFIG1_MRQ_SMR_MAX]

//>> PREP_[AME_AME2_MISC_DEBUG_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AME_AME2_MISC_DEBUG_CONFIG1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME2_MISC_DEBUG_CONFIG1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AME_AME2_MISC_DEBUG_CONFIG1]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AME_AME2_MISC_DEBUG_CONFIG1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME2_MISC_DEBUG_CONFIG1;
#endif
    return fapi2::getScom(i_target, AME_AME2_MISC_DEBUG_CONFIG1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG1]

//>> PUT_[AME_AME2_MISC_DEBUG_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AME_AME2_MISC_DEBUG_CONFIG1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return fapi2::putScom(i_target, AME_AME2_MISC_DEBUG_CONFIG1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AME_AME2_MISC_DEBUG_CONFIG1]


//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B6_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_0_B6_CSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG1_0_B6_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_0_B6_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B6_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B6_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_0_B6_CSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG1_0_B6_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_0_B6_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B6_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B6_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_0_B6_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.setBit<AME_AME2_MISC_DEBUG_CONFIG1_0_B6_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_0_B6_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B6_CSEL]

//>> CLEAR_[AME_AME2_MISC_DEBUG_CONFIG1_0_B6_CSEL]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_DEBUG_CONFIG1_0_B6_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.clearBit<AME_AME2_MISC_DEBUG_CONFIG1_0_B6_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_0_B6_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_DEBUG_CONFIG1_0_B6_CSEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B6_CSEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG1_0_B6_CSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG1_0_B6_CSEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_0_B6_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B6_CSEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B6_CSEL]
static inline bool GET_AME_AME2_MISC_DEBUG_CONFIG1_0_B6_CSEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return i_data.getBit<AME_AME2_MISC_DEBUG_CONFIG1_0_B6_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_0_B6_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B6_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B6_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_1_B6_CSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG1_1_B6_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_1_B6_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B6_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B6_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_1_B6_CSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG1_1_B6_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_1_B6_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B6_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B6_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_1_B6_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.setBit<AME_AME2_MISC_DEBUG_CONFIG1_1_B6_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_1_B6_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B6_CSEL]

//>> CLEAR_[AME_AME2_MISC_DEBUG_CONFIG1_1_B6_CSEL]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_DEBUG_CONFIG1_1_B6_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.clearBit<AME_AME2_MISC_DEBUG_CONFIG1_1_B6_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_1_B6_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_DEBUG_CONFIG1_1_B6_CSEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B6_CSEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG1_1_B6_CSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG1_1_B6_CSEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_1_B6_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B6_CSEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B6_CSEL]
static inline bool GET_AME_AME2_MISC_DEBUG_CONFIG1_1_B6_CSEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return i_data.getBit<AME_AME2_MISC_DEBUG_CONFIG1_1_B6_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_1_B6_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B6_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_CL0_B6_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_CL0_B6_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG1_CL0_B6_SEL,
           AME_AME2_MISC_DEBUG_CONFIG1_CL0_B6_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_CL0_B6_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_CL0_B6_SEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_CL0_B6_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_CL0_B6_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG1_CL0_B6_SEL,
           AME_AME2_MISC_DEBUG_CONFIG1_CL0_B6_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_CL0_B6_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_CL0_B6_SEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG1_CL0_B6_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG1_CL0_B6_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG1_CL0_B6_SEL,
           AME_AME2_MISC_DEBUG_CONFIG1_CL0_B6_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_CL0_B6_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG1_CL0_B6_SEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_CL1_B6_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_CL1_B6_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG1_CL1_B6_SEL,
           AME_AME2_MISC_DEBUG_CONFIG1_CL1_B6_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_CL1_B6_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_CL1_B6_SEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_CL1_B6_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_CL1_B6_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG1_CL1_B6_SEL,
           AME_AME2_MISC_DEBUG_CONFIG1_CL1_B6_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_CL1_B6_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_CL1_B6_SEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG1_CL1_B6_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG1_CL1_B6_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG1_CL1_B6_SEL,
           AME_AME2_MISC_DEBUG_CONFIG1_CL1_B6_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_CL1_B6_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG1_CL1_B6_SEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B7_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_0_B7_CSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG1_0_B7_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_0_B7_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B7_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B7_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_0_B7_CSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG1_0_B7_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_0_B7_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B7_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B7_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_0_B7_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.setBit<AME_AME2_MISC_DEBUG_CONFIG1_0_B7_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_0_B7_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B7_CSEL]

//>> CLEAR_[AME_AME2_MISC_DEBUG_CONFIG1_0_B7_CSEL]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_DEBUG_CONFIG1_0_B7_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.clearBit<AME_AME2_MISC_DEBUG_CONFIG1_0_B7_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_0_B7_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_DEBUG_CONFIG1_0_B7_CSEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B7_CSEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG1_0_B7_CSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG1_0_B7_CSEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_0_B7_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B7_CSEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B7_CSEL]
static inline bool GET_AME_AME2_MISC_DEBUG_CONFIG1_0_B7_CSEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return i_data.getBit<AME_AME2_MISC_DEBUG_CONFIG1_0_B7_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_0_B7_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B7_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B7_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_1_B7_CSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG1_1_B7_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_1_B7_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B7_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B7_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_1_B7_CSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG1_1_B7_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_1_B7_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B7_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B7_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_1_B7_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.setBit<AME_AME2_MISC_DEBUG_CONFIG1_1_B7_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_1_B7_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B7_CSEL]

//>> CLEAR_[AME_AME2_MISC_DEBUG_CONFIG1_1_B7_CSEL]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_DEBUG_CONFIG1_1_B7_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.clearBit<AME_AME2_MISC_DEBUG_CONFIG1_1_B7_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_1_B7_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_DEBUG_CONFIG1_1_B7_CSEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B7_CSEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG1_1_B7_CSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG1_1_B7_CSEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_1_B7_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B7_CSEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B7_CSEL]
static inline bool GET_AME_AME2_MISC_DEBUG_CONFIG1_1_B7_CSEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return i_data.getBit<AME_AME2_MISC_DEBUG_CONFIG1_1_B7_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_1_B7_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B7_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_CL0_B7_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_CL0_B7_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG1_CL0_B7_SEL,
           AME_AME2_MISC_DEBUG_CONFIG1_CL0_B7_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_CL0_B7_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_CL0_B7_SEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_CL0_B7_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_CL0_B7_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG1_CL0_B7_SEL,
           AME_AME2_MISC_DEBUG_CONFIG1_CL0_B7_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_CL0_B7_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_CL0_B7_SEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG1_CL0_B7_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG1_CL0_B7_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG1_CL0_B7_SEL,
           AME_AME2_MISC_DEBUG_CONFIG1_CL0_B7_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_CL0_B7_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG1_CL0_B7_SEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_CL1_B7_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_CL1_B7_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG1_CL1_B7_SEL,
           AME_AME2_MISC_DEBUG_CONFIG1_CL1_B7_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_CL1_B7_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_CL1_B7_SEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_CL1_B7_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_CL1_B7_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG1_CL1_B7_SEL,
           AME_AME2_MISC_DEBUG_CONFIG1_CL1_B7_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_CL1_B7_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_CL1_B7_SEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG1_CL1_B7_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG1_CL1_B7_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG1_CL1_B7_SEL,
           AME_AME2_MISC_DEBUG_CONFIG1_CL1_B7_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_CL1_B7_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG1_CL1_B7_SEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B8_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_0_B8_CSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG1_0_B8_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_0_B8_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B8_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B8_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_0_B8_CSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG1_0_B8_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_0_B8_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B8_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B8_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_0_B8_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.setBit<AME_AME2_MISC_DEBUG_CONFIG1_0_B8_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_0_B8_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B8_CSEL]

//>> CLEAR_[AME_AME2_MISC_DEBUG_CONFIG1_0_B8_CSEL]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_DEBUG_CONFIG1_0_B8_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.clearBit<AME_AME2_MISC_DEBUG_CONFIG1_0_B8_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_0_B8_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_DEBUG_CONFIG1_0_B8_CSEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B8_CSEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG1_0_B8_CSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG1_0_B8_CSEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_0_B8_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B8_CSEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B8_CSEL]
static inline bool GET_AME_AME2_MISC_DEBUG_CONFIG1_0_B8_CSEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return i_data.getBit<AME_AME2_MISC_DEBUG_CONFIG1_0_B8_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_0_B8_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B8_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B8_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_1_B8_CSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG1_1_B8_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_1_B8_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B8_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B8_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_1_B8_CSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG1_1_B8_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_1_B8_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B8_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B8_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_1_B8_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.setBit<AME_AME2_MISC_DEBUG_CONFIG1_1_B8_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_1_B8_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B8_CSEL]

//>> CLEAR_[AME_AME2_MISC_DEBUG_CONFIG1_1_B8_CSEL]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_DEBUG_CONFIG1_1_B8_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.clearBit<AME_AME2_MISC_DEBUG_CONFIG1_1_B8_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_1_B8_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_DEBUG_CONFIG1_1_B8_CSEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B8_CSEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG1_1_B8_CSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG1_1_B8_CSEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_1_B8_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B8_CSEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B8_CSEL]
static inline bool GET_AME_AME2_MISC_DEBUG_CONFIG1_1_B8_CSEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return i_data.getBit<AME_AME2_MISC_DEBUG_CONFIG1_1_B8_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_1_B8_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B8_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_CL0_B8_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_CL0_B8_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG1_CL0_B8_SEL,
           AME_AME2_MISC_DEBUG_CONFIG1_CL0_B8_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_CL0_B8_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_CL0_B8_SEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_CL0_B8_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_CL0_B8_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG1_CL0_B8_SEL,
           AME_AME2_MISC_DEBUG_CONFIG1_CL0_B8_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_CL0_B8_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_CL0_B8_SEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG1_CL0_B8_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG1_CL0_B8_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG1_CL0_B8_SEL,
           AME_AME2_MISC_DEBUG_CONFIG1_CL0_B8_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_CL0_B8_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG1_CL0_B8_SEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_CL1_B8_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_CL1_B8_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG1_CL1_B8_SEL,
           AME_AME2_MISC_DEBUG_CONFIG1_CL1_B8_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_CL1_B8_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_CL1_B8_SEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_CL1_B8_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_CL1_B8_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG1_CL1_B8_SEL,
           AME_AME2_MISC_DEBUG_CONFIG1_CL1_B8_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_CL1_B8_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_CL1_B8_SEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG1_CL1_B8_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG1_CL1_B8_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG1_CL1_B8_SEL,
           AME_AME2_MISC_DEBUG_CONFIG1_CL1_B8_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_CL1_B8_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG1_CL1_B8_SEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B9_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_0_B9_CSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG1_0_B9_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_0_B9_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B9_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B9_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_0_B9_CSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG1_0_B9_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_0_B9_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B9_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B9_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_0_B9_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.setBit<AME_AME2_MISC_DEBUG_CONFIG1_0_B9_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_0_B9_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B9_CSEL]

//>> CLEAR_[AME_AME2_MISC_DEBUG_CONFIG1_0_B9_CSEL]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_DEBUG_CONFIG1_0_B9_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.clearBit<AME_AME2_MISC_DEBUG_CONFIG1_0_B9_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_0_B9_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_DEBUG_CONFIG1_0_B9_CSEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B9_CSEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG1_0_B9_CSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG1_0_B9_CSEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_0_B9_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B9_CSEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B9_CSEL]
static inline bool GET_AME_AME2_MISC_DEBUG_CONFIG1_0_B9_CSEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return i_data.getBit<AME_AME2_MISC_DEBUG_CONFIG1_0_B9_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_0_B9_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B9_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B9_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_1_B9_CSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG1_1_B9_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_1_B9_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B9_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B9_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_1_B9_CSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG1_1_B9_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_1_B9_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B9_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B9_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_1_B9_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.setBit<AME_AME2_MISC_DEBUG_CONFIG1_1_B9_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_1_B9_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B9_CSEL]

//>> CLEAR_[AME_AME2_MISC_DEBUG_CONFIG1_1_B9_CSEL]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_DEBUG_CONFIG1_1_B9_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.clearBit<AME_AME2_MISC_DEBUG_CONFIG1_1_B9_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_1_B9_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_DEBUG_CONFIG1_1_B9_CSEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B9_CSEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG1_1_B9_CSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG1_1_B9_CSEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_1_B9_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B9_CSEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B9_CSEL]
static inline bool GET_AME_AME2_MISC_DEBUG_CONFIG1_1_B9_CSEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return i_data.getBit<AME_AME2_MISC_DEBUG_CONFIG1_1_B9_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_1_B9_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B9_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_CL0_B9_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_CL0_B9_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG1_CL0_B9_SEL,
           AME_AME2_MISC_DEBUG_CONFIG1_CL0_B9_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_CL0_B9_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_CL0_B9_SEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_CL0_B9_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_CL0_B9_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG1_CL0_B9_SEL,
           AME_AME2_MISC_DEBUG_CONFIG1_CL0_B9_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_CL0_B9_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_CL0_B9_SEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG1_CL0_B9_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG1_CL0_B9_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG1_CL0_B9_SEL,
           AME_AME2_MISC_DEBUG_CONFIG1_CL0_B9_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_CL0_B9_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG1_CL0_B9_SEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_CL1_B9_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_CL1_B9_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG1_CL1_B9_SEL,
           AME_AME2_MISC_DEBUG_CONFIG1_CL1_B9_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_CL1_B9_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_CL1_B9_SEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_CL1_B9_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_CL1_B9_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG1_CL1_B9_SEL,
           AME_AME2_MISC_DEBUG_CONFIG1_CL1_B9_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_CL1_B9_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_CL1_B9_SEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG1_CL1_B9_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG1_CL1_B9_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG1_CL1_B9_SEL,
           AME_AME2_MISC_DEBUG_CONFIG1_CL1_B9_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_CL1_B9_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG1_CL1_B9_SEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B10_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_0_B10_CSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG1_0_B10_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_0_B10_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B10_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B10_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_0_B10_CSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG1_0_B10_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_0_B10_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B10_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B10_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_0_B10_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.setBit<AME_AME2_MISC_DEBUG_CONFIG1_0_B10_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_0_B10_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B10_CSEL]

//>> CLEAR_[AME_AME2_MISC_DEBUG_CONFIG1_0_B10_CSEL]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_DEBUG_CONFIG1_0_B10_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.clearBit<AME_AME2_MISC_DEBUG_CONFIG1_0_B10_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_0_B10_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_DEBUG_CONFIG1_0_B10_CSEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B10_CSEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG1_0_B10_CSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG1_0_B10_CSEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_0_B10_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B10_CSEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B10_CSEL]
static inline bool GET_AME_AME2_MISC_DEBUG_CONFIG1_0_B10_CSEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return i_data.getBit<AME_AME2_MISC_DEBUG_CONFIG1_0_B10_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_0_B10_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG1_0_B10_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B10_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_1_B10_CSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG1_1_B10_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_1_B10_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B10_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B10_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_1_B10_CSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG1_1_B10_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_1_B10_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B10_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B10_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_1_B10_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.setBit<AME_AME2_MISC_DEBUG_CONFIG1_1_B10_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_1_B10_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B10_CSEL]

//>> CLEAR_[AME_AME2_MISC_DEBUG_CONFIG1_1_B10_CSEL]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_DEBUG_CONFIG1_1_B10_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.clearBit<AME_AME2_MISC_DEBUG_CONFIG1_1_B10_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_1_B10_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_DEBUG_CONFIG1_1_B10_CSEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B10_CSEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG1_1_B10_CSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG1_1_B10_CSEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_1_B10_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B10_CSEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B10_CSEL]
static inline bool GET_AME_AME2_MISC_DEBUG_CONFIG1_1_B10_CSEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return i_data.getBit<AME_AME2_MISC_DEBUG_CONFIG1_1_B10_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_1_B10_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG1_1_B10_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_CL0_B10_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_CL0_B10_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG1_CL0_B10_SEL,
           AME_AME2_MISC_DEBUG_CONFIG1_CL0_B10_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_CL0_B10_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_CL0_B10_SEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_CL0_B10_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_CL0_B10_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG1_CL0_B10_SEL,
           AME_AME2_MISC_DEBUG_CONFIG1_CL0_B10_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_CL0_B10_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_CL0_B10_SEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG1_CL0_B10_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG1_CL0_B10_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG1_CL0_B10_SEL,
           AME_AME2_MISC_DEBUG_CONFIG1_CL0_B10_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_CL0_B10_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG1_CL0_B10_SEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_CL1_B10_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_CL1_B10_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG1_CL1_B10_SEL,
           AME_AME2_MISC_DEBUG_CONFIG1_CL1_B10_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_CL1_B10_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_CL1_B10_SEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_CL1_B10_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_CL1_B10_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG1_CL1_B10_SEL,
           AME_AME2_MISC_DEBUG_CONFIG1_CL1_B10_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_CL1_B10_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_CL1_B10_SEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG1_CL1_B10_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG1_CL1_B10_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG1_CL1_B10_SEL,
           AME_AME2_MISC_DEBUG_CONFIG1_CL1_B10_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_CL1_B10_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG1_CL1_B10_SEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG1_RESERVED1,
           AME_AME2_MISC_DEBUG_CONFIG1_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_RESERVED1]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG1_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG1_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG1_RESERVED1,
           AME_AME2_MISC_DEBUG_CONFIG1_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG1_RESERVED1]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG1_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG1_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG1_RESERVED1,
           AME_AME2_MISC_DEBUG_CONFIG1_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG1_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG1_RESERVED1]

//>> PREP_[AME_AME2_MISC_PMU_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AME_AME2_MISC_PMU_CONFIG1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME2_MISC_PMU_CONFIG1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AME_AME2_MISC_PMU_CONFIG1]

//>> GET_[AME_AME2_MISC_PMU_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AME_AME2_MISC_PMU_CONFIG1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME2_MISC_PMU_CONFIG1;
#endif
    return fapi2::getScom(i_target, AME_AME2_MISC_PMU_CONFIG1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AME_AME2_MISC_PMU_CONFIG1]

//>> PUT_[AME_AME2_MISC_PMU_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AME_AME2_MISC_PMU_CONFIG1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_PMU_CONFIG1));
#endif
    return fapi2::putScom(i_target, AME_AME2_MISC_PMU_CONFIG1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AME_AME2_MISC_PMU_CONFIG1]


//>> SET_[AME_AME2_MISC_PMU_CONFIG1_0_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_PMU_CONFIG1_0_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_PMU_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_PMU_CONFIG1_0_SEL,
           AME_AME2_MISC_PMU_CONFIG1_0_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_PMU_CONFIG1_0_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_PMU_CONFIG1_0_SEL]

//>> SET_[AME_AME2_MISC_PMU_CONFIG1_0_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_PMU_CONFIG1_0_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_PMU_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_PMU_CONFIG1_0_SEL,
           AME_AME2_MISC_PMU_CONFIG1_0_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_PMU_CONFIG1_0_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_PMU_CONFIG1_0_SEL]

//>> GET_[AME_AME2_MISC_PMU_CONFIG1_0_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_PMU_CONFIG1_0_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_PMU_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME2_MISC_PMU_CONFIG1_0_SEL,
           AME_AME2_MISC_PMU_CONFIG1_0_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_PMU_CONFIG1_0_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_PMU_CONFIG1_0_SEL]

//>> SET_[AME_AME2_MISC_PMU_CONFIG1_1_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_PMU_CONFIG1_1_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_PMU_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_PMU_CONFIG1_1_SEL,
           AME_AME2_MISC_PMU_CONFIG1_1_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_PMU_CONFIG1_1_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_PMU_CONFIG1_1_SEL]

//>> SET_[AME_AME2_MISC_PMU_CONFIG1_1_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_PMU_CONFIG1_1_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_PMU_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_PMU_CONFIG1_1_SEL,
           AME_AME2_MISC_PMU_CONFIG1_1_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_PMU_CONFIG1_1_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_PMU_CONFIG1_1_SEL]

//>> GET_[AME_AME2_MISC_PMU_CONFIG1_1_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_PMU_CONFIG1_1_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_PMU_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME2_MISC_PMU_CONFIG1_1_SEL,
           AME_AME2_MISC_PMU_CONFIG1_1_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_PMU_CONFIG1_1_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_PMU_CONFIG1_1_SEL]

//>> SET_[AME_AME2_MISC_PMU_CONFIG1_2_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_PMU_CONFIG1_2_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_PMU_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_PMU_CONFIG1_2_SEL,
           AME_AME2_MISC_PMU_CONFIG1_2_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_PMU_CONFIG1_2_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_PMU_CONFIG1_2_SEL]

//>> SET_[AME_AME2_MISC_PMU_CONFIG1_2_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_PMU_CONFIG1_2_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_PMU_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_PMU_CONFIG1_2_SEL,
           AME_AME2_MISC_PMU_CONFIG1_2_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_PMU_CONFIG1_2_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_PMU_CONFIG1_2_SEL]

//>> GET_[AME_AME2_MISC_PMU_CONFIG1_2_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_PMU_CONFIG1_2_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_PMU_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME2_MISC_PMU_CONFIG1_2_SEL,
           AME_AME2_MISC_PMU_CONFIG1_2_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_PMU_CONFIG1_2_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_PMU_CONFIG1_2_SEL]

//>> SET_[AME_AME2_MISC_PMU_CONFIG1_3_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_PMU_CONFIG1_3_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_PMU_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_PMU_CONFIG1_3_SEL,
           AME_AME2_MISC_PMU_CONFIG1_3_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_PMU_CONFIG1_3_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_PMU_CONFIG1_3_SEL]

//>> SET_[AME_AME2_MISC_PMU_CONFIG1_3_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_PMU_CONFIG1_3_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_PMU_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_PMU_CONFIG1_3_SEL,
           AME_AME2_MISC_PMU_CONFIG1_3_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_PMU_CONFIG1_3_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_PMU_CONFIG1_3_SEL]

//>> GET_[AME_AME2_MISC_PMU_CONFIG1_3_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_PMU_CONFIG1_3_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_PMU_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME2_MISC_PMU_CONFIG1_3_SEL,
           AME_AME2_MISC_PMU_CONFIG1_3_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_PMU_CONFIG1_3_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_PMU_CONFIG1_3_SEL]

//>> PREP_[CS_CTL_MISC_BDF2PE_14_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_BDF2PE_14_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_BDF2PE_14_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_CTL_MISC_BDF2PE_14_CONFIG]

//>> GET_[CS_CTL_MISC_BDF2PE_14_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_BDF2PE_14_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_BDF2PE_14_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_BDF2PE_14_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_14_CONFIG]

//>> PUT_[CS_CTL_MISC_BDF2PE_14_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_BDF2PE_14_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_14_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_BDF2PE_14_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_CTL_MISC_BDF2PE_14_CONFIG]


//>> SET_[CS_CTL_MISC_BDF2PE_14_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_14_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_14_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_14_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_14_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_14_CONFIG_ENABLE]

//>> SET_[CS_CTL_MISC_BDF2PE_14_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_14_CONFIG_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_14_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_14_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_14_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_14_CONFIG_ENABLE]

//>> SET_[CS_CTL_MISC_BDF2PE_14_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_14_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_14_CONFIG));
#endif
    return o_data.setBit<CS_CTL_MISC_BDF2PE_14_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_14_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_14_CONFIG_ENABLE]

//>> CLEAR_[CS_CTL_MISC_BDF2PE_14_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_BDF2PE_14_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_14_CONFIG));
#endif
    return o_data.clearBit<CS_CTL_MISC_BDF2PE_14_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_14_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_BDF2PE_14_CONFIG_ENABLE]

//>> GET_[CS_CTL_MISC_BDF2PE_14_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_14_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_14_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_14_CONFIG_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_14_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_14_CONFIG_ENABLE]

//>> GET_[CS_CTL_MISC_BDF2PE_14_CONFIG_ENABLE]
static inline bool GET_CS_CTL_MISC_BDF2PE_14_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_14_CONFIG));
#endif
    return i_data.getBit<CS_CTL_MISC_BDF2PE_14_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_14_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_14_CONFIG_ENABLE]

//>> SET_[CS_CTL_MISC_BDF2PE_14_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_14_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_14_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_14_CONFIG_RESERVED,
           CS_CTL_MISC_BDF2PE_14_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_14_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_14_CONFIG_RESERVED]

//>> SET_[CS_CTL_MISC_BDF2PE_14_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_14_CONFIG_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_14_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_14_CONFIG_RESERVED,
           CS_CTL_MISC_BDF2PE_14_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_14_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_14_CONFIG_RESERVED]

//>> GET_[CS_CTL_MISC_BDF2PE_14_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_14_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_14_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_14_CONFIG_RESERVED,
           CS_CTL_MISC_BDF2PE_14_CONFIG_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_14_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_14_CONFIG_RESERVED]

//>> SET_[CS_CTL_MISC_BDF2PE_14_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_14_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_14_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_14_CONFIG_PE,
           CS_CTL_MISC_BDF2PE_14_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_14_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_14_CONFIG_PE]

//>> SET_[CS_CTL_MISC_BDF2PE_14_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_14_CONFIG_PE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_14_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_14_CONFIG_PE,
           CS_CTL_MISC_BDF2PE_14_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_14_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_14_CONFIG_PE]

//>> GET_[CS_CTL_MISC_BDF2PE_14_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_14_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_14_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_14_CONFIG_PE,
           CS_CTL_MISC_BDF2PE_14_CONFIG_PE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_14_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_14_CONFIG_PE]

//>> SET_[CS_CTL_MISC_BDF2PE_14_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_14_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_14_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_14_CONFIG_BDF,
           CS_CTL_MISC_BDF2PE_14_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_14_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_14_CONFIG_BDF]

//>> SET_[CS_CTL_MISC_BDF2PE_14_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_14_CONFIG_BDF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_14_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_14_CONFIG_BDF,
           CS_CTL_MISC_BDF2PE_14_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_14_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_14_CONFIG_BDF]

//>> GET_[CS_CTL_MISC_BDF2PE_14_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_14_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_14_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_14_CONFIG_BDF,
           CS_CTL_MISC_BDF2PE_14_CONFIG_BDF_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_14_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_14_CONFIG_BDF]

//>> PREP_[CS_CTL_MISC_CONFIG3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_CONFIG3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_CONFIG3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_CTL_MISC_CONFIG3]

//>> GET_[CS_CTL_MISC_CONFIG3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_CONFIG3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_CONFIG3;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_CONFIG3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG3]

//>> PUT_[CS_CTL_MISC_CONFIG3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_CONFIG3(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_CONFIG3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_CTL_MISC_CONFIG3]


//>> SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR0,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR0]

//>> SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR0,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR0]

//>> GET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR0]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR0,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR0]

//>> SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR1,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR1]

//>> SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR1,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR1]

//>> GET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR1,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR1]

//>> SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR2,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR2]

//>> SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR2,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR2]

//>> GET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR2,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PWR2]

//>> SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_XATS]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_XATS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_XATS,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_XATS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_XATS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_XATS]

//>> SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_XATS]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_XATS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_XATS,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_XATS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_XATS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_XATS]

//>> GET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_XATS]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_XATS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_XATS,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_XATS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_XATS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_XATS]

//>> SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_INTS]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_INTS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_INTS,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_INTS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_INTS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_INTS]

//>> SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_INTS]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_INTS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_INTS,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_INTS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_INTS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_INTS]

//>> GET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_INTS]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_INTS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_INTS,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_INTS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_INTS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_INTS]

//>> SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ0,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ0]

//>> SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ0,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ0]

//>> GET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ0]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ0,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ0]

//>> SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST0,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST0]

//>> SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST0,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST0]

//>> GET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST0]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST0,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST0]

//>> SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB0,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB0]

//>> SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB0,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB0]

//>> GET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB0]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB0,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB0]

//>> SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ1,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ1]

//>> SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ1,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ1]

//>> GET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ1,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ1]

//>> SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST1,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST1]

//>> SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST1,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST1]

//>> GET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST1,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST1]

//>> SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB1,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB1]

//>> SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB1,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB1]

//>> GET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB1,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB1]

//>> SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ2,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ2]

//>> SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ2,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ2]

//>> GET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ2,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ2]

//>> SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST2,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST2]

//>> SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST2,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST2]

//>> GET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST2,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST2]

//>> SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB2,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB2]

//>> SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB2,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB2]

//>> GET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB2,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB2]

//>> SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ3,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ3]

//>> SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ3,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ3]

//>> GET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ3,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ3]

//>> SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST3,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST3]

//>> SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST3,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST3]

//>> GET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST3,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST3]

//>> SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB3,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB3]

//>> SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB3,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB3]

//>> GET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB3,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB3]

//>> SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ4,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ4]

//>> SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ4,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ4]

//>> GET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ4]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ4,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_REQ4]

//>> SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST4,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST4]

//>> SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST4,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST4]

//>> GET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST4]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST4,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_CST4]

//>> SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB4,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB4]

//>> SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB4,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB4]

//>> GET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB4]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB4,
           CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG3_THROTTLE_MODE_PRB4]

//>> SET_[CS_CTL_MISC_CONFIG3_3_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG3_3_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG3_3_RESERVED1,
           CS_CTL_MISC_CONFIG3_3_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_3_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG3_3_RESERVED1]

//>> SET_[CS_CTL_MISC_CONFIG3_3_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG3_3_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG3_3_RESERVED1,
           CS_CTL_MISC_CONFIG3_3_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_3_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG3_3_RESERVED1]

//>> GET_[CS_CTL_MISC_CONFIG3_3_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG3_3_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG3));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG3_3_RESERVED1,
           CS_CTL_MISC_CONFIG3_3_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG3_3_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG3_3_RESERVED1]

//>> PREP_[CS_CTL_MISC_FENCE_CONTROL2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_FENCE_CONTROL2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_FENCE_CONTROL2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_CTL_MISC_FENCE_CONTROL2]

//>> GET_[CS_CTL_MISC_FENCE_CONTROL2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_FENCE_CONTROL2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_FENCE_CONTROL2;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_FENCE_CONTROL2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_CTL_MISC_FENCE_CONTROL2]

//>> PUT_[CS_CTL_MISC_FENCE_CONTROL2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_FENCE_CONTROL2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_FENCE_CONTROL2));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_FENCE_CONTROL2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_CTL_MISC_FENCE_CONTROL2]


//>> SET_[CS_CTL_MISC_FENCE_CONTROL2_2_REQUEST_FENCE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_FENCE_CONTROL2_2_REQUEST_FENCE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_FENCE_CONTROL2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_FENCE_CONTROL2_2_REQUEST_FENCE,
           CS_CTL_MISC_FENCE_CONTROL2_2_REQUEST_FENCE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_FENCE_CONTROL2_2_REQUEST_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_FENCE_CONTROL2_2_REQUEST_FENCE]

//>> SET_[CS_CTL_MISC_FENCE_CONTROL2_2_REQUEST_FENCE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_FENCE_CONTROL2_2_REQUEST_FENCE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_FENCE_CONTROL2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_FENCE_CONTROL2_2_REQUEST_FENCE,
           CS_CTL_MISC_FENCE_CONTROL2_2_REQUEST_FENCE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_FENCE_CONTROL2_2_REQUEST_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_FENCE_CONTROL2_2_REQUEST_FENCE]

//>> GET_[CS_CTL_MISC_FENCE_CONTROL2_2_REQUEST_FENCE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_FENCE_CONTROL2_2_REQUEST_FENCE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_FENCE_CONTROL2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_FENCE_CONTROL2_2_REQUEST_FENCE,
           CS_CTL_MISC_FENCE_CONTROL2_2_REQUEST_FENCE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_FENCE_CONTROL2_2_REQUEST_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_FENCE_CONTROL2_2_REQUEST_FENCE]

//>> SET_[CS_CTL_MISC_FENCE_CONTROL2_CONTROL2_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_FENCE_CONTROL2_CONTROL2_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_FENCE_CONTROL2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_FENCE_CONTROL2_CONTROL2_RESERVED,
           CS_CTL_MISC_FENCE_CONTROL2_CONTROL2_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_FENCE_CONTROL2_CONTROL2_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_FENCE_CONTROL2_CONTROL2_RESERVED]

//>> SET_[CS_CTL_MISC_FENCE_CONTROL2_CONTROL2_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_FENCE_CONTROL2_CONTROL2_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_FENCE_CONTROL2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_FENCE_CONTROL2_CONTROL2_RESERVED,
           CS_CTL_MISC_FENCE_CONTROL2_CONTROL2_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_FENCE_CONTROL2_CONTROL2_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_FENCE_CONTROL2_CONTROL2_RESERVED]

//>> GET_[CS_CTL_MISC_FENCE_CONTROL2_CONTROL2_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_FENCE_CONTROL2_CONTROL2_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_FENCE_CONTROL2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_FENCE_CONTROL2_CONTROL2_RESERVED,
           CS_CTL_MISC_FENCE_CONTROL2_CONTROL2_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_FENCE_CONTROL2_CONTROL2_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_FENCE_CONTROL2_CONTROL2_RESERVED]

//>> PREP_[CS_CTL_MISC_PERF_MATCH_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_PERF_MATCH_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_PERF_MATCH_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_CTL_MISC_PERF_MATCH_CONFIG]

//>> GET_[CS_CTL_MISC_PERF_MATCH_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_PERF_MATCH_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_PERF_MATCH_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_PERF_MATCH_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_CTL_MISC_PERF_MATCH_CONFIG]

//>> PUT_[CS_CTL_MISC_PERF_MATCH_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_PERF_MATCH_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_MATCH_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_PERF_MATCH_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_CTL_MISC_PERF_MATCH_CONFIG]


//>> SET_[CS_CTL_MISC_PERF_MATCH_CONFIG_TTYPE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_MATCH_CONFIG_TTYPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_MATCH_CONFIG_TTYPE,
           CS_CTL_MISC_PERF_MATCH_CONFIG_TTYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_PERF_MATCH_CONFIG_TTYPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_PERF_MATCH_CONFIG_TTYPE]

//>> SET_[CS_CTL_MISC_PERF_MATCH_CONFIG_TTYPE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_MATCH_CONFIG_TTYPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_MATCH_CONFIG_TTYPE,
           CS_CTL_MISC_PERF_MATCH_CONFIG_TTYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_PERF_MATCH_CONFIG_TTYPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_PERF_MATCH_CONFIG_TTYPE]

//>> GET_[CS_CTL_MISC_PERF_MATCH_CONFIG_TTYPE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_PERF_MATCH_CONFIG_TTYPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_PERF_MATCH_CONFIG_TTYPE,
           CS_CTL_MISC_PERF_MATCH_CONFIG_TTYPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_PERF_MATCH_CONFIG_TTYPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_PERF_MATCH_CONFIG_TTYPE]

//>> SET_[CS_CTL_MISC_PERF_MATCH_CONFIG_TSIZE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_MATCH_CONFIG_TSIZE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_MATCH_CONFIG_TSIZE,
           CS_CTL_MISC_PERF_MATCH_CONFIG_TSIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_PERF_MATCH_CONFIG_TSIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_PERF_MATCH_CONFIG_TSIZE]

//>> SET_[CS_CTL_MISC_PERF_MATCH_CONFIG_TSIZE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_MATCH_CONFIG_TSIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_MATCH_CONFIG_TSIZE,
           CS_CTL_MISC_PERF_MATCH_CONFIG_TSIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_PERF_MATCH_CONFIG_TSIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_PERF_MATCH_CONFIG_TSIZE]

//>> GET_[CS_CTL_MISC_PERF_MATCH_CONFIG_TSIZE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_PERF_MATCH_CONFIG_TSIZE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_PERF_MATCH_CONFIG_TSIZE,
           CS_CTL_MISC_PERF_MATCH_CONFIG_TSIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_PERF_MATCH_CONFIG_TSIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_PERF_MATCH_CONFIG_TSIZE]

//>> SET_[CS_CTL_MISC_PERF_MATCH_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_MATCH_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_MATCH_CONFIG_PE,
           CS_CTL_MISC_PERF_MATCH_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_PERF_MATCH_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_PERF_MATCH_CONFIG_PE]

//>> SET_[CS_CTL_MISC_PERF_MATCH_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_MATCH_CONFIG_PE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_MATCH_CONFIG_PE,
           CS_CTL_MISC_PERF_MATCH_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_PERF_MATCH_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_PERF_MATCH_CONFIG_PE]

//>> GET_[CS_CTL_MISC_PERF_MATCH_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_PERF_MATCH_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_PERF_MATCH_CONFIG_PE,
           CS_CTL_MISC_PERF_MATCH_CONFIG_PE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_PERF_MATCH_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_PERF_MATCH_CONFIG_PE]

//>> SET_[CS_CTL_MISC_PERF_MATCH_CONFIG_BE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_MATCH_CONFIG_BE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_MATCH_CONFIG_BE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_PERF_MATCH_CONFIG_BE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_PERF_MATCH_CONFIG_BE]

//>> SET_[CS_CTL_MISC_PERF_MATCH_CONFIG_BE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_MATCH_CONFIG_BE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_MATCH_CONFIG_BE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_PERF_MATCH_CONFIG_BE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_PERF_MATCH_CONFIG_BE]

//>> SET_[CS_CTL_MISC_PERF_MATCH_CONFIG_BE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_MATCH_CONFIG_BE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.setBit<CS_CTL_MISC_PERF_MATCH_CONFIG_BE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_PERF_MATCH_CONFIG_BE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_PERF_MATCH_CONFIG_BE]

//>> CLEAR_[CS_CTL_MISC_PERF_MATCH_CONFIG_BE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_PERF_MATCH_CONFIG_BE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.clearBit<CS_CTL_MISC_PERF_MATCH_CONFIG_BE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_PERF_MATCH_CONFIG_BE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_PERF_MATCH_CONFIG_BE]

//>> GET_[CS_CTL_MISC_PERF_MATCH_CONFIG_BE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_PERF_MATCH_CONFIG_BE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_PERF_MATCH_CONFIG_BE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_PERF_MATCH_CONFIG_BE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_PERF_MATCH_CONFIG_BE]

//>> GET_[CS_CTL_MISC_PERF_MATCH_CONFIG_BE]
static inline bool GET_CS_CTL_MISC_PERF_MATCH_CONFIG_BE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.getBit<CS_CTL_MISC_PERF_MATCH_CONFIG_BE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_PERF_MATCH_CONFIG_BE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_PERF_MATCH_CONFIG_BE]

//>> SET_[CS_CTL_MISC_PERF_MATCH_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_MATCH_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_MATCH_CONFIG_RESERVED,
           CS_CTL_MISC_PERF_MATCH_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_PERF_MATCH_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_PERF_MATCH_CONFIG_RESERVED]

//>> SET_[CS_CTL_MISC_PERF_MATCH_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_MATCH_CONFIG_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_MATCH_CONFIG_RESERVED,
           CS_CTL_MISC_PERF_MATCH_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_PERF_MATCH_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_PERF_MATCH_CONFIG_RESERVED]

//>> GET_[CS_CTL_MISC_PERF_MATCH_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_PERF_MATCH_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_PERF_MATCH_CONFIG_RESERVED,
           CS_CTL_MISC_PERF_MATCH_CONFIG_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_PERF_MATCH_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_PERF_MATCH_CONFIG_RESERVED]

//>> PREP_[CS_SM0_MCP_MISC_CONFIG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_MCP_MISC_CONFIG0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_CONFIG0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_MCP_MISC_CONFIG0]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_MCP_MISC_CONFIG0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_CONFIG0;
#endif
    return fapi2::getScom(i_target, CS_SM0_MCP_MISC_CONFIG0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0]

//>> PUT_[CS_SM0_MCP_MISC_CONFIG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_MCP_MISC_CONFIG0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return fapi2::putScom(i_target, CS_SM0_MCP_MISC_CONFIG0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_MCP_MISC_CONFIG0]


//>> SET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_ADR_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_ADR_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_ADR_BAR_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_ADR_BAR_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_ADR_BAR_MODE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_ADR_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_ADR_BAR_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_ADR_BAR_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_ADR_BAR_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_ADR_BAR_MODE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_ADR_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_ADR_BAR_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_ADR_BAR_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_ADR_BAR_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_ADR_BAR_MODE]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_ADR_BAR_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_ADR_BAR_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_ADR_BAR_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_ADR_BAR_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_ADR_BAR_MODE]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_ADR_BAR_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_ADR_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_ADR_BAR_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_ADR_BAR_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_ADR_BAR_MODE]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_ADR_BAR_MODE]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_ADR_BAR_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_ADR_BAR_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_ADR_BAR_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_ADR_BAR_MODE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_NN_RN]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_DISABLE_NN_RN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_DISABLE_NN_RN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_DISABLE_NN_RN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_NN_RN]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_NN_RN]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_DISABLE_NN_RN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_DISABLE_NN_RN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_DISABLE_NN_RN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_NN_RN]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_NN_RN]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_DISABLE_NN_RN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_DISABLE_NN_RN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_DISABLE_NN_RN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_NN_RN]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_NN_RN]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_DISABLE_NN_RN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_DISABLE_NN_RN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_DISABLE_NN_RN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_NN_RN]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_NN_RN]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_DISABLE_NN_RN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_DISABLE_NN_RN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_DISABLE_NN_RN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_NN_RN]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_NN_RN]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_DISABLE_NN_RN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_DISABLE_NN_RN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_DISABLE_NN_RN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_NN_RN]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_G]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_DISABLE_G(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_DISABLE_G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_DISABLE_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_G]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_G]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_DISABLE_G(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_DISABLE_G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_DISABLE_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_G]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_G]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_DISABLE_G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_DISABLE_G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_DISABLE_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_G]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_G]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_DISABLE_G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_DISABLE_G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_DISABLE_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_G]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_G]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_DISABLE_G(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_DISABLE_G,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_DISABLE_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_G]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_G]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_DISABLE_G(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_DISABLE_G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_DISABLE_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_G]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_LN]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_DISABLE_LN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_DISABLE_LN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_DISABLE_LN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_LN]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_LN]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_DISABLE_LN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_DISABLE_LN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_DISABLE_LN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_LN]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_LN]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_DISABLE_LN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_DISABLE_LN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_DISABLE_LN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_LN]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_LN]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_DISABLE_LN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_DISABLE_LN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_DISABLE_LN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_LN]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_LN]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_DISABLE_LN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_DISABLE_LN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_DISABLE_LN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_LN]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_LN]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_DISABLE_LN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_DISABLE_LN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_DISABLE_LN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_LN]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_SKIP_G]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_SKIP_G(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_SKIP_G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_SKIP_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_SKIP_G]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_SKIP_G]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_SKIP_G(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_SKIP_G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_SKIP_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_SKIP_G]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_SKIP_G]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_SKIP_G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_SKIP_G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_SKIP_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_SKIP_G]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_SKIP_G]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_SKIP_G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_SKIP_G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_SKIP_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_SKIP_G]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_SKIP_G]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_SKIP_G(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_SKIP_G,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_SKIP_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_SKIP_G]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_SKIP_G]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_SKIP_G(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_SKIP_G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_SKIP_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_SKIP_G]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_USE_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_USE_CL_DMA_W(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_USE_CL_DMA_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_USE_CL_DMA_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_USE_CL_DMA_W]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_USE_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_USE_CL_DMA_W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_USE_CL_DMA_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_USE_CL_DMA_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_USE_CL_DMA_W]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_USE_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_USE_CL_DMA_W(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_USE_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_USE_CL_DMA_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_USE_CL_DMA_W]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_USE_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_USE_CL_DMA_W(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_USE_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_USE_CL_DMA_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_USE_CL_DMA_W]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_USE_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_USE_CL_DMA_W(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_USE_CL_DMA_W,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_USE_CL_DMA_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_USE_CL_DMA_W]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_USE_CL_DMA_W]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_USE_CL_DMA_W(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_USE_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_USE_CL_DMA_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_USE_CL_DMA_W]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_USE_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_USE_DMA_PR_W(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_USE_DMA_PR_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_USE_DMA_PR_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_USE_DMA_PR_W]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_USE_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_USE_DMA_PR_W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_USE_DMA_PR_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_USE_DMA_PR_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_USE_DMA_PR_W]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_USE_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_USE_DMA_PR_W(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_USE_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_USE_DMA_PR_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_USE_DMA_PR_W]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_USE_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_USE_DMA_PR_W(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_USE_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_USE_DMA_PR_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_USE_DMA_PR_W]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_USE_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_USE_DMA_PR_W(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_USE_DMA_PR_W,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_USE_DMA_PR_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_USE_DMA_PR_W]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_USE_DMA_PR_W]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_USE_DMA_PR_W(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_USE_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_USE_DMA_PR_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_USE_DMA_PR_W]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_INC_PRI_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_INC_PRI_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_INC_PRI_MASK,
           CS_SM0_MCP_MISC_CONFIG0_INC_PRI_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_INC_PRI_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_INC_PRI_MASK]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_INC_PRI_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_INC_PRI_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_INC_PRI_MASK,
           CS_SM0_MCP_MISC_CONFIG0_INC_PRI_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_INC_PRI_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_INC_PRI_MASK]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_INC_PRI_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_INC_PRI_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_INC_PRI_MASK,
           CS_SM0_MCP_MISC_CONFIG0_INC_PRI_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_INC_PRI_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_INC_PRI_MASK]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_MACH_CORRENAB]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_MACH_CORRENAB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_MACH_CORRENAB,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MACH_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_MACH_CORRENAB]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_MACH_CORRENAB]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_MACH_CORRENAB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_MACH_CORRENAB,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MACH_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_MACH_CORRENAB]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_MACH_CORRENAB]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_MACH_CORRENAB(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_MACH_CORRENAB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MACH_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_MACH_CORRENAB]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_MACH_CORRENAB]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_MACH_CORRENAB(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_MACH_CORRENAB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MACH_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_MACH_CORRENAB]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_MACH_CORRENAB]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_MACH_CORRENAB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_MACH_CORRENAB,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MACH_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_MACH_CORRENAB]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_MACH_CORRENAB]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_MACH_CORRENAB(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_MACH_CORRENAB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MACH_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_MACH_CORRENAB]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_RXO_CORRENAB]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_RXO_CORRENAB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_RXO_CORRENAB,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_RXO_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_RXO_CORRENAB]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_RXO_CORRENAB]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_RXO_CORRENAB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_RXO_CORRENAB,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_RXO_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_RXO_CORRENAB]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_RXO_CORRENAB]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_RXO_CORRENAB(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_RXO_CORRENAB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_RXO_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_RXO_CORRENAB]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_RXO_CORRENAB]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_RXO_CORRENAB(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_RXO_CORRENAB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_RXO_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_RXO_CORRENAB]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_RXO_CORRENAB]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_RXO_CORRENAB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_RXO_CORRENAB,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_RXO_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_RXO_CORRENAB]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_RXO_CORRENAB]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_RXO_CORRENAB(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_RXO_CORRENAB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_RXO_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_RXO_CORRENAB]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_RSI_CORRENAB]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_RSI_CORRENAB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_RSI_CORRENAB,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_RSI_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_RSI_CORRENAB]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_RSI_CORRENAB]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_RSI_CORRENAB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_RSI_CORRENAB,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_RSI_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_RSI_CORRENAB]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_RSI_CORRENAB]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_RSI_CORRENAB(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_RSI_CORRENAB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_RSI_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_RSI_CORRENAB]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_RSI_CORRENAB]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_RSI_CORRENAB(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_RSI_CORRENAB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_RSI_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_RSI_CORRENAB]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_RSI_CORRENAB]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_RSI_CORRENAB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_RSI_CORRENAB,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_RSI_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_RSI_CORRENAB]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_RSI_CORRENAB]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_RSI_CORRENAB(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_RSI_CORRENAB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_RSI_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_RSI_CORRENAB]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_PBUS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_ENABLE_PBUS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_ENABLE_PBUS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_ENABLE_PBUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_PBUS]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_PBUS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_ENABLE_PBUS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_ENABLE_PBUS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_ENABLE_PBUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_PBUS]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_PBUS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_ENABLE_PBUS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_ENABLE_PBUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_ENABLE_PBUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_PBUS]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_PBUS]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_ENABLE_PBUS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_ENABLE_PBUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_ENABLE_PBUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_PBUS]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_PBUS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_ENABLE_PBUS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_ENABLE_PBUS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_ENABLE_PBUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_PBUS]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_PBUS]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_ENABLE_PBUS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_ENABLE_PBUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_ENABLE_PBUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_PBUS]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_INJECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_DISABLE_INJECT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_DISABLE_INJECT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_DISABLE_INJECT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_INJECT]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_INJECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_DISABLE_INJECT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_DISABLE_INJECT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_DISABLE_INJECT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_INJECT]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_INJECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_DISABLE_INJECT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_DISABLE_INJECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_DISABLE_INJECT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_INJECT]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_INJECT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_DISABLE_INJECT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_DISABLE_INJECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_DISABLE_INJECT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_INJECT]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_INJECT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_DISABLE_INJECT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_DISABLE_INJECT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_DISABLE_INJECT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_INJECT]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_INJECT]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_DISABLE_INJECT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_DISABLE_INJECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_DISABLE_INJECT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_DISABLE_INJECT]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_DCACHE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_DCACHE_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_DCACHE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_DCACHE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_DCACHE_MODE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_DCACHE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_DCACHE_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_DCACHE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_DCACHE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_DCACHE_MODE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_DCACHE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_DCACHE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_DCACHE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_DCACHE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_DCACHE_MODE]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_DCACHE_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_DCACHE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_DCACHE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_DCACHE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_DCACHE_MODE]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_DCACHE_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_DCACHE_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_DCACHE_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_DCACHE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_DCACHE_MODE]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_DCACHE_MODE]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_DCACHE_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_DCACHE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_DCACHE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_DCACHE_MODE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_0_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_0_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_0_RESERVED1,
           CS_SM0_MCP_MISC_CONFIG0_0_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_0_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_0_RESERVED1]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_0_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_0_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_0_RESERVED1,
           CS_SM0_MCP_MISC_CONFIG0_0_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_0_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_0_RESERVED1]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_0_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_0_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_0_RESERVED1,
           CS_SM0_MCP_MISC_CONFIG0_0_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_0_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_0_RESERVED1]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_CP_ME]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_ENABLE_CP_ME(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_ENABLE_CP_ME,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_ENABLE_CP_ME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_CP_ME]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_CP_ME]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_ENABLE_CP_ME(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_ENABLE_CP_ME,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_ENABLE_CP_ME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_CP_ME]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_CP_ME]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_ENABLE_CP_ME(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_ENABLE_CP_ME>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_ENABLE_CP_ME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_CP_ME]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_CP_ME]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_ENABLE_CP_ME(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_ENABLE_CP_ME>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_ENABLE_CP_ME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_CP_ME]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_CP_ME]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_ENABLE_CP_ME(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_ENABLE_CP_ME,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_ENABLE_CP_ME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_CP_ME]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_CP_ME]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_ENABLE_CP_ME(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_ENABLE_CP_ME>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_ENABLE_CP_ME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_ENABLE_CP_ME]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_0_RESERVED0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_0_RESERVED0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_0_RESERVED0,
           CS_SM0_MCP_MISC_CONFIG0_0_RESERVED0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_0_RESERVED0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_0_RESERVED0]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_0_RESERVED0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_0_RESERVED0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_0_RESERVED0,
           CS_SM0_MCP_MISC_CONFIG0_0_RESERVED0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_0_RESERVED0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_0_RESERVED0]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_0_RESERVED0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_0_RESERVED0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_0_RESERVED0,
           CS_SM0_MCP_MISC_CONFIG0_0_RESERVED0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_0_RESERVED0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_0_RESERVED0]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE]

//>> GET_[CS_SM0_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE]

//>> PREP_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1;
#endif
    return fapi2::getScom(i_target, CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1]

//>> PUT_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return fapi2::putScom(i_target, CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1]


//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_TAG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_TAG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_TAG,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_TAG]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_TAG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_TAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_TAG,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_TAG]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_TAG]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_TAG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_TAG,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_TAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_TAG]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_WREND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_WREND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_WREND,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_WREND]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_WREND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_WREND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_WREND,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_WREND]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_WREND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_WREND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_WREND,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_WREND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC1_WREND]

//>> PREP_[CS_SM0_SNP_MISC_GENID_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_SNP_MISC_GENID_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_GENID_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_SNP_MISC_GENID_BAR]

//>> GET_[CS_SM0_SNP_MISC_GENID_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_SNP_MISC_GENID_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_GENID_BAR;
#endif
    return fapi2::getScom(i_target, CS_SM0_SNP_MISC_GENID_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GENID_BAR]

//>> PUT_[CS_SM0_SNP_MISC_GENID_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_SNP_MISC_GENID_BAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GENID_BAR));
#endif
    return fapi2::putScom(i_target, CS_SM0_SNP_MISC_GENID_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_SNP_MISC_GENID_BAR]


//>> SET_[CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE]

//>> SET_[CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE]

//>> SET_[CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GENID_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE]

//>> CLEAR_[CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GENID_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE]

//>> GET_[CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GENID_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE]

//>> GET_[CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE]
static inline bool GET_CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GENID_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE]

//>> SET_[CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12]

//>> SET_[CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12]

//>> SET_[CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GENID_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12]

//>> CLEAR_[CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GENID_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12]

//>> GET_[CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GENID_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12]

//>> GET_[CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12]
static inline bool GET_CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GENID_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12]

//>> SET_[CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GENID_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED1]

//>> CLEAR_[CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GENID_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED1]

//>> GET_[CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GENID_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED1]

//>> GET_[CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED1]
static inline bool GET_CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GENID_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR,
           CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR]

//>> SET_[CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR,
           CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR]

//>> GET_[CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GENID_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR,
           CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR]

//>> SET_[CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED2,
           CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED2]

//>> SET_[CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED2,
           CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED2]

//>> GET_[CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GENID_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED2,
           CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GENID_BAR_GENID_RESERVED2]

//>> SET_[CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON]

//>> SET_[CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON]

//>> SET_[CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GENID_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON]

//>> CLEAR_[CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GENID_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON]

//>> GET_[CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GENID_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON]

//>> GET_[CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON]
static inline bool GET_CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GENID_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON]

//>> PREP_[CS_SM0_SNP_MISC_SM_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_SNP_MISC_SM_STATUS(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_SM_STATUS;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_SNP_MISC_SM_STATUS]

//>> GET_[CS_SM0_SNP_MISC_SM_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_SNP_MISC_SM_STATUS(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_SM_STATUS;
#endif
    return fapi2::getScom(i_target, CS_SM0_SNP_MISC_SM_STATUS, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SM_STATUS]

//>> PUT_[CS_SM0_SNP_MISC_SM_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_SNP_MISC_SM_STATUS(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return fapi2::putScom(i_target, CS_SM0_SNP_MISC_SM_STATUS, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_SNP_MISC_SM_STATUS]


//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_PWR0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_PWR0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SM_STATUS_PWR0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PWR0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_PWR0]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_PWR0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_PWR0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SM_STATUS_PWR0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PWR0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_PWR0]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_PWR0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_PWR0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_SM_STATUS_PWR0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PWR0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_PWR0]

//>> CLEAR_[CS_SM0_SNP_MISC_SM_STATUS_PWR0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_SM_STATUS_PWR0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_SM_STATUS_PWR0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PWR0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_SM_STATUS_PWR0]

//>> GET_[CS_SM0_SNP_MISC_SM_STATUS_PWR0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_SM_STATUS_PWR0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_SM_STATUS_PWR0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PWR0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SM_STATUS_PWR0]

//>> GET_[CS_SM0_SNP_MISC_SM_STATUS_PWR0]
static inline bool GET_CS_SM0_SNP_MISC_SM_STATUS_PWR0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_SM_STATUS_PWR0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PWR0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SM_STATUS_PWR0]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_PWR1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_PWR1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SM_STATUS_PWR1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PWR1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_PWR1]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_PWR1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_PWR1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SM_STATUS_PWR1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PWR1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_PWR1]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_PWR1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_PWR1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_SM_STATUS_PWR1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PWR1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_PWR1]

//>> CLEAR_[CS_SM0_SNP_MISC_SM_STATUS_PWR1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_SM_STATUS_PWR1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_SM_STATUS_PWR1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PWR1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_SM_STATUS_PWR1]

//>> GET_[CS_SM0_SNP_MISC_SM_STATUS_PWR1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_SM_STATUS_PWR1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_SM_STATUS_PWR1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PWR1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SM_STATUS_PWR1]

//>> GET_[CS_SM0_SNP_MISC_SM_STATUS_PWR1]
static inline bool GET_CS_SM0_SNP_MISC_SM_STATUS_PWR1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_SM_STATUS_PWR1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PWR1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SM_STATUS_PWR1]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_PWR2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_PWR2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SM_STATUS_PWR2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PWR2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_PWR2]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_PWR2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_PWR2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SM_STATUS_PWR2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PWR2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_PWR2]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_PWR2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_PWR2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_SM_STATUS_PWR2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PWR2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_PWR2]

//>> CLEAR_[CS_SM0_SNP_MISC_SM_STATUS_PWR2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_SM_STATUS_PWR2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_SM_STATUS_PWR2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PWR2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_SM_STATUS_PWR2]

//>> GET_[CS_SM0_SNP_MISC_SM_STATUS_PWR2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_SM_STATUS_PWR2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_SM_STATUS_PWR2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PWR2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SM_STATUS_PWR2]

//>> GET_[CS_SM0_SNP_MISC_SM_STATUS_PWR2]
static inline bool GET_CS_SM0_SNP_MISC_SM_STATUS_PWR2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_SM_STATUS_PWR2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PWR2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SM_STATUS_PWR2]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_XATS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_XATS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SM_STATUS_XATS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_XATS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_XATS]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_XATS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_XATS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SM_STATUS_XATS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_XATS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_XATS]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_XATS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_XATS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_SM_STATUS_XATS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_XATS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_XATS]

//>> CLEAR_[CS_SM0_SNP_MISC_SM_STATUS_XATS]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_SM_STATUS_XATS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_SM_STATUS_XATS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_XATS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_SM_STATUS_XATS]

//>> GET_[CS_SM0_SNP_MISC_SM_STATUS_XATS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_SM_STATUS_XATS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_SM_STATUS_XATS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_XATS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SM_STATUS_XATS]

//>> GET_[CS_SM0_SNP_MISC_SM_STATUS_XATS]
static inline bool GET_CS_SM0_SNP_MISC_SM_STATUS_XATS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_SM_STATUS_XATS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_XATS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SM_STATUS_XATS]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_INTS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_INTS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SM_STATUS_INTS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_INTS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_INTS]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_INTS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_INTS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SM_STATUS_INTS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_INTS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_INTS]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_INTS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_INTS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_SM_STATUS_INTS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_INTS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_INTS]

//>> CLEAR_[CS_SM0_SNP_MISC_SM_STATUS_INTS]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_SM_STATUS_INTS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_SM_STATUS_INTS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_INTS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_SM_STATUS_INTS]

//>> GET_[CS_SM0_SNP_MISC_SM_STATUS_INTS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_SM_STATUS_INTS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_SM_STATUS_INTS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_INTS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SM_STATUS_INTS]

//>> GET_[CS_SM0_SNP_MISC_SM_STATUS_INTS]
static inline bool GET_CS_SM0_SNP_MISC_SM_STATUS_INTS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_SM_STATUS_INTS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_INTS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SM_STATUS_INTS]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_CREQ0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SM_STATUS_CREQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ0]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_CREQ0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SM_STATUS_CREQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ0]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_CREQ0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_SM_STATUS_CREQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ0]

//>> CLEAR_[CS_SM0_SNP_MISC_SM_STATUS_CREQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_SM_STATUS_CREQ0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_SM_STATUS_CREQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_SM_STATUS_CREQ0]

//>> GET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_SM_STATUS_CREQ0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_SM_STATUS_CREQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ0]

//>> GET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ0]
static inline bool GET_CS_SM0_SNP_MISC_SM_STATUS_CREQ0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_SM_STATUS_CREQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ0]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_CST0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_CST0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SM_STATUS_CST0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_CST0]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_CST0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_CST0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SM_STATUS_CST0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_CST0]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_CST0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_CST0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_SM_STATUS_CST0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_CST0]

//>> CLEAR_[CS_SM0_SNP_MISC_SM_STATUS_CST0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_SM_STATUS_CST0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_SM_STATUS_CST0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_SM_STATUS_CST0]

//>> GET_[CS_SM0_SNP_MISC_SM_STATUS_CST0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_SM_STATUS_CST0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_SM_STATUS_CST0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SM_STATUS_CST0]

//>> GET_[CS_SM0_SNP_MISC_SM_STATUS_CST0]
static inline bool GET_CS_SM0_SNP_MISC_SM_STATUS_CST0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_SM_STATUS_CST0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SM_STATUS_CST0]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_PRB0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_PRB0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SM_STATUS_PRB0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PRB0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_PRB0]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_PRB0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_PRB0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SM_STATUS_PRB0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PRB0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_PRB0]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_PRB0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_PRB0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_SM_STATUS_PRB0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PRB0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_PRB0]

//>> CLEAR_[CS_SM0_SNP_MISC_SM_STATUS_PRB0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_SM_STATUS_PRB0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_SM_STATUS_PRB0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PRB0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_SM_STATUS_PRB0]

//>> GET_[CS_SM0_SNP_MISC_SM_STATUS_PRB0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_SM_STATUS_PRB0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_SM_STATUS_PRB0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PRB0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SM_STATUS_PRB0]

//>> GET_[CS_SM0_SNP_MISC_SM_STATUS_PRB0]
static inline bool GET_CS_SM0_SNP_MISC_SM_STATUS_PRB0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_SM_STATUS_PRB0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PRB0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SM_STATUS_PRB0]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_CREQ1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SM_STATUS_CREQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ1]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_CREQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SM_STATUS_CREQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ1]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_CREQ1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_SM_STATUS_CREQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ1]

//>> CLEAR_[CS_SM0_SNP_MISC_SM_STATUS_CREQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_SM_STATUS_CREQ1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_SM_STATUS_CREQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_SM_STATUS_CREQ1]

//>> GET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_SM_STATUS_CREQ1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_SM_STATUS_CREQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ1]

//>> GET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ1]
static inline bool GET_CS_SM0_SNP_MISC_SM_STATUS_CREQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_SM_STATUS_CREQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ1]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_CST1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_CST1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SM_STATUS_CST1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_CST1]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_CST1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_CST1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SM_STATUS_CST1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_CST1]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_CST1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_CST1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_SM_STATUS_CST1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_CST1]

//>> CLEAR_[CS_SM0_SNP_MISC_SM_STATUS_CST1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_SM_STATUS_CST1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_SM_STATUS_CST1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_SM_STATUS_CST1]

//>> GET_[CS_SM0_SNP_MISC_SM_STATUS_CST1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_SM_STATUS_CST1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_SM_STATUS_CST1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SM_STATUS_CST1]

//>> GET_[CS_SM0_SNP_MISC_SM_STATUS_CST1]
static inline bool GET_CS_SM0_SNP_MISC_SM_STATUS_CST1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_SM_STATUS_CST1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SM_STATUS_CST1]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_PRB1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_PRB1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SM_STATUS_PRB1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PRB1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_PRB1]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_PRB1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_PRB1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SM_STATUS_PRB1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PRB1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_PRB1]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_PRB1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_PRB1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_SM_STATUS_PRB1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PRB1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_PRB1]

//>> CLEAR_[CS_SM0_SNP_MISC_SM_STATUS_PRB1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_SM_STATUS_PRB1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_SM_STATUS_PRB1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PRB1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_SM_STATUS_PRB1]

//>> GET_[CS_SM0_SNP_MISC_SM_STATUS_PRB1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_SM_STATUS_PRB1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_SM_STATUS_PRB1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PRB1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SM_STATUS_PRB1]

//>> GET_[CS_SM0_SNP_MISC_SM_STATUS_PRB1]
static inline bool GET_CS_SM0_SNP_MISC_SM_STATUS_PRB1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_SM_STATUS_PRB1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PRB1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SM_STATUS_PRB1]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_CREQ2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SM_STATUS_CREQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CREQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ2]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_CREQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SM_STATUS_CREQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CREQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ2]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_CREQ2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_SM_STATUS_CREQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CREQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ2]

//>> CLEAR_[CS_SM0_SNP_MISC_SM_STATUS_CREQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_SM_STATUS_CREQ2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_SM_STATUS_CREQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CREQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_SM_STATUS_CREQ2]

//>> GET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_SM_STATUS_CREQ2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_SM_STATUS_CREQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CREQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ2]

//>> GET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ2]
static inline bool GET_CS_SM0_SNP_MISC_SM_STATUS_CREQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_SM_STATUS_CREQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CREQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ2]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_CST2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_CST2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SM_STATUS_CST2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CST2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_CST2]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_CST2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_CST2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SM_STATUS_CST2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CST2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_CST2]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_CST2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_CST2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_SM_STATUS_CST2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CST2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_CST2]

//>> CLEAR_[CS_SM0_SNP_MISC_SM_STATUS_CST2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_SM_STATUS_CST2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_SM_STATUS_CST2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CST2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_SM_STATUS_CST2]

//>> GET_[CS_SM0_SNP_MISC_SM_STATUS_CST2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_SM_STATUS_CST2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_SM_STATUS_CST2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CST2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SM_STATUS_CST2]

//>> GET_[CS_SM0_SNP_MISC_SM_STATUS_CST2]
static inline bool GET_CS_SM0_SNP_MISC_SM_STATUS_CST2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_SM_STATUS_CST2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CST2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SM_STATUS_CST2]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_PRB2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_PRB2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SM_STATUS_PRB2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PRB2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_PRB2]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_PRB2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_PRB2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SM_STATUS_PRB2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PRB2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_PRB2]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_PRB2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_PRB2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_SM_STATUS_PRB2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PRB2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_PRB2]

//>> CLEAR_[CS_SM0_SNP_MISC_SM_STATUS_PRB2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_SM_STATUS_PRB2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_SM_STATUS_PRB2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PRB2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_SM_STATUS_PRB2]

//>> GET_[CS_SM0_SNP_MISC_SM_STATUS_PRB2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_SM_STATUS_PRB2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_SM_STATUS_PRB2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PRB2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SM_STATUS_PRB2]

//>> GET_[CS_SM0_SNP_MISC_SM_STATUS_PRB2]
static inline bool GET_CS_SM0_SNP_MISC_SM_STATUS_PRB2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_SM_STATUS_PRB2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PRB2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SM_STATUS_PRB2]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_CREQ3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SM_STATUS_CREQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CREQ3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ3]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_CREQ3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SM_STATUS_CREQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CREQ3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ3]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_CREQ3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_SM_STATUS_CREQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CREQ3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ3]

//>> CLEAR_[CS_SM0_SNP_MISC_SM_STATUS_CREQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_SM_STATUS_CREQ3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_SM_STATUS_CREQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CREQ3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_SM_STATUS_CREQ3]

//>> GET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_SM_STATUS_CREQ3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_SM_STATUS_CREQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CREQ3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ3]

//>> GET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ3]
static inline bool GET_CS_SM0_SNP_MISC_SM_STATUS_CREQ3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_SM_STATUS_CREQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CREQ3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ3]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_CST3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_CST3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SM_STATUS_CST3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CST3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_CST3]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_CST3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_CST3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SM_STATUS_CST3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CST3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_CST3]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_CST3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_CST3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_SM_STATUS_CST3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CST3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_CST3]

//>> CLEAR_[CS_SM0_SNP_MISC_SM_STATUS_CST3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_SM_STATUS_CST3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_SM_STATUS_CST3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CST3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_SM_STATUS_CST3]

//>> GET_[CS_SM0_SNP_MISC_SM_STATUS_CST3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_SM_STATUS_CST3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_SM_STATUS_CST3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CST3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SM_STATUS_CST3]

//>> GET_[CS_SM0_SNP_MISC_SM_STATUS_CST3]
static inline bool GET_CS_SM0_SNP_MISC_SM_STATUS_CST3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_SM_STATUS_CST3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CST3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SM_STATUS_CST3]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_PRB3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_PRB3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SM_STATUS_PRB3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PRB3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_PRB3]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_PRB3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_PRB3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SM_STATUS_PRB3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PRB3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_PRB3]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_PRB3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_PRB3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_SM_STATUS_PRB3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PRB3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_PRB3]

//>> CLEAR_[CS_SM0_SNP_MISC_SM_STATUS_PRB3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_SM_STATUS_PRB3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_SM_STATUS_PRB3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PRB3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_SM_STATUS_PRB3]

//>> GET_[CS_SM0_SNP_MISC_SM_STATUS_PRB3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_SM_STATUS_PRB3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_SM_STATUS_PRB3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PRB3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SM_STATUS_PRB3]

//>> GET_[CS_SM0_SNP_MISC_SM_STATUS_PRB3]
static inline bool GET_CS_SM0_SNP_MISC_SM_STATUS_PRB3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_SM_STATUS_PRB3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PRB3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SM_STATUS_PRB3]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_CREQ4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SM_STATUS_CREQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CREQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ4]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_CREQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SM_STATUS_CREQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CREQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ4]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_CREQ4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_SM_STATUS_CREQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CREQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ4]

//>> CLEAR_[CS_SM0_SNP_MISC_SM_STATUS_CREQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_SM_STATUS_CREQ4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_SM_STATUS_CREQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CREQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_SM_STATUS_CREQ4]

//>> GET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_SM_STATUS_CREQ4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_SM_STATUS_CREQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CREQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ4]

//>> GET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ4]
static inline bool GET_CS_SM0_SNP_MISC_SM_STATUS_CREQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_SM_STATUS_CREQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CREQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SM_STATUS_CREQ4]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_CST4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_CST4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SM_STATUS_CST4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CST4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_CST4]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_CST4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_CST4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SM_STATUS_CST4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CST4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_CST4]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_CST4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_CST4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_SM_STATUS_CST4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CST4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_CST4]

//>> CLEAR_[CS_SM0_SNP_MISC_SM_STATUS_CST4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_SM_STATUS_CST4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_SM_STATUS_CST4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CST4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_SM_STATUS_CST4]

//>> GET_[CS_SM0_SNP_MISC_SM_STATUS_CST4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_SM_STATUS_CST4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_SM_STATUS_CST4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CST4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SM_STATUS_CST4]

//>> GET_[CS_SM0_SNP_MISC_SM_STATUS_CST4]
static inline bool GET_CS_SM0_SNP_MISC_SM_STATUS_CST4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_SM_STATUS_CST4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CST4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SM_STATUS_CST4]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_PRB4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_PRB4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SM_STATUS_PRB4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PRB4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_PRB4]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_PRB4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_PRB4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SM_STATUS_PRB4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PRB4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_PRB4]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_PRB4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_PRB4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_SM_STATUS_PRB4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PRB4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_PRB4]

//>> CLEAR_[CS_SM0_SNP_MISC_SM_STATUS_PRB4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_SM_STATUS_PRB4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_SM_STATUS_PRB4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PRB4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_SM_STATUS_PRB4]

//>> GET_[CS_SM0_SNP_MISC_SM_STATUS_PRB4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_SM_STATUS_PRB4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_SM_STATUS_PRB4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PRB4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SM_STATUS_PRB4]

//>> GET_[CS_SM0_SNP_MISC_SM_STATUS_PRB4]
static inline bool GET_CS_SM0_SNP_MISC_SM_STATUS_PRB4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_SM_STATUS_PRB4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_PRB4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SM_STATUS_PRB4]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_CHGRATE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_CHGRATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SM_STATUS_CHGRATE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CHGRATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_CHGRATE]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_CHGRATE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_CHGRATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SM_STATUS_CHGRATE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CHGRATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_CHGRATE]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_CHGRATE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_CHGRATE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_SM_STATUS_CHGRATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CHGRATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_CHGRATE]

//>> CLEAR_[CS_SM0_SNP_MISC_SM_STATUS_CHGRATE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_SM_STATUS_CHGRATE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_SM_STATUS_CHGRATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CHGRATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_SM_STATUS_CHGRATE]

//>> GET_[CS_SM0_SNP_MISC_SM_STATUS_CHGRATE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_SM_STATUS_CHGRATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_SM_STATUS_CHGRATE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CHGRATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SM_STATUS_CHGRATE]

//>> GET_[CS_SM0_SNP_MISC_SM_STATUS_CHGRATE]
static inline bool GET_CS_SM0_SNP_MISC_SM_STATUS_CHGRATE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_SM_STATUS_CHGRATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_CHGRATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SM_STATUS_CHGRATE]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SM_STATUS_RESERVED1,
           CS_SM0_SNP_MISC_SM_STATUS_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_SM_STATUS_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SM_STATUS_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SM_STATUS_RESERVED1,
           CS_SM0_SNP_MISC_SM_STATUS_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SM_STATUS_RESERVED1]

//>> GET_[CS_SM0_SNP_MISC_SM_STATUS_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_SM_STATUS_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_SM_STATUS_RESERVED1,
           CS_SM0_SNP_MISC_SM_STATUS_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_SM_STATUS_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SM_STATUS_RESERVED1]

//>> PREP_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_SNP_MISC_TOPOLOGY_TABLE2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_TOPOLOGY_TABLE2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2]

//>> GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_TOPOLOGY_TABLE2;
#endif
    return fapi2::getScom(i_target, CS_SM0_SNP_MISC_TOPOLOGY_TABLE2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2]

//>> PUT_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_SNP_MISC_TOPOLOGY_TABLE2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return fapi2::putScom(i_target, CS_SM0_SNP_MISC_TOPOLOGY_TABLE2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2]


//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23]

//>> GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY16,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY16_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY16 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY16]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY16,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY16_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY16 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY16]

//>> GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY16]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY16,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY16_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY16 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY16]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY17,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY17_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY17 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY17]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY17,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY17_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY17 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY17]

//>> GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY17]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY17,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY17_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY17 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY17]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY18,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY18_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY18 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY18]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY18,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY18_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY18 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY18]

//>> GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY18]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY18,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY18_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY18 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY18]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY19,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY19_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY19 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY19]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY19,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY19_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY19 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY19]

//>> GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY19]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY19,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY19_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY19 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY19]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY20(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY20,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY20_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY20 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY20]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY20(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY20,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY20_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY20 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY20]

//>> GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY20]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY20(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY20,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY20_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY20 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY20]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY21(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY21,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY21_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY21 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY21]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY21(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY21,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY21_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY21 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY21]

//>> GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY21]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY21(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY21,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY21_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY21 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY21]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY22(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY22,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY22_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY22 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY22]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY22(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY22,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY22_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY22 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY22]

//>> GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY22]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY22(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY22,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY22_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY22 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY22]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY23,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY23_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY23 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY23]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY23,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY23_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY23 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY23]

//>> GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY23]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY23,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY23_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY23 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE2_TRY23]

//>> PREP_[CS_SM1_DIR_MISC_SCOM_L2_DATA]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_DIR_MISC_SCOM_L2_DATA(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_DIR_MISC_SCOM_L2_DATA;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_DIR_MISC_SCOM_L2_DATA]

//>> GET_[CS_SM1_DIR_MISC_SCOM_L2_DATA]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_DIR_MISC_SCOM_L2_DATA(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_DIR_MISC_SCOM_L2_DATA;
#endif
    return fapi2::getScom(i_target, CS_SM1_DIR_MISC_SCOM_L2_DATA, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_DIR_MISC_SCOM_L2_DATA]

//>> PUT_[CS_SM1_DIR_MISC_SCOM_L2_DATA]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_DIR_MISC_SCOM_L2_DATA(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_SCOM_L2_DATA));
#endif
    return fapi2::putScom(i_target, CS_SM1_DIR_MISC_SCOM_L2_DATA, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_DIR_MISC_SCOM_L2_DATA]


//>> SET_[CS_SM1_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_SCOM_L2_DATA));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA,
           CS_SM1_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA]

//>> SET_[CS_SM1_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_SCOM_L2_DATA));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA,
           CS_SM1_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA]

//>> GET_[CS_SM1_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_SCOM_L2_DATA));
#endif
    return i_data.extractToRight<CS_SM1_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA,
           CS_SM1_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA]

//>> PREP_[CS_SM1_MCP_MISC_CERR_MESSAGE0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_MCP_MISC_CERR_MESSAGE0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_CERR_MESSAGE0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_MCP_MISC_CERR_MESSAGE0]

//>> GET_[CS_SM1_MCP_MISC_CERR_MESSAGE0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_MCP_MISC_CERR_MESSAGE0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_CERR_MESSAGE0;
#endif
    return fapi2::getScom(i_target, CS_SM1_MCP_MISC_CERR_MESSAGE0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MESSAGE0]

//>> PUT_[CS_SM1_MCP_MISC_CERR_MESSAGE0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_MCP_MISC_CERR_MESSAGE0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MESSAGE0));
#endif
    return fapi2::putScom(i_target, CS_SM1_MCP_MISC_CERR_MESSAGE0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_MCP_MISC_CERR_MESSAGE0]


//>> SET_[CS_SM1_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MESSAGE0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0,
           CS_SM1_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0]

//>> SET_[CS_SM1_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MESSAGE0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0,
           CS_SM1_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0]

//>> GET_[CS_SM1_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MESSAGE0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0,
           CS_SM1_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0]

//>> PREP_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2;
#endif
    return fapi2::getScom(i_target, CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2]

//>> PUT_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return fapi2::putScom(i_target, CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2]


//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]

//>> PREP_[CS_SM1_SNP_MISC_LOW_WATER]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_SNP_MISC_LOW_WATER(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_LOW_WATER;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_SNP_MISC_LOW_WATER]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_SNP_MISC_LOW_WATER(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_LOW_WATER;
#endif
    return fapi2::getScom(i_target, CS_SM1_SNP_MISC_LOW_WATER, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER]

//>> PUT_[CS_SM1_SNP_MISC_LOW_WATER]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_SNP_MISC_LOW_WATER(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return fapi2::putScom(i_target, CS_SM1_SNP_MISC_LOW_WATER, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_SNP_MISC_LOW_WATER]


//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR0]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR0]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR0]

//>> CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR0]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR0]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR0]
static inline bool GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR0]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR1]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR1]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR1]

//>> CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR1]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR1]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR1]
static inline bool GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR1]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR2]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR2]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR2]

//>> CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR2]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR2]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR2]
static inline bool GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PWR2]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XATS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XATS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XATS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XATS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XATS]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XATS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XATS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XATS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XATS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XATS]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XATS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XATS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XATS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XATS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XATS]

//>> CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XATS]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XATS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XATS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XATS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XATS]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XATS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XATS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XATS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XATS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XATS]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XATS]
static inline bool GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XATS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XATS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XATS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XATS]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_INTS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_INTS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_INTS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_INTS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_INTS]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_INTS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_INTS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_INTS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_INTS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_INTS]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_INTS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_INTS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_INTS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_INTS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_INTS]

//>> CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_INTS]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_INTS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_INTS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_INTS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_INTS]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_INTS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_INTS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_INTS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_INTS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_INTS]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_INTS]
static inline bool GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_INTS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_INTS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_INTS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_INTS]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ0]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ0]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ0]

//>> CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ0]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ0]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ0]
static inline bool GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ0]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST0]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST0]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST0]

//>> CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST0]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST0]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST0]
static inline bool GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST0]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB0]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB0]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB0]

//>> CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB0]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB0]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB0]
static inline bool GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB0]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ1]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ1]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ1]

//>> CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ1]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ1]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ1]
static inline bool GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ1]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST1]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST1]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST1]

//>> CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST1]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST1]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST1]
static inline bool GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST1]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB1]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB1]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB1]

//>> CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB1]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB1]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB1]
static inline bool GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB1]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ2]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ2]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ2]

//>> CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ2]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ2]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ2]
static inline bool GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ2]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST2]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST2]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST2]

//>> CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST2]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST2]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST2]
static inline bool GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST2]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB2]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB2]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB2]

//>> CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB2]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB2]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB2]
static inline bool GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB2]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ3]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ3]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ3]

//>> CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ3]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ3]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ3]
static inline bool GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ3]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST3]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST3]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST3]

//>> CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST3]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST3]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST3]
static inline bool GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST3]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB3]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB3]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB3]

//>> CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB3]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB3]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB3]
static inline bool GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB3]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ4]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ4]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ4]

//>> CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ4]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ4]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ4]
static inline bool GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQ4]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST4]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST4]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST4]

//>> CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST4]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST4]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST4]
static inline bool GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CST4]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB4]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB4]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB4]

//>> CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB4]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB4]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB4]
static inline bool GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRB4]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED]

//>> CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED]
static inline bool GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED]

//>> CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED]
static inline bool GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED]

//>> CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED]
static inline bool GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED]

//>> CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED]
static inline bool GET_CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR0,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR0]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR0,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR0]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR0,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR0]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR1,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR1]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR1,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR1]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR1,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR1]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR2,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR2]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR2,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR2]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR2,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PWR2]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_XATS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_XATS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_XATS,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_XATS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_XATS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_XATS]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_XATS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_XATS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_XATS,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_XATS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_XATS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_XATS]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_XATS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_XATS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_XATS,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_XATS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_XATS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_XATS]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_INTS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_INTS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_INTS,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_INTS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_INTS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_INTS]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_INTS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_INTS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_INTS,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_INTS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_INTS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_INTS]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_INTS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_INTS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_INTS,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_INTS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_INTS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_INTS]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ0,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ0]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ0,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ0]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ0,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ0]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST0,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST0]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST0,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST0]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST0,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST0]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB0,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB0]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB0,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB0]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB0,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB0]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ1,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ1]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ1,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ1]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ1,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ1]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST1,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST1]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST1,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST1]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST1,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST1]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB1,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB1]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB1,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB1]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB1,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB1]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ2,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ2]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ2,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ2]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ2,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ2]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST2,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST2]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST2,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST2]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST2,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST2]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB2,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB2]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB2,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB2]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB2,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB2]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ3,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ3]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ3,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ3]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ3,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ3]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST3,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST3]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST3,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST3]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST3,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST3]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB3,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB3]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB3,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB3]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB3,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB3]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ4,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ4]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ4,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ4]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ4,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_REQ4]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST4,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST4]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST4,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST4]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST4,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_CST4]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB4,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB4]

//>> SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB4,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB4]

//>> GET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB4,
           CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_LOW_WATER_WEIGHT_PRB4]

//>> PREP_[CS_SM1_SNP_MISC_SCOM_L2_ADDR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_SNP_MISC_SCOM_L2_ADDR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_SCOM_L2_ADDR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_SNP_MISC_SCOM_L2_ADDR]

//>> GET_[CS_SM1_SNP_MISC_SCOM_L2_ADDR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_SNP_MISC_SCOM_L2_ADDR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_SCOM_L2_ADDR;
#endif
    return fapi2::getScom(i_target, CS_SM1_SNP_MISC_SCOM_L2_ADDR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SCOM_L2_ADDR]

//>> PUT_[CS_SM1_SNP_MISC_SCOM_L2_ADDR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_SNP_MISC_SCOM_L2_ADDR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SCOM_L2_ADDR));
#endif
    return fapi2::putScom(i_target, CS_SM1_SNP_MISC_SCOM_L2_ADDR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_SNP_MISC_SCOM_L2_ADDR]


//>> SET_[CS_SM1_SNP_MISC_SCOM_L2_ADDR_VALID]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SCOM_L2_ADDR_VALID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SCOM_L2_ADDR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SCOM_L2_ADDR_VALID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_SCOM_L2_ADDR_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SCOM_L2_ADDR_VALID]

//>> SET_[CS_SM1_SNP_MISC_SCOM_L2_ADDR_VALID]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SCOM_L2_ADDR_VALID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SCOM_L2_ADDR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SCOM_L2_ADDR_VALID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_SCOM_L2_ADDR_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SCOM_L2_ADDR_VALID]

//>> SET_[CS_SM1_SNP_MISC_SCOM_L2_ADDR_VALID]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SCOM_L2_ADDR_VALID(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SCOM_L2_ADDR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_SCOM_L2_ADDR_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_SCOM_L2_ADDR_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SCOM_L2_ADDR_VALID]

//>> CLEAR_[CS_SM1_SNP_MISC_SCOM_L2_ADDR_VALID]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_SCOM_L2_ADDR_VALID(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SCOM_L2_ADDR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_SCOM_L2_ADDR_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_SCOM_L2_ADDR_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_SCOM_L2_ADDR_VALID]

//>> GET_[CS_SM1_SNP_MISC_SCOM_L2_ADDR_VALID]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_SCOM_L2_ADDR_VALID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SCOM_L2_ADDR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_SCOM_L2_ADDR_VALID,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_SCOM_L2_ADDR_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SCOM_L2_ADDR_VALID]

//>> GET_[CS_SM1_SNP_MISC_SCOM_L2_ADDR_VALID]
static inline bool GET_CS_SM1_SNP_MISC_SCOM_L2_ADDR_VALID(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SCOM_L2_ADDR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_SCOM_L2_ADDR_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_SCOM_L2_ADDR_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SCOM_L2_ADDR_VALID]

//>> SET_[CS_SM1_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SCOM_L2_ADDR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1,
           CS_SM1_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1]

//>> SET_[CS_SM1_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SCOM_L2_ADDR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1,
           CS_SM1_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1]

//>> GET_[CS_SM1_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SCOM_L2_ADDR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1,
           CS_SM1_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1]

//>> SET_[CS_SM1_SNP_MISC_SCOM_L2_ADDR_CCI]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SCOM_L2_ADDR_CCI(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SCOM_L2_ADDR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SCOM_L2_ADDR_CCI,
           CS_SM1_SNP_MISC_SCOM_L2_ADDR_CCI_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_SCOM_L2_ADDR_CCI chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SCOM_L2_ADDR_CCI]

//>> SET_[CS_SM1_SNP_MISC_SCOM_L2_ADDR_CCI]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SCOM_L2_ADDR_CCI(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SCOM_L2_ADDR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SCOM_L2_ADDR_CCI,
           CS_SM1_SNP_MISC_SCOM_L2_ADDR_CCI_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_SCOM_L2_ADDR_CCI chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SCOM_L2_ADDR_CCI]

//>> GET_[CS_SM1_SNP_MISC_SCOM_L2_ADDR_CCI]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_SCOM_L2_ADDR_CCI(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SCOM_L2_ADDR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_SCOM_L2_ADDR_CCI,
           CS_SM1_SNP_MISC_SCOM_L2_ADDR_CCI_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_SCOM_L2_ADDR_CCI chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SCOM_L2_ADDR_CCI]

//>> SET_[CS_SM1_SNP_MISC_SCOM_L2_ADDR_WAY]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SCOM_L2_ADDR_WAY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SCOM_L2_ADDR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SCOM_L2_ADDR_WAY,
           CS_SM1_SNP_MISC_SCOM_L2_ADDR_WAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_SCOM_L2_ADDR_WAY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SCOM_L2_ADDR_WAY]

//>> SET_[CS_SM1_SNP_MISC_SCOM_L2_ADDR_WAY]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SCOM_L2_ADDR_WAY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SCOM_L2_ADDR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SCOM_L2_ADDR_WAY,
           CS_SM1_SNP_MISC_SCOM_L2_ADDR_WAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_SCOM_L2_ADDR_WAY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SCOM_L2_ADDR_WAY]

//>> GET_[CS_SM1_SNP_MISC_SCOM_L2_ADDR_WAY]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_SCOM_L2_ADDR_WAY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SCOM_L2_ADDR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_SCOM_L2_ADDR_WAY,
           CS_SM1_SNP_MISC_SCOM_L2_ADDR_WAY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_SCOM_L2_ADDR_WAY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SCOM_L2_ADDR_WAY]

//>> PREP_[CS_SM2_MCP_MISC_CERR_HOLD1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_MCP_MISC_CERR_HOLD1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_CERR_HOLD1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_MCP_MISC_CERR_HOLD1]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_MCP_MISC_CERR_HOLD1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_CERR_HOLD1;
#endif
    return fapi2::getScom(i_target, CS_SM2_MCP_MISC_CERR_HOLD1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1]

//>> PUT_[CS_SM2_MCP_MISC_CERR_HOLD1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_MCP_MISC_CERR_HOLD1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return fapi2::putScom(i_target, CS_SM2_MCP_MISC_CERR_HOLD1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_MCP_MISC_CERR_HOLD1]


//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_0]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_0]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_1]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_1]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_2]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_2]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_3]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_3]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_NLGX_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_FWD_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_FWD_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_FWD_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_FWD_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_FWD_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD1_FWD_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_0]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD1_FWD_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD1_FWD_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD1_FWD_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD1_FWD_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_0]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD1_FWD_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD1_FWD_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_FWD_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_FWD_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_FWD_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_FWD_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_FWD_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD1_FWD_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_1]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD1_FWD_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD1_FWD_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD1_FWD_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD1_FWD_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_1]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD1_FWD_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD1_FWD_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_FWD_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_FWD_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_FWD_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_FWD_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_FWD_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD1_FWD_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_2]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD1_FWD_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD1_FWD_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD1_FWD_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD1_FWD_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_2]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD1_FWD_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD1_FWD_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_FWD_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_FWD_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_FWD_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_FWD_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_FWD_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD1_FWD_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_3]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD1_FWD_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD1_FWD_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD1_FWD_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD1_FWD_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_3]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD1_FWD_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD1_FWD_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_FWD_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_0]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_0]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_1]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_1]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_2]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_2]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_3]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_3]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_4]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_4]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_4]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_4]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_4]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_4]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_4]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_5]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_5]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_5]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_5]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_5]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_5]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_5]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_6]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_6]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_6]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_6]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_6]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_6]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_6]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_7]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_7]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_7]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_7]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_7]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_7]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD1_AUE_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD1_AUE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_AUE_7]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_0]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_0]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_1]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_1]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_2]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_2]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_3]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_3]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_4]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_4]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_4]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_4]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_4]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_4]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_4]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_5]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_5]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_5]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_5]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_5]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_5]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_5]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_6]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_6]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_6]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_6]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_6]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_6]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_6]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_7]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_7]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_7]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_7]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_7]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_7]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_7]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_8]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_8]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_8]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_8]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_8]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_8]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_8]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_9]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_9]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_9]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_9]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_9]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_9]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_9]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_10]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_10]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_10]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_10]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_10]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_10]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_10]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_11]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_11]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_11]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_11]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_11]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_11]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD1_PBF_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD1_PBF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_PBF_11]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_LDA_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_LDA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_LDA_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_LDA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_LDA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD1_LDA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_0]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD1_LDA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD1_LDA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD1_LDA_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD1_LDA_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_0]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD1_LDA_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD1_LDA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_LDA_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_LDA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_LDA_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_LDA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_LDA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD1_LDA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_1]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD1_LDA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD1_LDA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD1_LDA_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD1_LDA_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_1]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD1_LDA_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD1_LDA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_LDA_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_LDA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_LDA_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_LDA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_LDA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD1_LDA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_2]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD1_LDA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD1_LDA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD1_LDA_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD1_LDA_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_2]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD1_LDA_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD1_LDA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_LDA_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_LDA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_LDA_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_LDA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_LDA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD1_LDA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_3]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD1_LDA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD1_LDA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD1_LDA_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD1_LDA_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_3]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD1_LDA_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD1_LDA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_LDA_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_STA_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_STA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_STA_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_STA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_STA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD1_STA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_0]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD1_STA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD1_STA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD1_STA_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD1_STA_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_0]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD1_STA_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD1_STA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_STA_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_STA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_STA_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_STA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_STA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD1_STA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_1]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD1_STA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD1_STA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD1_STA_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD1_STA_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_1]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD1_STA_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD1_STA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_STA_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_STA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_STA_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_STA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_STA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD1_STA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_2]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD1_STA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD1_STA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD1_STA_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD1_STA_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_2]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD1_STA_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD1_STA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_STA_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_STA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_STA_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD1_STA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD1_STA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD1_STA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_3]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD1_STA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD1_STA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD1_STA_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD1_STA_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_3]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD1_STA_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD1_STA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD1_STA_3]

//>> PREP_[CS_SM2_MCP_MISC_DEBUG0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_MCP_MISC_DEBUG0_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_DEBUG0_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_MCP_MISC_DEBUG0_CONFIG]

//>> GET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_MCP_MISC_DEBUG0_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_DEBUG0_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM2_MCP_MISC_DEBUG0_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG]

//>> PUT_[CS_SM2_MCP_MISC_DEBUG0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_MCP_MISC_DEBUG0_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG0_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM2_MCP_MISC_DEBUG0_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_MCP_MISC_DEBUG0_CONFIG]


//>> SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD0,
           CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD0]

//>> SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD0,
           CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD0]

//>> GET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD0,
           CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD0]

//>> SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD1,
           CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD1]

//>> SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD1,
           CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD1]

//>> GET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD1,
           CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD1]

//>> SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD2,
           CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD2]

//>> SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD2,
           CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD2]

//>> GET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD2,
           CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD2]

//>> SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD3,
           CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD3]

//>> SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD3,
           CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD3]

//>> GET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD3,
           CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD3]

//>> SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD4,
           CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD4]

//>> SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD4,
           CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD4]

//>> GET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD4,
           CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD4]

//>> SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD5,
           CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD5]

//>> SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD5,
           CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD5]

//>> GET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD5,
           CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD5]

//>> SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD6,
           CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD6]

//>> SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD6,
           CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD6]

//>> GET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD6,
           CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD6]

//>> SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD7,
           CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD7]

//>> SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD7,
           CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD7]

//>> GET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD7,
           CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD7]

//>> SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD8,
           CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD8]

//>> SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD8,
           CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD8]

//>> GET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD8,
           CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD8_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD8]

//>> SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD9,
           CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD9]

//>> SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD9,
           CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD9]

//>> GET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD9,
           CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD9]

//>> SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD10,
           CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD10]

//>> SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD10,
           CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD10]

//>> GET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD10,
           CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_POD10]

//>> SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG0_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG0_CONFIG_RESERVED1,
           CS_SM2_MCP_MISC_DEBUG0_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG0_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_RESERVED1]

//>> SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG0_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG0_CONFIG_RESERVED1,
           CS_SM2_MCP_MISC_DEBUG0_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG0_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_RESERVED1]

//>> GET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_DEBUG0_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_DEBUG0_CONFIG_RESERVED1,
           CS_SM2_MCP_MISC_DEBUG0_CONFIG_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG0_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_RESERVED1]

//>> SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG0_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_ACT]

//>> SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG0_CONFIG_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG0_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_ACT]

//>> SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_DEBUG0_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_ACT]

//>> CLEAR_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_DEBUG0_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_ACT]

//>> GET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_DEBUG0_CONFIG_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_ACT]

//>> GET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_ACT]
static inline bool GET_CS_SM2_MCP_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_DEBUG0_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_DEBUG0_CONFIG_ACT]

//>> PREP_[CS_SM2_SNP_MISC_CERR_MASK0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_SNP_MISC_CERR_MASK0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_CERR_MASK0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_SNP_MISC_CERR_MASK0]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_SNP_MISC_CERR_MASK0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_CERR_MASK0;
#endif
    return fapi2::getScom(i_target, CS_SM2_SNP_MISC_CERR_MASK0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0]

//>> PUT_[CS_SM2_SNP_MISC_CERR_MASK0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_SNP_MISC_CERR_MASK0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return fapi2::putScom(i_target, CS_SM2_SNP_MISC_CERR_MASK0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_SNP_MISC_CERR_MASK0]


//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NCF_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NCF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_0]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NCF_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NCF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_0]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NCF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_NCF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_0]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_NCF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_NCF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_0]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_NCF_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_NCF_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_0]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_0]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_NCF_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_NCF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_0]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NCF_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NCF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_1]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NCF_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NCF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_1]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NCF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_NCF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_1]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_NCF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_NCF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_1]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_NCF_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_NCF_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_1]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_1]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_NCF_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_NCF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_1]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NCF_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NCF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_2]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NCF_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NCF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_2]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NCF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_NCF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_2]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_NCF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_NCF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_2]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_NCF_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_NCF_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_2]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_2]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_NCF_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_NCF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_2]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NCF_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NCF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_3]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NCF_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NCF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_3]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NCF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_NCF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_3]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_NCF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_NCF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_3]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_NCF_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_NCF_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_3]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_3]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_NCF_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_NCF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_3]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NCF_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NCF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_4]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NCF_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NCF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_4]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NCF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_NCF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_4]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_NCF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_NCF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_4]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_NCF_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_NCF_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_4]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_4]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_NCF_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_NCF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_4]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NCF_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NCF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_5]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NCF_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NCF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_5]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NCF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_NCF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_5]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_NCF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_NCF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_5]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_NCF_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_NCF_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_5]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_5]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_NCF_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_NCF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_5]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NCF_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NCF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_6]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NCF_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NCF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_6]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NCF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_NCF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_6]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_NCF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_NCF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_6]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_NCF_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_NCF_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_6]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_6]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_NCF_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_NCF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_6]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NCF_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NCF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_7]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NCF_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NCF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_7]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NCF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_NCF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_7]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_NCF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_NCF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_7]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_NCF_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_NCF_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_7]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_7]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_NCF_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_NCF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NCF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NCF_7]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBR_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_0]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBR_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_0]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_0]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_PBR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_0]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_PBR_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_PBR_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_0]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_0]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_PBR_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_0]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBR_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_1]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBR_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_1]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_1]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_PBR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_1]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_PBR_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_PBR_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_1]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_1]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_PBR_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_1]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBR_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_2]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBR_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_2]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_2]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_PBR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_2]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_PBR_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_PBR_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_2]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_2]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_PBR_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_2]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBR_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_3]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBR_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_3]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_3]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_PBR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_3]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_PBR_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_PBR_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_3]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_3]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_PBR_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_3]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBR_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_4]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBR_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_4]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_4]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_PBR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_4]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_PBR_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_PBR_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_4]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_4]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_PBR_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_4]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBR_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_5]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBR_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_5]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_5]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_PBR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_5]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_PBR_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_PBR_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_5]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_5]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_PBR_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_5]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBR_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_6]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBR_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_6]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_6]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_PBR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_6]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_PBR_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_PBR_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_6]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_6]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_PBR_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_6]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBR_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_7]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBR_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_7]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_7]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_PBR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_7]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_PBR_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_PBR_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_7]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_7]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_PBR_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBR_7]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBP_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBP_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_0]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBP_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBP_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_0]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBP_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_PBP_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_0]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_PBP_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_PBP_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_0]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_PBP_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_PBP_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_0]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_0]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_PBP_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_PBP_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_0]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBP_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBP_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_1]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBP_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBP_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_1]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBP_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_PBP_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_1]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_PBP_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_PBP_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_1]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_PBP_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_PBP_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_1]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_1]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_PBP_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_PBP_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_1]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBP_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBP_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_2]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBP_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBP_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_2]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBP_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_PBP_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_2]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_PBP_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_PBP_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_2]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_PBP_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_PBP_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_2]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_2]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_PBP_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_PBP_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_2]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBP_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBP_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_3]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBP_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBP_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_3]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBP_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_PBP_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_3]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_PBP_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_PBP_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_3]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_PBP_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_PBP_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_3]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_3]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_PBP_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_PBP_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_3]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBP_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBP_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_4]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBP_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBP_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_4]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBP_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_PBP_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_4]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_PBP_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_PBP_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_4]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_PBP_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_PBP_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_4]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_4]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_PBP_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_PBP_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_4]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBP_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBP_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_5]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBP_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBP_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_5]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBP_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_PBP_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_5]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_PBP_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_PBP_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_5]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_PBP_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_PBP_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_5]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_5]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_PBP_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_PBP_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_5]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBP_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBP_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_6]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBP_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBP_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_6]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBP_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_PBP_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_6]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_PBP_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_PBP_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_6]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_PBP_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_PBP_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_6]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_6]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_PBP_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_PBP_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_6]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBP_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBP_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_7]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBP_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBP_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_7]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBP_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_PBP_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_7]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_PBP_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_PBP_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_7]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_PBP_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_PBP_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_7]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_7]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_PBP_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_PBP_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBP_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBP_7]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBC_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_0]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBC_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_0]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_PBC_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_0]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_PBC_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_PBC_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_0]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_PBC_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_0]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_0]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_PBC_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_0]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBC_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_1]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBC_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_1]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_PBC_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_1]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_PBC_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_PBC_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_1]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_PBC_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_1]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_1]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_PBC_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_1]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBC_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_2]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBC_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_2]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_PBC_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_2]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_PBC_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_PBC_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_2]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_PBC_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_2]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_2]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_PBC_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_2]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBC_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_3]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBC_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_3]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_PBC_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_3]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_PBC_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_PBC_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_3]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_PBC_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_3]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_3]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_PBC_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_3]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBC_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_4]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBC_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_4]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_PBC_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_4]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_PBC_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_PBC_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_4]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_PBC_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_4]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_4]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_PBC_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_4]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBC_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_5]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBC_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_5]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_PBC_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_5]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_PBC_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_PBC_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_5]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_PBC_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_5]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_5]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_PBC_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_5]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBC_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_6]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBC_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_6]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_PBC_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_6]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_PBC_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_PBC_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_6]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_PBC_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_6]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_6]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_PBC_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_6]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBC_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_7]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBC_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_7]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_PBC_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_7]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_PBC_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_PBC_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_7]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_PBC_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_7]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_7]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_PBC_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_7]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBC_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_8]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBC_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_8]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_PBC_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_8]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_PBC_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_PBC_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_8]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_PBC_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_8]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_8]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_PBC_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_8]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBC_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_9]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBC_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_9]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_PBC_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_9]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_PBC_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_PBC_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_9]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_PBC_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_9]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_9]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_PBC_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_9]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBC_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_10]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBC_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_10]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_PBC_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_10]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_PBC_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_PBC_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_10]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_PBC_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_10]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_10]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_PBC_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_10]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBC_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_11]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBC_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_11]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_PBC_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_11]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_PBC_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_PBC_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_11]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_PBC_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_11]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_11]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_PBC_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_PBC_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBC_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBC_11]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_0]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_0]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_0]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_NLG_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_0]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_0]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_0]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_0]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_1]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_1]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_1]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_NLG_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_1]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_1]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_1]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_1]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_2]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_2]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_2]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_NLG_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_2]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_2]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_2]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_2]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_3]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_3]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_3]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_NLG_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_3]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_3]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_3]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_3]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_4]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_4]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_4]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_NLG_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_4]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_4]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_4]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_4]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_5]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_5]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_5]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_NLG_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_5]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_5]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_5]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_5]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_6]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_6]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_6]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_NLG_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_6]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_6]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_6]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_6]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_7]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_7]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_7]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_NLG_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_7]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_7]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_7]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_7]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_8]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_8]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_8]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_NLG_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_8]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_8]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_8]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_8]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_9]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_9]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_9]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_NLG_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_9]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_9]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_9]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_9]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_10]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_10]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_10]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_NLG_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_10]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_10]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_10]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_10]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_11]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_11]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_11]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_NLG_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_11]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_11]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_11]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_11]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_12]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_12]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_12]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_NLG_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_12]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_12]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_12]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_12]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_13]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_13]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_13]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_13]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_NLG_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_13]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_13]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_13]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_13]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_13]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_14]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_14]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_14]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_14]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_NLG_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_14]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_14]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_14]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_14]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_14]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_15]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_15]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_15]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_15]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_NLG_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_15]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_15]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_15]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_15]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_15]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_16]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_16]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_16]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_16]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_NLG_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_16]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_16]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_16]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_16]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_16]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_17]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_17]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_17]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_17]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_NLG_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_17]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_17]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_17]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_17]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_17]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_18]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_18]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_18]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_18]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_NLG_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_18]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_18]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_18]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_18]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_18]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_19]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_19]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_19]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_19]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_NLG_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_19]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_19]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_19]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_19]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_19]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_20(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_20]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_20(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_20]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_20]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_20]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_NLG_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_20]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_20]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_20(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_20,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_20]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_20]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_20(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_20]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_21(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_21]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_21(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_21]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_21]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_21]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_NLG_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_21]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_21]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_21(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_21,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_21]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_21]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_21(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_21]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_22(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_22]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_22(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_22]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_22]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_22]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_NLG_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_22]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_22]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_22(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_22,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_22]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_22]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_22(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_22]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_23]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_23]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_23]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_23]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_NLG_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_23]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_23]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_NLG_23,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_23]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_23]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_NLG_23(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_NLG_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_NLG_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_NLG_23]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBF_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_0]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBF_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_0]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_0]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_PBF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_0]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_PBF_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_PBF_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_0]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_0]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_PBF_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_0]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBF_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_1]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBF_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_1]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_1]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_PBF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_1]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_PBF_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_PBF_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_1]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_1]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_PBF_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_1]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBF_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_2]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBF_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_2]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_2]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_PBF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_2]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_PBF_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_PBF_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_2]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_2]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_PBF_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_2]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBF_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_3]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBF_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MASK0_PBF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_3]

//>> SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MASK0_PBF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_MASK0_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_3]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_MASK0_PBF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_MASK0_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_3]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MASK0_PBF_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MASK0_PBF_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_3]

//>> GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_3]
static inline bool GET_CS_SM2_SNP_MISC_CERR_MASK0_PBF_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_MASK0_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MASK0_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MASK0_PBF_3]

//>> PREP_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1;
#endif
    return fapi2::getScom(i_target, CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1]

//>> PUT_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return fapi2::putScom(i_target, CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1]


//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_TAG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_TAG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_TAG,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_TAG]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_TAG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_TAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_TAG,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_TAG]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_TAG]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_TAG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_TAG,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_TAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_TAG]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_WREND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_WREND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_WREND,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_WREND]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_WREND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_WREND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_WREND,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_WREND]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_WREND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_WREND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_WREND,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_WREND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC1_WREND]

//>> PREP_[CS_SM2_SNP_MISC_GPU0_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_SNP_MISC_GPU0_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_GPU0_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_SNP_MISC_GPU0_BAR]

//>> GET_[CS_SM2_SNP_MISC_GPU0_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_SNP_MISC_GPU0_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_GPU0_BAR;
#endif
    return fapi2::getScom(i_target, CS_SM2_SNP_MISC_GPU0_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU0_BAR]

//>> PUT_[CS_SM2_SNP_MISC_GPU0_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_SNP_MISC_GPU0_BAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return fapi2::putScom(i_target, CS_SM2_SNP_MISC_GPU0_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_SNP_MISC_GPU0_BAR]


//>> SET_[CS_SM2_SNP_MISC_GPU0_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU0_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU0_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU0_BAR_ENABLE]

//>> SET_[CS_SM2_SNP_MISC_GPU0_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU0_BAR_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU0_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU0_BAR_ENABLE]

//>> SET_[CS_SM2_SNP_MISC_GPU0_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU0_BAR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU0_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU0_BAR_ENABLE]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU0_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU0_BAR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU0_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU0_BAR_ENABLE]

//>> GET_[CS_SM2_SNP_MISC_GPU0_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU0_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU0_BAR_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU0_BAR_ENABLE]

//>> GET_[CS_SM2_SNP_MISC_GPU0_BAR_ENABLE]
static inline bool GET_CS_SM2_SNP_MISC_GPU0_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU0_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU0_BAR_ENABLE]

//>> SET_[CS_SM2_SNP_MISC_GPU0_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU0_BAR_ADDR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU0_BAR_ADDR_MASK,
           CS_SM2_SNP_MISC_GPU0_BAR_ADDR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU0_BAR_ADDR_MASK]

//>> SET_[CS_SM2_SNP_MISC_GPU0_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU0_BAR_ADDR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU0_BAR_ADDR_MASK,
           CS_SM2_SNP_MISC_GPU0_BAR_ADDR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU0_BAR_ADDR_MASK]

//>> GET_[CS_SM2_SNP_MISC_GPU0_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU0_BAR_ADDR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU0_BAR_ADDR_MASK,
           CS_SM2_SNP_MISC_GPU0_BAR_ADDR_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU0_BAR_ADDR_MASK]

//>> SET_[CS_SM2_SNP_MISC_GPU0_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU0_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU0_BAR_SL_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU0_BAR_SL_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU0_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU0_BAR_SL_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU0_BAR_SL_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU0_BAR_SL_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU0_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU0_BAR_SL_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU0_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU0_BAR_SL_MODE]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU0_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU0_BAR_SL_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU0_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU0_BAR_SL_MODE]

//>> GET_[CS_SM2_SNP_MISC_GPU0_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU0_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU0_BAR_SL_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU0_BAR_SL_MODE]

//>> GET_[CS_SM2_SNP_MISC_GPU0_BAR_SL_MODE]
static inline bool GET_CS_SM2_SNP_MISC_GPU0_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU0_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU0_BAR_SL_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU0_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU0_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU0_BAR_4T_LIMIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU0_BAR_4T_LIMIT]

//>> SET_[CS_SM2_SNP_MISC_GPU0_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU0_BAR_4T_LIMIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU0_BAR_4T_LIMIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU0_BAR_4T_LIMIT]

//>> SET_[CS_SM2_SNP_MISC_GPU0_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU0_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU0_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU0_BAR_4T_LIMIT]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU0_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU0_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU0_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU0_BAR_4T_LIMIT]

//>> GET_[CS_SM2_SNP_MISC_GPU0_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU0_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU0_BAR_4T_LIMIT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU0_BAR_4T_LIMIT]

//>> GET_[CS_SM2_SNP_MISC_GPU0_BAR_4T_LIMIT]
static inline bool GET_CS_SM2_SNP_MISC_GPU0_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU0_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU0_BAR_4T_LIMIT]

//>> SET_[CS_SM2_SNP_MISC_GPU0_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU0_BAR_4T_SELECT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU0_BAR_4T_SELECT,
           CS_SM2_SNP_MISC_GPU0_BAR_4T_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU0_BAR_4T_SELECT]

//>> SET_[CS_SM2_SNP_MISC_GPU0_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU0_BAR_4T_SELECT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU0_BAR_4T_SELECT,
           CS_SM2_SNP_MISC_GPU0_BAR_4T_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU0_BAR_4T_SELECT]

//>> GET_[CS_SM2_SNP_MISC_GPU0_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU0_BAR_4T_SELECT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU0_BAR_4T_SELECT,
           CS_SM2_SNP_MISC_GPU0_BAR_4T_SELECT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU0_BAR_4T_SELECT]

//>> SET_[CS_SM2_SNP_MISC_GPU0_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU0_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU0_BAR_MODE,
           CS_SM2_SNP_MISC_GPU0_BAR_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU0_BAR_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU0_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU0_BAR_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU0_BAR_MODE,
           CS_SM2_SNP_MISC_GPU0_BAR_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU0_BAR_MODE]

//>> GET_[CS_SM2_SNP_MISC_GPU0_BAR_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU0_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU0_BAR_MODE,
           CS_SM2_SNP_MISC_GPU0_BAR_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU0_BAR_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU0_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU0_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU0_BAR_GRANULE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU0_BAR_GRANULE]

//>> SET_[CS_SM2_SNP_MISC_GPU0_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU0_BAR_GRANULE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU0_BAR_GRANULE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU0_BAR_GRANULE]

//>> SET_[CS_SM2_SNP_MISC_GPU0_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU0_BAR_GRANULE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU0_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU0_BAR_GRANULE]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU0_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU0_BAR_GRANULE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU0_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU0_BAR_GRANULE]

//>> GET_[CS_SM2_SNP_MISC_GPU0_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU0_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU0_BAR_GRANULE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU0_BAR_GRANULE]

//>> GET_[CS_SM2_SNP_MISC_GPU0_BAR_GRANULE]
static inline bool GET_CS_SM2_SNP_MISC_GPU0_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU0_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU0_BAR_GRANULE]

//>> SET_[CS_SM2_SNP_MISC_GPU0_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU0_BAR_POISON(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU0_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU0_BAR_POISON]

//>> SET_[CS_SM2_SNP_MISC_GPU0_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU0_BAR_POISON(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU0_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU0_BAR_POISON]

//>> SET_[CS_SM2_SNP_MISC_GPU0_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU0_BAR_POISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU0_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU0_BAR_POISON]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU0_BAR_POISON]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU0_BAR_POISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU0_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU0_BAR_POISON]

//>> GET_[CS_SM2_SNP_MISC_GPU0_BAR_POISON]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU0_BAR_POISON(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU0_BAR_POISON,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU0_BAR_POISON]

//>> GET_[CS_SM2_SNP_MISC_GPU0_BAR_POISON]
static inline bool GET_CS_SM2_SNP_MISC_GPU0_BAR_POISON(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU0_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU0_BAR_POISON]

//>> SET_[CS_SM2_SNP_MISC_GPU0_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU0_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU0_BAR_M2MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU0_BAR_M2MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU0_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU0_BAR_M2MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU0_BAR_M2MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU0_BAR_M2MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU0_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU0_BAR_M2MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU0_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU0_BAR_M2MODE]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU0_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU0_BAR_M2MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU0_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU0_BAR_M2MODE]

//>> GET_[CS_SM2_SNP_MISC_GPU0_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU0_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU0_BAR_M2MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU0_BAR_M2MODE]

//>> GET_[CS_SM2_SNP_MISC_GPU0_BAR_M2MODE]
static inline bool GET_CS_SM2_SNP_MISC_GPU0_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU0_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU0_BAR_M2MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]

//>> GET_[CS_SM2_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]

//>> GET_[CS_SM2_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]
static inline bool GET_CS_SM2_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU0_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU0_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU0_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU0_BAR_SECURE_A12]

//>> SET_[CS_SM2_SNP_MISC_GPU0_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU0_BAR_SECURE_A12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU0_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU0_BAR_SECURE_A12]

//>> SET_[CS_SM2_SNP_MISC_GPU0_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU0_BAR_SECURE_A12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU0_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU0_BAR_SECURE_A12]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU0_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU0_BAR_SECURE_A12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU0_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU0_BAR_SECURE_A12]

//>> GET_[CS_SM2_SNP_MISC_GPU0_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU0_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU0_BAR_SECURE_A12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU0_BAR_SECURE_A12]

//>> GET_[CS_SM2_SNP_MISC_GPU0_BAR_SECURE_A12]
static inline bool GET_CS_SM2_SNP_MISC_GPU0_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU0_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU0_BAR_SECURE_A12]

//>> SET_[CS_SM2_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM2_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM2_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]

//>> GET_[CS_SM2_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]

//>> GET_[CS_SM2_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]
static inline bool GET_CS_SM2_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM2_SNP_MISC_GPU0_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU0_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU0_BAR_EXTENDED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU0_BAR_EXTENDED_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU0_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU0_BAR_EXTENDED_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU0_BAR_EXTENDED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU0_BAR_EXTENDED_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU0_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU0_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU0_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU0_BAR_EXTENDED_MODE]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU0_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU0_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU0_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU0_BAR_EXTENDED_MODE]

//>> GET_[CS_SM2_SNP_MISC_GPU0_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU0_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU0_BAR_EXTENDED_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU0_BAR_EXTENDED_MODE]

//>> GET_[CS_SM2_SNP_MISC_GPU0_BAR_EXTENDED_MODE]
static inline bool GET_CS_SM2_SNP_MISC_GPU0_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU0_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU0_BAR_EXTENDED_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU0_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU0_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU0_BAR_RESERVED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU0_BAR_RESERVED]

//>> SET_[CS_SM2_SNP_MISC_GPU0_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU0_BAR_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU0_BAR_RESERVED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU0_BAR_RESERVED]

//>> SET_[CS_SM2_SNP_MISC_GPU0_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU0_BAR_RESERVED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU0_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU0_BAR_RESERVED]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU0_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU0_BAR_RESERVED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU0_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU0_BAR_RESERVED]

//>> GET_[CS_SM2_SNP_MISC_GPU0_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU0_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU0_BAR_RESERVED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU0_BAR_RESERVED]

//>> GET_[CS_SM2_SNP_MISC_GPU0_BAR_RESERVED]
static inline bool GET_CS_SM2_SNP_MISC_GPU0_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU0_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU0_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU0_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU0_BAR_RESERVED]

//>> PREP_[CS_SM2_SNP_MISC_GPU1_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_SNP_MISC_GPU1_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_GPU1_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_SNP_MISC_GPU1_BAR]

//>> GET_[CS_SM2_SNP_MISC_GPU1_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_SNP_MISC_GPU1_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_GPU1_BAR;
#endif
    return fapi2::getScom(i_target, CS_SM2_SNP_MISC_GPU1_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU1_BAR]

//>> PUT_[CS_SM2_SNP_MISC_GPU1_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_SNP_MISC_GPU1_BAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return fapi2::putScom(i_target, CS_SM2_SNP_MISC_GPU1_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_SNP_MISC_GPU1_BAR]


//>> SET_[CS_SM2_SNP_MISC_GPU1_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU1_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU1_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU1_BAR_ENABLE]

//>> SET_[CS_SM2_SNP_MISC_GPU1_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU1_BAR_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU1_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU1_BAR_ENABLE]

//>> SET_[CS_SM2_SNP_MISC_GPU1_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU1_BAR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU1_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU1_BAR_ENABLE]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU1_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU1_BAR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU1_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU1_BAR_ENABLE]

//>> GET_[CS_SM2_SNP_MISC_GPU1_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU1_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU1_BAR_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU1_BAR_ENABLE]

//>> GET_[CS_SM2_SNP_MISC_GPU1_BAR_ENABLE]
static inline bool GET_CS_SM2_SNP_MISC_GPU1_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU1_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU1_BAR_ENABLE]

//>> SET_[CS_SM2_SNP_MISC_GPU1_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU1_BAR_ADDR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU1_BAR_ADDR_MASK,
           CS_SM2_SNP_MISC_GPU1_BAR_ADDR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU1_BAR_ADDR_MASK]

//>> SET_[CS_SM2_SNP_MISC_GPU1_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU1_BAR_ADDR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU1_BAR_ADDR_MASK,
           CS_SM2_SNP_MISC_GPU1_BAR_ADDR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU1_BAR_ADDR_MASK]

//>> GET_[CS_SM2_SNP_MISC_GPU1_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU1_BAR_ADDR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU1_BAR_ADDR_MASK,
           CS_SM2_SNP_MISC_GPU1_BAR_ADDR_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU1_BAR_ADDR_MASK]

//>> SET_[CS_SM2_SNP_MISC_GPU1_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU1_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU1_BAR_SL_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU1_BAR_SL_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU1_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU1_BAR_SL_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU1_BAR_SL_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU1_BAR_SL_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU1_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU1_BAR_SL_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU1_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU1_BAR_SL_MODE]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU1_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU1_BAR_SL_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU1_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU1_BAR_SL_MODE]

//>> GET_[CS_SM2_SNP_MISC_GPU1_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU1_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU1_BAR_SL_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU1_BAR_SL_MODE]

//>> GET_[CS_SM2_SNP_MISC_GPU1_BAR_SL_MODE]
static inline bool GET_CS_SM2_SNP_MISC_GPU1_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU1_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU1_BAR_SL_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU1_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU1_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU1_BAR_4T_LIMIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU1_BAR_4T_LIMIT]

//>> SET_[CS_SM2_SNP_MISC_GPU1_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU1_BAR_4T_LIMIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU1_BAR_4T_LIMIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU1_BAR_4T_LIMIT]

//>> SET_[CS_SM2_SNP_MISC_GPU1_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU1_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU1_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU1_BAR_4T_LIMIT]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU1_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU1_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU1_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU1_BAR_4T_LIMIT]

//>> GET_[CS_SM2_SNP_MISC_GPU1_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU1_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU1_BAR_4T_LIMIT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU1_BAR_4T_LIMIT]

//>> GET_[CS_SM2_SNP_MISC_GPU1_BAR_4T_LIMIT]
static inline bool GET_CS_SM2_SNP_MISC_GPU1_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU1_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU1_BAR_4T_LIMIT]

//>> SET_[CS_SM2_SNP_MISC_GPU1_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU1_BAR_4T_SELECT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU1_BAR_4T_SELECT,
           CS_SM2_SNP_MISC_GPU1_BAR_4T_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU1_BAR_4T_SELECT]

//>> SET_[CS_SM2_SNP_MISC_GPU1_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU1_BAR_4T_SELECT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU1_BAR_4T_SELECT,
           CS_SM2_SNP_MISC_GPU1_BAR_4T_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU1_BAR_4T_SELECT]

//>> GET_[CS_SM2_SNP_MISC_GPU1_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU1_BAR_4T_SELECT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU1_BAR_4T_SELECT,
           CS_SM2_SNP_MISC_GPU1_BAR_4T_SELECT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU1_BAR_4T_SELECT]

//>> SET_[CS_SM2_SNP_MISC_GPU1_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU1_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU1_BAR_MODE,
           CS_SM2_SNP_MISC_GPU1_BAR_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU1_BAR_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU1_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU1_BAR_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU1_BAR_MODE,
           CS_SM2_SNP_MISC_GPU1_BAR_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU1_BAR_MODE]

//>> GET_[CS_SM2_SNP_MISC_GPU1_BAR_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU1_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU1_BAR_MODE,
           CS_SM2_SNP_MISC_GPU1_BAR_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU1_BAR_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU1_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU1_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU1_BAR_GRANULE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU1_BAR_GRANULE]

//>> SET_[CS_SM2_SNP_MISC_GPU1_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU1_BAR_GRANULE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU1_BAR_GRANULE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU1_BAR_GRANULE]

//>> SET_[CS_SM2_SNP_MISC_GPU1_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU1_BAR_GRANULE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU1_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU1_BAR_GRANULE]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU1_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU1_BAR_GRANULE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU1_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU1_BAR_GRANULE]

//>> GET_[CS_SM2_SNP_MISC_GPU1_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU1_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU1_BAR_GRANULE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU1_BAR_GRANULE]

//>> GET_[CS_SM2_SNP_MISC_GPU1_BAR_GRANULE]
static inline bool GET_CS_SM2_SNP_MISC_GPU1_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU1_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU1_BAR_GRANULE]

//>> SET_[CS_SM2_SNP_MISC_GPU1_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU1_BAR_POISON(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU1_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU1_BAR_POISON]

//>> SET_[CS_SM2_SNP_MISC_GPU1_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU1_BAR_POISON(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU1_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU1_BAR_POISON]

//>> SET_[CS_SM2_SNP_MISC_GPU1_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU1_BAR_POISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU1_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU1_BAR_POISON]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU1_BAR_POISON]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU1_BAR_POISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU1_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU1_BAR_POISON]

//>> GET_[CS_SM2_SNP_MISC_GPU1_BAR_POISON]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU1_BAR_POISON(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU1_BAR_POISON,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU1_BAR_POISON]

//>> GET_[CS_SM2_SNP_MISC_GPU1_BAR_POISON]
static inline bool GET_CS_SM2_SNP_MISC_GPU1_BAR_POISON(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU1_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU1_BAR_POISON]

//>> SET_[CS_SM2_SNP_MISC_GPU1_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU1_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU1_BAR_M2MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU1_BAR_M2MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU1_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU1_BAR_M2MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU1_BAR_M2MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU1_BAR_M2MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU1_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU1_BAR_M2MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU1_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU1_BAR_M2MODE]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU1_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU1_BAR_M2MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU1_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU1_BAR_M2MODE]

//>> GET_[CS_SM2_SNP_MISC_GPU1_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU1_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU1_BAR_M2MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU1_BAR_M2MODE]

//>> GET_[CS_SM2_SNP_MISC_GPU1_BAR_M2MODE]
static inline bool GET_CS_SM2_SNP_MISC_GPU1_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU1_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU1_BAR_M2MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]

//>> GET_[CS_SM2_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]

//>> GET_[CS_SM2_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]
static inline bool GET_CS_SM2_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU1_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU1_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU1_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU1_BAR_SECURE_A12]

//>> SET_[CS_SM2_SNP_MISC_GPU1_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU1_BAR_SECURE_A12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU1_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU1_BAR_SECURE_A12]

//>> SET_[CS_SM2_SNP_MISC_GPU1_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU1_BAR_SECURE_A12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU1_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU1_BAR_SECURE_A12]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU1_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU1_BAR_SECURE_A12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU1_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU1_BAR_SECURE_A12]

//>> GET_[CS_SM2_SNP_MISC_GPU1_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU1_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU1_BAR_SECURE_A12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU1_BAR_SECURE_A12]

//>> GET_[CS_SM2_SNP_MISC_GPU1_BAR_SECURE_A12]
static inline bool GET_CS_SM2_SNP_MISC_GPU1_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU1_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU1_BAR_SECURE_A12]

//>> SET_[CS_SM2_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM2_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM2_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]

//>> GET_[CS_SM2_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]

//>> GET_[CS_SM2_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]
static inline bool GET_CS_SM2_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM2_SNP_MISC_GPU1_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU1_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU1_BAR_EXTENDED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU1_BAR_EXTENDED_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU1_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU1_BAR_EXTENDED_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU1_BAR_EXTENDED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU1_BAR_EXTENDED_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU1_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU1_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU1_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU1_BAR_EXTENDED_MODE]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU1_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU1_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU1_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU1_BAR_EXTENDED_MODE]

//>> GET_[CS_SM2_SNP_MISC_GPU1_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU1_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU1_BAR_EXTENDED_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU1_BAR_EXTENDED_MODE]

//>> GET_[CS_SM2_SNP_MISC_GPU1_BAR_EXTENDED_MODE]
static inline bool GET_CS_SM2_SNP_MISC_GPU1_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU1_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU1_BAR_EXTENDED_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU1_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU1_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU1_BAR_RESERVED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU1_BAR_RESERVED]

//>> SET_[CS_SM2_SNP_MISC_GPU1_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU1_BAR_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU1_BAR_RESERVED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU1_BAR_RESERVED]

//>> SET_[CS_SM2_SNP_MISC_GPU1_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU1_BAR_RESERVED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU1_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU1_BAR_RESERVED]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU1_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU1_BAR_RESERVED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU1_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU1_BAR_RESERVED]

//>> GET_[CS_SM2_SNP_MISC_GPU1_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU1_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU1_BAR_RESERVED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU1_BAR_RESERVED]

//>> GET_[CS_SM2_SNP_MISC_GPU1_BAR_RESERVED]
static inline bool GET_CS_SM2_SNP_MISC_GPU1_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU1_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU1_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU1_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU1_BAR_RESERVED]

//>> PREP_[CS_SM2_SNP_MISC_GPU2_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_SNP_MISC_GPU2_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_GPU2_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_SNP_MISC_GPU2_BAR]

//>> GET_[CS_SM2_SNP_MISC_GPU2_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_SNP_MISC_GPU2_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_GPU2_BAR;
#endif
    return fapi2::getScom(i_target, CS_SM2_SNP_MISC_GPU2_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU2_BAR]

//>> PUT_[CS_SM2_SNP_MISC_GPU2_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_SNP_MISC_GPU2_BAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return fapi2::putScom(i_target, CS_SM2_SNP_MISC_GPU2_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_SNP_MISC_GPU2_BAR]


//>> SET_[CS_SM2_SNP_MISC_GPU2_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU2_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU2_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU2_BAR_ENABLE]

//>> SET_[CS_SM2_SNP_MISC_GPU2_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU2_BAR_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU2_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU2_BAR_ENABLE]

//>> SET_[CS_SM2_SNP_MISC_GPU2_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU2_BAR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU2_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU2_BAR_ENABLE]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU2_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU2_BAR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU2_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU2_BAR_ENABLE]

//>> GET_[CS_SM2_SNP_MISC_GPU2_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU2_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU2_BAR_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU2_BAR_ENABLE]

//>> GET_[CS_SM2_SNP_MISC_GPU2_BAR_ENABLE]
static inline bool GET_CS_SM2_SNP_MISC_GPU2_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU2_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU2_BAR_ENABLE]

//>> SET_[CS_SM2_SNP_MISC_GPU2_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU2_BAR_ADDR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU2_BAR_ADDR_MASK,
           CS_SM2_SNP_MISC_GPU2_BAR_ADDR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU2_BAR_ADDR_MASK]

//>> SET_[CS_SM2_SNP_MISC_GPU2_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU2_BAR_ADDR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU2_BAR_ADDR_MASK,
           CS_SM2_SNP_MISC_GPU2_BAR_ADDR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU2_BAR_ADDR_MASK]

//>> GET_[CS_SM2_SNP_MISC_GPU2_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU2_BAR_ADDR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU2_BAR_ADDR_MASK,
           CS_SM2_SNP_MISC_GPU2_BAR_ADDR_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU2_BAR_ADDR_MASK]

//>> SET_[CS_SM2_SNP_MISC_GPU2_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU2_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU2_BAR_SL_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU2_BAR_SL_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU2_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU2_BAR_SL_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU2_BAR_SL_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU2_BAR_SL_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU2_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU2_BAR_SL_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU2_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU2_BAR_SL_MODE]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU2_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU2_BAR_SL_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU2_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU2_BAR_SL_MODE]

//>> GET_[CS_SM2_SNP_MISC_GPU2_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU2_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU2_BAR_SL_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU2_BAR_SL_MODE]

//>> GET_[CS_SM2_SNP_MISC_GPU2_BAR_SL_MODE]
static inline bool GET_CS_SM2_SNP_MISC_GPU2_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU2_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU2_BAR_SL_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU2_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU2_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU2_BAR_4T_LIMIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU2_BAR_4T_LIMIT]

//>> SET_[CS_SM2_SNP_MISC_GPU2_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU2_BAR_4T_LIMIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU2_BAR_4T_LIMIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU2_BAR_4T_LIMIT]

//>> SET_[CS_SM2_SNP_MISC_GPU2_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU2_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU2_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU2_BAR_4T_LIMIT]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU2_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU2_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU2_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU2_BAR_4T_LIMIT]

//>> GET_[CS_SM2_SNP_MISC_GPU2_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU2_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU2_BAR_4T_LIMIT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU2_BAR_4T_LIMIT]

//>> GET_[CS_SM2_SNP_MISC_GPU2_BAR_4T_LIMIT]
static inline bool GET_CS_SM2_SNP_MISC_GPU2_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU2_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU2_BAR_4T_LIMIT]

//>> SET_[CS_SM2_SNP_MISC_GPU2_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU2_BAR_4T_SELECT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU2_BAR_4T_SELECT,
           CS_SM2_SNP_MISC_GPU2_BAR_4T_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU2_BAR_4T_SELECT]

//>> SET_[CS_SM2_SNP_MISC_GPU2_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU2_BAR_4T_SELECT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU2_BAR_4T_SELECT,
           CS_SM2_SNP_MISC_GPU2_BAR_4T_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU2_BAR_4T_SELECT]

//>> GET_[CS_SM2_SNP_MISC_GPU2_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU2_BAR_4T_SELECT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU2_BAR_4T_SELECT,
           CS_SM2_SNP_MISC_GPU2_BAR_4T_SELECT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU2_BAR_4T_SELECT]

//>> SET_[CS_SM2_SNP_MISC_GPU2_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU2_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU2_BAR_MODE,
           CS_SM2_SNP_MISC_GPU2_BAR_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU2_BAR_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU2_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU2_BAR_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU2_BAR_MODE,
           CS_SM2_SNP_MISC_GPU2_BAR_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU2_BAR_MODE]

//>> GET_[CS_SM2_SNP_MISC_GPU2_BAR_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU2_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU2_BAR_MODE,
           CS_SM2_SNP_MISC_GPU2_BAR_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU2_BAR_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU2_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU2_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU2_BAR_GRANULE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU2_BAR_GRANULE]

//>> SET_[CS_SM2_SNP_MISC_GPU2_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU2_BAR_GRANULE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU2_BAR_GRANULE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU2_BAR_GRANULE]

//>> SET_[CS_SM2_SNP_MISC_GPU2_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU2_BAR_GRANULE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU2_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU2_BAR_GRANULE]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU2_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU2_BAR_GRANULE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU2_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU2_BAR_GRANULE]

//>> GET_[CS_SM2_SNP_MISC_GPU2_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU2_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU2_BAR_GRANULE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU2_BAR_GRANULE]

//>> GET_[CS_SM2_SNP_MISC_GPU2_BAR_GRANULE]
static inline bool GET_CS_SM2_SNP_MISC_GPU2_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU2_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU2_BAR_GRANULE]

//>> SET_[CS_SM2_SNP_MISC_GPU2_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU2_BAR_POISON(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU2_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU2_BAR_POISON]

//>> SET_[CS_SM2_SNP_MISC_GPU2_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU2_BAR_POISON(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU2_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU2_BAR_POISON]

//>> SET_[CS_SM2_SNP_MISC_GPU2_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU2_BAR_POISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU2_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU2_BAR_POISON]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU2_BAR_POISON]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU2_BAR_POISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU2_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU2_BAR_POISON]

//>> GET_[CS_SM2_SNP_MISC_GPU2_BAR_POISON]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU2_BAR_POISON(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU2_BAR_POISON,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU2_BAR_POISON]

//>> GET_[CS_SM2_SNP_MISC_GPU2_BAR_POISON]
static inline bool GET_CS_SM2_SNP_MISC_GPU2_BAR_POISON(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU2_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU2_BAR_POISON]

//>> SET_[CS_SM2_SNP_MISC_GPU2_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU2_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU2_BAR_M2MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU2_BAR_M2MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU2_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU2_BAR_M2MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU2_BAR_M2MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU2_BAR_M2MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU2_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU2_BAR_M2MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU2_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU2_BAR_M2MODE]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU2_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU2_BAR_M2MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU2_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU2_BAR_M2MODE]

//>> GET_[CS_SM2_SNP_MISC_GPU2_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU2_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU2_BAR_M2MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU2_BAR_M2MODE]

//>> GET_[CS_SM2_SNP_MISC_GPU2_BAR_M2MODE]
static inline bool GET_CS_SM2_SNP_MISC_GPU2_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU2_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU2_BAR_M2MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]

//>> GET_[CS_SM2_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]

//>> GET_[CS_SM2_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]
static inline bool GET_CS_SM2_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU2_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU2_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU2_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU2_BAR_SECURE_A12]

//>> SET_[CS_SM2_SNP_MISC_GPU2_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU2_BAR_SECURE_A12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU2_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU2_BAR_SECURE_A12]

//>> SET_[CS_SM2_SNP_MISC_GPU2_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU2_BAR_SECURE_A12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU2_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU2_BAR_SECURE_A12]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU2_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU2_BAR_SECURE_A12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU2_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU2_BAR_SECURE_A12]

//>> GET_[CS_SM2_SNP_MISC_GPU2_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU2_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU2_BAR_SECURE_A12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU2_BAR_SECURE_A12]

//>> GET_[CS_SM2_SNP_MISC_GPU2_BAR_SECURE_A12]
static inline bool GET_CS_SM2_SNP_MISC_GPU2_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU2_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU2_BAR_SECURE_A12]

//>> SET_[CS_SM2_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM2_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM2_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]

//>> GET_[CS_SM2_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]

//>> GET_[CS_SM2_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]
static inline bool GET_CS_SM2_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM2_SNP_MISC_GPU2_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU2_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU2_BAR_EXTENDED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU2_BAR_EXTENDED_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU2_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU2_BAR_EXTENDED_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU2_BAR_EXTENDED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU2_BAR_EXTENDED_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU2_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU2_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU2_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU2_BAR_EXTENDED_MODE]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU2_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU2_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU2_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU2_BAR_EXTENDED_MODE]

//>> GET_[CS_SM2_SNP_MISC_GPU2_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU2_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU2_BAR_EXTENDED_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU2_BAR_EXTENDED_MODE]

//>> GET_[CS_SM2_SNP_MISC_GPU2_BAR_EXTENDED_MODE]
static inline bool GET_CS_SM2_SNP_MISC_GPU2_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU2_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU2_BAR_EXTENDED_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU2_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU2_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU2_BAR_RESERVED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU2_BAR_RESERVED]

//>> SET_[CS_SM2_SNP_MISC_GPU2_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU2_BAR_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU2_BAR_RESERVED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU2_BAR_RESERVED]

//>> SET_[CS_SM2_SNP_MISC_GPU2_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU2_BAR_RESERVED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU2_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU2_BAR_RESERVED]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU2_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU2_BAR_RESERVED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU2_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU2_BAR_RESERVED]

//>> GET_[CS_SM2_SNP_MISC_GPU2_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU2_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU2_BAR_RESERVED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU2_BAR_RESERVED]

//>> GET_[CS_SM2_SNP_MISC_GPU2_BAR_RESERVED]
static inline bool GET_CS_SM2_SNP_MISC_GPU2_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU2_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU2_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU2_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU2_BAR_RESERVED]

//>> PREP_[CS_SM2_SNP_MISC_GPU3_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_SNP_MISC_GPU3_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_GPU3_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_SNP_MISC_GPU3_BAR]

//>> GET_[CS_SM2_SNP_MISC_GPU3_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_SNP_MISC_GPU3_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_GPU3_BAR;
#endif
    return fapi2::getScom(i_target, CS_SM2_SNP_MISC_GPU3_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU3_BAR]

//>> PUT_[CS_SM2_SNP_MISC_GPU3_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_SNP_MISC_GPU3_BAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return fapi2::putScom(i_target, CS_SM2_SNP_MISC_GPU3_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_SNP_MISC_GPU3_BAR]


//>> SET_[CS_SM2_SNP_MISC_GPU3_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU3_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU3_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU3_BAR_ENABLE]

//>> SET_[CS_SM2_SNP_MISC_GPU3_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU3_BAR_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU3_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU3_BAR_ENABLE]

//>> SET_[CS_SM2_SNP_MISC_GPU3_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU3_BAR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU3_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU3_BAR_ENABLE]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU3_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU3_BAR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU3_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU3_BAR_ENABLE]

//>> GET_[CS_SM2_SNP_MISC_GPU3_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU3_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU3_BAR_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU3_BAR_ENABLE]

//>> GET_[CS_SM2_SNP_MISC_GPU3_BAR_ENABLE]
static inline bool GET_CS_SM2_SNP_MISC_GPU3_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU3_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU3_BAR_ENABLE]

//>> SET_[CS_SM2_SNP_MISC_GPU3_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU3_BAR_ADDR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU3_BAR_ADDR_MASK,
           CS_SM2_SNP_MISC_GPU3_BAR_ADDR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU3_BAR_ADDR_MASK]

//>> SET_[CS_SM2_SNP_MISC_GPU3_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU3_BAR_ADDR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU3_BAR_ADDR_MASK,
           CS_SM2_SNP_MISC_GPU3_BAR_ADDR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU3_BAR_ADDR_MASK]

//>> GET_[CS_SM2_SNP_MISC_GPU3_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU3_BAR_ADDR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU3_BAR_ADDR_MASK,
           CS_SM2_SNP_MISC_GPU3_BAR_ADDR_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU3_BAR_ADDR_MASK]

//>> SET_[CS_SM2_SNP_MISC_GPU3_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU3_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU3_BAR_SL_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU3_BAR_SL_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU3_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU3_BAR_SL_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU3_BAR_SL_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU3_BAR_SL_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU3_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU3_BAR_SL_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU3_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU3_BAR_SL_MODE]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU3_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU3_BAR_SL_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU3_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU3_BAR_SL_MODE]

//>> GET_[CS_SM2_SNP_MISC_GPU3_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU3_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU3_BAR_SL_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU3_BAR_SL_MODE]

//>> GET_[CS_SM2_SNP_MISC_GPU3_BAR_SL_MODE]
static inline bool GET_CS_SM2_SNP_MISC_GPU3_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU3_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU3_BAR_SL_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU3_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU3_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU3_BAR_4T_LIMIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU3_BAR_4T_LIMIT]

//>> SET_[CS_SM2_SNP_MISC_GPU3_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU3_BAR_4T_LIMIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU3_BAR_4T_LIMIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU3_BAR_4T_LIMIT]

//>> SET_[CS_SM2_SNP_MISC_GPU3_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU3_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU3_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU3_BAR_4T_LIMIT]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU3_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU3_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU3_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU3_BAR_4T_LIMIT]

//>> GET_[CS_SM2_SNP_MISC_GPU3_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU3_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU3_BAR_4T_LIMIT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU3_BAR_4T_LIMIT]

//>> GET_[CS_SM2_SNP_MISC_GPU3_BAR_4T_LIMIT]
static inline bool GET_CS_SM2_SNP_MISC_GPU3_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU3_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU3_BAR_4T_LIMIT]

//>> SET_[CS_SM2_SNP_MISC_GPU3_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU3_BAR_4T_SELECT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU3_BAR_4T_SELECT,
           CS_SM2_SNP_MISC_GPU3_BAR_4T_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU3_BAR_4T_SELECT]

//>> SET_[CS_SM2_SNP_MISC_GPU3_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU3_BAR_4T_SELECT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU3_BAR_4T_SELECT,
           CS_SM2_SNP_MISC_GPU3_BAR_4T_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU3_BAR_4T_SELECT]

//>> GET_[CS_SM2_SNP_MISC_GPU3_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU3_BAR_4T_SELECT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU3_BAR_4T_SELECT,
           CS_SM2_SNP_MISC_GPU3_BAR_4T_SELECT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU3_BAR_4T_SELECT]

//>> SET_[CS_SM2_SNP_MISC_GPU3_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU3_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU3_BAR_MODE,
           CS_SM2_SNP_MISC_GPU3_BAR_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU3_BAR_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU3_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU3_BAR_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU3_BAR_MODE,
           CS_SM2_SNP_MISC_GPU3_BAR_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU3_BAR_MODE]

//>> GET_[CS_SM2_SNP_MISC_GPU3_BAR_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU3_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU3_BAR_MODE,
           CS_SM2_SNP_MISC_GPU3_BAR_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU3_BAR_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU3_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU3_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU3_BAR_GRANULE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU3_BAR_GRANULE]

//>> SET_[CS_SM2_SNP_MISC_GPU3_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU3_BAR_GRANULE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU3_BAR_GRANULE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU3_BAR_GRANULE]

//>> SET_[CS_SM2_SNP_MISC_GPU3_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU3_BAR_GRANULE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU3_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU3_BAR_GRANULE]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU3_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU3_BAR_GRANULE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU3_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU3_BAR_GRANULE]

//>> GET_[CS_SM2_SNP_MISC_GPU3_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU3_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU3_BAR_GRANULE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU3_BAR_GRANULE]

//>> GET_[CS_SM2_SNP_MISC_GPU3_BAR_GRANULE]
static inline bool GET_CS_SM2_SNP_MISC_GPU3_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU3_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU3_BAR_GRANULE]

//>> SET_[CS_SM2_SNP_MISC_GPU3_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU3_BAR_POISON(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU3_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU3_BAR_POISON]

//>> SET_[CS_SM2_SNP_MISC_GPU3_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU3_BAR_POISON(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU3_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU3_BAR_POISON]

//>> SET_[CS_SM2_SNP_MISC_GPU3_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU3_BAR_POISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU3_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU3_BAR_POISON]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU3_BAR_POISON]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU3_BAR_POISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU3_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU3_BAR_POISON]

//>> GET_[CS_SM2_SNP_MISC_GPU3_BAR_POISON]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU3_BAR_POISON(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU3_BAR_POISON,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU3_BAR_POISON]

//>> GET_[CS_SM2_SNP_MISC_GPU3_BAR_POISON]
static inline bool GET_CS_SM2_SNP_MISC_GPU3_BAR_POISON(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU3_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU3_BAR_POISON]

//>> SET_[CS_SM2_SNP_MISC_GPU3_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU3_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU3_BAR_M2MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU3_BAR_M2MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU3_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU3_BAR_M2MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU3_BAR_M2MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU3_BAR_M2MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU3_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU3_BAR_M2MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU3_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU3_BAR_M2MODE]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU3_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU3_BAR_M2MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU3_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU3_BAR_M2MODE]

//>> GET_[CS_SM2_SNP_MISC_GPU3_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU3_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU3_BAR_M2MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU3_BAR_M2MODE]

//>> GET_[CS_SM2_SNP_MISC_GPU3_BAR_M2MODE]
static inline bool GET_CS_SM2_SNP_MISC_GPU3_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU3_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU3_BAR_M2MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]

//>> GET_[CS_SM2_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]

//>> GET_[CS_SM2_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]
static inline bool GET_CS_SM2_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU3_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU3_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU3_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU3_BAR_SECURE_A12]

//>> SET_[CS_SM2_SNP_MISC_GPU3_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU3_BAR_SECURE_A12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU3_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU3_BAR_SECURE_A12]

//>> SET_[CS_SM2_SNP_MISC_GPU3_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU3_BAR_SECURE_A12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU3_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU3_BAR_SECURE_A12]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU3_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU3_BAR_SECURE_A12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU3_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU3_BAR_SECURE_A12]

//>> GET_[CS_SM2_SNP_MISC_GPU3_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU3_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU3_BAR_SECURE_A12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU3_BAR_SECURE_A12]

//>> GET_[CS_SM2_SNP_MISC_GPU3_BAR_SECURE_A12]
static inline bool GET_CS_SM2_SNP_MISC_GPU3_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU3_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU3_BAR_SECURE_A12]

//>> SET_[CS_SM2_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM2_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM2_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]

//>> GET_[CS_SM2_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]

//>> GET_[CS_SM2_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]
static inline bool GET_CS_SM2_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM2_SNP_MISC_GPU3_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU3_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU3_BAR_EXTENDED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU3_BAR_EXTENDED_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU3_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU3_BAR_EXTENDED_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU3_BAR_EXTENDED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU3_BAR_EXTENDED_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU3_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU3_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU3_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU3_BAR_EXTENDED_MODE]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU3_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU3_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU3_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU3_BAR_EXTENDED_MODE]

//>> GET_[CS_SM2_SNP_MISC_GPU3_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU3_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU3_BAR_EXTENDED_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU3_BAR_EXTENDED_MODE]

//>> GET_[CS_SM2_SNP_MISC_GPU3_BAR_EXTENDED_MODE]
static inline bool GET_CS_SM2_SNP_MISC_GPU3_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU3_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU3_BAR_EXTENDED_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU3_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU3_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU3_BAR_RESERVED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU3_BAR_RESERVED]

//>> SET_[CS_SM2_SNP_MISC_GPU3_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU3_BAR_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU3_BAR_RESERVED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU3_BAR_RESERVED]

//>> SET_[CS_SM2_SNP_MISC_GPU3_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU3_BAR_RESERVED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU3_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU3_BAR_RESERVED]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU3_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU3_BAR_RESERVED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU3_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU3_BAR_RESERVED]

//>> GET_[CS_SM2_SNP_MISC_GPU3_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU3_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU3_BAR_RESERVED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU3_BAR_RESERVED]

//>> GET_[CS_SM2_SNP_MISC_GPU3_BAR_RESERVED]
static inline bool GET_CS_SM2_SNP_MISC_GPU3_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU3_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU3_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU3_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU3_BAR_RESERVED]

//>> PREP_[CS_SM2_SNP_MISC_GPU4_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_SNP_MISC_GPU4_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_GPU4_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_SNP_MISC_GPU4_BAR]

//>> GET_[CS_SM2_SNP_MISC_GPU4_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_SNP_MISC_GPU4_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_GPU4_BAR;
#endif
    return fapi2::getScom(i_target, CS_SM2_SNP_MISC_GPU4_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU4_BAR]

//>> PUT_[CS_SM2_SNP_MISC_GPU4_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_SNP_MISC_GPU4_BAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return fapi2::putScom(i_target, CS_SM2_SNP_MISC_GPU4_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_SNP_MISC_GPU4_BAR]


//>> SET_[CS_SM2_SNP_MISC_GPU4_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU4_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU4_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU4_BAR_ENABLE]

//>> SET_[CS_SM2_SNP_MISC_GPU4_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU4_BAR_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU4_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU4_BAR_ENABLE]

//>> SET_[CS_SM2_SNP_MISC_GPU4_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU4_BAR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU4_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU4_BAR_ENABLE]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU4_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU4_BAR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU4_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU4_BAR_ENABLE]

//>> GET_[CS_SM2_SNP_MISC_GPU4_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU4_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU4_BAR_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU4_BAR_ENABLE]

//>> GET_[CS_SM2_SNP_MISC_GPU4_BAR_ENABLE]
static inline bool GET_CS_SM2_SNP_MISC_GPU4_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU4_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU4_BAR_ENABLE]

//>> SET_[CS_SM2_SNP_MISC_GPU4_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU4_BAR_ADDR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU4_BAR_ADDR_MASK,
           CS_SM2_SNP_MISC_GPU4_BAR_ADDR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU4_BAR_ADDR_MASK]

//>> SET_[CS_SM2_SNP_MISC_GPU4_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU4_BAR_ADDR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU4_BAR_ADDR_MASK,
           CS_SM2_SNP_MISC_GPU4_BAR_ADDR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU4_BAR_ADDR_MASK]

//>> GET_[CS_SM2_SNP_MISC_GPU4_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU4_BAR_ADDR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU4_BAR_ADDR_MASK,
           CS_SM2_SNP_MISC_GPU4_BAR_ADDR_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU4_BAR_ADDR_MASK]

//>> SET_[CS_SM2_SNP_MISC_GPU4_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU4_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU4_BAR_SL_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU4_BAR_SL_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU4_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU4_BAR_SL_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU4_BAR_SL_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU4_BAR_SL_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU4_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU4_BAR_SL_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU4_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU4_BAR_SL_MODE]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU4_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU4_BAR_SL_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU4_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU4_BAR_SL_MODE]

//>> GET_[CS_SM2_SNP_MISC_GPU4_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU4_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU4_BAR_SL_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU4_BAR_SL_MODE]

//>> GET_[CS_SM2_SNP_MISC_GPU4_BAR_SL_MODE]
static inline bool GET_CS_SM2_SNP_MISC_GPU4_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU4_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU4_BAR_SL_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU4_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU4_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU4_BAR_4T_LIMIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU4_BAR_4T_LIMIT]

//>> SET_[CS_SM2_SNP_MISC_GPU4_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU4_BAR_4T_LIMIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU4_BAR_4T_LIMIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU4_BAR_4T_LIMIT]

//>> SET_[CS_SM2_SNP_MISC_GPU4_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU4_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU4_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU4_BAR_4T_LIMIT]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU4_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU4_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU4_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU4_BAR_4T_LIMIT]

//>> GET_[CS_SM2_SNP_MISC_GPU4_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU4_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU4_BAR_4T_LIMIT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU4_BAR_4T_LIMIT]

//>> GET_[CS_SM2_SNP_MISC_GPU4_BAR_4T_LIMIT]
static inline bool GET_CS_SM2_SNP_MISC_GPU4_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU4_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU4_BAR_4T_LIMIT]

//>> SET_[CS_SM2_SNP_MISC_GPU4_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU4_BAR_4T_SELECT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU4_BAR_4T_SELECT,
           CS_SM2_SNP_MISC_GPU4_BAR_4T_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU4_BAR_4T_SELECT]

//>> SET_[CS_SM2_SNP_MISC_GPU4_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU4_BAR_4T_SELECT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU4_BAR_4T_SELECT,
           CS_SM2_SNP_MISC_GPU4_BAR_4T_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU4_BAR_4T_SELECT]

//>> GET_[CS_SM2_SNP_MISC_GPU4_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU4_BAR_4T_SELECT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU4_BAR_4T_SELECT,
           CS_SM2_SNP_MISC_GPU4_BAR_4T_SELECT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU4_BAR_4T_SELECT]

//>> SET_[CS_SM2_SNP_MISC_GPU4_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU4_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU4_BAR_MODE,
           CS_SM2_SNP_MISC_GPU4_BAR_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU4_BAR_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU4_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU4_BAR_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU4_BAR_MODE,
           CS_SM2_SNP_MISC_GPU4_BAR_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU4_BAR_MODE]

//>> GET_[CS_SM2_SNP_MISC_GPU4_BAR_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU4_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU4_BAR_MODE,
           CS_SM2_SNP_MISC_GPU4_BAR_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU4_BAR_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU4_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU4_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU4_BAR_GRANULE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU4_BAR_GRANULE]

//>> SET_[CS_SM2_SNP_MISC_GPU4_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU4_BAR_GRANULE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU4_BAR_GRANULE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU4_BAR_GRANULE]

//>> SET_[CS_SM2_SNP_MISC_GPU4_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU4_BAR_GRANULE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU4_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU4_BAR_GRANULE]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU4_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU4_BAR_GRANULE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU4_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU4_BAR_GRANULE]

//>> GET_[CS_SM2_SNP_MISC_GPU4_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU4_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU4_BAR_GRANULE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU4_BAR_GRANULE]

//>> GET_[CS_SM2_SNP_MISC_GPU4_BAR_GRANULE]
static inline bool GET_CS_SM2_SNP_MISC_GPU4_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU4_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU4_BAR_GRANULE]

//>> SET_[CS_SM2_SNP_MISC_GPU4_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU4_BAR_POISON(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU4_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU4_BAR_POISON]

//>> SET_[CS_SM2_SNP_MISC_GPU4_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU4_BAR_POISON(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU4_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU4_BAR_POISON]

//>> SET_[CS_SM2_SNP_MISC_GPU4_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU4_BAR_POISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU4_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU4_BAR_POISON]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU4_BAR_POISON]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU4_BAR_POISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU4_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU4_BAR_POISON]

//>> GET_[CS_SM2_SNP_MISC_GPU4_BAR_POISON]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU4_BAR_POISON(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU4_BAR_POISON,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU4_BAR_POISON]

//>> GET_[CS_SM2_SNP_MISC_GPU4_BAR_POISON]
static inline bool GET_CS_SM2_SNP_MISC_GPU4_BAR_POISON(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU4_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU4_BAR_POISON]

//>> SET_[CS_SM2_SNP_MISC_GPU4_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU4_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU4_BAR_M2MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU4_BAR_M2MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU4_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU4_BAR_M2MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU4_BAR_M2MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU4_BAR_M2MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU4_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU4_BAR_M2MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU4_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU4_BAR_M2MODE]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU4_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU4_BAR_M2MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU4_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU4_BAR_M2MODE]

//>> GET_[CS_SM2_SNP_MISC_GPU4_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU4_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU4_BAR_M2MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU4_BAR_M2MODE]

//>> GET_[CS_SM2_SNP_MISC_GPU4_BAR_M2MODE]
static inline bool GET_CS_SM2_SNP_MISC_GPU4_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU4_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU4_BAR_M2MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]

//>> GET_[CS_SM2_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]

//>> GET_[CS_SM2_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]
static inline bool GET_CS_SM2_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU4_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU4_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU4_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU4_BAR_SECURE_A12]

//>> SET_[CS_SM2_SNP_MISC_GPU4_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU4_BAR_SECURE_A12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU4_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU4_BAR_SECURE_A12]

//>> SET_[CS_SM2_SNP_MISC_GPU4_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU4_BAR_SECURE_A12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU4_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU4_BAR_SECURE_A12]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU4_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU4_BAR_SECURE_A12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU4_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU4_BAR_SECURE_A12]

//>> GET_[CS_SM2_SNP_MISC_GPU4_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU4_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU4_BAR_SECURE_A12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU4_BAR_SECURE_A12]

//>> GET_[CS_SM2_SNP_MISC_GPU4_BAR_SECURE_A12]
static inline bool GET_CS_SM2_SNP_MISC_GPU4_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU4_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU4_BAR_SECURE_A12]

//>> SET_[CS_SM2_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM2_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM2_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]

//>> GET_[CS_SM2_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]

//>> GET_[CS_SM2_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]
static inline bool GET_CS_SM2_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM2_SNP_MISC_GPU4_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU4_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU4_BAR_EXTENDED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU4_BAR_EXTENDED_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU4_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU4_BAR_EXTENDED_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU4_BAR_EXTENDED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU4_BAR_EXTENDED_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU4_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU4_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU4_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU4_BAR_EXTENDED_MODE]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU4_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU4_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU4_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU4_BAR_EXTENDED_MODE]

//>> GET_[CS_SM2_SNP_MISC_GPU4_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU4_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU4_BAR_EXTENDED_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU4_BAR_EXTENDED_MODE]

//>> GET_[CS_SM2_SNP_MISC_GPU4_BAR_EXTENDED_MODE]
static inline bool GET_CS_SM2_SNP_MISC_GPU4_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU4_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU4_BAR_EXTENDED_MODE]

//>> SET_[CS_SM2_SNP_MISC_GPU4_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU4_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU4_BAR_RESERVED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU4_BAR_RESERVED]

//>> SET_[CS_SM2_SNP_MISC_GPU4_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU4_BAR_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GPU4_BAR_RESERVED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU4_BAR_RESERVED]

//>> SET_[CS_SM2_SNP_MISC_GPU4_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GPU4_BAR_RESERVED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GPU4_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GPU4_BAR_RESERVED]

//>> CLEAR_[CS_SM2_SNP_MISC_GPU4_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GPU4_BAR_RESERVED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GPU4_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GPU4_BAR_RESERVED]

//>> GET_[CS_SM2_SNP_MISC_GPU4_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GPU4_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GPU4_BAR_RESERVED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU4_BAR_RESERVED]

//>> GET_[CS_SM2_SNP_MISC_GPU4_BAR_RESERVED]
static inline bool GET_CS_SM2_SNP_MISC_GPU4_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GPU4_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GPU4_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GPU4_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GPU4_BAR_RESERVED]

//>> PREP_[CS_SM3_DIR_MISC_DEBUG0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_DIR_MISC_DEBUG0_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_DIR_MISC_DEBUG0_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_DIR_MISC_DEBUG0_CONFIG]

//>> GET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_DIR_MISC_DEBUG0_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_DIR_MISC_DEBUG0_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM3_DIR_MISC_DEBUG0_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG]

//>> PUT_[CS_SM3_DIR_MISC_DEBUG0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_DIR_MISC_DEBUG0_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG0_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM3_DIR_MISC_DEBUG0_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_DIR_MISC_DEBUG0_CONFIG]


//>> SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD0,
           CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD0]

//>> SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD0,
           CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD0]

//>> GET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD0,
           CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD0]

//>> SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD1,
           CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD1]

//>> SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD1,
           CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD1]

//>> GET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD1,
           CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD1]

//>> SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD2,
           CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD2]

//>> SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD2,
           CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD2]

//>> GET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD2,
           CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD2]

//>> SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD3,
           CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD3]

//>> SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD3,
           CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD3]

//>> GET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD3,
           CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD3]

//>> SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD4,
           CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD4]

//>> SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD4,
           CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD4]

//>> GET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD4,
           CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD4]

//>> SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD5,
           CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD5]

//>> SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD5,
           CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD5]

//>> GET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD5,
           CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD5]

//>> SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD6,
           CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD6]

//>> SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD6,
           CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD6]

//>> GET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD6,
           CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD6]

//>> SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD7,
           CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD7]

//>> SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD7,
           CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD7]

//>> GET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD7,
           CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD7]

//>> SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD8,
           CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD8]

//>> SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD8,
           CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD8]

//>> GET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD8,
           CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD8_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD8]

//>> SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD9,
           CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD9]

//>> SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD9,
           CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD9]

//>> GET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD9,
           CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD9]

//>> SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD10,
           CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD10]

//>> SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD10,
           CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD10]

//>> GET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD10,
           CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_POD10]

//>> SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG0_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG0_CONFIG_RESERVED1,
           CS_SM3_DIR_MISC_DEBUG0_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG0_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_RESERVED1]

//>> SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG0_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG0_CONFIG_RESERVED1,
           CS_SM3_DIR_MISC_DEBUG0_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG0_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_RESERVED1]

//>> GET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_DIR_MISC_DEBUG0_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_DIR_MISC_DEBUG0_CONFIG_RESERVED1,
           CS_SM3_DIR_MISC_DEBUG0_CONFIG_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG0_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_RESERVED1]

//>> SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG0_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_ACT]

//>> SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG0_CONFIG_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG0_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_ACT]

//>> SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.setBit<CS_SM3_DIR_MISC_DEBUG0_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_ACT]

//>> CLEAR_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_DIR_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.clearBit<CS_SM3_DIR_MISC_DEBUG0_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_ACT]

//>> GET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_DIR_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_DIR_MISC_DEBUG0_CONFIG_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_ACT]

//>> GET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_ACT]
static inline bool GET_CS_SM3_DIR_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.getBit<CS_SM3_DIR_MISC_DEBUG0_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_DIR_MISC_DEBUG0_CONFIG_ACT]

//>> PREP_[CS_SM3_MCP_MISC_CERR_MESSAGE5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_MCP_MISC_CERR_MESSAGE5(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_CERR_MESSAGE5;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_MCP_MISC_CERR_MESSAGE5]

//>> GET_[CS_SM3_MCP_MISC_CERR_MESSAGE5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_MCP_MISC_CERR_MESSAGE5(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_CERR_MESSAGE5;
#endif
    return fapi2::getScom(i_target, CS_SM3_MCP_MISC_CERR_MESSAGE5, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MESSAGE5]

//>> PUT_[CS_SM3_MCP_MISC_CERR_MESSAGE5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_MCP_MISC_CERR_MESSAGE5(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MESSAGE5));
#endif
    return fapi2::putScom(i_target, CS_SM3_MCP_MISC_CERR_MESSAGE5, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_MCP_MISC_CERR_MESSAGE5]


//>> SET_[CS_SM3_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MESSAGE5));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5,
           CS_SM3_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5]

//>> SET_[CS_SM3_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MESSAGE5));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5,
           CS_SM3_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5]

//>> GET_[CS_SM3_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MESSAGE5));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5,
           CS_SM3_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5]

//>> PREP_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2;
#endif
    return fapi2::getScom(i_target, CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2]

//>> PUT_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return fapi2::putScom(i_target, CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2]


//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]

//>> PREP_[DAT_MISC_CERR_LOG_MASK]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_DAT_MISC_CERR_LOG_MASK(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = DAT_MISC_CERR_LOG_MASK;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[DAT_MISC_CERR_LOG_MASK]

//>> GET_[DAT_MISC_CERR_LOG_MASK]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_DAT_MISC_CERR_LOG_MASK(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = DAT_MISC_CERR_LOG_MASK;
#endif
    return fapi2::getScom(i_target, DAT_MISC_CERR_LOG_MASK, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[DAT_MISC_CERR_LOG_MASK]

//>> PUT_[DAT_MISC_CERR_LOG_MASK]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_DAT_MISC_CERR_LOG_MASK(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_MASK));
#endif
    return fapi2::putScom(i_target, DAT_MISC_CERR_LOG_MASK, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[DAT_MISC_CERR_LOG_MASK]


//>> SET_[DAT_MISC_CERR_LOG_MASK_CERR_LOG_MASK_BITS]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_LOG_MASK_CERR_LOG_MASK_BITS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_MASK));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_LOG_MASK_CERR_LOG_MASK_BITS,
           DAT_MISC_CERR_LOG_MASK_CERR_LOG_MASK_BITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_CERR_LOG_MASK_CERR_LOG_MASK_BITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_LOG_MASK_CERR_LOG_MASK_BITS]

//>> SET_[DAT_MISC_CERR_LOG_MASK_CERR_LOG_MASK_BITS]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_LOG_MASK_CERR_LOG_MASK_BITS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_MASK));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_LOG_MASK_CERR_LOG_MASK_BITS,
           DAT_MISC_CERR_LOG_MASK_CERR_LOG_MASK_BITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_CERR_LOG_MASK_CERR_LOG_MASK_BITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_LOG_MASK_CERR_LOG_MASK_BITS]

//>> GET_[DAT_MISC_CERR_LOG_MASK_CERR_LOG_MASK_BITS]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_LOG_MASK_CERR_LOG_MASK_BITS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_MASK));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_LOG_MASK_CERR_LOG_MASK_BITS,
           DAT_MISC_CERR_LOG_MASK_CERR_LOG_MASK_BITS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_CERR_LOG_MASK_CERR_LOG_MASK_BITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_LOG_MASK_CERR_LOG_MASK_BITS]

//>> PREP_[DAT_MISC_REM1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_DAT_MISC_REM1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = DAT_MISC_REM1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[DAT_MISC_REM1]

//>> GET_[DAT_MISC_REM1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_DAT_MISC_REM1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = DAT_MISC_REM1;
#endif
    return fapi2::getScom(i_target, DAT_MISC_REM1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[DAT_MISC_REM1]

//>> PUT_[DAT_MISC_REM1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_DAT_MISC_REM1(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM1));
#endif
    return fapi2::putScom(i_target, DAT_MISC_REM1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[DAT_MISC_REM1]


//>> SET_[DAT_MISC_REM1_PBRX_RTAG]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_REM1_PBRX_RTAG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM1));
#endif
    return o_data.insertFromRight<DAT_MISC_REM1_PBRX_RTAG,
           DAT_MISC_REM1_PBRX_RTAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_REM1_PBRX_RTAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_REM1_PBRX_RTAG]

//>> SET_[DAT_MISC_REM1_PBRX_RTAG]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_REM1_PBRX_RTAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM1));
#endif
    return o_data.insertFromRight<DAT_MISC_REM1_PBRX_RTAG,
           DAT_MISC_REM1_PBRX_RTAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_REM1_PBRX_RTAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_REM1_PBRX_RTAG]

//>> GET_[DAT_MISC_REM1_PBRX_RTAG]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_REM1_PBRX_RTAG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM1));
#endif
    return i_data.extractToRight<DAT_MISC_REM1_PBRX_RTAG,
           DAT_MISC_REM1_PBRX_RTAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_REM1_PBRX_RTAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_REM1_PBRX_RTAG]

//>> SET_[DAT_MISC_REM1_ALU_ADR]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_REM1_ALU_ADR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM1));
#endif
    return o_data.insertFromRight<DAT_MISC_REM1_ALU_ADR,
           DAT_MISC_REM1_ALU_ADR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_REM1_ALU_ADR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_REM1_ALU_ADR]

//>> SET_[DAT_MISC_REM1_ALU_ADR]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_REM1_ALU_ADR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM1));
#endif
    return o_data.insertFromRight<DAT_MISC_REM1_ALU_ADR,
           DAT_MISC_REM1_ALU_ADR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_REM1_ALU_ADR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_REM1_ALU_ADR]

//>> GET_[DAT_MISC_REM1_ALU_ADR]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_REM1_ALU_ADR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM1));
#endif
    return i_data.extractToRight<DAT_MISC_REM1_ALU_ADR,
           DAT_MISC_REM1_ALU_ADR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_REM1_ALU_ADR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_REM1_ALU_ADR]

//>> SET_[DAT_MISC_REM1_ALU_TYPE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_REM1_ALU_TYPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM1));
#endif
    return o_data.insertFromRight<DAT_MISC_REM1_ALU_TYPE,
           DAT_MISC_REM1_ALU_TYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_REM1_ALU_TYPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_REM1_ALU_TYPE]

//>> SET_[DAT_MISC_REM1_ALU_TYPE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_REM1_ALU_TYPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM1));
#endif
    return o_data.insertFromRight<DAT_MISC_REM1_ALU_TYPE,
           DAT_MISC_REM1_ALU_TYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_REM1_ALU_TYPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_REM1_ALU_TYPE]

//>> GET_[DAT_MISC_REM1_ALU_TYPE]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_REM1_ALU_TYPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM1));
#endif
    return i_data.extractToRight<DAT_MISC_REM1_ALU_TYPE,
           DAT_MISC_REM1_ALU_TYPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_REM1_ALU_TYPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_REM1_ALU_TYPE]

//>> SET_[DAT_MISC_REM1_ALU_SZ]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_REM1_ALU_SZ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM1));
#endif
    return o_data.insertFromRight<DAT_MISC_REM1_ALU_SZ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_REM1_ALU_SZ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_REM1_ALU_SZ]

//>> SET_[DAT_MISC_REM1_ALU_SZ]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_REM1_ALU_SZ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM1));
#endif
    return o_data.insertFromRight<DAT_MISC_REM1_ALU_SZ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_REM1_ALU_SZ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_REM1_ALU_SZ]

//>> SET_[DAT_MISC_REM1_ALU_SZ]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_REM1_ALU_SZ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM1));
#endif
    return o_data.setBit<DAT_MISC_REM1_ALU_SZ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access DAT_MISC_REM1_ALU_SZ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_REM1_ALU_SZ]

//>> CLEAR_[DAT_MISC_REM1_ALU_SZ]
static inline fapi2::buffer<uint64_t>& CLEAR_DAT_MISC_REM1_ALU_SZ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM1));
#endif
    return o_data.clearBit<DAT_MISC_REM1_ALU_SZ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access DAT_MISC_REM1_ALU_SZ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DAT_MISC_REM1_ALU_SZ]

//>> GET_[DAT_MISC_REM1_ALU_SZ]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_REM1_ALU_SZ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM1));
#endif
    return i_data.extractToRight<DAT_MISC_REM1_ALU_SZ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_REM1_ALU_SZ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_REM1_ALU_SZ]

//>> GET_[DAT_MISC_REM1_ALU_SZ]
static inline bool GET_DAT_MISC_REM1_ALU_SZ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM1));
#endif
    return i_data.getBit<DAT_MISC_REM1_ALU_SZ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access DAT_MISC_REM1_ALU_SZ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_REM1_ALU_SZ]

//>> PREP_[DAT_MISC_SCRATCH0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_DAT_MISC_SCRATCH0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = DAT_MISC_SCRATCH0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[DAT_MISC_SCRATCH0]

//>> GET_[DAT_MISC_SCRATCH0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_DAT_MISC_SCRATCH0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = DAT_MISC_SCRATCH0;
#endif
    return fapi2::getScom(i_target, DAT_MISC_SCRATCH0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[DAT_MISC_SCRATCH0]

//>> PUT_[DAT_MISC_SCRATCH0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_DAT_MISC_SCRATCH0(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(DAT_MISC_SCRATCH0));
#endif
    return fapi2::putScom(i_target, DAT_MISC_SCRATCH0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[DAT_MISC_SCRATCH0]


//>> SET_[DAT_MISC_SCRATCH0_SCRATCH0_IDIAL]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_SCRATCH0_SCRATCH0_IDIAL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_SCRATCH0));
#endif
    return o_data.insertFromRight<DAT_MISC_SCRATCH0_SCRATCH0_IDIAL,
           DAT_MISC_SCRATCH0_SCRATCH0_IDIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_SCRATCH0_SCRATCH0_IDIAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_SCRATCH0_SCRATCH0_IDIAL]

//>> SET_[DAT_MISC_SCRATCH0_SCRATCH0_IDIAL]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_SCRATCH0_SCRATCH0_IDIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_SCRATCH0));
#endif
    return o_data.insertFromRight<DAT_MISC_SCRATCH0_SCRATCH0_IDIAL,
           DAT_MISC_SCRATCH0_SCRATCH0_IDIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_SCRATCH0_SCRATCH0_IDIAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_SCRATCH0_SCRATCH0_IDIAL]

//>> GET_[DAT_MISC_SCRATCH0_SCRATCH0_IDIAL]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_SCRATCH0_SCRATCH0_IDIAL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_SCRATCH0));
#endif
    return i_data.extractToRight<DAT_MISC_SCRATCH0_SCRATCH0_IDIAL,
           DAT_MISC_SCRATCH0_SCRATCH0_IDIAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_SCRATCH0_SCRATCH0_IDIAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_SCRATCH0_SCRATCH0_IDIAL]

//>> PREP_[MISC_REGS_BDF2PE_13_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_BDF2PE_13_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_BDF2PE_13_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_BDF2PE_13_CONFIG]

//>> GET_[MISC_REGS_BDF2PE_13_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_BDF2PE_13_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_BDF2PE_13_CONFIG;
#endif
    return fapi2::getScom(i_target, MISC_REGS_BDF2PE_13_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_13_CONFIG]

//>> PUT_[MISC_REGS_BDF2PE_13_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_BDF2PE_13_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_13_CONFIG));
#endif
    return fapi2::putScom(i_target, MISC_REGS_BDF2PE_13_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_BDF2PE_13_CONFIG]


//>> SET_[MISC_REGS_BDF2PE_13_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_13_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_13_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_13_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_BDF2PE_13_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_13_CONFIG_ENABLE]

//>> SET_[MISC_REGS_BDF2PE_13_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_13_CONFIG_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_13_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_13_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_BDF2PE_13_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_13_CONFIG_ENABLE]

//>> SET_[MISC_REGS_BDF2PE_13_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_13_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_13_CONFIG));
#endif
    return o_data.setBit<MISC_REGS_BDF2PE_13_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_BDF2PE_13_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_13_CONFIG_ENABLE]

//>> CLEAR_[MISC_REGS_BDF2PE_13_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_BDF2PE_13_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_13_CONFIG));
#endif
    return o_data.clearBit<MISC_REGS_BDF2PE_13_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_BDF2PE_13_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_BDF2PE_13_CONFIG_ENABLE]

//>> GET_[MISC_REGS_BDF2PE_13_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_13_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_13_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_13_CONFIG_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_BDF2PE_13_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_13_CONFIG_ENABLE]

//>> GET_[MISC_REGS_BDF2PE_13_CONFIG_ENABLE]
static inline bool GET_MISC_REGS_BDF2PE_13_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_13_CONFIG));
#endif
    return i_data.getBit<MISC_REGS_BDF2PE_13_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_BDF2PE_13_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_13_CONFIG_ENABLE]

//>> SET_[MISC_REGS_BDF2PE_13_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_13_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_13_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_13_CONFIG_RESERVED,
           MISC_REGS_BDF2PE_13_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_BDF2PE_13_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_13_CONFIG_RESERVED]

//>> SET_[MISC_REGS_BDF2PE_13_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_13_CONFIG_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_13_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_13_CONFIG_RESERVED,
           MISC_REGS_BDF2PE_13_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_BDF2PE_13_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_13_CONFIG_RESERVED]

//>> GET_[MISC_REGS_BDF2PE_13_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_13_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_13_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_13_CONFIG_RESERVED,
           MISC_REGS_BDF2PE_13_CONFIG_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_BDF2PE_13_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_13_CONFIG_RESERVED]

//>> SET_[MISC_REGS_BDF2PE_13_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_13_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_13_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_13_CONFIG_PE,
           MISC_REGS_BDF2PE_13_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_BDF2PE_13_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_13_CONFIG_PE]

//>> SET_[MISC_REGS_BDF2PE_13_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_13_CONFIG_PE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_13_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_13_CONFIG_PE,
           MISC_REGS_BDF2PE_13_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_BDF2PE_13_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_13_CONFIG_PE]

//>> GET_[MISC_REGS_BDF2PE_13_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_13_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_13_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_13_CONFIG_PE,
           MISC_REGS_BDF2PE_13_CONFIG_PE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_BDF2PE_13_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_13_CONFIG_PE]

//>> SET_[MISC_REGS_BDF2PE_13_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_13_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_13_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_13_CONFIG_BDF,
           MISC_REGS_BDF2PE_13_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_BDF2PE_13_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_13_CONFIG_BDF]

//>> SET_[MISC_REGS_BDF2PE_13_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_13_CONFIG_BDF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_13_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_13_CONFIG_BDF,
           MISC_REGS_BDF2PE_13_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_BDF2PE_13_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_13_CONFIG_BDF]

//>> GET_[MISC_REGS_BDF2PE_13_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_13_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_13_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_13_CONFIG_BDF,
           MISC_REGS_BDF2PE_13_CONFIG_BDF_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_BDF2PE_13_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_13_CONFIG_BDF]

//>> PREP_[MISC_REGS_INT_0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_INT_0_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_0_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_INT_0_CONFIG]

//>> GET_[MISC_REGS_INT_0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_INT_0_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_0_CONFIG;
#endif
    return fapi2::getScom(i_target, MISC_REGS_INT_0_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_INT_0_CONFIG]

//>> PUT_[MISC_REGS_INT_0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_INT_0_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_0_CONFIG));
#endif
    return fapi2::putScom(i_target, MISC_REGS_INT_0_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_INT_0_CONFIG]


//>> SET_[MISC_REGS_INT_0_CONFIG_CONFIG_INT_0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_0_CONFIG_CONFIG_INT_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_0_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_0_CONFIG_CONFIG_INT_0,
           MISC_REGS_INT_0_CONFIG_CONFIG_INT_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_0_CONFIG_CONFIG_INT_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_0_CONFIG_CONFIG_INT_0]

//>> SET_[MISC_REGS_INT_0_CONFIG_CONFIG_INT_0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_0_CONFIG_CONFIG_INT_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_0_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_0_CONFIG_CONFIG_INT_0,
           MISC_REGS_INT_0_CONFIG_CONFIG_INT_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_0_CONFIG_CONFIG_INT_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_0_CONFIG_CONFIG_INT_0]

//>> GET_[MISC_REGS_INT_0_CONFIG_CONFIG_INT_0]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_0_CONFIG_CONFIG_INT_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_0_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_INT_0_CONFIG_CONFIG_INT_0,
           MISC_REGS_INT_0_CONFIG_CONFIG_INT_0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_0_CONFIG_CONFIG_INT_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_0_CONFIG_CONFIG_INT_0]

//>> PREP_[MISC_REGS_INT_LOG_0_PE9]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_INT_LOG_0_PE9(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_0_PE9;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_INT_LOG_0_PE9]

//>> GET_[MISC_REGS_INT_LOG_0_PE9]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_INT_LOG_0_PE9(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_0_PE9;
#endif
    return fapi2::getScom(i_target, MISC_REGS_INT_LOG_0_PE9, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE9]

//>> PUT_[MISC_REGS_INT_LOG_0_PE9]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_INT_LOG_0_PE9(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE9));
#endif
    return fapi2::putScom(i_target, MISC_REGS_INT_LOG_0_PE9, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_INT_LOG_0_PE9]


//>> SET_[MISC_REGS_INT_LOG_0_PE9_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE9_VLD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE9));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE9_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE9_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE9_VLD]

//>> SET_[MISC_REGS_INT_LOG_0_PE9_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE9_VLD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE9));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE9_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE9_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE9_VLD]

//>> SET_[MISC_REGS_INT_LOG_0_PE9_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE9_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE9));
#endif
    return o_data.setBit<MISC_REGS_INT_LOG_0_PE9_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE9_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE9_VLD]

//>> CLEAR_[MISC_REGS_INT_LOG_0_PE9_VLD]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_INT_LOG_0_PE9_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE9));
#endif
    return o_data.clearBit<MISC_REGS_INT_LOG_0_PE9_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE9_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_INT_LOG_0_PE9_VLD]

//>> GET_[MISC_REGS_INT_LOG_0_PE9_VLD]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_0_PE9_VLD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE9));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_0_PE9_VLD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE9_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE9_VLD]

//>> GET_[MISC_REGS_INT_LOG_0_PE9_VLD]
static inline bool GET_MISC_REGS_INT_LOG_0_PE9_VLD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE9));
#endif
    return i_data.getBit<MISC_REGS_INT_LOG_0_PE9_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE9_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE9_VLD]

//>> SET_[MISC_REGS_INT_LOG_0_PE9_LVL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE9_LVL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE9));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE9_LVL,
           MISC_REGS_INT_LOG_0_PE9_LVL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE9_LVL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE9_LVL]

//>> SET_[MISC_REGS_INT_LOG_0_PE9_LVL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE9_LVL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE9));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE9_LVL,
           MISC_REGS_INT_LOG_0_PE9_LVL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE9_LVL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE9_LVL]

//>> GET_[MISC_REGS_INT_LOG_0_PE9_LVL]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_0_PE9_LVL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE9));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_0_PE9_LVL,
           MISC_REGS_INT_LOG_0_PE9_LVL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE9_LVL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE9_LVL]

//>> SET_[MISC_REGS_INT_LOG_0_PE9_RSVD0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE9_RSVD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE9));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE9_RSVD0,
           MISC_REGS_INT_LOG_0_PE9_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE9_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE9_RSVD0]

//>> SET_[MISC_REGS_INT_LOG_0_PE9_RSVD0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE9_RSVD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE9));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE9_RSVD0,
           MISC_REGS_INT_LOG_0_PE9_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE9_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE9_RSVD0]

//>> GET_[MISC_REGS_INT_LOG_0_PE9_RSVD0]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_0_PE9_RSVD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE9));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_0_PE9_RSVD0,
           MISC_REGS_INT_LOG_0_PE9_RSVD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE9_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE9_RSVD0]

//>> PREP_[MISC_REGS_INT_LOG_1_PE9]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_INT_LOG_1_PE9(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_1_PE9;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_INT_LOG_1_PE9]

//>> GET_[MISC_REGS_INT_LOG_1_PE9]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_INT_LOG_1_PE9(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_1_PE9;
#endif
    return fapi2::getScom(i_target, MISC_REGS_INT_LOG_1_PE9, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE9]

//>> PUT_[MISC_REGS_INT_LOG_1_PE9]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_INT_LOG_1_PE9(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE9));
#endif
    return fapi2::putScom(i_target, MISC_REGS_INT_LOG_1_PE9, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_INT_LOG_1_PE9]


//>> SET_[MISC_REGS_INT_LOG_1_PE9_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE9_VLD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE9));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE9_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE9_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE9_VLD]

//>> SET_[MISC_REGS_INT_LOG_1_PE9_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE9_VLD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE9));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE9_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE9_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE9_VLD]

//>> SET_[MISC_REGS_INT_LOG_1_PE9_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE9_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE9));
#endif
    return o_data.setBit<MISC_REGS_INT_LOG_1_PE9_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE9_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE9_VLD]

//>> CLEAR_[MISC_REGS_INT_LOG_1_PE9_VLD]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_INT_LOG_1_PE9_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE9));
#endif
    return o_data.clearBit<MISC_REGS_INT_LOG_1_PE9_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE9_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_INT_LOG_1_PE9_VLD]

//>> GET_[MISC_REGS_INT_LOG_1_PE9_VLD]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE9_VLD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE9));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE9_VLD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE9_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE9_VLD]

//>> GET_[MISC_REGS_INT_LOG_1_PE9_VLD]
static inline bool GET_MISC_REGS_INT_LOG_1_PE9_VLD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE9));
#endif
    return i_data.getBit<MISC_REGS_INT_LOG_1_PE9_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE9_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE9_VLD]

//>> SET_[MISC_REGS_INT_LOG_1_PE9_DETAIL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE9_DETAIL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE9));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE9_DETAIL,
           MISC_REGS_INT_LOG_1_PE9_DETAIL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE9_DETAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE9_DETAIL]

//>> SET_[MISC_REGS_INT_LOG_1_PE9_DETAIL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE9_DETAIL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE9));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE9_DETAIL,
           MISC_REGS_INT_LOG_1_PE9_DETAIL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE9_DETAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE9_DETAIL]

//>> GET_[MISC_REGS_INT_LOG_1_PE9_DETAIL]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE9_DETAIL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE9));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE9_DETAIL,
           MISC_REGS_INT_LOG_1_PE9_DETAIL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE9_DETAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE9_DETAIL]

//>> SET_[MISC_REGS_INT_LOG_1_PE9_CQ]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE9_CQ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE9));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE9_CQ,
           MISC_REGS_INT_LOG_1_PE9_CQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE9_CQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE9_CQ]

//>> SET_[MISC_REGS_INT_LOG_1_PE9_CQ]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE9_CQ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE9));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE9_CQ,
           MISC_REGS_INT_LOG_1_PE9_CQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE9_CQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE9_CQ]

//>> GET_[MISC_REGS_INT_LOG_1_PE9_CQ]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE9_CQ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE9));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE9_CQ,
           MISC_REGS_INT_LOG_1_PE9_CQ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE9_CQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE9_CQ]

//>> SET_[MISC_REGS_INT_LOG_1_PE9_RSVD0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE9_RSVD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE9));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE9_RSVD0,
           MISC_REGS_INT_LOG_1_PE9_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE9_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE9_RSVD0]

//>> SET_[MISC_REGS_INT_LOG_1_PE9_RSVD0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE9_RSVD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE9));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE9_RSVD0,
           MISC_REGS_INT_LOG_1_PE9_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE9_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE9_RSVD0]

//>> GET_[MISC_REGS_INT_LOG_1_PE9_RSVD0]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE9_RSVD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE9));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE9_RSVD0,
           MISC_REGS_INT_LOG_1_PE9_RSVD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE9_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE9_RSVD0]

//>> PREP_[MISC_REGS_INT_REQ]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_INT_REQ(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_REQ;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_INT_REQ]

//>> GET_[MISC_REGS_INT_REQ]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_INT_REQ(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_REQ;
#endif
    return fapi2::getScom(i_target, MISC_REGS_INT_REQ, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_INT_REQ]

//>> PUT_[MISC_REGS_INT_REQ]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_INT_REQ(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return fapi2::putScom(i_target, MISC_REGS_INT_REQ, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_INT_REQ]


//>> SET_[MISC_REGS_INT_REQ_00]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_00(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_REQ_00,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_REQ_00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_00]

//>> SET_[MISC_REGS_INT_REQ_00]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_00(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_REQ_00,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_REQ_00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_00]

//>> SET_[MISC_REGS_INT_REQ_00]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_00(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.setBit<MISC_REGS_INT_REQ_00>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_INT_REQ_00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_00]

//>> CLEAR_[MISC_REGS_INT_REQ_00]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_INT_REQ_00(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.clearBit<MISC_REGS_INT_REQ_00>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_INT_REQ_00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_INT_REQ_00]

//>> GET_[MISC_REGS_INT_REQ_00]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_REQ_00(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return i_data.extractToRight<MISC_REGS_INT_REQ_00,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_REQ_00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_REQ_00]

//>> GET_[MISC_REGS_INT_REQ_00]
static inline bool GET_MISC_REGS_INT_REQ_00(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return i_data.getBit<MISC_REGS_INT_REQ_00>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_INT_REQ_00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_REQ_00]

//>> SET_[MISC_REGS_INT_REQ_01]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_01(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_REQ_01,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_REQ_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_01]

//>> SET_[MISC_REGS_INT_REQ_01]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_01(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_REQ_01,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_REQ_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_01]

//>> SET_[MISC_REGS_INT_REQ_01]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_01(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.setBit<MISC_REGS_INT_REQ_01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_INT_REQ_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_01]

//>> CLEAR_[MISC_REGS_INT_REQ_01]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_INT_REQ_01(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.clearBit<MISC_REGS_INT_REQ_01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_INT_REQ_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_INT_REQ_01]

//>> GET_[MISC_REGS_INT_REQ_01]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_REQ_01(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return i_data.extractToRight<MISC_REGS_INT_REQ_01,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_REQ_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_REQ_01]

//>> GET_[MISC_REGS_INT_REQ_01]
static inline bool GET_MISC_REGS_INT_REQ_01(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return i_data.getBit<MISC_REGS_INT_REQ_01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_INT_REQ_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_REQ_01]

//>> SET_[MISC_REGS_INT_REQ_02]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_02(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_REQ_02,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_REQ_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_02]

//>> SET_[MISC_REGS_INT_REQ_02]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_02(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_REQ_02,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_REQ_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_02]

//>> SET_[MISC_REGS_INT_REQ_02]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_02(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.setBit<MISC_REGS_INT_REQ_02>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_INT_REQ_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_02]

//>> CLEAR_[MISC_REGS_INT_REQ_02]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_INT_REQ_02(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.clearBit<MISC_REGS_INT_REQ_02>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_INT_REQ_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_INT_REQ_02]

//>> GET_[MISC_REGS_INT_REQ_02]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_REQ_02(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return i_data.extractToRight<MISC_REGS_INT_REQ_02,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_REQ_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_REQ_02]

//>> GET_[MISC_REGS_INT_REQ_02]
static inline bool GET_MISC_REGS_INT_REQ_02(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return i_data.getBit<MISC_REGS_INT_REQ_02>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_INT_REQ_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_REQ_02]

//>> SET_[MISC_REGS_INT_REQ_03]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_03(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_REQ_03,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_REQ_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_03]

//>> SET_[MISC_REGS_INT_REQ_03]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_03(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_REQ_03,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_REQ_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_03]

//>> SET_[MISC_REGS_INT_REQ_03]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_03(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.setBit<MISC_REGS_INT_REQ_03>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_INT_REQ_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_03]

//>> CLEAR_[MISC_REGS_INT_REQ_03]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_INT_REQ_03(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.clearBit<MISC_REGS_INT_REQ_03>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_INT_REQ_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_INT_REQ_03]

//>> GET_[MISC_REGS_INT_REQ_03]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_REQ_03(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return i_data.extractToRight<MISC_REGS_INT_REQ_03,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_REQ_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_REQ_03]

//>> GET_[MISC_REGS_INT_REQ_03]
static inline bool GET_MISC_REGS_INT_REQ_03(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return i_data.getBit<MISC_REGS_INT_REQ_03>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_INT_REQ_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_REQ_03]

//>> SET_[MISC_REGS_INT_REQ_12]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_REQ_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_REQ_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_12]

//>> SET_[MISC_REGS_INT_REQ_12]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_REQ_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_REQ_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_12]

//>> SET_[MISC_REGS_INT_REQ_12]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.setBit<MISC_REGS_INT_REQ_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_INT_REQ_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_12]

//>> CLEAR_[MISC_REGS_INT_REQ_12]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_INT_REQ_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.clearBit<MISC_REGS_INT_REQ_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_INT_REQ_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_INT_REQ_12]

//>> GET_[MISC_REGS_INT_REQ_12]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_REQ_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return i_data.extractToRight<MISC_REGS_INT_REQ_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_REQ_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_REQ_12]

//>> GET_[MISC_REGS_INT_REQ_12]
static inline bool GET_MISC_REGS_INT_REQ_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return i_data.getBit<MISC_REGS_INT_REQ_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_INT_REQ_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_REQ_12]

//>> SET_[MISC_REGS_INT_REQ_13]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_REQ_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_REQ_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_13]

//>> SET_[MISC_REGS_INT_REQ_13]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_REQ_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_REQ_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_13]

//>> SET_[MISC_REGS_INT_REQ_13]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.setBit<MISC_REGS_INT_REQ_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_INT_REQ_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_13]

//>> CLEAR_[MISC_REGS_INT_REQ_13]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_INT_REQ_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.clearBit<MISC_REGS_INT_REQ_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_INT_REQ_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_INT_REQ_13]

//>> GET_[MISC_REGS_INT_REQ_13]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_REQ_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return i_data.extractToRight<MISC_REGS_INT_REQ_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_REQ_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_REQ_13]

//>> GET_[MISC_REGS_INT_REQ_13]
static inline bool GET_MISC_REGS_INT_REQ_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return i_data.getBit<MISC_REGS_INT_REQ_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_INT_REQ_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_REQ_13]

//>> SET_[MISC_REGS_INT_REQ_18]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_REQ_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_REQ_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_18]

//>> SET_[MISC_REGS_INT_REQ_18]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_REQ_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_REQ_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_18]

//>> SET_[MISC_REGS_INT_REQ_18]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.setBit<MISC_REGS_INT_REQ_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_INT_REQ_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_18]

//>> CLEAR_[MISC_REGS_INT_REQ_18]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_INT_REQ_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.clearBit<MISC_REGS_INT_REQ_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_INT_REQ_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_INT_REQ_18]

//>> GET_[MISC_REGS_INT_REQ_18]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_REQ_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return i_data.extractToRight<MISC_REGS_INT_REQ_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_REQ_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_REQ_18]

//>> GET_[MISC_REGS_INT_REQ_18]
static inline bool GET_MISC_REGS_INT_REQ_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return i_data.getBit<MISC_REGS_INT_REQ_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_INT_REQ_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_REQ_18]

//>> SET_[MISC_REGS_INT_REQ_19]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_REQ_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_REQ_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_19]

//>> SET_[MISC_REGS_INT_REQ_19]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_REQ_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_REQ_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_19]

//>> SET_[MISC_REGS_INT_REQ_19]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.setBit<MISC_REGS_INT_REQ_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_INT_REQ_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_19]

//>> CLEAR_[MISC_REGS_INT_REQ_19]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_INT_REQ_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.clearBit<MISC_REGS_INT_REQ_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_INT_REQ_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_INT_REQ_19]

//>> GET_[MISC_REGS_INT_REQ_19]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_REQ_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return i_data.extractToRight<MISC_REGS_INT_REQ_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_REQ_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_REQ_19]

//>> GET_[MISC_REGS_INT_REQ_19]
static inline bool GET_MISC_REGS_INT_REQ_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return i_data.getBit<MISC_REGS_INT_REQ_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_INT_REQ_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_REQ_19]

//>> SET_[MISC_REGS_INT_REQ_20]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_20(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_REQ_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_REQ_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_20]

//>> SET_[MISC_REGS_INT_REQ_20]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_20(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_REQ_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_REQ_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_20]

//>> SET_[MISC_REGS_INT_REQ_20]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.setBit<MISC_REGS_INT_REQ_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_INT_REQ_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_20]

//>> CLEAR_[MISC_REGS_INT_REQ_20]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_INT_REQ_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.clearBit<MISC_REGS_INT_REQ_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_INT_REQ_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_INT_REQ_20]

//>> GET_[MISC_REGS_INT_REQ_20]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_REQ_20(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return i_data.extractToRight<MISC_REGS_INT_REQ_20,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_REQ_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_REQ_20]

//>> GET_[MISC_REGS_INT_REQ_20]
static inline bool GET_MISC_REGS_INT_REQ_20(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return i_data.getBit<MISC_REGS_INT_REQ_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_INT_REQ_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_REQ_20]

//>> SET_[MISC_REGS_INT_REQ_21]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_21(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_REQ_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_REQ_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_21]

//>> SET_[MISC_REGS_INT_REQ_21]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_21(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_REQ_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_REQ_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_21]

//>> SET_[MISC_REGS_INT_REQ_21]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.setBit<MISC_REGS_INT_REQ_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_INT_REQ_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_21]

//>> CLEAR_[MISC_REGS_INT_REQ_21]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_INT_REQ_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.clearBit<MISC_REGS_INT_REQ_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_INT_REQ_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_INT_REQ_21]

//>> GET_[MISC_REGS_INT_REQ_21]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_REQ_21(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return i_data.extractToRight<MISC_REGS_INT_REQ_21,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_REQ_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_REQ_21]

//>> GET_[MISC_REGS_INT_REQ_21]
static inline bool GET_MISC_REGS_INT_REQ_21(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return i_data.getBit<MISC_REGS_INT_REQ_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_INT_REQ_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_REQ_21]

//>> SET_[MISC_REGS_INT_REQ_23]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_REQ_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_REQ_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_23]

//>> SET_[MISC_REGS_INT_REQ_23]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_REQ_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_REQ_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_23]

//>> SET_[MISC_REGS_INT_REQ_23]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.setBit<MISC_REGS_INT_REQ_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_INT_REQ_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_23]

//>> CLEAR_[MISC_REGS_INT_REQ_23]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_INT_REQ_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.clearBit<MISC_REGS_INT_REQ_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_INT_REQ_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_INT_REQ_23]

//>> GET_[MISC_REGS_INT_REQ_23]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_REQ_23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return i_data.extractToRight<MISC_REGS_INT_REQ_23,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_REQ_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_REQ_23]

//>> GET_[MISC_REGS_INT_REQ_23]
static inline bool GET_MISC_REGS_INT_REQ_23(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return i_data.getBit<MISC_REGS_INT_REQ_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_INT_REQ_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_REQ_23]

//>> SET_[MISC_REGS_INT_REQ_24]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_24(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_REQ_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_REQ_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_24]

//>> SET_[MISC_REGS_INT_REQ_24]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_24(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_REQ_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_REQ_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_24]

//>> SET_[MISC_REGS_INT_REQ_24]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.setBit<MISC_REGS_INT_REQ_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_INT_REQ_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_24]

//>> CLEAR_[MISC_REGS_INT_REQ_24]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_INT_REQ_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.clearBit<MISC_REGS_INT_REQ_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_INT_REQ_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_INT_REQ_24]

//>> GET_[MISC_REGS_INT_REQ_24]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_REQ_24(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return i_data.extractToRight<MISC_REGS_INT_REQ_24,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_REQ_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_REQ_24]

//>> GET_[MISC_REGS_INT_REQ_24]
static inline bool GET_MISC_REGS_INT_REQ_24(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return i_data.getBit<MISC_REGS_INT_REQ_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_INT_REQ_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_REQ_24]

//>> SET_[MISC_REGS_INT_REQ_35]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_35(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_REQ_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_REQ_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_35]

//>> SET_[MISC_REGS_INT_REQ_35]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_35(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_REQ_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_REQ_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_35]

//>> SET_[MISC_REGS_INT_REQ_35]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.setBit<MISC_REGS_INT_REQ_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_INT_REQ_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_35]

//>> CLEAR_[MISC_REGS_INT_REQ_35]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_INT_REQ_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.clearBit<MISC_REGS_INT_REQ_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_INT_REQ_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_INT_REQ_35]

//>> GET_[MISC_REGS_INT_REQ_35]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_REQ_35(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return i_data.extractToRight<MISC_REGS_INT_REQ_35,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_REQ_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_REQ_35]

//>> GET_[MISC_REGS_INT_REQ_35]
static inline bool GET_MISC_REGS_INT_REQ_35(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return i_data.getBit<MISC_REGS_INT_REQ_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_INT_REQ_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_REQ_35]

//>> SET_[MISC_REGS_INT_REQ_36]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_36(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_REQ_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_REQ_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_36]

//>> SET_[MISC_REGS_INT_REQ_36]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_36(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_REQ_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_REQ_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_36]

//>> SET_[MISC_REGS_INT_REQ_36]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.setBit<MISC_REGS_INT_REQ_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_INT_REQ_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_36]

//>> CLEAR_[MISC_REGS_INT_REQ_36]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_INT_REQ_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.clearBit<MISC_REGS_INT_REQ_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_INT_REQ_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_INT_REQ_36]

//>> GET_[MISC_REGS_INT_REQ_36]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_REQ_36(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return i_data.extractToRight<MISC_REGS_INT_REQ_36,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_REQ_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_REQ_36]

//>> GET_[MISC_REGS_INT_REQ_36]
static inline bool GET_MISC_REGS_INT_REQ_36(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return i_data.getBit<MISC_REGS_INT_REQ_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_INT_REQ_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_REQ_36]

//>> SET_[MISC_REGS_INT_REQ_37]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_37(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_REQ_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_REQ_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_37]

//>> SET_[MISC_REGS_INT_REQ_37]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_37(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_REQ_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_REQ_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_37]

//>> SET_[MISC_REGS_INT_REQ_37]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.setBit<MISC_REGS_INT_REQ_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_INT_REQ_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_37]

//>> CLEAR_[MISC_REGS_INT_REQ_37]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_INT_REQ_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.clearBit<MISC_REGS_INT_REQ_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_INT_REQ_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_INT_REQ_37]

//>> GET_[MISC_REGS_INT_REQ_37]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_REQ_37(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return i_data.extractToRight<MISC_REGS_INT_REQ_37,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_REQ_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_REQ_37]

//>> GET_[MISC_REGS_INT_REQ_37]
static inline bool GET_MISC_REGS_INT_REQ_37(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return i_data.getBit<MISC_REGS_INT_REQ_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_INT_REQ_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_REQ_37]

//>> SET_[MISC_REGS_INT_REQ_38]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_38(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_REQ_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_REQ_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_38]

//>> SET_[MISC_REGS_INT_REQ_38]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_38(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_REQ_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_REQ_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_38]

//>> SET_[MISC_REGS_INT_REQ_38]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.setBit<MISC_REGS_INT_REQ_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_INT_REQ_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_38]

//>> CLEAR_[MISC_REGS_INT_REQ_38]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_INT_REQ_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.clearBit<MISC_REGS_INT_REQ_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_INT_REQ_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_INT_REQ_38]

//>> GET_[MISC_REGS_INT_REQ_38]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_REQ_38(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return i_data.extractToRight<MISC_REGS_INT_REQ_38,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_REQ_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_REQ_38]

//>> GET_[MISC_REGS_INT_REQ_38]
static inline bool GET_MISC_REGS_INT_REQ_38(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return i_data.getBit<MISC_REGS_INT_REQ_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_INT_REQ_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_REQ_38]

//>> SET_[MISC_REGS_INT_REQ_39]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_39(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_REQ_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_REQ_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_39]

//>> SET_[MISC_REGS_INT_REQ_39]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_39(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_REQ_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_REQ_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_39]

//>> SET_[MISC_REGS_INT_REQ_39]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.setBit<MISC_REGS_INT_REQ_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_INT_REQ_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_39]

//>> CLEAR_[MISC_REGS_INT_REQ_39]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_INT_REQ_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.clearBit<MISC_REGS_INT_REQ_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_INT_REQ_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_INT_REQ_39]

//>> GET_[MISC_REGS_INT_REQ_39]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_REQ_39(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return i_data.extractToRight<MISC_REGS_INT_REQ_39,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_REQ_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_REQ_39]

//>> GET_[MISC_REGS_INT_REQ_39]
static inline bool GET_MISC_REGS_INT_REQ_39(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return i_data.getBit<MISC_REGS_INT_REQ_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_INT_REQ_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_REQ_39]

//>> SET_[MISC_REGS_INT_REQ_40]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_40(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_REQ_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_REQ_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_40]

//>> SET_[MISC_REGS_INT_REQ_40]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_40(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_REQ_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_REQ_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_40]

//>> SET_[MISC_REGS_INT_REQ_40]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_REQ_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.setBit<MISC_REGS_INT_REQ_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_INT_REQ_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_REQ_40]

//>> CLEAR_[MISC_REGS_INT_REQ_40]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_INT_REQ_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return o_data.clearBit<MISC_REGS_INT_REQ_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_INT_REQ_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_INT_REQ_40]

//>> GET_[MISC_REGS_INT_REQ_40]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_REQ_40(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return i_data.extractToRight<MISC_REGS_INT_REQ_40,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_REQ_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_REQ_40]

//>> GET_[MISC_REGS_INT_REQ_40]
static inline bool GET_MISC_REGS_INT_REQ_40(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_REQ));
#endif
    return i_data.getBit<MISC_REGS_INT_REQ_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_INT_REQ_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_REQ_40]

//>> PREP_[MISC_REGS_PESTB_ADDR_PE9]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_PESTB_ADDR_PE9(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_ADDR_PE9;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_PESTB_ADDR_PE9]

//>> GET_[MISC_REGS_PESTB_ADDR_PE9]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_PESTB_ADDR_PE9(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_ADDR_PE9;
#endif
    return fapi2::getScom(i_target, MISC_REGS_PESTB_ADDR_PE9, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_PESTB_ADDR_PE9]

//>> PUT_[MISC_REGS_PESTB_ADDR_PE9]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_PESTB_ADDR_PE9(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE9));
#endif
    return fapi2::putScom(i_target, MISC_REGS_PESTB_ADDR_PE9, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_PESTB_ADDR_PE9]


//>> SET_[MISC_REGS_PESTB_ADDR_PE9_DMA_STOPPED_STATE_ADDR_PE9]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_ADDR_PE9_DMA_STOPPED_STATE_ADDR_PE9(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE9));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_ADDR_PE9_DMA_STOPPED_STATE_ADDR_PE9,
           MISC_REGS_PESTB_ADDR_PE9_DMA_STOPPED_STATE_ADDR_PE9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_PESTB_ADDR_PE9_DMA_STOPPED_STATE_ADDR_PE9 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_ADDR_PE9_DMA_STOPPED_STATE_ADDR_PE9]

//>> SET_[MISC_REGS_PESTB_ADDR_PE9_DMA_STOPPED_STATE_ADDR_PE9]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_ADDR_PE9_DMA_STOPPED_STATE_ADDR_PE9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE9));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_ADDR_PE9_DMA_STOPPED_STATE_ADDR_PE9,
           MISC_REGS_PESTB_ADDR_PE9_DMA_STOPPED_STATE_ADDR_PE9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_PESTB_ADDR_PE9_DMA_STOPPED_STATE_ADDR_PE9 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_ADDR_PE9_DMA_STOPPED_STATE_ADDR_PE9]

//>> GET_[MISC_REGS_PESTB_ADDR_PE9_DMA_STOPPED_STATE_ADDR_PE9]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_PESTB_ADDR_PE9_DMA_STOPPED_STATE_ADDR_PE9(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE9));
#endif
    return i_data.extractToRight<MISC_REGS_PESTB_ADDR_PE9_DMA_STOPPED_STATE_ADDR_PE9,
           MISC_REGS_PESTB_ADDR_PE9_DMA_STOPPED_STATE_ADDR_PE9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_PESTB_ADDR_PE9_DMA_STOPPED_STATE_ADDR_PE9 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_PESTB_ADDR_PE9_DMA_STOPPED_STATE_ADDR_PE9]

//>> PREP_[OTL0_MISC_CONFIG_DEBUG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL0_MISC_CONFIG_DEBUG0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_CONFIG_DEBUG0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL0_MISC_CONFIG_DEBUG0]

//>> GET_[OTL0_MISC_CONFIG_DEBUG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL0_MISC_CONFIG_DEBUG0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_CONFIG_DEBUG0;
#endif
    return fapi2::getScom(i_target, OTL0_MISC_CONFIG_DEBUG0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_DEBUG0]

//>> PUT_[OTL0_MISC_CONFIG_DEBUG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL0_MISC_CONFIG_DEBUG0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG0));
#endif
    return fapi2::putScom(i_target, OTL0_MISC_CONFIG_DEBUG0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL0_MISC_CONFIG_DEBUG0]


//>> SET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE0]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG0_0_BYTE0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG0_0_BYTE0,
           OTL0_MISC_CONFIG_DEBUG0_0_BYTE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG0_0_BYTE0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE0]

//>> SET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE0]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG0_0_BYTE0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG0_0_BYTE0,
           OTL0_MISC_CONFIG_DEBUG0_0_BYTE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG0_0_BYTE0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE0]

//>> GET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE0]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG_DEBUG0_0_BYTE0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG_DEBUG0_0_BYTE0,
           OTL0_MISC_CONFIG_DEBUG0_0_BYTE0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG0_0_BYTE0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE0]

//>> SET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG0_0_BYTE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG0_0_BYTE1,
           OTL0_MISC_CONFIG_DEBUG0_0_BYTE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG0_0_BYTE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE1]

//>> SET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG0_0_BYTE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG0_0_BYTE1,
           OTL0_MISC_CONFIG_DEBUG0_0_BYTE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG0_0_BYTE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE1]

//>> GET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE1]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG_DEBUG0_0_BYTE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG_DEBUG0_0_BYTE1,
           OTL0_MISC_CONFIG_DEBUG0_0_BYTE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG0_0_BYTE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE1]

//>> SET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG0_0_BYTE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG0_0_BYTE2,
           OTL0_MISC_CONFIG_DEBUG0_0_BYTE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG0_0_BYTE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE2]

//>> SET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG0_0_BYTE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG0_0_BYTE2,
           OTL0_MISC_CONFIG_DEBUG0_0_BYTE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG0_0_BYTE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE2]

//>> GET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE2]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG_DEBUG0_0_BYTE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG_DEBUG0_0_BYTE2,
           OTL0_MISC_CONFIG_DEBUG0_0_BYTE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG0_0_BYTE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE2]

//>> SET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE3]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG0_0_BYTE3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG0_0_BYTE3,
           OTL0_MISC_CONFIG_DEBUG0_0_BYTE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG0_0_BYTE3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE3]

//>> SET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE3]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG0_0_BYTE3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG0_0_BYTE3,
           OTL0_MISC_CONFIG_DEBUG0_0_BYTE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG0_0_BYTE3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE3]

//>> GET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE3]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG_DEBUG0_0_BYTE3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG_DEBUG0_0_BYTE3,
           OTL0_MISC_CONFIG_DEBUG0_0_BYTE3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG0_0_BYTE3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE3]

//>> SET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE4]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG0_0_BYTE4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG0_0_BYTE4,
           OTL0_MISC_CONFIG_DEBUG0_0_BYTE4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG0_0_BYTE4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE4]

//>> SET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE4]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG0_0_BYTE4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG0_0_BYTE4,
           OTL0_MISC_CONFIG_DEBUG0_0_BYTE4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG0_0_BYTE4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE4]

//>> GET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE4]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG_DEBUG0_0_BYTE4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG_DEBUG0_0_BYTE4,
           OTL0_MISC_CONFIG_DEBUG0_0_BYTE4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG0_0_BYTE4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE4]

//>> SET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE5]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG0_0_BYTE5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG0_0_BYTE5,
           OTL0_MISC_CONFIG_DEBUG0_0_BYTE5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG0_0_BYTE5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE5]

//>> SET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE5]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG0_0_BYTE5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG0_0_BYTE5,
           OTL0_MISC_CONFIG_DEBUG0_0_BYTE5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG0_0_BYTE5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE5]

//>> GET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE5]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG_DEBUG0_0_BYTE5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG_DEBUG0_0_BYTE5,
           OTL0_MISC_CONFIG_DEBUG0_0_BYTE5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG0_0_BYTE5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE5]

//>> SET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE6]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG0_0_BYTE6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG0_0_BYTE6,
           OTL0_MISC_CONFIG_DEBUG0_0_BYTE6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG0_0_BYTE6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE6]

//>> SET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE6]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG0_0_BYTE6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG0_0_BYTE6,
           OTL0_MISC_CONFIG_DEBUG0_0_BYTE6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG0_0_BYTE6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE6]

//>> GET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE6]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG_DEBUG0_0_BYTE6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG_DEBUG0_0_BYTE6,
           OTL0_MISC_CONFIG_DEBUG0_0_BYTE6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG0_0_BYTE6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE6]

//>> SET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE7]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG0_0_BYTE7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG0_0_BYTE7,
           OTL0_MISC_CONFIG_DEBUG0_0_BYTE7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG0_0_BYTE7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE7]

//>> SET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE7]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG0_0_BYTE7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG0_0_BYTE7,
           OTL0_MISC_CONFIG_DEBUG0_0_BYTE7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG0_0_BYTE7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE7]

//>> GET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE7]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG_DEBUG0_0_BYTE7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG_DEBUG0_0_BYTE7,
           OTL0_MISC_CONFIG_DEBUG0_0_BYTE7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG0_0_BYTE7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE7]

//>> SET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE8]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG0_0_BYTE8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG0_0_BYTE8,
           OTL0_MISC_CONFIG_DEBUG0_0_BYTE8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG0_0_BYTE8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE8]

//>> SET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE8]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG0_0_BYTE8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG0_0_BYTE8,
           OTL0_MISC_CONFIG_DEBUG0_0_BYTE8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG0_0_BYTE8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE8]

//>> GET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE8]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG_DEBUG0_0_BYTE8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG_DEBUG0_0_BYTE8,
           OTL0_MISC_CONFIG_DEBUG0_0_BYTE8_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG0_0_BYTE8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE8]

//>> SET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE9]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG0_0_BYTE9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG0_0_BYTE9,
           OTL0_MISC_CONFIG_DEBUG0_0_BYTE9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG0_0_BYTE9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE9]

//>> SET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE9]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG0_0_BYTE9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG0_0_BYTE9,
           OTL0_MISC_CONFIG_DEBUG0_0_BYTE9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG0_0_BYTE9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE9]

//>> GET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE9]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG_DEBUG0_0_BYTE9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG_DEBUG0_0_BYTE9,
           OTL0_MISC_CONFIG_DEBUG0_0_BYTE9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG0_0_BYTE9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE9]

//>> SET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE10]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG0_0_BYTE10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG0_0_BYTE10,
           OTL0_MISC_CONFIG_DEBUG0_0_BYTE10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG0_0_BYTE10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE10]

//>> SET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE10]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG0_0_BYTE10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG0_0_BYTE10,
           OTL0_MISC_CONFIG_DEBUG0_0_BYTE10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG0_0_BYTE10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE10]

//>> GET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE10]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG_DEBUG0_0_BYTE10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG_DEBUG0_0_BYTE10,
           OTL0_MISC_CONFIG_DEBUG0_0_BYTE10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG0_0_BYTE10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_DEBUG0_0_BYTE10]

//>> SET_[OTL0_MISC_CONFIG_DEBUG0_0_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG0_0_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG0_0_RESERVED,
           OTL0_MISC_CONFIG_DEBUG0_0_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG0_0_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG0_0_RESERVED]

//>> SET_[OTL0_MISC_CONFIG_DEBUG0_0_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG0_0_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG0_0_RESERVED,
           OTL0_MISC_CONFIG_DEBUG0_0_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG0_0_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG0_0_RESERVED]

//>> GET_[OTL0_MISC_CONFIG_DEBUG0_0_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG_DEBUG0_0_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG_DEBUG0_0_RESERVED,
           OTL0_MISC_CONFIG_DEBUG0_0_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG0_0_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_DEBUG0_0_RESERVED]

//>> SET_[OTL0_MISC_CONFIG_DEBUG0_ACT]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG0_ACT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG0_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG0_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG0_ACT]

//>> SET_[OTL0_MISC_CONFIG_DEBUG0_ACT]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG0_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG0_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG0_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG0_ACT]

//>> SET_[OTL0_MISC_CONFIG_DEBUG0_ACT]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG0_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG0));
#endif
    return o_data.setBit<OTL0_MISC_CONFIG_DEBUG0_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG0_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG0_ACT]

//>> CLEAR_[OTL0_MISC_CONFIG_DEBUG0_ACT]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_CONFIG_DEBUG0_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG0));
#endif
    return o_data.clearBit<OTL0_MISC_CONFIG_DEBUG0_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG0_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_CONFIG_DEBUG0_ACT]

//>> GET_[OTL0_MISC_CONFIG_DEBUG0_ACT]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG_DEBUG0_ACT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG_DEBUG0_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG0_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_DEBUG0_ACT]

//>> GET_[OTL0_MISC_CONFIG_DEBUG0_ACT]
static inline bool GET_OTL0_MISC_CONFIG_DEBUG0_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG0));
#endif
    return i_data.getBit<OTL0_MISC_CONFIG_DEBUG0_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG0_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_DEBUG0_ACT]

//>> PREP_[OTL0_MISC_CONFIG_TX_DLC]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL0_MISC_CONFIG_TX_DLC(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_CONFIG_TX_DLC;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL0_MISC_CONFIG_TX_DLC]

//>> GET_[OTL0_MISC_CONFIG_TX_DLC]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL0_MISC_CONFIG_TX_DLC(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_CONFIG_TX_DLC;
#endif
    return fapi2::getScom(i_target, OTL0_MISC_CONFIG_TX_DLC, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_TX_DLC]

//>> PUT_[OTL0_MISC_CONFIG_TX_DLC]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL0_MISC_CONFIG_TX_DLC(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TX_DLC));
#endif
    return fapi2::putScom(i_target, OTL0_MISC_CONFIG_TX_DLC, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL0_MISC_CONFIG_TX_DLC]


//>> SET_[OTL0_MISC_CONFIG_TX_DLC_CONFIG_TX_DL_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_TX_DLC_CONFIG_TX_DL_CREDITS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TX_DLC));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_TX_DLC_CONFIG_TX_DL_CREDITS,
           OTL0_MISC_CONFIG_TX_DLC_CONFIG_TX_DL_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG_TX_DLC_CONFIG_TX_DL_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_TX_DLC_CONFIG_TX_DL_CREDITS]

//>> SET_[OTL0_MISC_CONFIG_TX_DLC_CONFIG_TX_DL_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_TX_DLC_CONFIG_TX_DL_CREDITS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TX_DLC));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_TX_DLC_CONFIG_TX_DL_CREDITS,
           OTL0_MISC_CONFIG_TX_DLC_CONFIG_TX_DL_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG_TX_DLC_CONFIG_TX_DL_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_TX_DLC_CONFIG_TX_DL_CREDITS]

//>> GET_[OTL0_MISC_CONFIG_TX_DLC_CONFIG_TX_DL_CREDITS]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG_TX_DLC_CONFIG_TX_DL_CREDITS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TX_DLC));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG_TX_DLC_CONFIG_TX_DL_CREDITS,
           OTL0_MISC_CONFIG_TX_DLC_CONFIG_TX_DL_CREDITS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG_TX_DLC_CONFIG_TX_DL_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_TX_DLC_CONFIG_TX_DL_CREDITS]

//>> PREP_[OTL0_MISC_ERROR_SIG_RXI]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL0_MISC_ERROR_SIG_RXI(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_ERROR_SIG_RXI;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL0_MISC_ERROR_SIG_RXI]

//>> GET_[OTL0_MISC_ERROR_SIG_RXI]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL0_MISC_ERROR_SIG_RXI(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_ERROR_SIG_RXI;
#endif
    return fapi2::getScom(i_target, OTL0_MISC_ERROR_SIG_RXI, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL0_MISC_ERROR_SIG_RXI]

//>> PUT_[OTL0_MISC_ERROR_SIG_RXI]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL0_MISC_ERROR_SIG_RXI(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ERROR_SIG_RXI));
#endif
    return fapi2::putScom(i_target, OTL0_MISC_ERROR_SIG_RXI, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL0_MISC_ERROR_SIG_RXI]


//>> SET_[OTL0_MISC_ERROR_SIG_RXI_CAPTURED]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_ERROR_SIG_RXI_CAPTURED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ERROR_SIG_RXI));
#endif
    return o_data.insertFromRight<OTL0_MISC_ERROR_SIG_RXI_CAPTURED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_ERROR_SIG_RXI_CAPTURED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_ERROR_SIG_RXI_CAPTURED]

//>> SET_[OTL0_MISC_ERROR_SIG_RXI_CAPTURED]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_ERROR_SIG_RXI_CAPTURED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ERROR_SIG_RXI));
#endif
    return o_data.insertFromRight<OTL0_MISC_ERROR_SIG_RXI_CAPTURED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_ERROR_SIG_RXI_CAPTURED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_ERROR_SIG_RXI_CAPTURED]

//>> SET_[OTL0_MISC_ERROR_SIG_RXI_CAPTURED]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_ERROR_SIG_RXI_CAPTURED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ERROR_SIG_RXI));
#endif
    return o_data.setBit<OTL0_MISC_ERROR_SIG_RXI_CAPTURED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_ERROR_SIG_RXI_CAPTURED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_ERROR_SIG_RXI_CAPTURED]

//>> CLEAR_[OTL0_MISC_ERROR_SIG_RXI_CAPTURED]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_ERROR_SIG_RXI_CAPTURED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ERROR_SIG_RXI));
#endif
    return o_data.clearBit<OTL0_MISC_ERROR_SIG_RXI_CAPTURED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_ERROR_SIG_RXI_CAPTURED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_ERROR_SIG_RXI_CAPTURED]

//>> GET_[OTL0_MISC_ERROR_SIG_RXI_CAPTURED]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_ERROR_SIG_RXI_CAPTURED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ERROR_SIG_RXI));
#endif
    return i_data.extractToRight<OTL0_MISC_ERROR_SIG_RXI_CAPTURED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_ERROR_SIG_RXI_CAPTURED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_ERROR_SIG_RXI_CAPTURED]

//>> GET_[OTL0_MISC_ERROR_SIG_RXI_CAPTURED]
static inline bool GET_OTL0_MISC_ERROR_SIG_RXI_CAPTURED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ERROR_SIG_RXI));
#endif
    return i_data.getBit<OTL0_MISC_ERROR_SIG_RXI_CAPTURED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_ERROR_SIG_RXI_CAPTURED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_ERROR_SIG_RXI_CAPTURED]

//>> SET_[OTL0_MISC_ERROR_SIG_RXI_ENCODE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_ERROR_SIG_RXI_ENCODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ERROR_SIG_RXI));
#endif
    return o_data.insertFromRight<OTL0_MISC_ERROR_SIG_RXI_ENCODE,
           OTL0_MISC_ERROR_SIG_RXI_ENCODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_ERROR_SIG_RXI_ENCODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_ERROR_SIG_RXI_ENCODE]

//>> SET_[OTL0_MISC_ERROR_SIG_RXI_ENCODE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_ERROR_SIG_RXI_ENCODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ERROR_SIG_RXI));
#endif
    return o_data.insertFromRight<OTL0_MISC_ERROR_SIG_RXI_ENCODE,
           OTL0_MISC_ERROR_SIG_RXI_ENCODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_ERROR_SIG_RXI_ENCODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_ERROR_SIG_RXI_ENCODE]

//>> GET_[OTL0_MISC_ERROR_SIG_RXI_ENCODE]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_ERROR_SIG_RXI_ENCODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ERROR_SIG_RXI));
#endif
    return i_data.extractToRight<OTL0_MISC_ERROR_SIG_RXI_ENCODE,
           OTL0_MISC_ERROR_SIG_RXI_ENCODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_ERROR_SIG_RXI_ENCODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_ERROR_SIG_RXI_ENCODE]

//>> SET_[OTL0_MISC_ERROR_SIG_RXI_SIGNATURE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_ERROR_SIG_RXI_SIGNATURE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ERROR_SIG_RXI));
#endif
    return o_data.insertFromRight<OTL0_MISC_ERROR_SIG_RXI_SIGNATURE,
           OTL0_MISC_ERROR_SIG_RXI_SIGNATURE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_ERROR_SIG_RXI_SIGNATURE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_ERROR_SIG_RXI_SIGNATURE]

//>> SET_[OTL0_MISC_ERROR_SIG_RXI_SIGNATURE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_ERROR_SIG_RXI_SIGNATURE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ERROR_SIG_RXI));
#endif
    return o_data.insertFromRight<OTL0_MISC_ERROR_SIG_RXI_SIGNATURE,
           OTL0_MISC_ERROR_SIG_RXI_SIGNATURE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_ERROR_SIG_RXI_SIGNATURE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_ERROR_SIG_RXI_SIGNATURE]

//>> GET_[OTL0_MISC_ERROR_SIG_RXI_SIGNATURE]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_ERROR_SIG_RXI_SIGNATURE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ERROR_SIG_RXI));
#endif
    return i_data.extractToRight<OTL0_MISC_ERROR_SIG_RXI_SIGNATURE,
           OTL0_MISC_ERROR_SIG_RXI_SIGNATURE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_ERROR_SIG_RXI_SIGNATURE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_ERROR_SIG_RXI_SIGNATURE]

//>> PREP_[OTL1_MISC_CONFIG_DEBUG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL1_MISC_CONFIG_DEBUG1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_CONFIG_DEBUG1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL1_MISC_CONFIG_DEBUG1]

//>> GET_[OTL1_MISC_CONFIG_DEBUG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL1_MISC_CONFIG_DEBUG1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_CONFIG_DEBUG1;
#endif
    return fapi2::getScom(i_target, OTL1_MISC_CONFIG_DEBUG1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_DEBUG1]

//>> PUT_[OTL1_MISC_CONFIG_DEBUG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL1_MISC_CONFIG_DEBUG1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG1));
#endif
    return fapi2::putScom(i_target, OTL1_MISC_CONFIG_DEBUG1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL1_MISC_CONFIG_DEBUG1]


//>> SET_[OTL1_MISC_CONFIG_DEBUG1_BYTE0]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG1_BYTE0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG1_BYTE0,
           OTL1_MISC_CONFIG_DEBUG1_BYTE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG1_BYTE0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG1_BYTE0]

//>> SET_[OTL1_MISC_CONFIG_DEBUG1_BYTE0]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG1_BYTE0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG1_BYTE0,
           OTL1_MISC_CONFIG_DEBUG1_BYTE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG1_BYTE0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG1_BYTE0]

//>> GET_[OTL1_MISC_CONFIG_DEBUG1_BYTE0]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_DEBUG1_BYTE0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG1));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_DEBUG1_BYTE0,
           OTL1_MISC_CONFIG_DEBUG1_BYTE0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG1_BYTE0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_DEBUG1_BYTE0]

//>> SET_[OTL1_MISC_CONFIG_DEBUG1_BYTE1]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG1_BYTE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG1_BYTE1,
           OTL1_MISC_CONFIG_DEBUG1_BYTE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG1_BYTE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG1_BYTE1]

//>> SET_[OTL1_MISC_CONFIG_DEBUG1_BYTE1]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG1_BYTE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG1_BYTE1,
           OTL1_MISC_CONFIG_DEBUG1_BYTE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG1_BYTE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG1_BYTE1]

//>> GET_[OTL1_MISC_CONFIG_DEBUG1_BYTE1]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_DEBUG1_BYTE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG1));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_DEBUG1_BYTE1,
           OTL1_MISC_CONFIG_DEBUG1_BYTE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG1_BYTE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_DEBUG1_BYTE1]

//>> SET_[OTL1_MISC_CONFIG_DEBUG1_BYTE2]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG1_BYTE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG1_BYTE2,
           OTL1_MISC_CONFIG_DEBUG1_BYTE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG1_BYTE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG1_BYTE2]

//>> SET_[OTL1_MISC_CONFIG_DEBUG1_BYTE2]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG1_BYTE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG1_BYTE2,
           OTL1_MISC_CONFIG_DEBUG1_BYTE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG1_BYTE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG1_BYTE2]

//>> GET_[OTL1_MISC_CONFIG_DEBUG1_BYTE2]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_DEBUG1_BYTE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG1));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_DEBUG1_BYTE2,
           OTL1_MISC_CONFIG_DEBUG1_BYTE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG1_BYTE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_DEBUG1_BYTE2]

//>> SET_[OTL1_MISC_CONFIG_DEBUG1_BYTE3]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG1_BYTE3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG1_BYTE3,
           OTL1_MISC_CONFIG_DEBUG1_BYTE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG1_BYTE3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG1_BYTE3]

//>> SET_[OTL1_MISC_CONFIG_DEBUG1_BYTE3]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG1_BYTE3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG1_BYTE3,
           OTL1_MISC_CONFIG_DEBUG1_BYTE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG1_BYTE3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG1_BYTE3]

//>> GET_[OTL1_MISC_CONFIG_DEBUG1_BYTE3]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_DEBUG1_BYTE3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG1));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_DEBUG1_BYTE3,
           OTL1_MISC_CONFIG_DEBUG1_BYTE3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG1_BYTE3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_DEBUG1_BYTE3]

//>> SET_[OTL1_MISC_CONFIG_DEBUG1_BYTE4]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG1_BYTE4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG1_BYTE4,
           OTL1_MISC_CONFIG_DEBUG1_BYTE4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG1_BYTE4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG1_BYTE4]

//>> SET_[OTL1_MISC_CONFIG_DEBUG1_BYTE4]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG1_BYTE4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG1_BYTE4,
           OTL1_MISC_CONFIG_DEBUG1_BYTE4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG1_BYTE4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG1_BYTE4]

//>> GET_[OTL1_MISC_CONFIG_DEBUG1_BYTE4]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_DEBUG1_BYTE4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG1));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_DEBUG1_BYTE4,
           OTL1_MISC_CONFIG_DEBUG1_BYTE4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG1_BYTE4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_DEBUG1_BYTE4]

//>> SET_[OTL1_MISC_CONFIG_DEBUG1_BYTE5]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG1_BYTE5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG1_BYTE5,
           OTL1_MISC_CONFIG_DEBUG1_BYTE5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG1_BYTE5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG1_BYTE5]

//>> SET_[OTL1_MISC_CONFIG_DEBUG1_BYTE5]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG1_BYTE5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG1_BYTE5,
           OTL1_MISC_CONFIG_DEBUG1_BYTE5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG1_BYTE5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG1_BYTE5]

//>> GET_[OTL1_MISC_CONFIG_DEBUG1_BYTE5]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_DEBUG1_BYTE5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG1));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_DEBUG1_BYTE5,
           OTL1_MISC_CONFIG_DEBUG1_BYTE5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG1_BYTE5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_DEBUG1_BYTE5]

//>> SET_[OTL1_MISC_CONFIG_DEBUG1_BYTE6]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG1_BYTE6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG1_BYTE6,
           OTL1_MISC_CONFIG_DEBUG1_BYTE6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG1_BYTE6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG1_BYTE6]

//>> SET_[OTL1_MISC_CONFIG_DEBUG1_BYTE6]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG1_BYTE6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG1_BYTE6,
           OTL1_MISC_CONFIG_DEBUG1_BYTE6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG1_BYTE6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG1_BYTE6]

//>> GET_[OTL1_MISC_CONFIG_DEBUG1_BYTE6]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_DEBUG1_BYTE6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG1));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_DEBUG1_BYTE6,
           OTL1_MISC_CONFIG_DEBUG1_BYTE6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG1_BYTE6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_DEBUG1_BYTE6]

//>> SET_[OTL1_MISC_CONFIG_DEBUG1_BYTE7]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG1_BYTE7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG1_BYTE7,
           OTL1_MISC_CONFIG_DEBUG1_BYTE7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG1_BYTE7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG1_BYTE7]

//>> SET_[OTL1_MISC_CONFIG_DEBUG1_BYTE7]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG1_BYTE7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG1_BYTE7,
           OTL1_MISC_CONFIG_DEBUG1_BYTE7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG1_BYTE7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG1_BYTE7]

//>> GET_[OTL1_MISC_CONFIG_DEBUG1_BYTE7]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_DEBUG1_BYTE7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG1));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_DEBUG1_BYTE7,
           OTL1_MISC_CONFIG_DEBUG1_BYTE7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG1_BYTE7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_DEBUG1_BYTE7]

//>> SET_[OTL1_MISC_CONFIG_DEBUG1_BYTE8]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG1_BYTE8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG1_BYTE8,
           OTL1_MISC_CONFIG_DEBUG1_BYTE8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG1_BYTE8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG1_BYTE8]

//>> SET_[OTL1_MISC_CONFIG_DEBUG1_BYTE8]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG1_BYTE8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG1_BYTE8,
           OTL1_MISC_CONFIG_DEBUG1_BYTE8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG1_BYTE8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG1_BYTE8]

//>> GET_[OTL1_MISC_CONFIG_DEBUG1_BYTE8]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_DEBUG1_BYTE8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG1));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_DEBUG1_BYTE8,
           OTL1_MISC_CONFIG_DEBUG1_BYTE8_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG1_BYTE8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_DEBUG1_BYTE8]

//>> SET_[OTL1_MISC_CONFIG_DEBUG1_BYTE9]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG1_BYTE9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG1_BYTE9,
           OTL1_MISC_CONFIG_DEBUG1_BYTE9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG1_BYTE9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG1_BYTE9]

//>> SET_[OTL1_MISC_CONFIG_DEBUG1_BYTE9]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG1_BYTE9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG1_BYTE9,
           OTL1_MISC_CONFIG_DEBUG1_BYTE9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG1_BYTE9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG1_BYTE9]

//>> GET_[OTL1_MISC_CONFIG_DEBUG1_BYTE9]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_DEBUG1_BYTE9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG1));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_DEBUG1_BYTE9,
           OTL1_MISC_CONFIG_DEBUG1_BYTE9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG1_BYTE9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_DEBUG1_BYTE9]

//>> SET_[OTL1_MISC_CONFIG_DEBUG1_BYTE10]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG1_BYTE10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG1_BYTE10,
           OTL1_MISC_CONFIG_DEBUG1_BYTE10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG1_BYTE10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG1_BYTE10]

//>> SET_[OTL1_MISC_CONFIG_DEBUG1_BYTE10]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG1_BYTE10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG1_BYTE10,
           OTL1_MISC_CONFIG_DEBUG1_BYTE10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG1_BYTE10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG1_BYTE10]

//>> GET_[OTL1_MISC_CONFIG_DEBUG1_BYTE10]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_DEBUG1_BYTE10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG1));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_DEBUG1_BYTE10,
           OTL1_MISC_CONFIG_DEBUG1_BYTE10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG1_BYTE10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_DEBUG1_BYTE10]

//>> SET_[OTL1_MISC_CONFIG_DEBUG1_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG1_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG1_RESERVED,
           OTL1_MISC_CONFIG_DEBUG1_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG1_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG1_RESERVED]

//>> SET_[OTL1_MISC_CONFIG_DEBUG1_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG1_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG1_RESERVED,
           OTL1_MISC_CONFIG_DEBUG1_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG1_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG1_RESERVED]

//>> GET_[OTL1_MISC_CONFIG_DEBUG1_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_DEBUG1_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG1));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_DEBUG1_RESERVED,
           OTL1_MISC_CONFIG_DEBUG1_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG1_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_DEBUG1_RESERVED]

//>> PREP_[OTL1_MISC_HAPPI_BAR1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL1_MISC_HAPPI_BAR1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_HAPPI_BAR1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL1_MISC_HAPPI_BAR1]

//>> GET_[OTL1_MISC_HAPPI_BAR1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL1_MISC_HAPPI_BAR1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_HAPPI_BAR1;
#endif
    return fapi2::getScom(i_target, OTL1_MISC_HAPPI_BAR1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL1_MISC_HAPPI_BAR1]

//>> PUT_[OTL1_MISC_HAPPI_BAR1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL1_MISC_HAPPI_BAR1(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR1));
#endif
    return fapi2::putScom(i_target, OTL1_MISC_HAPPI_BAR1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL1_MISC_HAPPI_BAR1]


//>> SET_[OTL1_MISC_HAPPI_BAR1_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_HAPPI_BAR1_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR1));
#endif
    return o_data.insertFromRight<OTL1_MISC_HAPPI_BAR1_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_HAPPI_BAR1_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_HAPPI_BAR1_ENABLE]

//>> SET_[OTL1_MISC_HAPPI_BAR1_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_HAPPI_BAR1_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR1));
#endif
    return o_data.insertFromRight<OTL1_MISC_HAPPI_BAR1_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_HAPPI_BAR1_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_HAPPI_BAR1_ENABLE]

//>> SET_[OTL1_MISC_HAPPI_BAR1_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_HAPPI_BAR1_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR1));
#endif
    return o_data.setBit<OTL1_MISC_HAPPI_BAR1_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_HAPPI_BAR1_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_HAPPI_BAR1_ENABLE]

//>> CLEAR_[OTL1_MISC_HAPPI_BAR1_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_HAPPI_BAR1_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR1));
#endif
    return o_data.clearBit<OTL1_MISC_HAPPI_BAR1_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_HAPPI_BAR1_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_HAPPI_BAR1_ENABLE]

//>> GET_[OTL1_MISC_HAPPI_BAR1_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_HAPPI_BAR1_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR1));
#endif
    return i_data.extractToRight<OTL1_MISC_HAPPI_BAR1_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_HAPPI_BAR1_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_HAPPI_BAR1_ENABLE]

//>> GET_[OTL1_MISC_HAPPI_BAR1_ENABLE]
static inline bool GET_OTL1_MISC_HAPPI_BAR1_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR1));
#endif
    return i_data.getBit<OTL1_MISC_HAPPI_BAR1_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_HAPPI_BAR1_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_HAPPI_BAR1_ENABLE]

//>> SET_[OTL1_MISC_HAPPI_BAR1_ADDR]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_HAPPI_BAR1_ADDR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR1));
#endif
    return o_data.insertFromRight<OTL1_MISC_HAPPI_BAR1_ADDR,
           OTL1_MISC_HAPPI_BAR1_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_HAPPI_BAR1_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_HAPPI_BAR1_ADDR]

//>> SET_[OTL1_MISC_HAPPI_BAR1_ADDR]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_HAPPI_BAR1_ADDR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR1));
#endif
    return o_data.insertFromRight<OTL1_MISC_HAPPI_BAR1_ADDR,
           OTL1_MISC_HAPPI_BAR1_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_HAPPI_BAR1_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_HAPPI_BAR1_ADDR]

//>> GET_[OTL1_MISC_HAPPI_BAR1_ADDR]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_HAPPI_BAR1_ADDR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR1));
#endif
    return i_data.extractToRight<OTL1_MISC_HAPPI_BAR1_ADDR,
           OTL1_MISC_HAPPI_BAR1_ADDR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_HAPPI_BAR1_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_HAPPI_BAR1_ADDR]

//>> SET_[OTL1_MISC_HAPPI_BAR1_MASK]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_HAPPI_BAR1_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR1));
#endif
    return o_data.insertFromRight<OTL1_MISC_HAPPI_BAR1_MASK,
           OTL1_MISC_HAPPI_BAR1_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_HAPPI_BAR1_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_HAPPI_BAR1_MASK]

//>> SET_[OTL1_MISC_HAPPI_BAR1_MASK]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_HAPPI_BAR1_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR1));
#endif
    return o_data.insertFromRight<OTL1_MISC_HAPPI_BAR1_MASK,
           OTL1_MISC_HAPPI_BAR1_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_HAPPI_BAR1_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_HAPPI_BAR1_MASK]

//>> GET_[OTL1_MISC_HAPPI_BAR1_MASK]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_HAPPI_BAR1_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR1));
#endif
    return i_data.extractToRight<OTL1_MISC_HAPPI_BAR1_MASK,
           OTL1_MISC_HAPPI_BAR1_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_HAPPI_BAR1_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_HAPPI_BAR1_MASK]

//>> SET_[OTL1_MISC_HAPPI_BAR1_SUB]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_HAPPI_BAR1_SUB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR1));
#endif
    return o_data.insertFromRight<OTL1_MISC_HAPPI_BAR1_SUB,
           OTL1_MISC_HAPPI_BAR1_SUB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_HAPPI_BAR1_SUB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_HAPPI_BAR1_SUB]

//>> SET_[OTL1_MISC_HAPPI_BAR1_SUB]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_HAPPI_BAR1_SUB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR1));
#endif
    return o_data.insertFromRight<OTL1_MISC_HAPPI_BAR1_SUB,
           OTL1_MISC_HAPPI_BAR1_SUB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_HAPPI_BAR1_SUB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_HAPPI_BAR1_SUB]

//>> GET_[OTL1_MISC_HAPPI_BAR1_SUB]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_HAPPI_BAR1_SUB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR1));
#endif
    return i_data.extractToRight<OTL1_MISC_HAPPI_BAR1_SUB,
           OTL1_MISC_HAPPI_BAR1_SUB_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_HAPPI_BAR1_SUB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_HAPPI_BAR1_SUB]

//>> PREP_[OTL1_MISC_PMU_CONTROL2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL1_MISC_PMU_CONTROL2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_PMU_CONTROL2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL1_MISC_PMU_CONTROL2]

//>> GET_[OTL1_MISC_PMU_CONTROL2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL1_MISC_PMU_CONTROL2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_PMU_CONTROL2;
#endif
    return fapi2::getScom(i_target, OTL1_MISC_PMU_CONTROL2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL1_MISC_PMU_CONTROL2]

//>> PUT_[OTL1_MISC_PMU_CONTROL2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL1_MISC_PMU_CONTROL2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL2));
#endif
    return fapi2::putScom(i_target, OTL1_MISC_PMU_CONTROL2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL1_MISC_PMU_CONTROL2]


//>> SET_[OTL1_MISC_PMU_CONTROL2_C01_DCMASKA]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL2_C01_DCMASKA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL2));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL2_C01_DCMASKA,
           OTL1_MISC_PMU_CONTROL2_C01_DCMASKA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL2_C01_DCMASKA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL2_C01_DCMASKA]

//>> SET_[OTL1_MISC_PMU_CONTROL2_C01_DCMASKA]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL2_C01_DCMASKA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL2));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL2_C01_DCMASKA,
           OTL1_MISC_PMU_CONTROL2_C01_DCMASKA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL2_C01_DCMASKA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL2_C01_DCMASKA]

//>> GET_[OTL1_MISC_PMU_CONTROL2_C01_DCMASKA]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PMU_CONTROL2_C01_DCMASKA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL2));
#endif
    return i_data.extractToRight<OTL1_MISC_PMU_CONTROL2_C01_DCMASKA,
           OTL1_MISC_PMU_CONTROL2_C01_DCMASKA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL2_C01_DCMASKA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PMU_CONTROL2_C01_DCMASKA]

//>> SET_[OTL1_MISC_PMU_CONTROL2_C01_DCMASKB]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL2_C01_DCMASKB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL2));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL2_C01_DCMASKB,
           OTL1_MISC_PMU_CONTROL2_C01_DCMASKB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL2_C01_DCMASKB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL2_C01_DCMASKB]

//>> SET_[OTL1_MISC_PMU_CONTROL2_C01_DCMASKB]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL2_C01_DCMASKB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL2));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL2_C01_DCMASKB,
           OTL1_MISC_PMU_CONTROL2_C01_DCMASKB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL2_C01_DCMASKB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL2_C01_DCMASKB]

//>> GET_[OTL1_MISC_PMU_CONTROL2_C01_DCMASKB]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PMU_CONTROL2_C01_DCMASKB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL2));
#endif
    return i_data.extractToRight<OTL1_MISC_PMU_CONTROL2_C01_DCMASKB,
           OTL1_MISC_PMU_CONTROL2_C01_DCMASKB_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL2_C01_DCMASKB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PMU_CONTROL2_C01_DCMASKB]

//>> SET_[OTL1_MISC_PMU_CONTROL2_C23_DCMASKA]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL2_C23_DCMASKA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL2));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL2_C23_DCMASKA,
           OTL1_MISC_PMU_CONTROL2_C23_DCMASKA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL2_C23_DCMASKA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL2_C23_DCMASKA]

//>> SET_[OTL1_MISC_PMU_CONTROL2_C23_DCMASKA]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL2_C23_DCMASKA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL2));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL2_C23_DCMASKA,
           OTL1_MISC_PMU_CONTROL2_C23_DCMASKA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL2_C23_DCMASKA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL2_C23_DCMASKA]

//>> GET_[OTL1_MISC_PMU_CONTROL2_C23_DCMASKA]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PMU_CONTROL2_C23_DCMASKA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL2));
#endif
    return i_data.extractToRight<OTL1_MISC_PMU_CONTROL2_C23_DCMASKA,
           OTL1_MISC_PMU_CONTROL2_C23_DCMASKA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL2_C23_DCMASKA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PMU_CONTROL2_C23_DCMASKA]

//>> SET_[OTL1_MISC_PMU_CONTROL2_C23_DCMASKB]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL2_C23_DCMASKB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL2));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL2_C23_DCMASKB,
           OTL1_MISC_PMU_CONTROL2_C23_DCMASKB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL2_C23_DCMASKB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL2_C23_DCMASKB]

//>> SET_[OTL1_MISC_PMU_CONTROL2_C23_DCMASKB]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL2_C23_DCMASKB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL2));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL2_C23_DCMASKB,
           OTL1_MISC_PMU_CONTROL2_C23_DCMASKB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL2_C23_DCMASKB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL2_C23_DCMASKB]

//>> GET_[OTL1_MISC_PMU_CONTROL2_C23_DCMASKB]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PMU_CONTROL2_C23_DCMASKB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL2));
#endif
    return i_data.extractToRight<OTL1_MISC_PMU_CONTROL2_C23_DCMASKB,
           OTL1_MISC_PMU_CONTROL2_C23_DCMASKB_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL2_C23_DCMASKB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PMU_CONTROL2_C23_DCMASKB]

//>> SET_[OTL1_MISC_PMU_CONTROL2_C01_DCMASKDLA]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL2_C01_DCMASKDLA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL2));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL2_C01_DCMASKDLA,
           OTL1_MISC_PMU_CONTROL2_C01_DCMASKDLA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL2_C01_DCMASKDLA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL2_C01_DCMASKDLA]

//>> SET_[OTL1_MISC_PMU_CONTROL2_C01_DCMASKDLA]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL2_C01_DCMASKDLA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL2));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL2_C01_DCMASKDLA,
           OTL1_MISC_PMU_CONTROL2_C01_DCMASKDLA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL2_C01_DCMASKDLA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL2_C01_DCMASKDLA]

//>> GET_[OTL1_MISC_PMU_CONTROL2_C01_DCMASKDLA]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PMU_CONTROL2_C01_DCMASKDLA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL2));
#endif
    return i_data.extractToRight<OTL1_MISC_PMU_CONTROL2_C01_DCMASKDLA,
           OTL1_MISC_PMU_CONTROL2_C01_DCMASKDLA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL2_C01_DCMASKDLA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PMU_CONTROL2_C01_DCMASKDLA]

//>> SET_[OTL1_MISC_PMU_CONTROL2_C01_DCMASKDLB]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL2_C01_DCMASKDLB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL2));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL2_C01_DCMASKDLB,
           OTL1_MISC_PMU_CONTROL2_C01_DCMASKDLB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL2_C01_DCMASKDLB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL2_C01_DCMASKDLB]

//>> SET_[OTL1_MISC_PMU_CONTROL2_C01_DCMASKDLB]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL2_C01_DCMASKDLB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL2));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL2_C01_DCMASKDLB,
           OTL1_MISC_PMU_CONTROL2_C01_DCMASKDLB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL2_C01_DCMASKDLB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL2_C01_DCMASKDLB]

//>> GET_[OTL1_MISC_PMU_CONTROL2_C01_DCMASKDLB]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PMU_CONTROL2_C01_DCMASKDLB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL2));
#endif
    return i_data.extractToRight<OTL1_MISC_PMU_CONTROL2_C01_DCMASKDLB,
           OTL1_MISC_PMU_CONTROL2_C01_DCMASKDLB_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL2_C01_DCMASKDLB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PMU_CONTROL2_C01_DCMASKDLB]

//>> SET_[OTL1_MISC_PMU_CONTROL2_C23_DCMASKDLA]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL2_C23_DCMASKDLA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL2));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL2_C23_DCMASKDLA,
           OTL1_MISC_PMU_CONTROL2_C23_DCMASKDLA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL2_C23_DCMASKDLA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL2_C23_DCMASKDLA]

//>> SET_[OTL1_MISC_PMU_CONTROL2_C23_DCMASKDLA]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL2_C23_DCMASKDLA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL2));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL2_C23_DCMASKDLA,
           OTL1_MISC_PMU_CONTROL2_C23_DCMASKDLA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL2_C23_DCMASKDLA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL2_C23_DCMASKDLA]

//>> GET_[OTL1_MISC_PMU_CONTROL2_C23_DCMASKDLA]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PMU_CONTROL2_C23_DCMASKDLA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL2));
#endif
    return i_data.extractToRight<OTL1_MISC_PMU_CONTROL2_C23_DCMASKDLA,
           OTL1_MISC_PMU_CONTROL2_C23_DCMASKDLA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL2_C23_DCMASKDLA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PMU_CONTROL2_C23_DCMASKDLA]

//>> SET_[OTL1_MISC_PMU_CONTROL2_C23_DCMASKDLB]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL2_C23_DCMASKDLB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL2));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL2_C23_DCMASKDLB,
           OTL1_MISC_PMU_CONTROL2_C23_DCMASKDLB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL2_C23_DCMASKDLB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL2_C23_DCMASKDLB]

//>> SET_[OTL1_MISC_PMU_CONTROL2_C23_DCMASKDLB]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL2_C23_DCMASKDLB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL2));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL2_C23_DCMASKDLB,
           OTL1_MISC_PMU_CONTROL2_C23_DCMASKDLB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL2_C23_DCMASKDLB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL2_C23_DCMASKDLB]

//>> GET_[OTL1_MISC_PMU_CONTROL2_C23_DCMASKDLB]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PMU_CONTROL2_C23_DCMASKDLB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL2));
#endif
    return i_data.extractToRight<OTL1_MISC_PMU_CONTROL2_C23_DCMASKDLB,
           OTL1_MISC_PMU_CONTROL2_C23_DCMASKDLB_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL2_C23_DCMASKDLB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PMU_CONTROL2_C23_DCMASKDLB]

//>> SET_[OTL1_MISC_PMU_CONTROL2_DCMASK_LATENCY]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL2_DCMASK_LATENCY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL2));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL2_DCMASK_LATENCY,
           OTL1_MISC_PMU_CONTROL2_DCMASK_LATENCY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL2_DCMASK_LATENCY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL2_DCMASK_LATENCY]

//>> SET_[OTL1_MISC_PMU_CONTROL2_DCMASK_LATENCY]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL2_DCMASK_LATENCY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL2));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL2_DCMASK_LATENCY,
           OTL1_MISC_PMU_CONTROL2_DCMASK_LATENCY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL2_DCMASK_LATENCY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL2_DCMASK_LATENCY]

//>> GET_[OTL1_MISC_PMU_CONTROL2_DCMASK_LATENCY]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PMU_CONTROL2_DCMASK_LATENCY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL2));
#endif
    return i_data.extractToRight<OTL1_MISC_PMU_CONTROL2_DCMASK_LATENCY,
           OTL1_MISC_PMU_CONTROL2_DCMASK_LATENCY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL2_DCMASK_LATENCY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PMU_CONTROL2_DCMASK_LATENCY]

//>> SET_[OTL1_MISC_PMU_CONTROL2_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL2_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL2));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL2_RESERVED2,
           OTL1_MISC_PMU_CONTROL2_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL2_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL2_RESERVED2]

//>> SET_[OTL1_MISC_PMU_CONTROL2_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL2_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL2));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL2_RESERVED2,
           OTL1_MISC_PMU_CONTROL2_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL2_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL2_RESERVED2]

//>> GET_[OTL1_MISC_PMU_CONTROL2_RESERVED2]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PMU_CONTROL2_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL2));
#endif
    return i_data.extractToRight<OTL1_MISC_PMU_CONTROL2_RESERVED2,
           OTL1_MISC_PMU_CONTROL2_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL2_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PMU_CONTROL2_RESERVED2]

//>> PREP_[OTL1_MISC_PSL_TFC_AN]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL1_MISC_PSL_TFC_AN(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_PSL_TFC_AN;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL1_MISC_PSL_TFC_AN]

//>> GET_[OTL1_MISC_PSL_TFC_AN]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL1_MISC_PSL_TFC_AN(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_PSL_TFC_AN;
#endif
    return fapi2::getScom(i_target, OTL1_MISC_PSL_TFC_AN, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL1_MISC_PSL_TFC_AN]

//>> PUT_[OTL1_MISC_PSL_TFC_AN]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL1_MISC_PSL_TFC_AN(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_TFC_AN));
#endif
    return fapi2::putScom(i_target, OTL1_MISC_PSL_TFC_AN, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL1_MISC_PSL_TFC_AN]


//>> SET_[OTL1_MISC_PSL_TFC_AN_TFC_ACK]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PSL_TFC_AN_TFC_ACK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_TFC_AN));
#endif
    return o_data.insertFromRight<OTL1_MISC_PSL_TFC_AN_TFC_ACK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_PSL_TFC_AN_TFC_ACK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PSL_TFC_AN_TFC_ACK]

//>> SET_[OTL1_MISC_PSL_TFC_AN_TFC_ACK]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PSL_TFC_AN_TFC_ACK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_TFC_AN));
#endif
    return o_data.insertFromRight<OTL1_MISC_PSL_TFC_AN_TFC_ACK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_PSL_TFC_AN_TFC_ACK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PSL_TFC_AN_TFC_ACK]

//>> SET_[OTL1_MISC_PSL_TFC_AN_TFC_ACK]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PSL_TFC_AN_TFC_ACK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_TFC_AN));
#endif
    return o_data.setBit<OTL1_MISC_PSL_TFC_AN_TFC_ACK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_PSL_TFC_AN_TFC_ACK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PSL_TFC_AN_TFC_ACK]

//>> CLEAR_[OTL1_MISC_PSL_TFC_AN_TFC_ACK]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_PSL_TFC_AN_TFC_ACK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_TFC_AN));
#endif
    return o_data.clearBit<OTL1_MISC_PSL_TFC_AN_TFC_ACK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_PSL_TFC_AN_TFC_ACK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_PSL_TFC_AN_TFC_ACK]

//>> GET_[OTL1_MISC_PSL_TFC_AN_TFC_ACK]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PSL_TFC_AN_TFC_ACK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_TFC_AN));
#endif
    return i_data.extractToRight<OTL1_MISC_PSL_TFC_AN_TFC_ACK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_PSL_TFC_AN_TFC_ACK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PSL_TFC_AN_TFC_ACK]

//>> GET_[OTL1_MISC_PSL_TFC_AN_TFC_ACK]
static inline bool GET_OTL1_MISC_PSL_TFC_AN_TFC_ACK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_TFC_AN));
#endif
    return i_data.getBit<OTL1_MISC_PSL_TFC_AN_TFC_ACK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_PSL_TFC_AN_TFC_ACK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PSL_TFC_AN_TFC_ACK]

//>> SET_[OTL1_MISC_PSL_TFC_AN_C]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PSL_TFC_AN_C(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_TFC_AN));
#endif
    return o_data.insertFromRight<OTL1_MISC_PSL_TFC_AN_C,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_PSL_TFC_AN_C chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PSL_TFC_AN_C]

//>> SET_[OTL1_MISC_PSL_TFC_AN_C]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PSL_TFC_AN_C(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_TFC_AN));
#endif
    return o_data.insertFromRight<OTL1_MISC_PSL_TFC_AN_C,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_PSL_TFC_AN_C chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PSL_TFC_AN_C]

//>> SET_[OTL1_MISC_PSL_TFC_AN_C]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PSL_TFC_AN_C(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_TFC_AN));
#endif
    return o_data.setBit<OTL1_MISC_PSL_TFC_AN_C>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_PSL_TFC_AN_C chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PSL_TFC_AN_C]

//>> CLEAR_[OTL1_MISC_PSL_TFC_AN_C]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_PSL_TFC_AN_C(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_TFC_AN));
#endif
    return o_data.clearBit<OTL1_MISC_PSL_TFC_AN_C>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_PSL_TFC_AN_C chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_PSL_TFC_AN_C]

//>> GET_[OTL1_MISC_PSL_TFC_AN_C]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PSL_TFC_AN_C(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_TFC_AN));
#endif
    return i_data.extractToRight<OTL1_MISC_PSL_TFC_AN_C,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_PSL_TFC_AN_C chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PSL_TFC_AN_C]

//>> GET_[OTL1_MISC_PSL_TFC_AN_C]
static inline bool GET_OTL1_MISC_PSL_TFC_AN_C(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_TFC_AN));
#endif
    return i_data.getBit<OTL1_MISC_PSL_TFC_AN_C>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_PSL_TFC_AN_C chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PSL_TFC_AN_C]

//>> SET_[OTL1_MISC_PSL_TFC_AN_AE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PSL_TFC_AN_AE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_TFC_AN));
#endif
    return o_data.insertFromRight<OTL1_MISC_PSL_TFC_AN_AE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_PSL_TFC_AN_AE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PSL_TFC_AN_AE]

//>> SET_[OTL1_MISC_PSL_TFC_AN_AE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PSL_TFC_AN_AE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_TFC_AN));
#endif
    return o_data.insertFromRight<OTL1_MISC_PSL_TFC_AN_AE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_PSL_TFC_AN_AE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PSL_TFC_AN_AE]

//>> SET_[OTL1_MISC_PSL_TFC_AN_AE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PSL_TFC_AN_AE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_TFC_AN));
#endif
    return o_data.setBit<OTL1_MISC_PSL_TFC_AN_AE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_PSL_TFC_AN_AE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PSL_TFC_AN_AE]

//>> CLEAR_[OTL1_MISC_PSL_TFC_AN_AE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_PSL_TFC_AN_AE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_TFC_AN));
#endif
    return o_data.clearBit<OTL1_MISC_PSL_TFC_AN_AE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_PSL_TFC_AN_AE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_PSL_TFC_AN_AE]

//>> GET_[OTL1_MISC_PSL_TFC_AN_AE]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PSL_TFC_AN_AE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_TFC_AN));
#endif
    return i_data.extractToRight<OTL1_MISC_PSL_TFC_AN_AE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_PSL_TFC_AN_AE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PSL_TFC_AN_AE]

//>> GET_[OTL1_MISC_PSL_TFC_AN_AE]
static inline bool GET_OTL1_MISC_PSL_TFC_AN_AE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_TFC_AN));
#endif
    return i_data.getBit<OTL1_MISC_PSL_TFC_AN_AE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_PSL_TFC_AN_AE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PSL_TFC_AN_AE]

//>> SET_[OTL1_MISC_PSL_TFC_AN_R]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PSL_TFC_AN_R(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_TFC_AN));
#endif
    return o_data.insertFromRight<OTL1_MISC_PSL_TFC_AN_R,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_PSL_TFC_AN_R chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PSL_TFC_AN_R]

//>> SET_[OTL1_MISC_PSL_TFC_AN_R]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PSL_TFC_AN_R(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_TFC_AN));
#endif
    return o_data.insertFromRight<OTL1_MISC_PSL_TFC_AN_R,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_PSL_TFC_AN_R chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PSL_TFC_AN_R]

//>> SET_[OTL1_MISC_PSL_TFC_AN_R]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PSL_TFC_AN_R(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_TFC_AN));
#endif
    return o_data.setBit<OTL1_MISC_PSL_TFC_AN_R>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_PSL_TFC_AN_R chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PSL_TFC_AN_R]

//>> CLEAR_[OTL1_MISC_PSL_TFC_AN_R]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_PSL_TFC_AN_R(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_TFC_AN));
#endif
    return o_data.clearBit<OTL1_MISC_PSL_TFC_AN_R>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_PSL_TFC_AN_R chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_PSL_TFC_AN_R]

//>> GET_[OTL1_MISC_PSL_TFC_AN_R]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PSL_TFC_AN_R(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_TFC_AN));
#endif
    return i_data.extractToRight<OTL1_MISC_PSL_TFC_AN_R,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_PSL_TFC_AN_R chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PSL_TFC_AN_R]

//>> GET_[OTL1_MISC_PSL_TFC_AN_R]
static inline bool GET_OTL1_MISC_PSL_TFC_AN_R(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_TFC_AN));
#endif
    return i_data.getBit<OTL1_MISC_PSL_TFC_AN_R>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_PSL_TFC_AN_R chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PSL_TFC_AN_R]

//>> PREP_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0;
#endif
    return fapi2::getScom(i_target, XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0]

//>> PUT_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0));
#endif
    return fapi2::putScom(i_target, XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0]


//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_MULTI_AFU_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_MULTI_AFU_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_MULTI_AFU_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_MULTI_AFU_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_MULTI_AFU_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_MULTI_AFU_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_MULTI_AFU_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_MULTI_AFU_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_MULTI_AFU_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_MULTI_AFU_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_MULTI_AFU_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_MULTI_AFU_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0));
#endif
    return o_data.setBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_MULTI_AFU_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_MULTI_AFU_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_MULTI_AFU_DIAL]

//>> CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_MULTI_AFU_DIAL]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_MULTI_AFU_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0));
#endif
    return o_data.clearBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_MULTI_AFU_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_MULTI_AFU_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_MULTI_AFU_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_MULTI_AFU_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_MULTI_AFU_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_MULTI_AFU_DIAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_MULTI_AFU_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_MULTI_AFU_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_MULTI_AFU_DIAL]
static inline bool GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_MULTI_AFU_DIAL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0));
#endif
    return i_data.getBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_MULTI_AFU_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_MULTI_AFU_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_MULTI_AFU_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_64K_PG_DISABLE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_64K_PG_DISABLE_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_64K_PG_DISABLE_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_64K_PG_DISABLE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_64K_PG_DISABLE_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_64K_PG_DISABLE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_64K_PG_DISABLE_DIAL(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_64K_PG_DISABLE_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_64K_PG_DISABLE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_64K_PG_DISABLE_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_64K_PG_DISABLE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_64K_PG_DISABLE_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0));
#endif
    return o_data.setBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_64K_PG_DISABLE_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_64K_PG_DISABLE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_64K_PG_DISABLE_DIAL]

//>> CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_64K_PG_DISABLE_DIAL]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_64K_PG_DISABLE_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0));
#endif
    return o_data.clearBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_64K_PG_DISABLE_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_64K_PG_DISABLE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_64K_PG_DISABLE_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_64K_PG_DISABLE_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_64K_PG_DISABLE_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_64K_PG_DISABLE_DIAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_64K_PG_DISABLE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_64K_PG_DISABLE_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_64K_PG_DISABLE_DIAL]
static inline bool GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_64K_PG_DISABLE_DIAL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0));
#endif
    return i_data.getBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_64K_PG_DISABLE_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_64K_PG_DISABLE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_64K_PG_DISABLE_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_2M_PG_DISABLE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_2M_PG_DISABLE_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_2M_PG_DISABLE_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_2M_PG_DISABLE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_2M_PG_DISABLE_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_2M_PG_DISABLE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_2M_PG_DISABLE_DIAL(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_2M_PG_DISABLE_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_2M_PG_DISABLE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_2M_PG_DISABLE_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_2M_PG_DISABLE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_2M_PG_DISABLE_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0));
#endif
    return o_data.setBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_2M_PG_DISABLE_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_2M_PG_DISABLE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_2M_PG_DISABLE_DIAL]

//>> CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_2M_PG_DISABLE_DIAL]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_2M_PG_DISABLE_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0));
#endif
    return o_data.clearBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_2M_PG_DISABLE_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_2M_PG_DISABLE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_2M_PG_DISABLE_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_2M_PG_DISABLE_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_2M_PG_DISABLE_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_2M_PG_DISABLE_DIAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_2M_PG_DISABLE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_2M_PG_DISABLE_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_2M_PG_DISABLE_DIAL]
static inline bool GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_2M_PG_DISABLE_DIAL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0));
#endif
    return i_data.getBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_2M_PG_DISABLE_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_2M_PG_DISABLE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_2M_PG_DISABLE_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_OPENCAPI3_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_OPENCAPI3_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_OPENCAPI3_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_OPENCAPI3_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_OPENCAPI3_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_OPENCAPI3_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_OPENCAPI3_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_OPENCAPI3_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_OPENCAPI3_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_OPENCAPI3_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_OPENCAPI3_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_OPENCAPI3_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0));
#endif
    return o_data.setBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_OPENCAPI3_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_OPENCAPI3_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_OPENCAPI3_DIAL]

//>> CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_OPENCAPI3_DIAL]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_OPENCAPI3_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0));
#endif
    return o_data.clearBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_OPENCAPI3_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_OPENCAPI3_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_OPENCAPI3_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_OPENCAPI3_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_OPENCAPI3_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_OPENCAPI3_DIAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_OPENCAPI3_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_OPENCAPI3_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_OPENCAPI3_DIAL]
static inline bool GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_OPENCAPI3_DIAL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0));
#endif
    return i_data.getBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_OPENCAPI3_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_OPENCAPI3_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_OPENCAPI3_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_KILL_XLATE_TYPE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_KILL_XLATE_TYPE_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_KILL_XLATE_TYPE_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_KILL_XLATE_TYPE_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_KILL_XLATE_TYPE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_KILL_XLATE_TYPE_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_KILL_XLATE_TYPE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_KILL_XLATE_TYPE_DIAL(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_KILL_XLATE_TYPE_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_KILL_XLATE_TYPE_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_KILL_XLATE_TYPE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_KILL_XLATE_TYPE_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_KILL_XLATE_TYPE_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_KILL_XLATE_TYPE_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_KILL_XLATE_TYPE_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_KILL_XLATE_TYPE_DIAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_KILL_XLATE_TYPE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG0_KILL_XLATE_TYPE_DIAL]

//>> PREP_[XTS_ATSD_HYP3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_XTS_ATSD_HYP3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XTS_ATSD_HYP3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[XTS_ATSD_HYP3]

//>> GET_[XTS_ATSD_HYP3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_XTS_ATSD_HYP3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XTS_ATSD_HYP3;
#endif
    return fapi2::getScom(i_target, XTS_ATSD_HYP3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[XTS_ATSD_HYP3]

//>> PUT_[XTS_ATSD_HYP3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_XTS_ATSD_HYP3(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP3));
#endif
    return fapi2::putScom(i_target, XTS_ATSD_HYP3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[XTS_ATSD_HYP3]


//>> SET_[XTS_ATSD_HYP3_MSRHV]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP3_MSRHV(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP3));
#endif
    return o_data.insertFromRight<XTS_ATSD_HYP3_MSRHV,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_ATSD_HYP3_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP3_MSRHV]

//>> SET_[XTS_ATSD_HYP3_MSRHV]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP3_MSRHV(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP3));
#endif
    return o_data.insertFromRight<XTS_ATSD_HYP3_MSRHV,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_ATSD_HYP3_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP3_MSRHV]

//>> SET_[XTS_ATSD_HYP3_MSRHV]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP3_MSRHV(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP3));
#endif
    return o_data.setBit<XTS_ATSD_HYP3_MSRHV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XTS_ATSD_HYP3_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP3_MSRHV]

//>> CLEAR_[XTS_ATSD_HYP3_MSRHV]
static inline fapi2::buffer<uint64_t>& CLEAR_XTS_ATSD_HYP3_MSRHV(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP3));
#endif
    return o_data.clearBit<XTS_ATSD_HYP3_MSRHV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XTS_ATSD_HYP3_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XTS_ATSD_HYP3_MSRHV]

//>> GET_[XTS_ATSD_HYP3_MSRHV]
static inline fapi2::buffer<uint64_t>& GET_XTS_ATSD_HYP3_MSRHV(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP3));
#endif
    return i_data.extractToRight<XTS_ATSD_HYP3_MSRHV,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_ATSD_HYP3_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_ATSD_HYP3_MSRHV]

//>> GET_[XTS_ATSD_HYP3_MSRHV]
static inline bool GET_XTS_ATSD_HYP3_MSRHV(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP3));
#endif
    return i_data.getBit<XTS_ATSD_HYP3_MSRHV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XTS_ATSD_HYP3_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_ATSD_HYP3_MSRHV]

//>> SET_[XTS_ATSD_HYP3_LPARID]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP3_LPARID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP3));
#endif
    return o_data.insertFromRight<XTS_ATSD_HYP3_LPARID,
           XTS_ATSD_HYP3_LPARID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_ATSD_HYP3_LPARID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP3_LPARID]

//>> SET_[XTS_ATSD_HYP3_LPARID]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP3_LPARID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP3));
#endif
    return o_data.insertFromRight<XTS_ATSD_HYP3_LPARID,
           XTS_ATSD_HYP3_LPARID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_ATSD_HYP3_LPARID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP3_LPARID]

//>> GET_[XTS_ATSD_HYP3_LPARID]
static inline fapi2::buffer<uint64_t>& GET_XTS_ATSD_HYP3_LPARID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP3));
#endif
    return i_data.extractToRight<XTS_ATSD_HYP3_LPARID,
           XTS_ATSD_HYP3_LPARID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_ATSD_HYP3_LPARID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_ATSD_HYP3_LPARID]

//>> PREP_[XTS_REG_DEBUG0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_XTS_REG_DEBUG0_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XTS_REG_DEBUG0_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[XTS_REG_DEBUG0_CONFIG]

//>> GET_[XTS_REG_DEBUG0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_XTS_REG_DEBUG0_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XTS_REG_DEBUG0_CONFIG;
#endif
    return fapi2::getScom(i_target, XTS_REG_DEBUG0_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[XTS_REG_DEBUG0_CONFIG]

//>> PUT_[XTS_REG_DEBUG0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_XTS_REG_DEBUG0_CONFIG(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG0_CONFIG));
#endif
    return fapi2::putScom(i_target, XTS_REG_DEBUG0_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[XTS_REG_DEBUG0_CONFIG]


//>> SET_[XTS_REG_DEBUG0_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG0_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG0_CONFIG_POD0,
           XTS_REG_DEBUG0_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_DEBUG0_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG0_CONFIG_POD0]

//>> SET_[XTS_REG_DEBUG0_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG0_CONFIG_POD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG0_CONFIG_POD0,
           XTS_REG_DEBUG0_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_DEBUG0_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG0_CONFIG_POD0]

//>> GET_[XTS_REG_DEBUG0_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_DEBUG0_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_DEBUG0_CONFIG_POD0,
           XTS_REG_DEBUG0_CONFIG_POD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_DEBUG0_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_DEBUG0_CONFIG_POD0]

//>> SET_[XTS_REG_DEBUG0_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG0_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG0_CONFIG_POD1,
           XTS_REG_DEBUG0_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_DEBUG0_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG0_CONFIG_POD1]

//>> SET_[XTS_REG_DEBUG0_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG0_CONFIG_POD1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG0_CONFIG_POD1,
           XTS_REG_DEBUG0_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_DEBUG0_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG0_CONFIG_POD1]

//>> GET_[XTS_REG_DEBUG0_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_DEBUG0_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_DEBUG0_CONFIG_POD1,
           XTS_REG_DEBUG0_CONFIG_POD1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_DEBUG0_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_DEBUG0_CONFIG_POD1]

//>> SET_[XTS_REG_DEBUG0_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG0_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG0_CONFIG_POD2,
           XTS_REG_DEBUG0_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_DEBUG0_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG0_CONFIG_POD2]

//>> SET_[XTS_REG_DEBUG0_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG0_CONFIG_POD2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG0_CONFIG_POD2,
           XTS_REG_DEBUG0_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_DEBUG0_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG0_CONFIG_POD2]

//>> GET_[XTS_REG_DEBUG0_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_DEBUG0_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_DEBUG0_CONFIG_POD2,
           XTS_REG_DEBUG0_CONFIG_POD2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_DEBUG0_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_DEBUG0_CONFIG_POD2]

//>> SET_[XTS_REG_DEBUG0_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG0_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG0_CONFIG_POD3,
           XTS_REG_DEBUG0_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_DEBUG0_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG0_CONFIG_POD3]

//>> SET_[XTS_REG_DEBUG0_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG0_CONFIG_POD3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG0_CONFIG_POD3,
           XTS_REG_DEBUG0_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_DEBUG0_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG0_CONFIG_POD3]

//>> GET_[XTS_REG_DEBUG0_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_DEBUG0_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_DEBUG0_CONFIG_POD3,
           XTS_REG_DEBUG0_CONFIG_POD3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_DEBUG0_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_DEBUG0_CONFIG_POD3]

//>> SET_[XTS_REG_DEBUG0_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG0_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG0_CONFIG_POD4,
           XTS_REG_DEBUG0_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_DEBUG0_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG0_CONFIG_POD4]

//>> SET_[XTS_REG_DEBUG0_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG0_CONFIG_POD4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG0_CONFIG_POD4,
           XTS_REG_DEBUG0_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_DEBUG0_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG0_CONFIG_POD4]

//>> GET_[XTS_REG_DEBUG0_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_DEBUG0_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_DEBUG0_CONFIG_POD4,
           XTS_REG_DEBUG0_CONFIG_POD4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_DEBUG0_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_DEBUG0_CONFIG_POD4]

//>> SET_[XTS_REG_DEBUG0_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG0_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG0_CONFIG_POD5,
           XTS_REG_DEBUG0_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_DEBUG0_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG0_CONFIG_POD5]

//>> SET_[XTS_REG_DEBUG0_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG0_CONFIG_POD5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG0_CONFIG_POD5,
           XTS_REG_DEBUG0_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_DEBUG0_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG0_CONFIG_POD5]

//>> GET_[XTS_REG_DEBUG0_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_DEBUG0_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_DEBUG0_CONFIG_POD5,
           XTS_REG_DEBUG0_CONFIG_POD5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_DEBUG0_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_DEBUG0_CONFIG_POD5]

//>> SET_[XTS_REG_DEBUG0_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG0_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG0_CONFIG_POD6,
           XTS_REG_DEBUG0_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_DEBUG0_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG0_CONFIG_POD6]

//>> SET_[XTS_REG_DEBUG0_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG0_CONFIG_POD6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG0_CONFIG_POD6,
           XTS_REG_DEBUG0_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_DEBUG0_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG0_CONFIG_POD6]

//>> GET_[XTS_REG_DEBUG0_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_DEBUG0_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_DEBUG0_CONFIG_POD6,
           XTS_REG_DEBUG0_CONFIG_POD6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_DEBUG0_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_DEBUG0_CONFIG_POD6]

//>> SET_[XTS_REG_DEBUG0_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG0_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG0_CONFIG_POD7,
           XTS_REG_DEBUG0_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_DEBUG0_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG0_CONFIG_POD7]

//>> SET_[XTS_REG_DEBUG0_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG0_CONFIG_POD7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG0_CONFIG_POD7,
           XTS_REG_DEBUG0_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_DEBUG0_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG0_CONFIG_POD7]

//>> GET_[XTS_REG_DEBUG0_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_DEBUG0_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_DEBUG0_CONFIG_POD7,
           XTS_REG_DEBUG0_CONFIG_POD7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_DEBUG0_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_DEBUG0_CONFIG_POD7]

//>> SET_[XTS_REG_DEBUG0_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG0_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG0_CONFIG_POD8,
           XTS_REG_DEBUG0_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_DEBUG0_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG0_CONFIG_POD8]

//>> SET_[XTS_REG_DEBUG0_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG0_CONFIG_POD8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG0_CONFIG_POD8,
           XTS_REG_DEBUG0_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_DEBUG0_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG0_CONFIG_POD8]

//>> GET_[XTS_REG_DEBUG0_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_DEBUG0_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_DEBUG0_CONFIG_POD8,
           XTS_REG_DEBUG0_CONFIG_POD8_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_DEBUG0_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_DEBUG0_CONFIG_POD8]

//>> SET_[XTS_REG_DEBUG0_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG0_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG0_CONFIG_POD9,
           XTS_REG_DEBUG0_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_DEBUG0_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG0_CONFIG_POD9]

//>> SET_[XTS_REG_DEBUG0_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG0_CONFIG_POD9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG0_CONFIG_POD9,
           XTS_REG_DEBUG0_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_DEBUG0_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG0_CONFIG_POD9]

//>> GET_[XTS_REG_DEBUG0_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_DEBUG0_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_DEBUG0_CONFIG_POD9,
           XTS_REG_DEBUG0_CONFIG_POD9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_DEBUG0_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_DEBUG0_CONFIG_POD9]

//>> SET_[XTS_REG_DEBUG0_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG0_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG0_CONFIG_POD10,
           XTS_REG_DEBUG0_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_DEBUG0_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG0_CONFIG_POD10]

//>> SET_[XTS_REG_DEBUG0_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG0_CONFIG_POD10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG0_CONFIG_POD10,
           XTS_REG_DEBUG0_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_DEBUG0_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG0_CONFIG_POD10]

//>> GET_[XTS_REG_DEBUG0_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_DEBUG0_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_DEBUG0_CONFIG_POD10,
           XTS_REG_DEBUG0_CONFIG_POD10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_DEBUG0_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_DEBUG0_CONFIG_POD10]

//>> SET_[XTS_REG_DEBUG0_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG0_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG0_CONFIG_RESERVED1,
           XTS_REG_DEBUG0_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_DEBUG0_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG0_CONFIG_RESERVED1]

//>> SET_[XTS_REG_DEBUG0_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG0_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG0_CONFIG_RESERVED1,
           XTS_REG_DEBUG0_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_DEBUG0_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG0_CONFIG_RESERVED1]

//>> GET_[XTS_REG_DEBUG0_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_DEBUG0_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_DEBUG0_CONFIG_RESERVED1,
           XTS_REG_DEBUG0_CONFIG_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_DEBUG0_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_DEBUG0_CONFIG_RESERVED1]

//>> SET_[XTS_REG_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG0_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG0_CONFIG_ACT]

//>> SET_[XTS_REG_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG0_CONFIG_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG0_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG0_CONFIG_ACT]

//>> SET_[XTS_REG_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG0_CONFIG));
#endif
    return o_data.setBit<XTS_REG_DEBUG0_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XTS_REG_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG0_CONFIG_ACT]

//>> CLEAR_[XTS_REG_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& CLEAR_XTS_REG_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG0_CONFIG));
#endif
    return o_data.clearBit<XTS_REG_DEBUG0_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XTS_REG_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XTS_REG_DEBUG0_CONFIG_ACT]

//>> GET_[XTS_REG_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_DEBUG0_CONFIG_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_DEBUG0_CONFIG_ACT]

//>> GET_[XTS_REG_DEBUG0_CONFIG_ACT]
static inline bool GET_XTS_REG_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG0_CONFIG));
#endif
    return i_data.getBit<XTS_REG_DEBUG0_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XTS_REG_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_DEBUG0_CONFIG_ACT]


//>>THE END<<

#ifndef __PPE_HCODE__
}
}

#endif
#endif
