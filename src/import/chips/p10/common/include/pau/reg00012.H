/* IBM_PROLOG_BEGIN_TAG                                                   */
/* This is an automatically generated prolog.                             */
/*                                                                        */
/* $Source: src/import/chips/p10/common/include/pau/reg00012.H $          */
/*                                                                        */
/* OpenPOWER sbe Project                                                  */
/*                                                                        */
/* Contributors Listed Below - COPYRIGHT 2019,2020                        */
/* [+] International Business Machines Corp.                              */
/*                                                                        */
/*                                                                        */
/* Licensed under the Apache License, Version 2.0 (the "License");        */
/* you may not use this file except in compliance with the License.       */
/* You may obtain a copy of the License at                                */
/*                                                                        */
/*     http://www.apache.org/licenses/LICENSE-2.0                         */
/*                                                                        */
/* Unless required by applicable law or agreed to in writing, software    */
/* distributed under the License is distributed on an "AS IS" BASIS,      */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        */
/* implied. See the License for the specific language governing           */
/* permissions and limitations under the License.                         */
/*                                                                        */
/* IBM_PROLOG_END_TAG                                                     */
#include "fapi2.H"

#ifndef __PAU_REG00012_H_
#define __PAU_REG00012_H_

#ifndef __PPE_HCODE__
namespace scomt
{
namespace pau
{
#endif


template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AME_AME0_MISC_TEST_CERR_RPT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME0_MISC_TEST_CERR_RPT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AME_AME0_MISC_TEST_CERR_RPT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME0_MISC_TEST_CERR_RPT;
#endif
    return fapi2::getScom(i_target, AME_AME0_MISC_TEST_CERR_RPT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AME_AME0_MISC_TEST_CERR_RPT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_TEST_CERR_RPT));
#endif
    return fapi2::putScom(i_target, AME_AME0_MISC_TEST_CERR_RPT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_TEST_CERR_RPT));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL,
           AME_AME0_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_TEST_CERR_RPT));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL,
           AME_AME0_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_TEST_CERR_RPT));
#endif
    return i_data.extractToRight<AME_AME0_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL,
           AME_AME0_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AME_AME2_MISC_INHIBIT_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME2_MISC_INHIBIT_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AME_AME2_MISC_INHIBIT_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME2_MISC_INHIBIT_CONFIG;
#endif
    return fapi2::getScom(i_target, AME_AME2_MISC_INHIBIT_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AME_AME2_MISC_INHIBIT_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return fapi2::putScom(i_target, AME_AME2_MISC_INHIBIT_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_INHIBIT_CONFIG_LFREQ0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_INHIBIT_CONFIG_LFREQ0,
           AME_AME2_MISC_INHIBIT_CONFIG_LFREQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_LFREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_INHIBIT_CONFIG_LFREQ0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_INHIBIT_CONFIG_LFREQ0,
           AME_AME2_MISC_INHIBIT_CONFIG_LFREQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_LFREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_INHIBIT_CONFIG_LFREQ0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_AME2_MISC_INHIBIT_CONFIG_LFREQ0,
           AME_AME2_MISC_INHIBIT_CONFIG_LFREQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_LFREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_INHIBIT_CONFIG_RESERVED0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_INHIBIT_CONFIG_RESERVED0,
           AME_AME2_MISC_INHIBIT_CONFIG_RESERVED0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_RESERVED0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_INHIBIT_CONFIG_RESERVED0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_INHIBIT_CONFIG_RESERVED0,
           AME_AME2_MISC_INHIBIT_CONFIG_RESERVED0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_RESERVED0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_INHIBIT_CONFIG_RESERVED0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_AME2_MISC_INHIBIT_CONFIG_RESERVED0,
           AME_AME2_MISC_INHIBIT_CONFIG_RESERVED0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_RESERVED0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_INHIBIT_CONFIG_TFREQ0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_INHIBIT_CONFIG_TFREQ0,
           AME_AME2_MISC_INHIBIT_CONFIG_TFREQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_TFREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_INHIBIT_CONFIG_TFREQ0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_INHIBIT_CONFIG_TFREQ0,
           AME_AME2_MISC_INHIBIT_CONFIG_TFREQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_TFREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_INHIBIT_CONFIG_TFREQ0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_AME2_MISC_INHIBIT_CONFIG_TFREQ0,
           AME_AME2_MISC_INHIBIT_CONFIG_TFREQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_TFREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_INHIBIT_CONFIG_PFREQ0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_INHIBIT_CONFIG_PFREQ0,
           AME_AME2_MISC_INHIBIT_CONFIG_PFREQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_PFREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_INHIBIT_CONFIG_PFREQ0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_INHIBIT_CONFIG_PFREQ0,
           AME_AME2_MISC_INHIBIT_CONFIG_PFREQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_PFREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_INHIBIT_CONFIG_PFREQ0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_AME2_MISC_INHIBIT_CONFIG_PFREQ0,
           AME_AME2_MISC_INHIBIT_CONFIG_PFREQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_PFREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_INHIBIT_CONFIG_BLOCKY0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_INHIBIT_CONFIG_BLOCKY0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_INHIBIT_CONFIG_BLOCKY0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_INHIBIT_CONFIG_BLOCKY0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_INHIBIT_CONFIG_BLOCKY0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<AME_AME2_MISC_INHIBIT_CONFIG_BLOCKY0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_INHIBIT_CONFIG_BLOCKY0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<AME_AME2_MISC_INHIBIT_CONFIG_BLOCKY0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_INHIBIT_CONFIG_BLOCKY0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_AME2_MISC_INHIBIT_CONFIG_BLOCKY0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_AME_AME2_MISC_INHIBIT_CONFIG_BLOCKY0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<AME_AME2_MISC_INHIBIT_CONFIG_BLOCKY0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_INHIBIT_CONFIG_ONESHOT0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_INHIBIT_CONFIG_ONESHOT0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_INHIBIT_CONFIG_ONESHOT0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_INHIBIT_CONFIG_ONESHOT0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_INHIBIT_CONFIG_ONESHOT0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<AME_AME2_MISC_INHIBIT_CONFIG_ONESHOT0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_INHIBIT_CONFIG_ONESHOT0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<AME_AME2_MISC_INHIBIT_CONFIG_ONESHOT0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_INHIBIT_CONFIG_ONESHOT0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_AME2_MISC_INHIBIT_CONFIG_ONESHOT0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_AME_AME2_MISC_INHIBIT_CONFIG_ONESHOT0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<AME_AME2_MISC_INHIBIT_CONFIG_ONESHOT0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_INHIBIT_CONFIG_DEST0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_INHIBIT_CONFIG_DEST0,
           AME_AME2_MISC_INHIBIT_CONFIG_DEST0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_DEST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_INHIBIT_CONFIG_DEST0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_INHIBIT_CONFIG_DEST0,
           AME_AME2_MISC_INHIBIT_CONFIG_DEST0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_DEST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_INHIBIT_CONFIG_DEST0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_AME2_MISC_INHIBIT_CONFIG_DEST0,
           AME_AME2_MISC_INHIBIT_CONFIG_DEST0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_DEST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_INHIBIT_CONFIG_LFREQ1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_INHIBIT_CONFIG_LFREQ1,
           AME_AME2_MISC_INHIBIT_CONFIG_LFREQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_LFREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_INHIBIT_CONFIG_LFREQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_INHIBIT_CONFIG_LFREQ1,
           AME_AME2_MISC_INHIBIT_CONFIG_LFREQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_LFREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_INHIBIT_CONFIG_LFREQ1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_AME2_MISC_INHIBIT_CONFIG_LFREQ1,
           AME_AME2_MISC_INHIBIT_CONFIG_LFREQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_LFREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_INHIBIT_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_INHIBIT_CONFIG_RESERVED1,
           AME_AME2_MISC_INHIBIT_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_INHIBIT_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_INHIBIT_CONFIG_RESERVED1,
           AME_AME2_MISC_INHIBIT_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_INHIBIT_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_AME2_MISC_INHIBIT_CONFIG_RESERVED1,
           AME_AME2_MISC_INHIBIT_CONFIG_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_INHIBIT_CONFIG_TFREQ1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_INHIBIT_CONFIG_TFREQ1,
           AME_AME2_MISC_INHIBIT_CONFIG_TFREQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_TFREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_INHIBIT_CONFIG_TFREQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_INHIBIT_CONFIG_TFREQ1,
           AME_AME2_MISC_INHIBIT_CONFIG_TFREQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_TFREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_INHIBIT_CONFIG_TFREQ1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_AME2_MISC_INHIBIT_CONFIG_TFREQ1,
           AME_AME2_MISC_INHIBIT_CONFIG_TFREQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_TFREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_INHIBIT_CONFIG_PFREQ1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_INHIBIT_CONFIG_PFREQ1,
           AME_AME2_MISC_INHIBIT_CONFIG_PFREQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_PFREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_INHIBIT_CONFIG_PFREQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_INHIBIT_CONFIG_PFREQ1,
           AME_AME2_MISC_INHIBIT_CONFIG_PFREQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_PFREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_INHIBIT_CONFIG_PFREQ1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_AME2_MISC_INHIBIT_CONFIG_PFREQ1,
           AME_AME2_MISC_INHIBIT_CONFIG_PFREQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_PFREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_INHIBIT_CONFIG_BLOCKY1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_INHIBIT_CONFIG_BLOCKY1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_INHIBIT_CONFIG_BLOCKY1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_INHIBIT_CONFIG_BLOCKY1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_INHIBIT_CONFIG_BLOCKY1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<AME_AME2_MISC_INHIBIT_CONFIG_BLOCKY1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_INHIBIT_CONFIG_BLOCKY1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<AME_AME2_MISC_INHIBIT_CONFIG_BLOCKY1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_INHIBIT_CONFIG_BLOCKY1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_AME2_MISC_INHIBIT_CONFIG_BLOCKY1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_AME_AME2_MISC_INHIBIT_CONFIG_BLOCKY1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<AME_AME2_MISC_INHIBIT_CONFIG_BLOCKY1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_INHIBIT_CONFIG_ONESHOT1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_INHIBIT_CONFIG_ONESHOT1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_INHIBIT_CONFIG_ONESHOT1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_INHIBIT_CONFIG_ONESHOT1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_INHIBIT_CONFIG_ONESHOT1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<AME_AME2_MISC_INHIBIT_CONFIG_ONESHOT1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_INHIBIT_CONFIG_ONESHOT1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<AME_AME2_MISC_INHIBIT_CONFIG_ONESHOT1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_INHIBIT_CONFIG_ONESHOT1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_AME2_MISC_INHIBIT_CONFIG_ONESHOT1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_AME_AME2_MISC_INHIBIT_CONFIG_ONESHOT1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<AME_AME2_MISC_INHIBIT_CONFIG_ONESHOT1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_INHIBIT_CONFIG_DEST1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_INHIBIT_CONFIG_DEST1,
           AME_AME2_MISC_INHIBIT_CONFIG_DEST1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_DEST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_INHIBIT_CONFIG_DEST1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_INHIBIT_CONFIG_DEST1,
           AME_AME2_MISC_INHIBIT_CONFIG_DEST1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_DEST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_INHIBIT_CONFIG_DEST1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_AME2_MISC_INHIBIT_CONFIG_DEST1,
           AME_AME2_MISC_INHIBIT_CONFIG_DEST1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_INHIBIT_CONFIG_DEST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_ATS_REG_PAU_AT_ESMR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = ATS_REG_PAU_AT_ESMR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_ATS_REG_PAU_AT_ESMR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = ATS_REG_PAU_AT_ESMR;
#endif
    return fapi2::getScom(i_target, ATS_REG_PAU_AT_ESMR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_ATS_REG_PAU_AT_ESMR(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(ATS_REG_PAU_AT_ESMR));
#endif
    return fapi2::putScom(i_target, ATS_REG_PAU_AT_ESMR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_ATS_REG_PAU_AT_ESMR_IDIAL_ATS_ESR_MSK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(ATS_REG_PAU_AT_ESMR));
#endif
    return o_data.insertFromRight<ATS_REG_PAU_AT_ESMR_IDIAL_ATS_ESR_MSK,
           ATS_REG_PAU_AT_ESMR_IDIAL_ATS_ESR_MSK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access ATS_REG_PAU_AT_ESMR_IDIAL_ATS_ESR_MSK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_ATS_REG_PAU_AT_ESMR_IDIAL_ATS_ESR_MSK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(ATS_REG_PAU_AT_ESMR));
#endif
    return o_data.insertFromRight<ATS_REG_PAU_AT_ESMR_IDIAL_ATS_ESR_MSK,
           ATS_REG_PAU_AT_ESMR_IDIAL_ATS_ESR_MSK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access ATS_REG_PAU_AT_ESMR_IDIAL_ATS_ESR_MSK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_ATS_REG_PAU_AT_ESMR_IDIAL_ATS_ESR_MSK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(ATS_REG_PAU_AT_ESMR));
#endif
    return i_data.extractToRight<ATS_REG_PAU_AT_ESMR_IDIAL_ATS_ESR_MSK,
           ATS_REG_PAU_AT_ESMR_IDIAL_ATS_ESR_MSK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access ATS_REG_PAU_AT_ESMR_IDIAL_ATS_ESR_MSK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_BDF2PE_12_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_BDF2PE_12_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_BDF2PE_12_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_BDF2PE_12_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_BDF2PE_12_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_BDF2PE_12_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_12_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_BDF2PE_12_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_12_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_12_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_12_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_BDF2PE_12_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_12_CONFIG_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_12_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_12_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_BDF2PE_12_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_12_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_12_CONFIG));
#endif
    return o_data.setBit<CS_CTL_MISC_BDF2PE_12_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_BDF2PE_12_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_BDF2PE_12_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_12_CONFIG));
#endif
    return o_data.clearBit<CS_CTL_MISC_BDF2PE_12_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_BDF2PE_12_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_12_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_12_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_12_CONFIG_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_BDF2PE_12_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_BDF2PE_12_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_12_CONFIG));
#endif
    return i_data.getBit<CS_CTL_MISC_BDF2PE_12_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_BDF2PE_12_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_12_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_12_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_12_CONFIG_RESERVED,
           CS_CTL_MISC_BDF2PE_12_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_BDF2PE_12_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_12_CONFIG_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_12_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_12_CONFIG_RESERVED,
           CS_CTL_MISC_BDF2PE_12_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_BDF2PE_12_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_12_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_12_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_12_CONFIG_RESERVED,
           CS_CTL_MISC_BDF2PE_12_CONFIG_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_BDF2PE_12_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_12_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_12_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_12_CONFIG_PE,
           CS_CTL_MISC_BDF2PE_12_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_BDF2PE_12_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_12_CONFIG_PE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_12_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_12_CONFIG_PE,
           CS_CTL_MISC_BDF2PE_12_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_BDF2PE_12_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_12_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_12_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_12_CONFIG_PE,
           CS_CTL_MISC_BDF2PE_12_CONFIG_PE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_BDF2PE_12_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_12_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_12_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_12_CONFIG_BDF,
           CS_CTL_MISC_BDF2PE_12_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_BDF2PE_12_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_12_CONFIG_BDF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_12_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_12_CONFIG_BDF,
           CS_CTL_MISC_BDF2PE_12_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_BDF2PE_12_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_12_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_12_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_12_CONFIG_BDF,
           CS_CTL_MISC_BDF2PE_12_CONFIG_BDF_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_BDF2PE_12_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_BDF2PE_9_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_BDF2PE_9_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_BDF2PE_9_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_BDF2PE_9_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_BDF2PE_9_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_BDF2PE_9_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_9_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_BDF2PE_9_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_9_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_9_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_9_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_BDF2PE_9_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_9_CONFIG_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_9_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_9_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_BDF2PE_9_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_9_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_9_CONFIG));
#endif
    return o_data.setBit<CS_CTL_MISC_BDF2PE_9_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_BDF2PE_9_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_BDF2PE_9_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_9_CONFIG));
#endif
    return o_data.clearBit<CS_CTL_MISC_BDF2PE_9_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_BDF2PE_9_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_9_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_9_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_9_CONFIG_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_BDF2PE_9_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_BDF2PE_9_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_9_CONFIG));
#endif
    return i_data.getBit<CS_CTL_MISC_BDF2PE_9_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_BDF2PE_9_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_9_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_9_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_9_CONFIG_RESERVED,
           CS_CTL_MISC_BDF2PE_9_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_BDF2PE_9_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_9_CONFIG_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_9_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_9_CONFIG_RESERVED,
           CS_CTL_MISC_BDF2PE_9_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_BDF2PE_9_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_9_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_9_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_9_CONFIG_RESERVED,
           CS_CTL_MISC_BDF2PE_9_CONFIG_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_BDF2PE_9_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_9_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_9_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_9_CONFIG_PE,
           CS_CTL_MISC_BDF2PE_9_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_BDF2PE_9_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_9_CONFIG_PE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_9_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_9_CONFIG_PE,
           CS_CTL_MISC_BDF2PE_9_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_BDF2PE_9_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_9_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_9_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_9_CONFIG_PE,
           CS_CTL_MISC_BDF2PE_9_CONFIG_PE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_BDF2PE_9_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_9_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_9_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_9_CONFIG_BDF,
           CS_CTL_MISC_BDF2PE_9_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_BDF2PE_9_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_9_CONFIG_BDF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_9_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_9_CONFIG_BDF,
           CS_CTL_MISC_BDF2PE_9_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_BDF2PE_9_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_9_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_9_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_9_CONFIG_BDF,
           CS_CTL_MISC_BDF2PE_9_CONFIG_BDF_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_BDF2PE_9_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_MMIOPA1_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_MMIOPA1_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_MMIOPA1_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_MMIOPA1_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_MMIOPA1_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_MMIOPA1_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_MMIOPA1_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_MMIOPA1_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_MMIOPA1_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_MMIOPA1_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_MMIOPA1_CONFIG_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_MMIOPA1_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_MMIOPA1_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_MMIOPA1_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_MMIOPA1_CONFIG_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_MMIOPA1_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_MMIOPA1_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_MMIOPA1_CONFIG));
#endif
    return o_data.setBit<CS_CTL_MISC_MMIOPA1_CONFIG_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_MMIOPA1_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_MMIOPA1_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_MMIOPA1_CONFIG));
#endif
    return o_data.clearBit<CS_CTL_MISC_MMIOPA1_CONFIG_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_MMIOPA1_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_MMIOPA1_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_MMIOPA1_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_MMIOPA1_CONFIG_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_MMIOPA1_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_MMIOPA1_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_MMIOPA1_CONFIG));
#endif
    return i_data.getBit<CS_CTL_MISC_MMIOPA1_CONFIG_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_MMIOPA1_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_MMIOPA1_CONFIG_ADDR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_MMIOPA1_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_MMIOPA1_CONFIG_ADDR,
           CS_CTL_MISC_MMIOPA1_CONFIG_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_MMIOPA1_CONFIG_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_MMIOPA1_CONFIG_ADDR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_MMIOPA1_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_MMIOPA1_CONFIG_ADDR,
           CS_CTL_MISC_MMIOPA1_CONFIG_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_MMIOPA1_CONFIG_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_MMIOPA1_CONFIG_ADDR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_MMIOPA1_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_MMIOPA1_CONFIG_ADDR,
           CS_CTL_MISC_MMIOPA1_CONFIG_ADDR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_MMIOPA1_CONFIG_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_MMIOPA1_CONFIG_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_MMIOPA1_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_MMIOPA1_CONFIG_RESERVED2,
           CS_CTL_MISC_MMIOPA1_CONFIG_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_MMIOPA1_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_MMIOPA1_CONFIG_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_MMIOPA1_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_MMIOPA1_CONFIG_RESERVED2,
           CS_CTL_MISC_MMIOPA1_CONFIG_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_MMIOPA1_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_MMIOPA1_CONFIG_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_MMIOPA1_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_MMIOPA1_CONFIG_RESERVED2,
           CS_CTL_MISC_MMIOPA1_CONFIG_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_MMIOPA1_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_MMIOPA1_CONFIG_SIZE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_MMIOPA1_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_MMIOPA1_CONFIG_SIZE,
           CS_CTL_MISC_MMIOPA1_CONFIG_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_MMIOPA1_CONFIG_SIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_MMIOPA1_CONFIG_SIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_MMIOPA1_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_MMIOPA1_CONFIG_SIZE,
           CS_CTL_MISC_MMIOPA1_CONFIG_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_MMIOPA1_CONFIG_SIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_MMIOPA1_CONFIG_SIZE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_MMIOPA1_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_MMIOPA1_CONFIG_SIZE,
           CS_CTL_MISC_MMIOPA1_CONFIG_SIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_MMIOPA1_CONFIG_SIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_SCOPE_PREDICT1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_SCOPE_PREDICT1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_SCOPE_PREDICT1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_SCOPE_PREDICT1;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_SCOPE_PREDICT1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_SCOPE_PREDICT1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_SCOPE_PREDICT1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT1_B1RD_LN_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT1_B1RD_LN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT1_B1RD_LN_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1RD_LN_FAIL_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT1_B1RD_LN_FAIL_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT1_B1RD_LN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT1_B1RD_LN_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1RD_LN_FAIL_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT1_B1RD_LN_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT1_B1RD_LN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT1_B1RD_LN_FAIL_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1RD_LN_FAIL_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT1_B1RD_NN_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT1_B1RD_NN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT1_B1RD_NN_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1RD_NN_FAIL_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT1_B1RD_NN_FAIL_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT1_B1RD_NN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT1_B1RD_NN_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1RD_NN_FAIL_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT1_B1RD_NN_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT1_B1RD_NN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT1_B1RD_NN_FAIL_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1RD_NN_FAIL_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT1_B1RD_RN_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT1_B1RD_RN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT1_B1RD_RN_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1RD_RN_FAIL_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT1_B1RD_RN_FAIL_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT1_B1RD_RN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT1_B1RD_RN_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1RD_RN_FAIL_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT1_B1RD_RN_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT1_B1RD_RN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT1_B1RD_RN_FAIL_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1RD_RN_FAIL_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT1_B1RD_G_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT1_B1RD_G_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT1_B1RD_G_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1RD_G_FAIL_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT1_B1RD_G_FAIL_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT1_B1RD_G_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT1_B1RD_G_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1RD_G_FAIL_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT1_B1RD_G_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT1_B1RD_G_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT1_B1RD_G_FAIL_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1RD_G_FAIL_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT1_B1RD_LN_INTV_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT1_B1RD_LN_INTV_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT1_B1RD_LN_INTV_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1RD_LN_INTV_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT1_B1RD_LN_INTV_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT1_B1RD_LN_INTV_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT1_B1RD_LN_INTV_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1RD_LN_INTV_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT1_B1RD_LN_INTV_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT1_B1RD_LN_INTV_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT1_B1RD_LN_INTV_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1RD_LN_INTV_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT1_B1RD_G_INTV_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT1_B1RD_G_INTV_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT1_B1RD_G_INTV_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1RD_G_INTV_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT1_B1RD_G_INTV_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT1_B1RD_G_INTV_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT1_B1RD_G_INTV_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1RD_G_INTV_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT1_B1RD_G_INTV_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT1_B1RD_G_INTV_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT1_B1RD_G_INTV_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1RD_G_INTV_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT1_B1RD_VG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT1_B1RD_VG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1RD_VG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT1_B1RD_VG_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT1_B1RD_VG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1RD_VG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT1_B1RD_VG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return o_data.setBit<CS_CTL_MISC_SCOPE_PREDICT1_B1RD_VG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1RD_VG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_SCOPE_PREDICT1_B1RD_VG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return o_data.clearBit<CS_CTL_MISC_SCOPE_PREDICT1_B1RD_VG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1RD_VG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT1_B1RD_VG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT1_B1RD_VG_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1RD_VG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_SCOPE_PREDICT1_B1RD_VG_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return i_data.getBit<CS_CTL_MISC_SCOPE_PREDICT1_B1RD_VG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1RD_VG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT1_1_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT1_1_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_1_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT1_1_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT1_1_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_1_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT1_1_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return o_data.setBit<CS_CTL_MISC_SCOPE_PREDICT1_1_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_1_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_SCOPE_PREDICT1_1_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return o_data.clearBit<CS_CTL_MISC_SCOPE_PREDICT1_1_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_1_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT1_1_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT1_1_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_1_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_SCOPE_PREDICT1_1_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return i_data.getBit<CS_CTL_MISC_SCOPE_PREDICT1_1_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_1_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT1_B1WR_LN_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT1_B1WR_LN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT1_B1WR_LN_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1WR_LN_FAIL_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT1_B1WR_LN_FAIL_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT1_B1WR_LN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT1_B1WR_LN_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1WR_LN_FAIL_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT1_B1WR_LN_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT1_B1WR_LN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT1_B1WR_LN_FAIL_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1WR_LN_FAIL_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT1_B1WR_NN_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT1_B1WR_NN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT1_B1WR_NN_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1WR_NN_FAIL_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT1_B1WR_NN_FAIL_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT1_B1WR_NN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT1_B1WR_NN_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1WR_NN_FAIL_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT1_B1WR_NN_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT1_B1WR_NN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT1_B1WR_NN_FAIL_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1WR_NN_FAIL_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT1_B1WR_RN_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT1_B1WR_RN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT1_B1WR_RN_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1WR_RN_FAIL_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT1_B1WR_RN_FAIL_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT1_B1WR_RN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT1_B1WR_RN_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1WR_RN_FAIL_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT1_B1WR_RN_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT1_B1WR_RN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT1_B1WR_RN_FAIL_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1WR_RN_FAIL_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT1_B1WR_G_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT1_B1WR_G_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT1_B1WR_G_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1WR_G_FAIL_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT1_B1WR_G_FAIL_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT1_B1WR_G_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT1_B1WR_G_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1WR_G_FAIL_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT1_B1WR_G_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT1_B1WR_G_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT1_B1WR_G_FAIL_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1WR_G_FAIL_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT1_B1WR_LN_INTV_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT1_B1WR_LN_INTV_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT1_B1WR_LN_INTV_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1WR_LN_INTV_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT1_B1WR_LN_INTV_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT1_B1WR_LN_INTV_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT1_B1WR_LN_INTV_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1WR_LN_INTV_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT1_B1WR_LN_INTV_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT1_B1WR_LN_INTV_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT1_B1WR_LN_INTV_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1WR_LN_INTV_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT1_B1WR_G_INTV_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT1_B1WR_G_INTV_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT1_B1WR_G_INTV_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1WR_G_INTV_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT1_B1WR_G_INTV_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT1_B1WR_G_INTV_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT1_B1WR_G_INTV_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1WR_G_INTV_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT1_B1WR_G_INTV_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT1_B1WR_G_INTV_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT1_B1WR_G_INTV_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1WR_G_INTV_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT1_B1WR_VG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT1_B1WR_VG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1WR_VG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT1_B1WR_VG_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT1_B1WR_VG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1WR_VG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT1_B1WR_VG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return o_data.setBit<CS_CTL_MISC_SCOPE_PREDICT1_B1WR_VG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1WR_VG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_SCOPE_PREDICT1_B1WR_VG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return o_data.clearBit<CS_CTL_MISC_SCOPE_PREDICT1_B1WR_VG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1WR_VG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT1_B1WR_VG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT1_B1WR_VG_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1WR_VG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_SCOPE_PREDICT1_B1WR_VG_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return i_data.getBit<CS_CTL_MISC_SCOPE_PREDICT1_B1WR_VG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_B1WR_VG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT1_1_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT1_1_RESERVED2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_1_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT1_1_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT1_1_RESERVED2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_1_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT1_1_RESERVED2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return o_data.setBit<CS_CTL_MISC_SCOPE_PREDICT1_1_RESERVED2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_1_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_SCOPE_PREDICT1_1_RESERVED2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return o_data.clearBit<CS_CTL_MISC_SCOPE_PREDICT1_1_RESERVED2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_1_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT1_1_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT1_1_RESERVED2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_1_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_SCOPE_PREDICT1_1_RESERVED2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return i_data.getBit<CS_CTL_MISC_SCOPE_PREDICT1_1_RESERVED2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_1_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT1_TIMER_RAND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT1_TIMER_RAND,
           CS_CTL_MISC_SCOPE_PREDICT1_TIMER_RAND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_TIMER_RAND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT1_TIMER_RAND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT1_TIMER_RAND,
           CS_CTL_MISC_SCOPE_PREDICT1_TIMER_RAND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_TIMER_RAND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT1_TIMER_RAND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT1_TIMER_RAND,
           CS_CTL_MISC_SCOPE_PREDICT1_TIMER_RAND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_TIMER_RAND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT1_TIMER_MAX(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT1_TIMER_MAX,
           CS_CTL_MISC_SCOPE_PREDICT1_TIMER_MAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_TIMER_MAX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT1_TIMER_MAX(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT1_TIMER_MAX,
           CS_CTL_MISC_SCOPE_PREDICT1_TIMER_MAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_TIMER_MAX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT1_TIMER_MAX(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT1_TIMER_MAX,
           CS_CTL_MISC_SCOPE_PREDICT1_TIMER_MAX_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_SCOPE_PREDICT1_TIMER_MAX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_MCP_MISC_CERR_HOLD2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_CERR_HOLD2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_MCP_MISC_CERR_HOLD2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_CERR_HOLD2;
#endif
    return fapi2::getScom(i_target, CS_SM0_MCP_MISC_CERR_HOLD2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_MCP_MISC_CERR_HOLD2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return fapi2::putScom(i_target, CS_SM0_MCP_MISC_CERR_HOLD2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_20(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_20(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_20(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_20,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_20(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_21(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_21(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_21(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_21,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_21(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_22(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_22(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_22(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_22,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_22(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_23,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_23(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_24(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_24(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_24(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_24,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_24(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_25(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_25(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_25(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_25,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_25(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_26(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_26(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_26(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_26,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_26(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_27(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_27(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_27(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_27,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_27(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_28(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_28(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_28(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_28,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_28(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_29(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_29(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_29(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_29,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_29(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_30(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_30(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_30(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_30,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_30(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_31(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_31(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_31(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_31,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_31(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_32(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_32(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_32(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_32,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_32(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_33(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_33(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_33(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_33,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_33(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_34(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_34(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_34(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_34,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_34(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_35(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_35(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_35(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_35,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_35(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_36(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_36(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_36(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_36,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_36(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_37(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_37(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_37(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_37,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_37(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_38(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_38(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_38(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_38,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_38(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_39(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_39(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_39(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_39,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_39(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_40(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_40(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_40(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_40,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_40(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_41(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_41(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_41(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_41,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_41(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_42(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_42(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_42(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_42,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_42(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_43(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_43(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_43(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_43,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_43(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_44(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_44(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_44(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_44,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_44(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_45(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_45(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_45(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_45,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_45(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_46(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_46(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_46(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_46,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_46(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_47(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_47(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_47(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_47,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_47(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_48(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_48(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_48(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_48,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_48(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_49(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_49(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_49(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_49,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_49(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_50(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_50(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_50(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_50,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_50(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_51(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_51(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_51(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_51,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_51(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_52(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_52(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_52(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_52,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_52(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_53(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_53(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_53(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_53,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_53(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_54(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_54,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_54(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_54,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_54(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_54(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_54(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_54,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_54(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_55(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_55,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_55(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_55,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_55(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_55(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_55(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_55,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_55(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_56(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_56,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_56(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_56,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_56(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_56(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_56(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_56,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_56(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_57(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_57,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_57(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_57,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_57(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_57(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_57(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_57,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_57(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_58(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_58,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_58(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_58,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_58(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_58(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_58(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_58,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_58(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_59(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_59,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_59(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_59,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_59(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_59(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_59(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_59,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_59(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_60(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_60,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_60(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_60,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_60(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_60(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_60(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_60,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_60(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_61(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_61,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_61(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_61,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_61(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_61(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_61(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_61,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_61(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_62(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_62,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_62(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_62,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_62(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_62(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_62(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_62,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_62(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_63(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_63,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_63(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_HOLD2_63,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_HOLD2_63(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_HOLD2_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_HOLD2_63(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_HOLD2_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_HOLD2_63(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_HOLD2_63,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_HOLD2_63(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_HOLD2_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_HOLD2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_MCP_MISC_CERR_MESSAGE0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_CERR_MESSAGE0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_MCP_MISC_CERR_MESSAGE0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_CERR_MESSAGE0;
#endif
    return fapi2::getScom(i_target, CS_SM0_MCP_MISC_CERR_MESSAGE0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_MCP_MISC_CERR_MESSAGE0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MESSAGE0));
#endif
    return fapi2::putScom(i_target, CS_SM0_MCP_MISC_CERR_MESSAGE0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MESSAGE0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0,
           CS_SM0_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MESSAGE0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0,
           CS_SM0_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MESSAGE0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0,
           CS_SM0_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_MCP_MISC_CONFIG1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_CONFIG1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_MCP_MISC_CONFIG1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_CONFIG1;
#endif
    return fapi2::getScom(i_target, CS_SM1_MCP_MISC_CONFIG1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_MCP_MISC_CONFIG1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return fapi2::putScom(i_target, CS_SM1_MCP_MISC_CONFIG1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK,
           CS_SM1_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK,
           CS_SM1_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK,
           CS_SM1_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ,
           CS_SM1_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ,
           CS_SM1_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ,
           CS_SM1_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST,
           CS_SM1_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST,
           CS_SM1_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST,
           CS_SM1_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB,
           CS_SM1_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB,
           CS_SM1_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB,
           CS_SM1_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT,
           CS_SM1_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT,
           CS_SM1_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT,
           CS_SM1_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_1_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG1_1_RESERVED2,
           CS_SM1_MCP_MISC_CONFIG1_1_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_1_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_1_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG1_1_RESERVED2,
           CS_SM1_MCP_MISC_CONFIG1_1_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_1_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG1_1_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG1_1_RESERVED2,
           CS_SM1_MCP_MISC_CONFIG1_1_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_1_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT,
           CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT,
           CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT,
           CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_NVLINK_P9P9_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG1_NVLINK_P9P9_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_NVLINK_P9P9_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_NVLINK_P9P9_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG1_NVLINK_P9P9_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_NVLINK_P9P9_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_NVLINK_P9P9_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG1_NVLINK_P9P9_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_NVLINK_P9P9_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG1_NVLINK_P9P9_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG1_NVLINK_P9P9_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_NVLINK_P9P9_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG1_NVLINK_P9P9_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG1_NVLINK_P9P9_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_NVLINK_P9P9_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_MCP_MISC_CONFIG1_NVLINK_P9P9_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG1_NVLINK_P9P9_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_NVLINK_P9P9_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_1_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG1_1_RESERVED,
           CS_SM1_MCP_MISC_CONFIG1_1_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_1_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG1_1_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG1_1_RESERVED,
           CS_SM1_MCP_MISC_CONFIG1_1_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_1_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG1_1_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG1_1_RESERVED,
           CS_SM1_MCP_MISC_CONFIG1_1_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CONFIG1_1_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_MCP_MISC_EPSILON_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_EPSILON_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_MCP_MISC_EPSILON_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_EPSILON_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM1_MCP_MISC_EPSILON_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_MCP_MISC_EPSILON_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_EPSILON_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM1_MCP_MISC_EPSILON_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_EPSILON_CONFIG_RATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_EPSILON_CONFIG_RATE,
           CS_SM1_MCP_MISC_EPSILON_CONFIG_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_EPSILON_CONFIG_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_EPSILON_CONFIG_RATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_EPSILON_CONFIG_RATE,
           CS_SM1_MCP_MISC_EPSILON_CONFIG_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_EPSILON_CONFIG_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_EPSILON_CONFIG_RATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_EPSILON_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_EPSILON_CONFIG_RATE,
           CS_SM1_MCP_MISC_EPSILON_CONFIG_RATE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_EPSILON_CONFIG_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_EPSILON_CONFIG_W0_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_EPSILON_CONFIG_W0_COUNT,
           CS_SM1_MCP_MISC_EPSILON_CONFIG_W0_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_EPSILON_CONFIG_W0_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_EPSILON_CONFIG_W0_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_EPSILON_CONFIG_W0_COUNT,
           CS_SM1_MCP_MISC_EPSILON_CONFIG_W0_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_EPSILON_CONFIG_W0_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_EPSILON_CONFIG_W0_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_EPSILON_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_EPSILON_CONFIG_W0_COUNT,
           CS_SM1_MCP_MISC_EPSILON_CONFIG_W0_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_EPSILON_CONFIG_W0_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_EPSILON_CONFIG_W1_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_EPSILON_CONFIG_W1_COUNT,
           CS_SM1_MCP_MISC_EPSILON_CONFIG_W1_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_EPSILON_CONFIG_W1_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_EPSILON_CONFIG_W1_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_EPSILON_CONFIG_W1_COUNT,
           CS_SM1_MCP_MISC_EPSILON_CONFIG_W1_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_EPSILON_CONFIG_W1_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_EPSILON_CONFIG_W1_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_EPSILON_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_EPSILON_CONFIG_W1_COUNT,
           CS_SM1_MCP_MISC_EPSILON_CONFIG_W1_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_EPSILON_CONFIG_W1_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_EPSILON_CONFIG_R0_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_EPSILON_CONFIG_R0_COUNT,
           CS_SM1_MCP_MISC_EPSILON_CONFIG_R0_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_EPSILON_CONFIG_R0_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_EPSILON_CONFIG_R0_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_EPSILON_CONFIG_R0_COUNT,
           CS_SM1_MCP_MISC_EPSILON_CONFIG_R0_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_EPSILON_CONFIG_R0_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_EPSILON_CONFIG_R0_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_EPSILON_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_EPSILON_CONFIG_R0_COUNT,
           CS_SM1_MCP_MISC_EPSILON_CONFIG_R0_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_EPSILON_CONFIG_R0_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_EPSILON_CONFIG_R1_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_EPSILON_CONFIG_R1_COUNT,
           CS_SM1_MCP_MISC_EPSILON_CONFIG_R1_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_EPSILON_CONFIG_R1_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_EPSILON_CONFIG_R1_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_EPSILON_CONFIG_R1_COUNT,
           CS_SM1_MCP_MISC_EPSILON_CONFIG_R1_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_EPSILON_CONFIG_R1_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_EPSILON_CONFIG_R1_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_EPSILON_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_EPSILON_CONFIG_R1_COUNT,
           CS_SM1_MCP_MISC_EPSILON_CONFIG_R1_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_EPSILON_CONFIG_R1_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_EPSILON_CONFIG_R2_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_EPSILON_CONFIG_R2_COUNT,
           CS_SM1_MCP_MISC_EPSILON_CONFIG_R2_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_EPSILON_CONFIG_R2_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_EPSILON_CONFIG_R2_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_EPSILON_CONFIG_R2_COUNT,
           CS_SM1_MCP_MISC_EPSILON_CONFIG_R2_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_EPSILON_CONFIG_R2_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_EPSILON_CONFIG_R2_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_EPSILON_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_EPSILON_CONFIG_R2_COUNT,
           CS_SM1_MCP_MISC_EPSILON_CONFIG_R2_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_EPSILON_CONFIG_R2_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4;
#endif
    return fapi2::getScom(i_target, CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return fapi2::putScom(i_target, CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_TAG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_TAG,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_TAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_TAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_TAG,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_TAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_TAG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_TAG,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_TAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_TAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_WREND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_WREND,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_WREND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_WREND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_WREND,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_WREND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_WREND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_WREND,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_WREND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC4_WREND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_SNP_MISC_TOPOLOGY_TABLE2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_TOPOLOGY_TABLE2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_TOPOLOGY_TABLE2;
#endif
    return fapi2::getScom(i_target, CS_SM1_SNP_MISC_TOPOLOGY_TABLE2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_SNP_MISC_TOPOLOGY_TABLE2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return fapi2::putScom(i_target, CS_SM1_SNP_MISC_TOPOLOGY_TABLE2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY16,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY16_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY16,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY16_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY16,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY16_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY17,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY17_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY17,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY17_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY17,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY17_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY18,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY18_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY18,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY18_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY18,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY18_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY19,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY19_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY19,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY19_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY19,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY19_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY20(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY20,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY20_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY20(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY20,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY20_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY20(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY20,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY20_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY21(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY21,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY21_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY21(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY21,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY21_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY21(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY21,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY21_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY22(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY22,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY22_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY22(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY22,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY22_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY22(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY22,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY22_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY23,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY23_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY23,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY23_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY23,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY23_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE2_TRY23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_DIR_MISC_DEBUG0_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_DIR_MISC_DEBUG0_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_DIR_MISC_DEBUG0_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_DIR_MISC_DEBUG0_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM2_DIR_MISC_DEBUG0_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_DIR_MISC_DEBUG0_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG0_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM2_DIR_MISC_DEBUG0_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD0,
           CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD0,
           CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD0,
           CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD1,
           CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD1,
           CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD1,
           CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD2,
           CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD2,
           CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD2,
           CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD3,
           CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD3,
           CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD3,
           CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD4,
           CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD4,
           CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD4,
           CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD5,
           CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD5,
           CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD5,
           CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD6,
           CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD6,
           CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD6,
           CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD7,
           CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD7,
           CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD7,
           CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD8,
           CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD8,
           CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD8,
           CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD8_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD9,
           CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD9,
           CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD9,
           CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD10,
           CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD10,
           CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD10,
           CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_DEBUG0_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG0_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG0_CONFIG_RESERVED1,
           CS_SM2_DIR_MISC_DEBUG0_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_DEBUG0_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG0_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG0_CONFIG_RESERVED1,
           CS_SM2_DIR_MISC_DEBUG0_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_DEBUG0_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_DIR_MISC_DEBUG0_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_DIR_MISC_DEBUG0_CONFIG_RESERVED1,
           CS_SM2_DIR_MISC_DEBUG0_CONFIG_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_DEBUG0_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG0_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG0_CONFIG_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG0_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.setBit<CS_SM2_DIR_MISC_DEBUG0_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_DIR_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.clearBit<CS_SM2_DIR_MISC_DEBUG0_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_DIR_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_DIR_MISC_DEBUG0_CONFIG_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_DIR_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.getBit<CS_SM2_DIR_MISC_DEBUG0_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_MCP_MISC_CERR_MASK0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_CERR_MASK0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_MCP_MISC_CERR_MASK0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_CERR_MASK0;
#endif
    return fapi2::getScom(i_target, CS_SM2_MCP_MISC_CERR_MASK0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_MCP_MISC_CERR_MASK0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return fapi2::putScom(i_target, CS_SM2_MCP_MISC_CERR_MASK0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_NVF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_NVF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_NVF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_NVF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_NVF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_NVF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_NVF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_NVF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_NVF_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_NVF_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_NVF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_NVF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_NVF_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_NVF_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_NVF_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_NVF_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_NVF_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_NVF_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_NVF_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_NVF_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_NVF_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_NVF_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_NVF_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_ASBE_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_ASBE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_PBR_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_PBR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_PBR_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_PBR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_PBR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_PBR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_PBR_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_PBR_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_PBR_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_PBR_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_PBR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_PBR_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_PBR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_PBR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_PBR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_PBR_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_PBR_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_PBR_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_PBR_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_PBR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_PBR_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_PBR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_PBR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_PBR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_PBR_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_PBR_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_PBR_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_PBR_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_PBR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_PBR_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_PBR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_PBR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_PBR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_PBR_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_PBR_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_PBR_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_PBR_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_PBR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_PBR_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_PBR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_PBR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_PBR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_PBR_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_PBR_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_PBR_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_PBR_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_PBR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_PBR_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_PBR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_PBR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_PBR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_PBR_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_PBR_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_PBR_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_PBR_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_PBR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_PBR_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_PBR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_PBR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_PBR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_PBR_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_PBR_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_PBR_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_PBR_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_PBR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_PBR_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_PBR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_PBR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_PBR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_PBR_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_PBR_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_PBR_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_REG_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_REG_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_REG_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_REG_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_REG_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_REG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_REG_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_REG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_REG_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_REG_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_REG_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_REG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_REG_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_REG_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_REG_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_REG_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_REG_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_REG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_REG_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_REG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_REG_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_REG_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_REG_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_REG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_REG_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_REG_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_REG_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_REG_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_REG_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_REG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_REG_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_REG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_REG_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_REG_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_REG_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_REG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_REG_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_REG_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_REG_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_REG_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_REG_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_REG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_REG_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_REG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_REG_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_REG_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_REG_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_REG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_OCR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_OCR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_OCR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_OCR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_OCR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_OCR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_OCR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_OCR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_OCR_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_OCR_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_OCR_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_OCR_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_OCR_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_OCR_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_OCR_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK0_OCR_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK0_OCR_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK0_OCR_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK0_OCR_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MASK0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_MCP_MISC_CERR_MESSAGE5(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_CERR_MESSAGE5;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_MCP_MISC_CERR_MESSAGE5(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_CERR_MESSAGE5;
#endif
    return fapi2::getScom(i_target, CS_SM2_MCP_MISC_CERR_MESSAGE5, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_MCP_MISC_CERR_MESSAGE5(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MESSAGE5));
#endif
    return fapi2::putScom(i_target, CS_SM2_MCP_MISC_CERR_MESSAGE5, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MESSAGE5));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5,
           CS_SM2_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MESSAGE5));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5,
           CS_SM2_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MESSAGE5));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5,
           CS_SM2_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_SNP_MISC_PERF_MASK_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_PERF_MASK_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_SNP_MISC_PERF_MASK_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_PERF_MASK_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM2_SNP_MISC_PERF_MASK_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_SNP_MISC_PERF_MASK_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM2_SNP_MISC_PERF_MASK_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS,
           CS_SM2_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS,
           CS_SM2_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS,
           CS_SM2_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_MASK_CONFIG_TTYPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PERF_MASK_CONFIG_TTYPE,
           CS_SM2_SNP_MISC_PERF_MASK_CONFIG_TTYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_PERF_MASK_CONFIG_TTYPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_MASK_CONFIG_TTYPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PERF_MASK_CONFIG_TTYPE,
           CS_SM2_SNP_MISC_PERF_MASK_CONFIG_TTYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_PERF_MASK_CONFIG_TTYPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_PERF_MASK_CONFIG_TTYPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_PERF_MASK_CONFIG_TTYPE,
           CS_SM2_SNP_MISC_PERF_MASK_CONFIG_TTYPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_PERF_MASK_CONFIG_TTYPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_MASK_CONFIG_TSIZE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PERF_MASK_CONFIG_TSIZE,
           CS_SM2_SNP_MISC_PERF_MASK_CONFIG_TSIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_PERF_MASK_CONFIG_TSIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_MASK_CONFIG_TSIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PERF_MASK_CONFIG_TSIZE,
           CS_SM2_SNP_MISC_PERF_MASK_CONFIG_TSIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_PERF_MASK_CONFIG_TSIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_PERF_MASK_CONFIG_TSIZE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_PERF_MASK_CONFIG_TSIZE,
           CS_SM2_SNP_MISC_PERF_MASK_CONFIG_TSIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_PERF_MASK_CONFIG_TSIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_MASK_CONFIG_NVBE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PERF_MASK_CONFIG_NVBE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_PERF_MASK_CONFIG_NVBE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_MASK_CONFIG_NVBE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PERF_MASK_CONFIG_NVBE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_PERF_MASK_CONFIG_NVBE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_MASK_CONFIG_NVBE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_PERF_MASK_CONFIG_NVBE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_PERF_MASK_CONFIG_NVBE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_PERF_MASK_CONFIG_NVBE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_PERF_MASK_CONFIG_NVBE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_PERF_MASK_CONFIG_NVBE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_PERF_MASK_CONFIG_NVBE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_PERF_MASK_CONFIG_NVBE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_PERF_MASK_CONFIG_NVBE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_PERF_MASK_CONFIG_NVBE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_PERF_MASK_CONFIG_NVBE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_PERF_MASK_CONFIG_NVBE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_MASK_CONFIG_UT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PERF_MASK_CONFIG_UT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_PERF_MASK_CONFIG_UT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_MASK_CONFIG_UT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PERF_MASK_CONFIG_UT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_PERF_MASK_CONFIG_UT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_MASK_CONFIG_UT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_PERF_MASK_CONFIG_UT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_PERF_MASK_CONFIG_UT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_PERF_MASK_CONFIG_UT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_PERF_MASK_CONFIG_UT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_PERF_MASK_CONFIG_UT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_PERF_MASK_CONFIG_UT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_PERF_MASK_CONFIG_UT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_PERF_MASK_CONFIG_UT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_PERF_MASK_CONFIG_UT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_PERF_MASK_CONFIG_UT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_PERF_MASK_CONFIG_UT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_MASK_CONFIG_ATYPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PERF_MASK_CONFIG_ATYPE,
           CS_SM2_SNP_MISC_PERF_MASK_CONFIG_ATYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_PERF_MASK_CONFIG_ATYPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_MASK_CONFIG_ATYPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PERF_MASK_CONFIG_ATYPE,
           CS_SM2_SNP_MISC_PERF_MASK_CONFIG_ATYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_PERF_MASK_CONFIG_ATYPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_PERF_MASK_CONFIG_ATYPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_PERF_MASK_CONFIG_ATYPE,
           CS_SM2_SNP_MISC_PERF_MASK_CONFIG_ATYPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_PERF_MASK_CONFIG_ATYPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_MASK_CONFIG_ALLOC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PERF_MASK_CONFIG_ALLOC,
           CS_SM2_SNP_MISC_PERF_MASK_CONFIG_ALLOC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_PERF_MASK_CONFIG_ALLOC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_MASK_CONFIG_ALLOC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PERF_MASK_CONFIG_ALLOC,
           CS_SM2_SNP_MISC_PERF_MASK_CONFIG_ALLOC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_PERF_MASK_CONFIG_ALLOC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_PERF_MASK_CONFIG_ALLOC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_PERF_MASK_CONFIG_ALLOC,
           CS_SM2_SNP_MISC_PERF_MASK_CONFIG_ALLOC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_PERF_MASK_CONFIG_ALLOC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_DIR_MISC_CONFIG0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_DIR_MISC_CONFIG0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_DIR_MISC_CONFIG0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_DIR_MISC_CONFIG0;
#endif
    return fapi2::getScom(i_target, CS_SM3_DIR_MISC_CONFIG0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_DIR_MISC_CONFIG0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_CONFIG0));
#endif
    return fapi2::putScom(i_target, CS_SM3_DIR_MISC_CONFIG0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_CONFIG0_HOST_TAG_SIZE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_CONFIG0_HOST_TAG_SIZE,
           CS_SM3_DIR_MISC_CONFIG0_HOST_TAG_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_DIR_MISC_CONFIG0_HOST_TAG_SIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_CONFIG0_HOST_TAG_SIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_CONFIG0_HOST_TAG_SIZE,
           CS_SM3_DIR_MISC_CONFIG0_HOST_TAG_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_DIR_MISC_CONFIG0_HOST_TAG_SIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_DIR_MISC_CONFIG0_HOST_TAG_SIZE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_DIR_MISC_CONFIG0_HOST_TAG_SIZE,
           CS_SM3_DIR_MISC_CONFIG0_HOST_TAG_SIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_DIR_MISC_CONFIG0_HOST_TAG_SIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_CONFIG0_0_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_CONFIG0_0_RESERVED,
           CS_SM3_DIR_MISC_CONFIG0_0_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_DIR_MISC_CONFIG0_0_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_CONFIG0_0_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_CONFIG0_0_RESERVED,
           CS_SM3_DIR_MISC_CONFIG0_0_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_DIR_MISC_CONFIG0_0_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_DIR_MISC_CONFIG0_0_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_DIR_MISC_CONFIG0_0_RESERVED,
           CS_SM3_DIR_MISC_CONFIG0_0_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_DIR_MISC_CONFIG0_0_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_CONFIG0_DEBUG0_ACT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_CONFIG0_DEBUG0_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_DIR_MISC_CONFIG0_DEBUG0_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_CONFIG0_DEBUG0_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_CONFIG0_DEBUG0_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_DIR_MISC_CONFIG0_DEBUG0_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_CONFIG0_DEBUG0_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_DIR_MISC_CONFIG0_DEBUG0_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_DIR_MISC_CONFIG0_DEBUG0_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_DIR_MISC_CONFIG0_DEBUG0_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_DIR_MISC_CONFIG0_DEBUG0_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_DIR_MISC_CONFIG0_DEBUG0_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_DIR_MISC_CONFIG0_DEBUG0_ACT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_DIR_MISC_CONFIG0_DEBUG0_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_DIR_MISC_CONFIG0_DEBUG0_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_DIR_MISC_CONFIG0_DEBUG0_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_DIR_MISC_CONFIG0_DEBUG0_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_DIR_MISC_CONFIG0_DEBUG0_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_MCP_MISC_DEBUG0_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_DEBUG0_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_MCP_MISC_DEBUG0_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_DEBUG0_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM3_MCP_MISC_DEBUG0_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_MCP_MISC_DEBUG0_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG0_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM3_MCP_MISC_DEBUG0_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD0,
           CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD0,
           CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD0,
           CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD1,
           CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD1,
           CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD1,
           CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD2,
           CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD2,
           CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD2,
           CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD3,
           CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD3,
           CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD3,
           CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD4,
           CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD4,
           CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD4,
           CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD5,
           CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD5,
           CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD5,
           CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD6,
           CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD6,
           CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD6,
           CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD7,
           CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD7,
           CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD7,
           CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD8,
           CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD8,
           CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD8,
           CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD8_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD9,
           CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD9,
           CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD9,
           CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD10,
           CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD10,
           CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD10,
           CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_DEBUG0_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG0_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG0_CONFIG_RESERVED1,
           CS_SM3_MCP_MISC_DEBUG0_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_DEBUG0_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG0_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG0_CONFIG_RESERVED1,
           CS_SM3_MCP_MISC_DEBUG0_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_DEBUG0_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_DEBUG0_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_DEBUG0_CONFIG_RESERVED1,
           CS_SM3_MCP_MISC_DEBUG0_CONFIG_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_DEBUG0_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG0_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG0_CONFIG_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG0_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_DEBUG0_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_DEBUG0_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_DEBUG0_CONFIG_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_MCP_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_DEBUG0_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_MCP_MISC_XTIMER2_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_XTIMER2_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_MCP_MISC_XTIMER2_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_XTIMER2_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM3_MCP_MISC_XTIMER2_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_MCP_MISC_XTIMER2_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_XTIMER2_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM3_MCP_MISC_XTIMER2_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_XTIMER2_CONFIG_2_TICK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_XTIMER2_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_XTIMER2_CONFIG_2_TICK,
           CS_SM3_MCP_MISC_XTIMER2_CONFIG_2_TICK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_XTIMER2_CONFIG_2_TICK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_XTIMER2_CONFIG_2_TICK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_XTIMER2_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_XTIMER2_CONFIG_2_TICK,
           CS_SM3_MCP_MISC_XTIMER2_CONFIG_2_TICK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_XTIMER2_CONFIG_2_TICK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_XTIMER2_CONFIG_2_TICK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_XTIMER2_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_XTIMER2_CONFIG_2_TICK,
           CS_SM3_MCP_MISC_XTIMER2_CONFIG_2_TICK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_XTIMER2_CONFIG_2_TICK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_XTIMER2_CONFIG_3_TICK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_XTIMER2_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_XTIMER2_CONFIG_3_TICK,
           CS_SM3_MCP_MISC_XTIMER2_CONFIG_3_TICK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_XTIMER2_CONFIG_3_TICK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_XTIMER2_CONFIG_3_TICK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_XTIMER2_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_XTIMER2_CONFIG_3_TICK,
           CS_SM3_MCP_MISC_XTIMER2_CONFIG_3_TICK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_XTIMER2_CONFIG_3_TICK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_XTIMER2_CONFIG_3_TICK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_XTIMER2_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_XTIMER2_CONFIG_3_TICK,
           CS_SM3_MCP_MISC_XTIMER2_CONFIG_3_TICK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_XTIMER2_CONFIG_3_TICK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4;
#endif
    return fapi2::getScom(i_target, CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return fapi2::putScom(i_target, CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_TAG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_TAG,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_TAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_TAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_TAG,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_TAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_TAG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_TAG,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_TAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_TAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_WREND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_WREND,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_WREND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_WREND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_WREND,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_WREND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_WREND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_WREND,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_WREND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC4_WREND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_DAT_MISC_CERR_LOG_HOLD(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = DAT_MISC_CERR_LOG_HOLD;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_DAT_MISC_CERR_LOG_HOLD(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = DAT_MISC_CERR_LOG_HOLD;
#endif
    return fapi2::getScom(i_target, DAT_MISC_CERR_LOG_HOLD, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_DAT_MISC_CERR_LOG_HOLD(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return fapi2::putScom(i_target, DAT_MISC_CERR_LOG_HOLD, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_LOG_HOLD_BBUF_RDWR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_LOG_HOLD_BBUF_RDWR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_BBUF_RDWR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_LOG_HOLD_BBUF_RDWR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_LOG_HOLD_BBUF_RDWR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_BBUF_RDWR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_LOG_HOLD_BBUF_RDWR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return o_data.setBit<DAT_MISC_CERR_LOG_HOLD_BBUF_RDWR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_BBUF_RDWR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_DAT_MISC_CERR_LOG_HOLD_BBUF_RDWR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return o_data.clearBit<DAT_MISC_CERR_LOG_HOLD_BBUF_RDWR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_BBUF_RDWR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_LOG_HOLD_BBUF_RDWR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_LOG_HOLD_BBUF_RDWR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_BBUF_RDWR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_DAT_MISC_CERR_LOG_HOLD_BBUF_RDWR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return i_data.getBit<DAT_MISC_CERR_LOG_HOLD_BBUF_RDWR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_BBUF_RDWR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_LOG_HOLD_IBUF_RDWR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_LOG_HOLD_IBUF_RDWR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_IBUF_RDWR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_LOG_HOLD_IBUF_RDWR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_LOG_HOLD_IBUF_RDWR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_IBUF_RDWR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_LOG_HOLD_IBUF_RDWR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return o_data.setBit<DAT_MISC_CERR_LOG_HOLD_IBUF_RDWR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_IBUF_RDWR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_DAT_MISC_CERR_LOG_HOLD_IBUF_RDWR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return o_data.clearBit<DAT_MISC_CERR_LOG_HOLD_IBUF_RDWR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_IBUF_RDWR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_LOG_HOLD_IBUF_RDWR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_LOG_HOLD_IBUF_RDWR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_IBUF_RDWR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_DAT_MISC_CERR_LOG_HOLD_IBUF_RDWR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return i_data.getBit<DAT_MISC_CERR_LOG_HOLD_IBUF_RDWR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_IBUF_RDWR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_LOG_HOLD_OBUF_RDWR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_LOG_HOLD_OBUF_RDWR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_OBUF_RDWR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_LOG_HOLD_OBUF_RDWR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_LOG_HOLD_OBUF_RDWR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_OBUF_RDWR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_LOG_HOLD_OBUF_RDWR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return o_data.setBit<DAT_MISC_CERR_LOG_HOLD_OBUF_RDWR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_OBUF_RDWR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_DAT_MISC_CERR_LOG_HOLD_OBUF_RDWR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return o_data.clearBit<DAT_MISC_CERR_LOG_HOLD_OBUF_RDWR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_OBUF_RDWR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_LOG_HOLD_OBUF_RDWR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_LOG_HOLD_OBUF_RDWR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_OBUF_RDWR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_DAT_MISC_CERR_LOG_HOLD_OBUF_RDWR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return i_data.getBit<DAT_MISC_CERR_LOG_HOLD_OBUF_RDWR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_OBUF_RDWR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_LOG_HOLD_RQIN_OVF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_LOG_HOLD_RQIN_OVF,
           DAT_MISC_CERR_LOG_HOLD_RQIN_OVF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_RQIN_OVF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_LOG_HOLD_RQIN_OVF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_LOG_HOLD_RQIN_OVF,
           DAT_MISC_CERR_LOG_HOLD_RQIN_OVF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_RQIN_OVF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_LOG_HOLD_RQIN_OVF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_LOG_HOLD_RQIN_OVF,
           DAT_MISC_CERR_LOG_HOLD_RQIN_OVF_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_RQIN_OVF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_LOG_HOLD_IBUF_CTL_PIPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_LOG_HOLD_IBUF_CTL_PIPE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_IBUF_CTL_PIPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_LOG_HOLD_IBUF_CTL_PIPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_LOG_HOLD_IBUF_CTL_PIPE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_IBUF_CTL_PIPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_LOG_HOLD_IBUF_CTL_PIPE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return o_data.setBit<DAT_MISC_CERR_LOG_HOLD_IBUF_CTL_PIPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_IBUF_CTL_PIPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_DAT_MISC_CERR_LOG_HOLD_IBUF_CTL_PIPE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return o_data.clearBit<DAT_MISC_CERR_LOG_HOLD_IBUF_CTL_PIPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_IBUF_CTL_PIPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_LOG_HOLD_IBUF_CTL_PIPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_LOG_HOLD_IBUF_CTL_PIPE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_IBUF_CTL_PIPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_DAT_MISC_CERR_LOG_HOLD_IBUF_CTL_PIPE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return i_data.getBit<DAT_MISC_CERR_LOG_HOLD_IBUF_CTL_PIPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_IBUF_CTL_PIPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_LOG_HOLD_PBTX_PIPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_LOG_HOLD_PBTX_PIPE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_PBTX_PIPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_LOG_HOLD_PBTX_PIPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_LOG_HOLD_PBTX_PIPE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_PBTX_PIPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_LOG_HOLD_PBTX_PIPE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return o_data.setBit<DAT_MISC_CERR_LOG_HOLD_PBTX_PIPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_PBTX_PIPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_DAT_MISC_CERR_LOG_HOLD_PBTX_PIPE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return o_data.clearBit<DAT_MISC_CERR_LOG_HOLD_PBTX_PIPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_PBTX_PIPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_LOG_HOLD_PBTX_PIPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_LOG_HOLD_PBTX_PIPE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_PBTX_PIPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_DAT_MISC_CERR_LOG_HOLD_PBTX_PIPE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return i_data.getBit<DAT_MISC_CERR_LOG_HOLD_PBTX_PIPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_PBTX_PIPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_LOG_HOLD_MRG_IR_PIPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_LOG_HOLD_MRG_IR_PIPE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_MRG_IR_PIPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_LOG_HOLD_MRG_IR_PIPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_LOG_HOLD_MRG_IR_PIPE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_MRG_IR_PIPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_LOG_HOLD_MRG_IR_PIPE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return o_data.setBit<DAT_MISC_CERR_LOG_HOLD_MRG_IR_PIPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_MRG_IR_PIPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_DAT_MISC_CERR_LOG_HOLD_MRG_IR_PIPE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return o_data.clearBit<DAT_MISC_CERR_LOG_HOLD_MRG_IR_PIPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_MRG_IR_PIPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_LOG_HOLD_MRG_IR_PIPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_LOG_HOLD_MRG_IR_PIPE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_MRG_IR_PIPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_DAT_MISC_CERR_LOG_HOLD_MRG_IR_PIPE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return i_data.getBit<DAT_MISC_CERR_LOG_HOLD_MRG_IR_PIPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_MRG_IR_PIPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_LOG_HOLD_MRG_OR_PIPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_LOG_HOLD_MRG_OR_PIPE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_MRG_OR_PIPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_LOG_HOLD_MRG_OR_PIPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_LOG_HOLD_MRG_OR_PIPE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_MRG_OR_PIPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_LOG_HOLD_MRG_OR_PIPE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return o_data.setBit<DAT_MISC_CERR_LOG_HOLD_MRG_OR_PIPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_MRG_OR_PIPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_DAT_MISC_CERR_LOG_HOLD_MRG_OR_PIPE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return o_data.clearBit<DAT_MISC_CERR_LOG_HOLD_MRG_OR_PIPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_MRG_OR_PIPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_LOG_HOLD_MRG_OR_PIPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_LOG_HOLD_MRG_OR_PIPE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_MRG_OR_PIPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_DAT_MISC_CERR_LOG_HOLD_MRG_OR_PIPE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return i_data.getBit<DAT_MISC_CERR_LOG_HOLD_MRG_OR_PIPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_MRG_OR_PIPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_LOG_HOLD_AMO_ADDR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_LOG_HOLD_AMO_ADDR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_AMO_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_LOG_HOLD_AMO_ADDR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_LOG_HOLD_AMO_ADDR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_AMO_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_LOG_HOLD_AMO_ADDR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return o_data.setBit<DAT_MISC_CERR_LOG_HOLD_AMO_ADDR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_AMO_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_DAT_MISC_CERR_LOG_HOLD_AMO_ADDR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return o_data.clearBit<DAT_MISC_CERR_LOG_HOLD_AMO_ADDR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_AMO_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_LOG_HOLD_AMO_ADDR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_LOG_HOLD_AMO_ADDR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_AMO_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_DAT_MISC_CERR_LOG_HOLD_AMO_ADDR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return i_data.getBit<DAT_MISC_CERR_LOG_HOLD_AMO_ADDR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_AMO_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_LOG_HOLD_PBRX_RTAG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_LOG_HOLD_PBRX_RTAG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_PBRX_RTAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_LOG_HOLD_PBRX_RTAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_LOG_HOLD_PBRX_RTAG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_PBRX_RTAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_LOG_HOLD_PBRX_RTAG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return o_data.setBit<DAT_MISC_CERR_LOG_HOLD_PBRX_RTAG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_PBRX_RTAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_DAT_MISC_CERR_LOG_HOLD_PBRX_RTAG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return o_data.clearBit<DAT_MISC_CERR_LOG_HOLD_PBRX_RTAG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_PBRX_RTAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_LOG_HOLD_PBRX_RTAG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_LOG_HOLD_PBRX_RTAG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_PBRX_RTAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_DAT_MISC_CERR_LOG_HOLD_PBRX_RTAG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return i_data.getBit<DAT_MISC_CERR_LOG_HOLD_PBRX_RTAG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_PBRX_RTAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_LOG_HOLD_IBUF_WRITE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_LOG_HOLD_IBUF_WRITE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_IBUF_WRITE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_LOG_HOLD_IBUF_WRITE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_LOG_HOLD_IBUF_WRITE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_IBUF_WRITE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_LOG_HOLD_IBUF_WRITE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return o_data.setBit<DAT_MISC_CERR_LOG_HOLD_IBUF_WRITE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_IBUF_WRITE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_DAT_MISC_CERR_LOG_HOLD_IBUF_WRITE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return o_data.clearBit<DAT_MISC_CERR_LOG_HOLD_IBUF_WRITE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_IBUF_WRITE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_LOG_HOLD_IBUF_WRITE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_LOG_HOLD_IBUF_WRITE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_IBUF_WRITE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_DAT_MISC_CERR_LOG_HOLD_IBUF_WRITE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return i_data.getBit<DAT_MISC_CERR_LOG_HOLD_IBUF_WRITE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_IBUF_WRITE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_LOG_HOLD_IBUF_WARB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_LOG_HOLD_IBUF_WARB,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_IBUF_WARB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_LOG_HOLD_IBUF_WARB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_LOG_HOLD_IBUF_WARB,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_IBUF_WARB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_LOG_HOLD_IBUF_WARB(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return o_data.setBit<DAT_MISC_CERR_LOG_HOLD_IBUF_WARB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_IBUF_WARB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_DAT_MISC_CERR_LOG_HOLD_IBUF_WARB(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return o_data.clearBit<DAT_MISC_CERR_LOG_HOLD_IBUF_WARB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_IBUF_WARB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_LOG_HOLD_IBUF_WARB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_LOG_HOLD_IBUF_WARB,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_IBUF_WARB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_DAT_MISC_CERR_LOG_HOLD_IBUF_WARB(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_HOLD));
#endif
    return i_data.getBit<DAT_MISC_CERR_LOG_HOLD_IBUF_WARB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_LOG_HOLD_IBUF_WARB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_DAT_MISC_CERR_PTY_FIRST(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = DAT_MISC_CERR_PTY_FIRST;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_DAT_MISC_CERR_PTY_FIRST(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = DAT_MISC_CERR_PTY_FIRST;
#endif
    return fapi2::getScom(i_target, DAT_MISC_CERR_PTY_FIRST, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_DAT_MISC_CERR_PTY_FIRST(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_FIRST));
#endif
    return fapi2::putScom(i_target, DAT_MISC_CERR_PTY_FIRST, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_FIRST_CERR_PTY_FIRST_BITS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_FIRST));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_PTY_FIRST_CERR_PTY_FIRST_BITS,
           DAT_MISC_CERR_PTY_FIRST_CERR_PTY_FIRST_BITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_PTY_FIRST_CERR_PTY_FIRST_BITS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_FIRST_CERR_PTY_FIRST_BITS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_FIRST));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_PTY_FIRST_CERR_PTY_FIRST_BITS,
           DAT_MISC_CERR_PTY_FIRST_CERR_PTY_FIRST_BITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_PTY_FIRST_CERR_PTY_FIRST_BITS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_PTY_FIRST_CERR_PTY_FIRST_BITS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_FIRST));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_PTY_FIRST_CERR_PTY_FIRST_BITS,
           DAT_MISC_CERR_PTY_FIRST_CERR_PTY_FIRST_BITS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CERR_PTY_FIRST_CERR_PTY_FIRST_BITS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_FIR_REG_1_RW(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = FIR_REG_1_RW;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_FIR_REG_1_RW(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = FIR_REG_1_RW;
#endif
    return fapi2::getScom(i_target, FIR_REG_1_RW, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_FIR_REG_1_RW(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return fapi2::putScom(i_target, FIR_REG_1_RW, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_FIR_REG_1_WO_AND(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = FIR_REG_1_WO_AND;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_FIR_REG_1_WO_AND(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = FIR_REG_1_WO_AND;
#endif
    return fapi2::getScom(i_target, FIR_REG_1_WO_AND, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_FIR_REG_1_WO_AND(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return fapi2::putScom(i_target, FIR_REG_1_WO_AND, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_FIR_REG_1_WO_OR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = FIR_REG_1_WO_OR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_FIR_REG_1_WO_OR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = FIR_REG_1_WO_OR;
#endif
    return fapi2::getScom(i_target, FIR_REG_1_WO_OR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_FIR_REG_1_WO_OR(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return fapi2::putScom(i_target, FIR_REG_1_WO_OR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK0_STALL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK0_STALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK0_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK0_STALL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK0_STALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK0_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK0_STALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_NDL_BRK0_STALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK0_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_NDL_BRK0_STALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_NDL_BRK0_STALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK0_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_NDL_BRK0_STALL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_NDL_BRK0_STALL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK0_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_NDL_BRK0_STALL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_NDL_BRK0_STALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK0_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK0_NOSTALL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK0_NOSTALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK0_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK0_NOSTALL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK0_NOSTALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK0_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK0_NOSTALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_NDL_BRK0_NOSTALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK0_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_NDL_BRK0_NOSTALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_NDL_BRK0_NOSTALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK0_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_NDL_BRK0_NOSTALL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_NDL_BRK0_NOSTALL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK0_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_NDL_BRK0_NOSTALL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_NDL_BRK0_NOSTALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK0_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK1_STALL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK1_STALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK1_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK1_STALL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK1_STALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK1_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK1_STALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_NDL_BRK1_STALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK1_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_NDL_BRK1_STALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_NDL_BRK1_STALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK1_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_NDL_BRK1_STALL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_NDL_BRK1_STALL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK1_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_NDL_BRK1_STALL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_NDL_BRK1_STALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK1_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK1_NOSTALL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK1_NOSTALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK1_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK1_NOSTALL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK1_NOSTALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK1_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK1_NOSTALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_NDL_BRK1_NOSTALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK1_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_NDL_BRK1_NOSTALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_NDL_BRK1_NOSTALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK1_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_NDL_BRK1_NOSTALL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_NDL_BRK1_NOSTALL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK1_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_NDL_BRK1_NOSTALL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_NDL_BRK1_NOSTALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK1_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK2_STALL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK2_STALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK2_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK2_STALL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK2_STALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK2_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK2_STALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_NDL_BRK2_STALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK2_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_NDL_BRK2_STALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_NDL_BRK2_STALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK2_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_NDL_BRK2_STALL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_NDL_BRK2_STALL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK2_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_NDL_BRK2_STALL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_NDL_BRK2_STALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK2_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK2_NOSTALL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK2_NOSTALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK2_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK2_NOSTALL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK2_NOSTALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK2_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK2_NOSTALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_NDL_BRK2_NOSTALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK2_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_NDL_BRK2_NOSTALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_NDL_BRK2_NOSTALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK2_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_NDL_BRK2_NOSTALL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_NDL_BRK2_NOSTALL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK2_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_NDL_BRK2_NOSTALL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_NDL_BRK2_NOSTALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK2_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK3_STALL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK3_STALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK3_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK3_STALL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK3_STALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK3_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK3_STALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_NDL_BRK3_STALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK3_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_NDL_BRK3_STALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_NDL_BRK3_STALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK3_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_NDL_BRK3_STALL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_NDL_BRK3_STALL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK3_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_NDL_BRK3_STALL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_NDL_BRK3_STALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK3_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK3_NOSTALL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK3_NOSTALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK3_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK3_NOSTALL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK3_NOSTALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK3_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK3_NOSTALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_NDL_BRK3_NOSTALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK3_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_NDL_BRK3_NOSTALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_NDL_BRK3_NOSTALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK3_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_NDL_BRK3_NOSTALL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_NDL_BRK3_NOSTALL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK3_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_NDL_BRK3_NOSTALL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_NDL_BRK3_NOSTALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK3_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK4_STALL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK4_STALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK4_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK4_STALL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK4_STALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK4_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK4_STALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_NDL_BRK4_STALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK4_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_NDL_BRK4_STALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_NDL_BRK4_STALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK4_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_NDL_BRK4_STALL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_NDL_BRK4_STALL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK4_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_NDL_BRK4_STALL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_NDL_BRK4_STALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK4_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK4_NOSTALL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK4_NOSTALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK4_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK4_NOSTALL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK4_NOSTALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK4_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK4_NOSTALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_NDL_BRK4_NOSTALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK4_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_NDL_BRK4_NOSTALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_NDL_BRK4_NOSTALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK4_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_NDL_BRK4_NOSTALL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_NDL_BRK4_NOSTALL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK4_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_NDL_BRK4_NOSTALL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_NDL_BRK4_NOSTALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK4_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK5_STALL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK5_STALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK5_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK5_STALL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK5_STALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK5_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK5_STALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_NDL_BRK5_STALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK5_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_NDL_BRK5_STALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_NDL_BRK5_STALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK5_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_NDL_BRK5_STALL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_NDL_BRK5_STALL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK5_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_NDL_BRK5_STALL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_NDL_BRK5_STALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK5_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK5_NOSTALL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK5_NOSTALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK5_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK5_NOSTALL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK5_NOSTALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK5_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK5_NOSTALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_NDL_BRK5_NOSTALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK5_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_NDL_BRK5_NOSTALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_NDL_BRK5_NOSTALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK5_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_NDL_BRK5_NOSTALL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_NDL_BRK5_NOSTALL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK5_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_NDL_BRK5_NOSTALL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_NDL_BRK5_NOSTALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK5_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_MISC_REG_RING_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_MISC_REG_RING_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_MISC_REG_RING_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_MISC_REG_RING_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_MISC_REG_RING_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_MISC_REG_RING_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_MISC_REG_RING_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_MISC_REG_RING_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_MISC_REG_RING_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_MISC_REG_RING_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_MISC_REG_RING_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_MISC_REG_RING_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_MISC_REG_RING_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_MISC_REG_RING_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_MISC_REG_RING_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_MISC_REG_RING_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_MISC_REG_RING_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_MISC_REG_RING_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_MISC_INT_RA_PERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_MISC_INT_RA_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_MISC_INT_RA_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_MISC_INT_RA_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_MISC_INT_RA_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_MISC_INT_RA_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_MISC_INT_RA_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_MISC_INT_RA_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_MISC_INT_RA_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_MISC_INT_RA_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_MISC_INT_RA_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_MISC_INT_RA_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_MISC_INT_RA_PERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_MISC_INT_RA_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_MISC_INT_RA_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_MISC_INT_RA_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_MISC_INT_RA_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_MISC_INT_RA_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_MISC_DA_ADDR_PERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_MISC_DA_ADDR_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_MISC_DA_ADDR_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_MISC_DA_ADDR_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_MISC_DA_ADDR_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_MISC_DA_ADDR_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_MISC_DA_ADDR_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_MISC_DA_ADDR_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_MISC_DA_ADDR_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_MISC_DA_ADDR_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_MISC_DA_ADDR_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_MISC_DA_ADDR_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_MISC_DA_ADDR_PERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_MISC_DA_ADDR_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_MISC_DA_ADDR_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_MISC_DA_ADDR_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_MISC_DA_ADDR_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_MISC_DA_ADDR_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_MISC_CTRL_PERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_MISC_CTRL_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_MISC_CTRL_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_MISC_CTRL_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_MISC_CTRL_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_MISC_CTRL_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_MISC_CTRL_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_MISC_CTRL_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_MISC_CTRL_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_MISC_CTRL_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_MISC_CTRL_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_MISC_CTRL_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_MISC_CTRL_PERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_MISC_CTRL_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_MISC_CTRL_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_MISC_CTRL_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_MISC_CTRL_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_MISC_CTRL_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_FIR1_RSVD_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_FIR1_RSVD_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_FIR1_RSVD_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_FIR1_RSVD_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_FIR1_RSVD_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_FIR1_RSVD_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_FIR1_RSVD_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_FIR1_RSVD_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_FIR1_RSVD_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_FIR1_RSVD_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_FIR1_RSVD_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_FIR1_RSVD_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_FIR1_RSVD_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_FIR1_RSVD_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_FIR1_RSVD_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_FIR1_RSVD_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_FIR1_RSVD_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_FIR1_RSVD_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_TVT_ENTRY_INVALID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_ATS_TVT_ENTRY_INVALID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TVT_ENTRY_INVALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_TVT_ENTRY_INVALID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_ATS_TVT_ENTRY_INVALID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TVT_ENTRY_INVALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_TVT_ENTRY_INVALID(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_ATS_TVT_ENTRY_INVALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TVT_ENTRY_INVALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_ATS_TVT_ENTRY_INVALID(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_ATS_TVT_ENTRY_INVALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TVT_ENTRY_INVALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_ATS_TVT_ENTRY_INVALID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_ATS_TVT_ENTRY_INVALID,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TVT_ENTRY_INVALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_ATS_TVT_ENTRY_INVALID(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_ATS_TVT_ENTRY_INVALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TVT_ENTRY_INVALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_TVT_ADDR_RANGE_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_ATS_TVT_ADDR_RANGE_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TVT_ADDR_RANGE_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_TVT_ADDR_RANGE_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_ATS_TVT_ADDR_RANGE_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TVT_ADDR_RANGE_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_TVT_ADDR_RANGE_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_ATS_TVT_ADDR_RANGE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TVT_ADDR_RANGE_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_ATS_TVT_ADDR_RANGE_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_ATS_TVT_ADDR_RANGE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TVT_ADDR_RANGE_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_ATS_TVT_ADDR_RANGE_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_ATS_TVT_ADDR_RANGE_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TVT_ADDR_RANGE_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_ATS_TVT_ADDR_RANGE_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_ATS_TVT_ADDR_RANGE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TVT_ADDR_RANGE_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_TCE_PAGE_ACCESS_CA_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_ATS_TCE_PAGE_ACCESS_CA_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TCE_PAGE_ACCESS_CA_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_TCE_PAGE_ACCESS_CA_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_ATS_TCE_PAGE_ACCESS_CA_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TCE_PAGE_ACCESS_CA_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_TCE_PAGE_ACCESS_CA_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_ATS_TCE_PAGE_ACCESS_CA_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TCE_PAGE_ACCESS_CA_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_ATS_TCE_PAGE_ACCESS_CA_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_ATS_TCE_PAGE_ACCESS_CA_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TCE_PAGE_ACCESS_CA_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_ATS_TCE_PAGE_ACCESS_CA_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_ATS_TCE_PAGE_ACCESS_CA_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TCE_PAGE_ACCESS_CA_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_ATS_TCE_PAGE_ACCESS_CA_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_ATS_TCE_PAGE_ACCESS_CA_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TCE_PAGE_ACCESS_CA_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_TCE_CACHE_MULT_HIT_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_ATS_TCE_CACHE_MULT_HIT_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TCE_CACHE_MULT_HIT_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_TCE_CACHE_MULT_HIT_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_ATS_TCE_CACHE_MULT_HIT_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TCE_CACHE_MULT_HIT_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_TCE_CACHE_MULT_HIT_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_ATS_TCE_CACHE_MULT_HIT_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TCE_CACHE_MULT_HIT_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_ATS_TCE_CACHE_MULT_HIT_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_ATS_TCE_CACHE_MULT_HIT_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TCE_CACHE_MULT_HIT_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_ATS_TCE_CACHE_MULT_HIT_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_ATS_TCE_CACHE_MULT_HIT_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TCE_CACHE_MULT_HIT_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_ATS_TCE_CACHE_MULT_HIT_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_ATS_TCE_CACHE_MULT_HIT_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TCE_CACHE_MULT_HIT_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_TCE_PAGE_ACCESS_TW_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_ATS_TCE_PAGE_ACCESS_TW_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TCE_PAGE_ACCESS_TW_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_TCE_PAGE_ACCESS_TW_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_ATS_TCE_PAGE_ACCESS_TW_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TCE_PAGE_ACCESS_TW_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_TCE_PAGE_ACCESS_TW_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_ATS_TCE_PAGE_ACCESS_TW_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TCE_PAGE_ACCESS_TW_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_ATS_TCE_PAGE_ACCESS_TW_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_ATS_TCE_PAGE_ACCESS_TW_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TCE_PAGE_ACCESS_TW_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_ATS_TCE_PAGE_ACCESS_TW_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_ATS_TCE_PAGE_ACCESS_TW_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TCE_PAGE_ACCESS_TW_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_ATS_TCE_PAGE_ACCESS_TW_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_ATS_TCE_PAGE_ACCESS_TW_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TCE_PAGE_ACCESS_TW_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_TCE_REQ_TO_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_ATS_TCE_REQ_TO_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TCE_REQ_TO_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_TCE_REQ_TO_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_ATS_TCE_REQ_TO_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TCE_REQ_TO_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_TCE_REQ_TO_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_ATS_TCE_REQ_TO_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TCE_REQ_TO_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_ATS_TCE_REQ_TO_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_ATS_TCE_REQ_TO_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TCE_REQ_TO_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_ATS_TCE_REQ_TO_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_ATS_TCE_REQ_TO_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TCE_REQ_TO_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_ATS_TCE_REQ_TO_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_ATS_TCE_REQ_TO_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TCE_REQ_TO_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_TCD_PERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_ATS_TCD_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TCD_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_TCD_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_ATS_TCD_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TCD_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_TCD_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_ATS_TCD_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TCD_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_ATS_TCD_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_ATS_TCD_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TCD_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_ATS_TCD_PERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_ATS_TCD_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TCD_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_ATS_TCD_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_ATS_TCD_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TCD_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_TDR_PERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_ATS_TDR_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TDR_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_TDR_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_ATS_TDR_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TDR_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_TDR_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_ATS_TDR_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TDR_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_ATS_TDR_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_ATS_TDR_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TDR_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_ATS_TDR_PERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_ATS_TDR_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TDR_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_ATS_TDR_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_ATS_TDR_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TDR_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_AT_EA_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_ATS_AT_EA_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_AT_EA_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_AT_EA_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_ATS_AT_EA_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_AT_EA_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_AT_EA_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_ATS_AT_EA_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_AT_EA_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_ATS_AT_EA_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_ATS_AT_EA_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_AT_EA_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_ATS_AT_EA_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_ATS_AT_EA_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_AT_EA_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_ATS_AT_EA_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_ATS_AT_EA_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_AT_EA_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_AT_EA_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_ATS_AT_EA_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_AT_EA_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_AT_EA_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_ATS_AT_EA_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_AT_EA_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_AT_EA_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_ATS_AT_EA_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_AT_EA_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_ATS_AT_EA_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_ATS_AT_EA_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_AT_EA_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_ATS_AT_EA_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_ATS_AT_EA_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_AT_EA_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_ATS_AT_EA_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_ATS_AT_EA_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_AT_EA_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_AT_TDRMEM_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_ATS_AT_TDRMEM_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_AT_TDRMEM_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_AT_TDRMEM_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_ATS_AT_TDRMEM_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_AT_TDRMEM_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_AT_TDRMEM_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_ATS_AT_TDRMEM_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_AT_TDRMEM_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_ATS_AT_TDRMEM_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_ATS_AT_TDRMEM_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_AT_TDRMEM_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_ATS_AT_TDRMEM_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_ATS_AT_TDRMEM_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_AT_TDRMEM_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_ATS_AT_TDRMEM_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_ATS_AT_TDRMEM_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_AT_TDRMEM_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_AT_TDRMEM_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_ATS_AT_TDRMEM_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_AT_TDRMEM_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_AT_TDRMEM_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_ATS_AT_TDRMEM_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_AT_TDRMEM_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_AT_TDRMEM_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_ATS_AT_TDRMEM_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_AT_TDRMEM_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_ATS_AT_TDRMEM_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_ATS_AT_TDRMEM_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_AT_TDRMEM_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_ATS_AT_TDRMEM_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_ATS_AT_TDRMEM_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_AT_TDRMEM_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_ATS_AT_TDRMEM_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_ATS_AT_TDRMEM_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_AT_TDRMEM_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_AT_RSPOUT_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_ATS_AT_RSPOUT_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_AT_RSPOUT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_AT_RSPOUT_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_ATS_AT_RSPOUT_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_AT_RSPOUT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_AT_RSPOUT_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_ATS_AT_RSPOUT_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_AT_RSPOUT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_ATS_AT_RSPOUT_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_ATS_AT_RSPOUT_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_AT_RSPOUT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_ATS_AT_RSPOUT_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_ATS_AT_RSPOUT_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_AT_RSPOUT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_ATS_AT_RSPOUT_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_ATS_AT_RSPOUT_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_AT_RSPOUT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_AT_RSPOUT_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_ATS_AT_RSPOUT_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_AT_RSPOUT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_AT_RSPOUT_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_ATS_AT_RSPOUT_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_AT_RSPOUT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_AT_RSPOUT_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_ATS_AT_RSPOUT_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_AT_RSPOUT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_ATS_AT_RSPOUT_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_ATS_AT_RSPOUT_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_AT_RSPOUT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_ATS_AT_RSPOUT_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_ATS_AT_RSPOUT_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_AT_RSPOUT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_ATS_AT_RSPOUT_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_ATS_AT_RSPOUT_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_AT_RSPOUT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_TVT_PERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_ATS_TVT_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TVT_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_TVT_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_ATS_TVT_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TVT_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_TVT_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_ATS_TVT_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TVT_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_ATS_TVT_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_ATS_TVT_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TVT_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_ATS_TVT_PERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_ATS_TVT_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TVT_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_ATS_TVT_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_ATS_TVT_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_TVT_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_IODA_ADDR_PERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_ATS_IODA_ADDR_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_IODA_ADDR_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_IODA_ADDR_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_ATS_IODA_ADDR_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_IODA_ADDR_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_IODA_ADDR_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_ATS_IODA_ADDR_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_IODA_ADDR_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_ATS_IODA_ADDR_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_ATS_IODA_ADDR_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_IODA_ADDR_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_ATS_IODA_ADDR_PERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_ATS_IODA_ADDR_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_IODA_ADDR_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_ATS_IODA_ADDR_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_ATS_IODA_ADDR_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_IODA_ADDR_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_PAU_CTRL_PERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_ATS_PAU_CTRL_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_PAU_CTRL_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_PAU_CTRL_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_ATS_PAU_CTRL_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_PAU_CTRL_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_PAU_CTRL_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_ATS_PAU_CTRL_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_PAU_CTRL_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_ATS_PAU_CTRL_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_ATS_PAU_CTRL_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_PAU_CTRL_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_ATS_PAU_CTRL_PERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_ATS_PAU_CTRL_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_PAU_CTRL_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_ATS_PAU_CTRL_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_ATS_PAU_CTRL_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_PAU_CTRL_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_PAU_TOR_PERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_ATS_PAU_TOR_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_PAU_TOR_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_PAU_TOR_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_ATS_PAU_TOR_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_PAU_TOR_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_PAU_TOR_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_ATS_PAU_TOR_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_PAU_TOR_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_ATS_PAU_TOR_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_ATS_PAU_TOR_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_PAU_TOR_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_ATS_PAU_TOR_PERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_ATS_PAU_TOR_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_PAU_TOR_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_ATS_PAU_TOR_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_ATS_PAU_TOR_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_PAU_TOR_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_INVAL_IODA_TBL_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_ATS_INVAL_IODA_TBL_SEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_INVAL_IODA_TBL_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_INVAL_IODA_TBL_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_ATS_INVAL_IODA_TBL_SEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_INVAL_IODA_TBL_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_INVAL_IODA_TBL_SEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_ATS_INVAL_IODA_TBL_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_INVAL_IODA_TBL_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_ATS_INVAL_IODA_TBL_SEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_ATS_INVAL_IODA_TBL_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_INVAL_IODA_TBL_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_ATS_INVAL_IODA_TBL_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_ATS_INVAL_IODA_TBL_SEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_INVAL_IODA_TBL_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_ATS_INVAL_IODA_TBL_SEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_ATS_INVAL_IODA_TBL_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_INVAL_IODA_TBL_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_RSVD_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_ATS_RSVD_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_RSVD_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_RSVD_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_ATS_RSVD_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_RSVD_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_ATS_RSVD_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_ATS_RSVD_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_RSVD_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_ATS_RSVD_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_ATS_RSVD_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_RSVD_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_ATS_RSVD_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_ATS_RSVD_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_RSVD_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_ATS_RSVD_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_ATS_RSVD_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_ATS_RSVD_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_XSL_KILL_XLATE_EPOCH_TIMEOUT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_XSL_KILL_XLATE_EPOCH_TIMEOUT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_KILL_XLATE_EPOCH_TIMEOUT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_XSL_KILL_XLATE_EPOCH_TIMEOUT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_XSL_KILL_XLATE_EPOCH_TIMEOUT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_KILL_XLATE_EPOCH_TIMEOUT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_XSL_KILL_XLATE_EPOCH_TIMEOUT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_XSL_KILL_XLATE_EPOCH_TIMEOUT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_KILL_XLATE_EPOCH_TIMEOUT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_XSL_KILL_XLATE_EPOCH_TIMEOUT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_XSL_KILL_XLATE_EPOCH_TIMEOUT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_KILL_XLATE_EPOCH_TIMEOUT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_XSL_KILL_XLATE_EPOCH_TIMEOUT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_XSL_KILL_XLATE_EPOCH_TIMEOUT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_KILL_XLATE_EPOCH_TIMEOUT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_XSL_KILL_XLATE_EPOCH_TIMEOUT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_XSL_KILL_XLATE_EPOCH_TIMEOUT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_KILL_XLATE_EPOCH_TIMEOUT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_XSL_RSVD_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_XSL_RSVD_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_XSL_RSVD_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_XSL_RSVD_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_XSL_RSVD_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_XSL_RSVD_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_XSL_RSVD_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_XSL_RSVD_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_XSL_RSVD_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_XSL_RSVD_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_XSL_RSVD_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_XSL_RSVD_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_XSL_RSVD_20(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_XSL_RSVD_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_XSL_RSVD_20(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_XSL_RSVD_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_XSL_RSVD_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_XSL_RSVD_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_XSL_RSVD_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_XSL_RSVD_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_XSL_RSVD_20(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_XSL_RSVD_20,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_XSL_RSVD_20(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_XSL_RSVD_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_XSL_RSVD_21(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_XSL_RSVD_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_XSL_RSVD_21(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_XSL_RSVD_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_XSL_RSVD_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_XSL_RSVD_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_XSL_RSVD_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_XSL_RSVD_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_XSL_RSVD_21(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_XSL_RSVD_21,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_XSL_RSVD_21(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_XSL_RSVD_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_XSL_RSVD_22(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_XSL_RSVD_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_XSL_RSVD_22(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_XSL_RSVD_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_XSL_RSVD_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_XSL_RSVD_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_XSL_RSVD_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_XSL_RSVD_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_XSL_RSVD_22(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_XSL_RSVD_22,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_XSL_RSVD_22(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_XSL_RSVD_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_XSL_RSVD_23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_XSL_RSVD_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_XSL_RSVD_23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_XSL_RSVD_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_XSL_RSVD_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_XSL_RSVD_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_XSL_RSVD_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_XSL_RSVD_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_XSL_RSVD_23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_XSL_RSVD_23,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_XSL_RSVD_23(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_XSL_RSVD_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_XSL_RSVD_24(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_XSL_RSVD_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_XSL_RSVD_24(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_XSL_RSVD_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_XSL_RSVD_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_XSL_RSVD_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_XSL_RSVD_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_XSL_RSVD_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_XSL_RSVD_24(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_XSL_RSVD_24,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_XSL_RSVD_24(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_XSL_RSVD_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_XSL_RSVD_25(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_XSL_RSVD_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_XSL_RSVD_25(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_XSL_RSVD_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_XSL_RSVD_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_XSL_RSVD_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_XSL_RSVD_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_XSL_RSVD_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_XSL_RSVD_25(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_XSL_RSVD_25,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_XSL_RSVD_25(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_XSL_RSVD_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_XSL_RSVD_26(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_XSL_RSVD_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_XSL_RSVD_26(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_XSL_RSVD_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_XSL_RSVD_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_XSL_RSVD_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_XSL_RSVD_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_XSL_RSVD_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_XSL_RSVD_26(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_XSL_RSVD_26,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_XSL_RSVD_26(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_XSL_RSVD_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_XSL_RSVD_27(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_XSL_RSVD_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_XSL_RSVD_27(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_XSL_RSVD_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_XSL_RSVD_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_XSL_RSVD_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_XSL_RSVD_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_XSL_RSVD_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_XSL_RSVD_27(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_XSL_RSVD_27,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_XSL_RSVD_27(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_XSL_RSVD_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_XSL_RSVD_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK6_STALL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK6_STALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK6_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK6_STALL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK6_STALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK6_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK6_STALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_NDL_BRK6_STALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK6_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_NDL_BRK6_STALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_NDL_BRK6_STALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK6_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_NDL_BRK6_STALL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_NDL_BRK6_STALL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK6_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_NDL_BRK6_STALL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_NDL_BRK6_STALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK6_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK6_NOSTALL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK6_NOSTALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK6_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK6_NOSTALL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK6_NOSTALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK6_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK6_NOSTALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_NDL_BRK6_NOSTALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK6_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_NDL_BRK6_NOSTALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_NDL_BRK6_NOSTALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK6_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_NDL_BRK6_NOSTALL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_NDL_BRK6_NOSTALL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK6_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_NDL_BRK6_NOSTALL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_NDL_BRK6_NOSTALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK6_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK7_STALL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK7_STALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK7_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK7_STALL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK7_STALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK7_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK7_STALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_NDL_BRK7_STALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK7_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_NDL_BRK7_STALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_NDL_BRK7_STALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK7_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_NDL_BRK7_STALL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_NDL_BRK7_STALL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK7_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_NDL_BRK7_STALL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_NDL_BRK7_STALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK7_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK7_NOSTALL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK7_NOSTALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK7_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK7_NOSTALL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK7_NOSTALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK7_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK7_NOSTALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_NDL_BRK7_NOSTALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK7_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_NDL_BRK7_NOSTALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_NDL_BRK7_NOSTALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK7_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_NDL_BRK7_NOSTALL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_NDL_BRK7_NOSTALL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK7_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_NDL_BRK7_NOSTALL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_NDL_BRK7_NOSTALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK7_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK8_STALL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK8_STALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK8_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK8_STALL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK8_STALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK8_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK8_STALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_NDL_BRK8_STALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK8_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_NDL_BRK8_STALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_NDL_BRK8_STALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK8_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_NDL_BRK8_STALL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_NDL_BRK8_STALL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK8_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_NDL_BRK8_STALL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_NDL_BRK8_STALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK8_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK8_NOSTALL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK8_NOSTALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK8_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK8_NOSTALL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK8_NOSTALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK8_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK8_NOSTALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_NDL_BRK8_NOSTALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK8_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_NDL_BRK8_NOSTALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_NDL_BRK8_NOSTALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK8_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_NDL_BRK8_NOSTALL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_NDL_BRK8_NOSTALL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK8_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_NDL_BRK8_NOSTALL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_NDL_BRK8_NOSTALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK8_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK9_STALL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK9_STALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK9_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK9_STALL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK9_STALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK9_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK9_STALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_NDL_BRK9_STALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK9_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_NDL_BRK9_STALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_NDL_BRK9_STALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK9_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_NDL_BRK9_STALL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_NDL_BRK9_STALL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK9_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_NDL_BRK9_STALL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_NDL_BRK9_STALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK9_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK9_NOSTALL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK9_NOSTALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK9_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK9_NOSTALL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK9_NOSTALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK9_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK9_NOSTALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_NDL_BRK9_NOSTALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK9_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_NDL_BRK9_NOSTALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_NDL_BRK9_NOSTALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK9_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_NDL_BRK9_NOSTALL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_NDL_BRK9_NOSTALL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK9_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_NDL_BRK9_NOSTALL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_NDL_BRK9_NOSTALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK9_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK10_STALL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK10_STALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK10_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK10_STALL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK10_STALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK10_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK10_STALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_NDL_BRK10_STALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK10_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_NDL_BRK10_STALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_NDL_BRK10_STALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK10_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_NDL_BRK10_STALL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_NDL_BRK10_STALL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK10_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_NDL_BRK10_STALL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_NDL_BRK10_STALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK10_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK10_NOSTALL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK10_NOSTALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK10_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK10_NOSTALL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK10_NOSTALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK10_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK10_NOSTALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_NDL_BRK10_NOSTALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK10_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_NDL_BRK10_NOSTALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_NDL_BRK10_NOSTALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK10_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_NDL_BRK10_NOSTALL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_NDL_BRK10_NOSTALL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK10_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_NDL_BRK10_NOSTALL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_NDL_BRK10_NOSTALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK10_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK11_STALL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK11_STALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK11_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK11_STALL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK11_STALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK11_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK11_STALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_NDL_BRK11_STALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK11_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_NDL_BRK11_STALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_NDL_BRK11_STALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK11_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_NDL_BRK11_STALL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_NDL_BRK11_STALL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK11_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_NDL_BRK11_STALL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_NDL_BRK11_STALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK11_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK11_NOSTALL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK11_NOSTALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK11_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK11_NOSTALL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_NDL_BRK11_NOSTALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK11_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_NDL_BRK11_NOSTALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_NDL_BRK11_NOSTALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK11_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_NDL_BRK11_NOSTALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_NDL_BRK11_NOSTALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK11_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_NDL_BRK11_NOSTALL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_NDL_BRK11_NOSTALL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK11_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_NDL_BRK11_NOSTALL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_NDL_BRK11_NOSTALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_NDL_BRK11_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_AME_RSVD_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_AME_RSVD_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_AME_RSVD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_AME_RSVD_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_AME_RSVD_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_AME_RSVD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_AME_RSVD_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_AME_RSVD_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_AME_RSVD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_AME_RSVD_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_AME_RSVD_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_AME_RSVD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_AME_RSVD_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_AME_RSVD_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_AME_RSVD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_AME_RSVD_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_AME_RSVD_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_AME_RSVD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_SCOMSAT00_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_SCOMSAT00_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_SCOMSAT00_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_SCOMSAT00_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_SCOMSAT00_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_SCOMSAT00_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_SCOMSAT00_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_SCOMSAT00_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_SCOMSAT00_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_SCOMSAT00_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_SCOMSAT00_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_SCOMSAT00_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_SCOMSAT00_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_SCOMSAT00_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_SCOMSAT00_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_SCOMSAT00_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_SCOMSAT00_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_SCOMSAT00_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_SCOMSAT01_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_SCOMSAT01_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_SCOMSAT01_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_SCOMSAT01_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_1_SCOMSAT01_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_SCOMSAT01_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_REG_1_SCOMSAT01_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.setBit<FIR_REG_1_SCOMSAT01_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_SCOMSAT01_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_1_SCOMSAT01_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_1_SCOMSAT01_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_SCOMSAT01_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_REG_1_SCOMSAT01_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_1_SCOMSAT01_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_SCOMSAT01_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_FIR_REG_1_SCOMSAT01_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_1_RW, FIR_REG_1_WO_AND, FIR_REG_1_WO_OR));
#endif
    return i_data.getBit<FIR_REG_1_SCOMSAT01_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_REG_1_SCOMSAT01_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_BDF2PE_15_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_BDF2PE_15_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_BDF2PE_15_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_BDF2PE_15_CONFIG;
#endif
    return fapi2::getScom(i_target, MISC_REGS_BDF2PE_15_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_BDF2PE_15_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_15_CONFIG));
#endif
    return fapi2::putScom(i_target, MISC_REGS_BDF2PE_15_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_15_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_15_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_15_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_BDF2PE_15_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_15_CONFIG_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_15_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_15_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_BDF2PE_15_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_15_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_15_CONFIG));
#endif
    return o_data.setBit<MISC_REGS_BDF2PE_15_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_BDF2PE_15_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_BDF2PE_15_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_15_CONFIG));
#endif
    return o_data.clearBit<MISC_REGS_BDF2PE_15_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_BDF2PE_15_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_15_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_15_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_15_CONFIG_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_BDF2PE_15_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_MISC_REGS_BDF2PE_15_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_15_CONFIG));
#endif
    return i_data.getBit<MISC_REGS_BDF2PE_15_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_BDF2PE_15_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_15_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_15_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_15_CONFIG_RESERVED,
           MISC_REGS_BDF2PE_15_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_BDF2PE_15_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_15_CONFIG_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_15_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_15_CONFIG_RESERVED,
           MISC_REGS_BDF2PE_15_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_BDF2PE_15_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_15_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_15_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_15_CONFIG_RESERVED,
           MISC_REGS_BDF2PE_15_CONFIG_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_BDF2PE_15_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_15_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_15_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_15_CONFIG_PE,
           MISC_REGS_BDF2PE_15_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_BDF2PE_15_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_15_CONFIG_PE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_15_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_15_CONFIG_PE,
           MISC_REGS_BDF2PE_15_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_BDF2PE_15_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_15_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_15_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_15_CONFIG_PE,
           MISC_REGS_BDF2PE_15_CONFIG_PE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_BDF2PE_15_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_15_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_15_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_15_CONFIG_BDF,
           MISC_REGS_BDF2PE_15_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_BDF2PE_15_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_15_CONFIG_BDF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_15_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_15_CONFIG_BDF,
           MISC_REGS_BDF2PE_15_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_BDF2PE_15_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_15_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_15_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_15_CONFIG_BDF,
           MISC_REGS_BDF2PE_15_CONFIG_BDF_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_BDF2PE_15_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_BDF2PE_9_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_BDF2PE_9_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_BDF2PE_9_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_BDF2PE_9_CONFIG;
#endif
    return fapi2::getScom(i_target, MISC_REGS_BDF2PE_9_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_BDF2PE_9_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_9_CONFIG));
#endif
    return fapi2::putScom(i_target, MISC_REGS_BDF2PE_9_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_9_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_9_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_9_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_BDF2PE_9_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_9_CONFIG_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_9_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_9_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_BDF2PE_9_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_9_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_9_CONFIG));
#endif
    return o_data.setBit<MISC_REGS_BDF2PE_9_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_BDF2PE_9_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_BDF2PE_9_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_9_CONFIG));
#endif
    return o_data.clearBit<MISC_REGS_BDF2PE_9_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_BDF2PE_9_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_9_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_9_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_9_CONFIG_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_BDF2PE_9_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_MISC_REGS_BDF2PE_9_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_9_CONFIG));
#endif
    return i_data.getBit<MISC_REGS_BDF2PE_9_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_BDF2PE_9_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_9_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_9_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_9_CONFIG_RESERVED,
           MISC_REGS_BDF2PE_9_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_BDF2PE_9_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_9_CONFIG_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_9_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_9_CONFIG_RESERVED,
           MISC_REGS_BDF2PE_9_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_BDF2PE_9_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_9_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_9_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_9_CONFIG_RESERVED,
           MISC_REGS_BDF2PE_9_CONFIG_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_BDF2PE_9_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_9_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_9_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_9_CONFIG_PE,
           MISC_REGS_BDF2PE_9_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_BDF2PE_9_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_9_CONFIG_PE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_9_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_9_CONFIG_PE,
           MISC_REGS_BDF2PE_9_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_BDF2PE_9_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_9_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_9_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_9_CONFIG_PE,
           MISC_REGS_BDF2PE_9_CONFIG_PE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_BDF2PE_9_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_9_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_9_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_9_CONFIG_BDF,
           MISC_REGS_BDF2PE_9_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_BDF2PE_9_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_9_CONFIG_BDF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_9_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_9_CONFIG_BDF,
           MISC_REGS_BDF2PE_9_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_BDF2PE_9_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_9_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_9_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_9_CONFIG_BDF,
           MISC_REGS_BDF2PE_9_CONFIG_BDF_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_BDF2PE_9_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_DA_DATA(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_DA_DATA;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_DA_DATA(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_DA_DATA;
#endif
    return fapi2::getScom(i_target, MISC_REGS_DA_DATA, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_DA_DATA(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_DA_DATA));
#endif
    return fapi2::putScom(i_target, MISC_REGS_DA_DATA, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_ERROR_BRICK_GROUP_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_ERROR_BRICK_GROUP_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_ERROR_BRICK_GROUP_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_ERROR_BRICK_GROUP_CONFIG;
#endif
    return fapi2::getScom(i_target, MISC_REGS_ERROR_BRICK_GROUP_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_ERROR_BRICK_GROUP_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERROR_BRICK_GROUP_CONFIG));
#endif
    return fapi2::putScom(i_target, MISC_REGS_ERROR_BRICK_GROUP_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_ERROR_BRICK_GROUP_CONFIG_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERROR_BRICK_GROUP_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_ERROR_BRICK_GROUP_CONFIG_0,
           MISC_REGS_ERROR_BRICK_GROUP_CONFIG_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_ERROR_BRICK_GROUP_CONFIG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_ERROR_BRICK_GROUP_CONFIG_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERROR_BRICK_GROUP_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_ERROR_BRICK_GROUP_CONFIG_0,
           MISC_REGS_ERROR_BRICK_GROUP_CONFIG_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_ERROR_BRICK_GROUP_CONFIG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_ERROR_BRICK_GROUP_CONFIG_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERROR_BRICK_GROUP_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_ERROR_BRICK_GROUP_CONFIG_0,
           MISC_REGS_ERROR_BRICK_GROUP_CONFIG_0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_ERROR_BRICK_GROUP_CONFIG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_ERROR_BRICK_GROUP_CONFIG_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERROR_BRICK_GROUP_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_ERROR_BRICK_GROUP_CONFIG_1,
           MISC_REGS_ERROR_BRICK_GROUP_CONFIG_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_ERROR_BRICK_GROUP_CONFIG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_ERROR_BRICK_GROUP_CONFIG_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERROR_BRICK_GROUP_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_ERROR_BRICK_GROUP_CONFIG_1,
           MISC_REGS_ERROR_BRICK_GROUP_CONFIG_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_ERROR_BRICK_GROUP_CONFIG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_ERROR_BRICK_GROUP_CONFIG_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERROR_BRICK_GROUP_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_ERROR_BRICK_GROUP_CONFIG_1,
           MISC_REGS_ERROR_BRICK_GROUP_CONFIG_1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_ERROR_BRICK_GROUP_CONFIG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_ERROR_BRICK_GROUP_CONFIG_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERROR_BRICK_GROUP_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_ERROR_BRICK_GROUP_CONFIG_2,
           MISC_REGS_ERROR_BRICK_GROUP_CONFIG_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_ERROR_BRICK_GROUP_CONFIG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_ERROR_BRICK_GROUP_CONFIG_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERROR_BRICK_GROUP_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_ERROR_BRICK_GROUP_CONFIG_2,
           MISC_REGS_ERROR_BRICK_GROUP_CONFIG_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_ERROR_BRICK_GROUP_CONFIG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_ERROR_BRICK_GROUP_CONFIG_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERROR_BRICK_GROUP_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_ERROR_BRICK_GROUP_CONFIG_2,
           MISC_REGS_ERROR_BRICK_GROUP_CONFIG_2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_ERROR_BRICK_GROUP_CONFIG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_ERROR_BRICK_GROUP_CONFIG_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERROR_BRICK_GROUP_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_ERROR_BRICK_GROUP_CONFIG_3,
           MISC_REGS_ERROR_BRICK_GROUP_CONFIG_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_ERROR_BRICK_GROUP_CONFIG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_ERROR_BRICK_GROUP_CONFIG_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERROR_BRICK_GROUP_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_ERROR_BRICK_GROUP_CONFIG_3,
           MISC_REGS_ERROR_BRICK_GROUP_CONFIG_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_ERROR_BRICK_GROUP_CONFIG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_ERROR_BRICK_GROUP_CONFIG_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERROR_BRICK_GROUP_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_ERROR_BRICK_GROUP_CONFIG_3,
           MISC_REGS_ERROR_BRICK_GROUP_CONFIG_3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_ERROR_BRICK_GROUP_CONFIG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_ERROR_BRICK_GROUP_CONFIG_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERROR_BRICK_GROUP_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_ERROR_BRICK_GROUP_CONFIG_4,
           MISC_REGS_ERROR_BRICK_GROUP_CONFIG_4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_ERROR_BRICK_GROUP_CONFIG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_ERROR_BRICK_GROUP_CONFIG_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERROR_BRICK_GROUP_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_ERROR_BRICK_GROUP_CONFIG_4,
           MISC_REGS_ERROR_BRICK_GROUP_CONFIG_4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_ERROR_BRICK_GROUP_CONFIG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_ERROR_BRICK_GROUP_CONFIG_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERROR_BRICK_GROUP_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_ERROR_BRICK_GROUP_CONFIG_4,
           MISC_REGS_ERROR_BRICK_GROUP_CONFIG_4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_ERROR_BRICK_GROUP_CONFIG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_ERR_SCOPE_CTL_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_ERR_SCOPE_CTL_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_ERR_SCOPE_CTL_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_ERR_SCOPE_CTL_CONFIG;
#endif
    return fapi2::getScom(i_target, MISC_REGS_ERR_SCOPE_CTL_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_ERR_SCOPE_CTL_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERR_SCOPE_CTL_CONFIG));
#endif
    return fapi2::putScom(i_target, MISC_REGS_ERR_SCOPE_CTL_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_ERR_SCOPE_CTL_CONFIG_CONFIG_ERR_SCOPE_CTL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERR_SCOPE_CTL_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_ERR_SCOPE_CTL_CONFIG_CONFIG_ERR_SCOPE_CTL,
           MISC_REGS_ERR_SCOPE_CTL_CONFIG_CONFIG_ERR_SCOPE_CTL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_ERR_SCOPE_CTL_CONFIG_CONFIG_ERR_SCOPE_CTL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_ERR_SCOPE_CTL_CONFIG_CONFIG_ERR_SCOPE_CTL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERR_SCOPE_CTL_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_ERR_SCOPE_CTL_CONFIG_CONFIG_ERR_SCOPE_CTL,
           MISC_REGS_ERR_SCOPE_CTL_CONFIG_CONFIG_ERR_SCOPE_CTL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_ERR_SCOPE_CTL_CONFIG_CONFIG_ERR_SCOPE_CTL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_ERR_SCOPE_CTL_CONFIG_CONFIG_ERR_SCOPE_CTL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERR_SCOPE_CTL_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_ERR_SCOPE_CTL_CONFIG_CONFIG_ERR_SCOPE_CTL,
           MISC_REGS_ERR_SCOPE_CTL_CONFIG_CONFIG_ERR_SCOPE_CTL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_ERR_SCOPE_CTL_CONFIG_CONFIG_ERR_SCOPE_CTL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_FENCE_0_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_FENCE_0_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_FENCE_0_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_FENCE_0_CONFIG;
#endif
    return fapi2::getScom(i_target, MISC_REGS_FENCE_0_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_FENCE_0_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_FENCE_0_CONFIG));
#endif
    return fapi2::putScom(i_target, MISC_REGS_FENCE_0_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_FENCE_0_CONFIG_CONFIG_FENCE_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_FENCE_0_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_FENCE_0_CONFIG_CONFIG_FENCE_0,
           MISC_REGS_FENCE_0_CONFIG_CONFIG_FENCE_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_FENCE_0_CONFIG_CONFIG_FENCE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_FENCE_0_CONFIG_CONFIG_FENCE_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_FENCE_0_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_FENCE_0_CONFIG_CONFIG_FENCE_0,
           MISC_REGS_FENCE_0_CONFIG_CONFIG_FENCE_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_FENCE_0_CONFIG_CONFIG_FENCE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_FENCE_0_CONFIG_CONFIG_FENCE_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_FENCE_0_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_FENCE_0_CONFIG_CONFIG_FENCE_0,
           MISC_REGS_FENCE_0_CONFIG_CONFIG_FENCE_0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_FENCE_0_CONFIG_CONFIG_FENCE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_INT_LOG_0_PE15(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_0_PE15;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_INT_LOG_0_PE15(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_0_PE15;
#endif
    return fapi2::getScom(i_target, MISC_REGS_INT_LOG_0_PE15, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_INT_LOG_0_PE15(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE15));
#endif
    return fapi2::putScom(i_target, MISC_REGS_INT_LOG_0_PE15, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE15_VLD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE15));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE15_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_0_PE15_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE15_VLD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE15));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE15_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_0_PE15_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE15_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE15));
#endif
    return o_data.setBit<MISC_REGS_INT_LOG_0_PE15_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_0_PE15_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_INT_LOG_0_PE15_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE15));
#endif
    return o_data.clearBit<MISC_REGS_INT_LOG_0_PE15_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_0_PE15_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_0_PE15_VLD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE15));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_0_PE15_VLD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_0_PE15_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_MISC_REGS_INT_LOG_0_PE15_VLD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE15));
#endif
    return i_data.getBit<MISC_REGS_INT_LOG_0_PE15_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_0_PE15_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE15_LVL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE15));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE15_LVL,
           MISC_REGS_INT_LOG_0_PE15_LVL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_0_PE15_LVL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE15_LVL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE15));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE15_LVL,
           MISC_REGS_INT_LOG_0_PE15_LVL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_0_PE15_LVL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_0_PE15_LVL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE15));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_0_PE15_LVL,
           MISC_REGS_INT_LOG_0_PE15_LVL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_0_PE15_LVL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE15_RSVD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE15));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE15_RSVD0,
           MISC_REGS_INT_LOG_0_PE15_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_0_PE15_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE15_RSVD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE15));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE15_RSVD0,
           MISC_REGS_INT_LOG_0_PE15_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_0_PE15_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_0_PE15_RSVD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE15));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_0_PE15_RSVD0,
           MISC_REGS_INT_LOG_0_PE15_RSVD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_0_PE15_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_INT_LOG_0_PE7(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_0_PE7;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_INT_LOG_0_PE7(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_0_PE7;
#endif
    return fapi2::getScom(i_target, MISC_REGS_INT_LOG_0_PE7, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_INT_LOG_0_PE7(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE7));
#endif
    return fapi2::putScom(i_target, MISC_REGS_INT_LOG_0_PE7, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE7_VLD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE7));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE7_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_0_PE7_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE7_VLD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE7));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE7_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_0_PE7_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE7_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE7));
#endif
    return o_data.setBit<MISC_REGS_INT_LOG_0_PE7_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_0_PE7_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_INT_LOG_0_PE7_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE7));
#endif
    return o_data.clearBit<MISC_REGS_INT_LOG_0_PE7_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_0_PE7_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_0_PE7_VLD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE7));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_0_PE7_VLD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_0_PE7_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_MISC_REGS_INT_LOG_0_PE7_VLD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE7));
#endif
    return i_data.getBit<MISC_REGS_INT_LOG_0_PE7_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_0_PE7_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE7_LVL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE7));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE7_LVL,
           MISC_REGS_INT_LOG_0_PE7_LVL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_0_PE7_LVL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE7_LVL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE7));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE7_LVL,
           MISC_REGS_INT_LOG_0_PE7_LVL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_0_PE7_LVL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_0_PE7_LVL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE7));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_0_PE7_LVL,
           MISC_REGS_INT_LOG_0_PE7_LVL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_0_PE7_LVL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE7_RSVD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE7));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE7_RSVD0,
           MISC_REGS_INT_LOG_0_PE7_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_0_PE7_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE7_RSVD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE7));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE7_RSVD0,
           MISC_REGS_INT_LOG_0_PE7_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_0_PE7_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_0_PE7_RSVD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE7));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_0_PE7_RSVD0,
           MISC_REGS_INT_LOG_0_PE7_RSVD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_0_PE7_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_INT_LOG_1_PE13(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_1_PE13;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_INT_LOG_1_PE13(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_1_PE13;
#endif
    return fapi2::getScom(i_target, MISC_REGS_INT_LOG_1_PE13, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_INT_LOG_1_PE13(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE13));
#endif
    return fapi2::putScom(i_target, MISC_REGS_INT_LOG_1_PE13, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE13_VLD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE13));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE13_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_1_PE13_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE13_VLD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE13));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE13_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_1_PE13_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE13_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE13));
#endif
    return o_data.setBit<MISC_REGS_INT_LOG_1_PE13_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_1_PE13_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_INT_LOG_1_PE13_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE13));
#endif
    return o_data.clearBit<MISC_REGS_INT_LOG_1_PE13_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_1_PE13_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE13_VLD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE13));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE13_VLD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_1_PE13_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_MISC_REGS_INT_LOG_1_PE13_VLD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE13));
#endif
    return i_data.getBit<MISC_REGS_INT_LOG_1_PE13_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_1_PE13_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE13_DETAIL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE13));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE13_DETAIL,
           MISC_REGS_INT_LOG_1_PE13_DETAIL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_1_PE13_DETAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE13_DETAIL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE13));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE13_DETAIL,
           MISC_REGS_INT_LOG_1_PE13_DETAIL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_1_PE13_DETAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE13_DETAIL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE13));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE13_DETAIL,
           MISC_REGS_INT_LOG_1_PE13_DETAIL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_1_PE13_DETAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE13_CQ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE13));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE13_CQ,
           MISC_REGS_INT_LOG_1_PE13_CQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_1_PE13_CQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE13_CQ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE13));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE13_CQ,
           MISC_REGS_INT_LOG_1_PE13_CQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_1_PE13_CQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE13_CQ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE13));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE13_CQ,
           MISC_REGS_INT_LOG_1_PE13_CQ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_1_PE13_CQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE13_RSVD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE13));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE13_RSVD0,
           MISC_REGS_INT_LOG_1_PE13_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_1_PE13_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE13_RSVD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE13));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE13_RSVD0,
           MISC_REGS_INT_LOG_1_PE13_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_1_PE13_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE13_RSVD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE13));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE13_RSVD0,
           MISC_REGS_INT_LOG_1_PE13_RSVD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_1_PE13_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_INT_LOG_1_PE7(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_1_PE7;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_INT_LOG_1_PE7(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_1_PE7;
#endif
    return fapi2::getScom(i_target, MISC_REGS_INT_LOG_1_PE7, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_INT_LOG_1_PE7(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE7));
#endif
    return fapi2::putScom(i_target, MISC_REGS_INT_LOG_1_PE7, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE7_VLD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE7));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE7_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_1_PE7_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE7_VLD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE7));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE7_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_1_PE7_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE7_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE7));
#endif
    return o_data.setBit<MISC_REGS_INT_LOG_1_PE7_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_1_PE7_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_INT_LOG_1_PE7_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE7));
#endif
    return o_data.clearBit<MISC_REGS_INT_LOG_1_PE7_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_1_PE7_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE7_VLD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE7));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE7_VLD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_1_PE7_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_MISC_REGS_INT_LOG_1_PE7_VLD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE7));
#endif
    return i_data.getBit<MISC_REGS_INT_LOG_1_PE7_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_1_PE7_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE7_DETAIL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE7));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE7_DETAIL,
           MISC_REGS_INT_LOG_1_PE7_DETAIL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_1_PE7_DETAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE7_DETAIL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE7));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE7_DETAIL,
           MISC_REGS_INT_LOG_1_PE7_DETAIL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_1_PE7_DETAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE7_DETAIL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE7));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE7_DETAIL,
           MISC_REGS_INT_LOG_1_PE7_DETAIL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_1_PE7_DETAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE7_CQ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE7));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE7_CQ,
           MISC_REGS_INT_LOG_1_PE7_CQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_1_PE7_CQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE7_CQ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE7));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE7_CQ,
           MISC_REGS_INT_LOG_1_PE7_CQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_1_PE7_CQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE7_CQ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE7));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE7_CQ,
           MISC_REGS_INT_LOG_1_PE7_CQ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_1_PE7_CQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE7_RSVD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE7));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE7_RSVD0,
           MISC_REGS_INT_LOG_1_PE7_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_1_PE7_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE7_RSVD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE7));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE7_RSVD0,
           MISC_REGS_INT_LOG_1_PE7_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_1_PE7_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE7_RSVD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE7));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE7_RSVD0,
           MISC_REGS_INT_LOG_1_PE7_RSVD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_INT_LOG_1_PE7_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_PAU_VERSION(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PAU_VERSION;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_PAU_VERSION(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PAU_VERSION;
#endif
    return fapi2::getScom(i_target, MISC_REGS_PAU_VERSION, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_PAU_VERSION(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_PAU_VERSION));
#endif
    return fapi2::putScom(i_target, MISC_REGS_PAU_VERSION, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PAU_VERSION_RSVD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PAU_VERSION));
#endif
    return o_data.insertFromRight<MISC_REGS_PAU_VERSION_RSVD0,
           MISC_REGS_PAU_VERSION_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_PAU_VERSION_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PAU_VERSION_RSVD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PAU_VERSION));
#endif
    return o_data.insertFromRight<MISC_REGS_PAU_VERSION_RSVD0,
           MISC_REGS_PAU_VERSION_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_PAU_VERSION_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_PAU_VERSION_RSVD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PAU_VERSION));
#endif
    return i_data.extractToRight<MISC_REGS_PAU_VERSION_RSVD0,
           MISC_REGS_PAU_VERSION_RSVD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_PAU_VERSION_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PAU_VERSION_MAJOR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PAU_VERSION));
#endif
    return o_data.insertFromRight<MISC_REGS_PAU_VERSION_MAJOR,
           MISC_REGS_PAU_VERSION_MAJOR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_PAU_VERSION_MAJOR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PAU_VERSION_MAJOR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PAU_VERSION));
#endif
    return o_data.insertFromRight<MISC_REGS_PAU_VERSION_MAJOR,
           MISC_REGS_PAU_VERSION_MAJOR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_PAU_VERSION_MAJOR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_PAU_VERSION_MAJOR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PAU_VERSION));
#endif
    return i_data.extractToRight<MISC_REGS_PAU_VERSION_MAJOR,
           MISC_REGS_PAU_VERSION_MAJOR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_PAU_VERSION_MAJOR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PAU_VERSION_P10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PAU_VERSION));
#endif
    return o_data.insertFromRight<MISC_REGS_PAU_VERSION_P10,
           MISC_REGS_PAU_VERSION_P10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_PAU_VERSION_P10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PAU_VERSION_P10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PAU_VERSION));
#endif
    return o_data.insertFromRight<MISC_REGS_PAU_VERSION_P10,
           MISC_REGS_PAU_VERSION_P10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_PAU_VERSION_P10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_PAU_VERSION_P10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PAU_VERSION));
#endif
    return i_data.extractToRight<MISC_REGS_PAU_VERSION_P10,
           MISC_REGS_PAU_VERSION_P10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_PAU_VERSION_P10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PAU_VERSION_RSVD1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PAU_VERSION));
#endif
    return o_data.insertFromRight<MISC_REGS_PAU_VERSION_RSVD1,
           MISC_REGS_PAU_VERSION_RSVD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_PAU_VERSION_RSVD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PAU_VERSION_RSVD1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PAU_VERSION));
#endif
    return o_data.insertFromRight<MISC_REGS_PAU_VERSION_RSVD1,
           MISC_REGS_PAU_VERSION_RSVD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_PAU_VERSION_RSVD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_PAU_VERSION_RSVD1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PAU_VERSION));
#endif
    return i_data.extractToRight<MISC_REGS_PAU_VERSION_RSVD1,
           MISC_REGS_PAU_VERSION_RSVD1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_PAU_VERSION_RSVD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PAU_VERSION_MINOR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PAU_VERSION));
#endif
    return o_data.insertFromRight<MISC_REGS_PAU_VERSION_MINOR,
           MISC_REGS_PAU_VERSION_MINOR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_PAU_VERSION_MINOR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PAU_VERSION_MINOR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PAU_VERSION));
#endif
    return o_data.insertFromRight<MISC_REGS_PAU_VERSION_MINOR,
           MISC_REGS_PAU_VERSION_MINOR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_PAU_VERSION_MINOR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_PAU_VERSION_MINOR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PAU_VERSION));
#endif
    return i_data.extractToRight<MISC_REGS_PAU_VERSION_MINOR,
           MISC_REGS_PAU_VERSION_MINOR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_PAU_VERSION_MINOR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_PESTB_ADDR_PE12(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_ADDR_PE12;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_PESTB_ADDR_PE12(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_ADDR_PE12;
#endif
    return fapi2::getScom(i_target, MISC_REGS_PESTB_ADDR_PE12, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_PESTB_ADDR_PE12(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE12));
#endif
    return fapi2::putScom(i_target, MISC_REGS_PESTB_ADDR_PE12, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_ADDR_PE12_DMA_STOPPED_STATE_ADDR_PE12(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE12));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_ADDR_PE12_DMA_STOPPED_STATE_ADDR_PE12,
           MISC_REGS_PESTB_ADDR_PE12_DMA_STOPPED_STATE_ADDR_PE12_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_PESTB_ADDR_PE12_DMA_STOPPED_STATE_ADDR_PE12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_ADDR_PE12_DMA_STOPPED_STATE_ADDR_PE12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE12));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_ADDR_PE12_DMA_STOPPED_STATE_ADDR_PE12,
           MISC_REGS_PESTB_ADDR_PE12_DMA_STOPPED_STATE_ADDR_PE12_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_PESTB_ADDR_PE12_DMA_STOPPED_STATE_ADDR_PE12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_PESTB_ADDR_PE12_DMA_STOPPED_STATE_ADDR_PE12(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE12));
#endif
    return i_data.extractToRight<MISC_REGS_PESTB_ADDR_PE12_DMA_STOPPED_STATE_ADDR_PE12,
           MISC_REGS_PESTB_ADDR_PE12_DMA_STOPPED_STATE_ADDR_PE12_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_PESTB_ADDR_PE12_DMA_STOPPED_STATE_ADDR_PE12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_PESTB_ADDR_PE7(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_ADDR_PE7;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_PESTB_ADDR_PE7(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_ADDR_PE7;
#endif
    return fapi2::getScom(i_target, MISC_REGS_PESTB_ADDR_PE7, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_PESTB_ADDR_PE7(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE7));
#endif
    return fapi2::putScom(i_target, MISC_REGS_PESTB_ADDR_PE7, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_ADDR_PE7_DMA_STOPPED_STATE_ADDR_PE7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE7));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_ADDR_PE7_DMA_STOPPED_STATE_ADDR_PE7,
           MISC_REGS_PESTB_ADDR_PE7_DMA_STOPPED_STATE_ADDR_PE7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_PESTB_ADDR_PE7_DMA_STOPPED_STATE_ADDR_PE7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_ADDR_PE7_DMA_STOPPED_STATE_ADDR_PE7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE7));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_ADDR_PE7_DMA_STOPPED_STATE_ADDR_PE7,
           MISC_REGS_PESTB_ADDR_PE7_DMA_STOPPED_STATE_ADDR_PE7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_PESTB_ADDR_PE7_DMA_STOPPED_STATE_ADDR_PE7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_PESTB_ADDR_PE7_DMA_STOPPED_STATE_ADDR_PE7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE7));
#endif
    return i_data.extractToRight<MISC_REGS_PESTB_ADDR_PE7_DMA_STOPPED_STATE_ADDR_PE7,
           MISC_REGS_PESTB_ADDR_PE7_DMA_STOPPED_STATE_ADDR_PE7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_PESTB_ADDR_PE7_DMA_STOPPED_STATE_ADDR_PE7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_PESTB_DATA_PE12(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_DATA_PE12;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_PESTB_DATA_PE12(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_DATA_PE12;
#endif
    return fapi2::getScom(i_target, MISC_REGS_PESTB_DATA_PE12, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_PESTB_DATA_PE12(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE12));
#endif
    return fapi2::putScom(i_target, MISC_REGS_PESTB_DATA_PE12, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_DATA_PE12_DMA_STOPPED_STATE_PE12(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE12));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_DATA_PE12_DMA_STOPPED_STATE_PE12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_PESTB_DATA_PE12_DMA_STOPPED_STATE_PE12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_DATA_PE12_DMA_STOPPED_STATE_PE12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE12));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_DATA_PE12_DMA_STOPPED_STATE_PE12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_PESTB_DATA_PE12_DMA_STOPPED_STATE_PE12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_DATA_PE12_DMA_STOPPED_STATE_PE12(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE12));
#endif
    return o_data.setBit<MISC_REGS_PESTB_DATA_PE12_DMA_STOPPED_STATE_PE12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_PESTB_DATA_PE12_DMA_STOPPED_STATE_PE12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_PESTB_DATA_PE12_DMA_STOPPED_STATE_PE12(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE12));
#endif
    return o_data.clearBit<MISC_REGS_PESTB_DATA_PE12_DMA_STOPPED_STATE_PE12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_PESTB_DATA_PE12_DMA_STOPPED_STATE_PE12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_PESTB_DATA_PE12_DMA_STOPPED_STATE_PE12(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE12));
#endif
    return i_data.extractToRight<MISC_REGS_PESTB_DATA_PE12_DMA_STOPPED_STATE_PE12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_PESTB_DATA_PE12_DMA_STOPPED_STATE_PE12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_MISC_REGS_PESTB_DATA_PE12_DMA_STOPPED_STATE_PE12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE12));
#endif
    return i_data.getBit<MISC_REGS_PESTB_DATA_PE12_DMA_STOPPED_STATE_PE12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_PESTB_DATA_PE12_DMA_STOPPED_STATE_PE12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_PESTB_DATA_PE4(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_DATA_PE4;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_PESTB_DATA_PE4(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_DATA_PE4;
#endif
    return fapi2::getScom(i_target, MISC_REGS_PESTB_DATA_PE4, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_PESTB_DATA_PE4(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE4));
#endif
    return fapi2::putScom(i_target, MISC_REGS_PESTB_DATA_PE4, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_DATA_PE4_DMA_STOPPED_STATE_PE4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE4));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_DATA_PE4_DMA_STOPPED_STATE_PE4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_PESTB_DATA_PE4_DMA_STOPPED_STATE_PE4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_DATA_PE4_DMA_STOPPED_STATE_PE4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE4));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_DATA_PE4_DMA_STOPPED_STATE_PE4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_PESTB_DATA_PE4_DMA_STOPPED_STATE_PE4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_DATA_PE4_DMA_STOPPED_STATE_PE4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE4));
#endif
    return o_data.setBit<MISC_REGS_PESTB_DATA_PE4_DMA_STOPPED_STATE_PE4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_PESTB_DATA_PE4_DMA_STOPPED_STATE_PE4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_PESTB_DATA_PE4_DMA_STOPPED_STATE_PE4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE4));
#endif
    return o_data.clearBit<MISC_REGS_PESTB_DATA_PE4_DMA_STOPPED_STATE_PE4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_PESTB_DATA_PE4_DMA_STOPPED_STATE_PE4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_PESTB_DATA_PE4_DMA_STOPPED_STATE_PE4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE4));
#endif
    return i_data.extractToRight<MISC_REGS_PESTB_DATA_PE4_DMA_STOPPED_STATE_PE4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_PESTB_DATA_PE4_DMA_STOPPED_STATE_PE4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_MISC_REGS_PESTB_DATA_PE4_DMA_STOPPED_STATE_PE4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE4));
#endif
    return i_data.getBit<MISC_REGS_PESTB_DATA_PE4_DMA_STOPPED_STATE_PE4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_PESTB_DATA_PE4_DMA_STOPPED_STATE_PE4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NTL1_REGS_CREQ_DA_PTR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NTL1_REGS_CREQ_DA_PTR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NTL1_REGS_CREQ_DA_PTR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NTL1_REGS_CREQ_DA_PTR;
#endif
    return fapi2::getScom(i_target, NTL1_REGS_CREQ_DA_PTR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NTL1_REGS_CREQ_DA_PTR(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CREQ_DA_PTR));
#endif
    return fapi2::putScom(i_target, NTL1_REGS_CREQ_DA_PTR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CREQ_DA_PTR_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CREQ_DA_PTR));
#endif
    return o_data.insertFromRight<NTL1_REGS_CREQ_DA_PTR_RESERVED1,
           NTL1_REGS_CREQ_DA_PTR_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CREQ_DA_PTR_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CREQ_DA_PTR_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CREQ_DA_PTR));
#endif
    return o_data.insertFromRight<NTL1_REGS_CREQ_DA_PTR_RESERVED1,
           NTL1_REGS_CREQ_DA_PTR_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CREQ_DA_PTR_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CREQ_DA_PTR_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CREQ_DA_PTR));
#endif
    return i_data.extractToRight<NTL1_REGS_CREQ_DA_PTR_RESERVED1,
           NTL1_REGS_CREQ_DA_PTR_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CREQ_DA_PTR_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CREQ_DA_PTR_START(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CREQ_DA_PTR));
#endif
    return o_data.insertFromRight<NTL1_REGS_CREQ_DA_PTR_START,
           NTL1_REGS_CREQ_DA_PTR_START_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CREQ_DA_PTR_START chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CREQ_DA_PTR_START(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CREQ_DA_PTR));
#endif
    return o_data.insertFromRight<NTL1_REGS_CREQ_DA_PTR_START,
           NTL1_REGS_CREQ_DA_PTR_START_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CREQ_DA_PTR_START chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CREQ_DA_PTR_START(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CREQ_DA_PTR));
#endif
    return i_data.extractToRight<NTL1_REGS_CREQ_DA_PTR_START,
           NTL1_REGS_CREQ_DA_PTR_START_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CREQ_DA_PTR_START chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CREQ_DA_PTR_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CREQ_DA_PTR));
#endif
    return o_data.insertFromRight<NTL1_REGS_CREQ_DA_PTR_RESERVED2,
           NTL1_REGS_CREQ_DA_PTR_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CREQ_DA_PTR_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CREQ_DA_PTR_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CREQ_DA_PTR));
#endif
    return o_data.insertFromRight<NTL1_REGS_CREQ_DA_PTR_RESERVED2,
           NTL1_REGS_CREQ_DA_PTR_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CREQ_DA_PTR_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CREQ_DA_PTR_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CREQ_DA_PTR));
#endif
    return i_data.extractToRight<NTL1_REGS_CREQ_DA_PTR_RESERVED2,
           NTL1_REGS_CREQ_DA_PTR_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CREQ_DA_PTR_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CREQ_DA_PTR_END(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CREQ_DA_PTR));
#endif
    return o_data.insertFromRight<NTL1_REGS_CREQ_DA_PTR_END,
           NTL1_REGS_CREQ_DA_PTR_END_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CREQ_DA_PTR_END chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CREQ_DA_PTR_END(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CREQ_DA_PTR));
#endif
    return o_data.insertFromRight<NTL1_REGS_CREQ_DA_PTR_END,
           NTL1_REGS_CREQ_DA_PTR_END_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CREQ_DA_PTR_END chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CREQ_DA_PTR_END(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CREQ_DA_PTR));
#endif
    return i_data.extractToRight<NTL1_REGS_CREQ_DA_PTR_END,
           NTL1_REGS_CREQ_DA_PTR_END_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CREQ_DA_PTR_END chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL0_MISC_TL_DCP_CREDIT_STATUS(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_TL_DCP_CREDIT_STATUS;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL0_MISC_TL_DCP_CREDIT_STATUS(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_TL_DCP_CREDIT_STATUS;
#endif
    return fapi2::getScom(i_target, OTL0_MISC_TL_DCP_CREDIT_STATUS, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL0_MISC_TL_DCP_CREDIT_STATUS(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TL_DCP_CREDIT_STATUS));
#endif
    return fapi2::putScom(i_target, OTL0_MISC_TL_DCP_CREDIT_STATUS, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_TL_DCP_CREDIT_STATUS_0_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TL_DCP_CREDIT_STATUS));
#endif
    return o_data.insertFromRight<OTL0_MISC_TL_DCP_CREDIT_STATUS_0_COUNT,
           OTL0_MISC_TL_DCP_CREDIT_STATUS_0_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL0_MISC_TL_DCP_CREDIT_STATUS_0_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_TL_DCP_CREDIT_STATUS_0_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TL_DCP_CREDIT_STATUS));
#endif
    return o_data.insertFromRight<OTL0_MISC_TL_DCP_CREDIT_STATUS_0_COUNT,
           OTL0_MISC_TL_DCP_CREDIT_STATUS_0_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL0_MISC_TL_DCP_CREDIT_STATUS_0_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_TL_DCP_CREDIT_STATUS_0_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TL_DCP_CREDIT_STATUS));
#endif
    return i_data.extractToRight<OTL0_MISC_TL_DCP_CREDIT_STATUS_0_COUNT,
           OTL0_MISC_TL_DCP_CREDIT_STATUS_0_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL0_MISC_TL_DCP_CREDIT_STATUS_0_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_TL_DCP_CREDIT_STATUS_1_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TL_DCP_CREDIT_STATUS));
#endif
    return o_data.insertFromRight<OTL0_MISC_TL_DCP_CREDIT_STATUS_1_COUNT,
           OTL0_MISC_TL_DCP_CREDIT_STATUS_1_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL0_MISC_TL_DCP_CREDIT_STATUS_1_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_TL_DCP_CREDIT_STATUS_1_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TL_DCP_CREDIT_STATUS));
#endif
    return o_data.insertFromRight<OTL0_MISC_TL_DCP_CREDIT_STATUS_1_COUNT,
           OTL0_MISC_TL_DCP_CREDIT_STATUS_1_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL0_MISC_TL_DCP_CREDIT_STATUS_1_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_TL_DCP_CREDIT_STATUS_1_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TL_DCP_CREDIT_STATUS));
#endif
    return i_data.extractToRight<OTL0_MISC_TL_DCP_CREDIT_STATUS_1_COUNT,
           OTL0_MISC_TL_DCP_CREDIT_STATUS_1_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL0_MISC_TL_DCP_CREDIT_STATUS_1_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_XSL_MAIN_GPU0_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_GPU0_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_XSL_MAIN_GPU0_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_GPU0_BAR;
#endif
    return fapi2::getScom(i_target, XSL_MAIN_GPU0_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_XSL_MAIN_GPU0_BAR(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return fapi2::putScom(i_target, XSL_MAIN_GPU0_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU0_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU0_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU0_BAR_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU0_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU0_BAR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.setBit<XSL_MAIN_GPU0_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_GPU0_BAR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.clearBit<XSL_MAIN_GPU0_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_GPU0_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return i_data.extractToRight<XSL_MAIN_GPU0_BAR_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_XSL_MAIN_GPU0_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return i_data.getBit<XSL_MAIN_GPU0_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU0_BAR_ADDR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU0_BAR_ADDR_MASK,
           XSL_MAIN_GPU0_BAR_ADDR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU0_BAR_ADDR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU0_BAR_ADDR_MASK,
           XSL_MAIN_GPU0_BAR_ADDR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_GPU0_BAR_ADDR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return i_data.extractToRight<XSL_MAIN_GPU0_BAR_ADDR_MASK,
           XSL_MAIN_GPU0_BAR_ADDR_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU0_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU0_BAR_SL_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU0_BAR_SL_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU0_BAR_SL_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU0_BAR_SL_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.setBit<XSL_MAIN_GPU0_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_GPU0_BAR_SL_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.clearBit<XSL_MAIN_GPU0_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_GPU0_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return i_data.extractToRight<XSL_MAIN_GPU0_BAR_SL_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_XSL_MAIN_GPU0_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return i_data.getBit<XSL_MAIN_GPU0_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU0_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU0_BAR_4T_LIMIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU0_BAR_4T_LIMIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU0_BAR_4T_LIMIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU0_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.setBit<XSL_MAIN_GPU0_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_GPU0_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.clearBit<XSL_MAIN_GPU0_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_GPU0_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return i_data.extractToRight<XSL_MAIN_GPU0_BAR_4T_LIMIT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_XSL_MAIN_GPU0_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return i_data.getBit<XSL_MAIN_GPU0_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU0_BAR_4T_SELECT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU0_BAR_4T_SELECT,
           XSL_MAIN_GPU0_BAR_4T_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU0_BAR_4T_SELECT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU0_BAR_4T_SELECT,
           XSL_MAIN_GPU0_BAR_4T_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_GPU0_BAR_4T_SELECT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return i_data.extractToRight<XSL_MAIN_GPU0_BAR_4T_SELECT,
           XSL_MAIN_GPU0_BAR_4T_SELECT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU0_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU0_BAR_MODE,
           XSL_MAIN_GPU0_BAR_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU0_BAR_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU0_BAR_MODE,
           XSL_MAIN_GPU0_BAR_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_GPU0_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return i_data.extractToRight<XSL_MAIN_GPU0_BAR_MODE,
           XSL_MAIN_GPU0_BAR_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU0_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU0_BAR_GRANULE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU0_BAR_GRANULE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU0_BAR_GRANULE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU0_BAR_GRANULE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.setBit<XSL_MAIN_GPU0_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_GPU0_BAR_GRANULE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.clearBit<XSL_MAIN_GPU0_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_GPU0_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return i_data.extractToRight<XSL_MAIN_GPU0_BAR_GRANULE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_XSL_MAIN_GPU0_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return i_data.getBit<XSL_MAIN_GPU0_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU0_BAR_POISON(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU0_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU0_BAR_POISON(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU0_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU0_BAR_POISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.setBit<XSL_MAIN_GPU0_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_GPU0_BAR_POISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.clearBit<XSL_MAIN_GPU0_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_GPU0_BAR_POISON(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return i_data.extractToRight<XSL_MAIN_GPU0_BAR_POISON,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_XSL_MAIN_GPU0_BAR_POISON(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return i_data.getBit<XSL_MAIN_GPU0_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU0_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU0_BAR_M2MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU0_BAR_M2MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU0_BAR_M2MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU0_BAR_M2MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.setBit<XSL_MAIN_GPU0_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_GPU0_BAR_M2MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.clearBit<XSL_MAIN_GPU0_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_GPU0_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return i_data.extractToRight<XSL_MAIN_GPU0_BAR_M2MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_XSL_MAIN_GPU0_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return i_data.getBit<XSL_MAIN_GPU0_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU0_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU0_BAR_PA_IGNORE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU0_BAR_PA_IGNORE_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU0_BAR_PA_IGNORE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU0_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.setBit<XSL_MAIN_GPU0_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_GPU0_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.clearBit<XSL_MAIN_GPU0_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_GPU0_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return i_data.extractToRight<XSL_MAIN_GPU0_BAR_PA_IGNORE_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_XSL_MAIN_GPU0_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return i_data.getBit<XSL_MAIN_GPU0_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU0_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU0_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU0_BAR_SECURE_A12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU0_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU0_BAR_SECURE_A12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.setBit<XSL_MAIN_GPU0_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_GPU0_BAR_SECURE_A12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.clearBit<XSL_MAIN_GPU0_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_GPU0_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return i_data.extractToRight<XSL_MAIN_GPU0_BAR_SECURE_A12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_XSL_MAIN_GPU0_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return i_data.getBit<XSL_MAIN_GPU0_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU0_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU0_BAR_CHIP_EQ_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU0_BAR_CHIP_EQ_GROUP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU0_BAR_CHIP_EQ_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU0_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.setBit<XSL_MAIN_GPU0_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_GPU0_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.clearBit<XSL_MAIN_GPU0_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_GPU0_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return i_data.extractToRight<XSL_MAIN_GPU0_BAR_CHIP_EQ_GROUP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_XSL_MAIN_GPU0_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return i_data.getBit<XSL_MAIN_GPU0_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU0_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU0_BAR_EXTENDED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU0_BAR_EXTENDED_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU0_BAR_EXTENDED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU0_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.setBit<XSL_MAIN_GPU0_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_GPU0_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.clearBit<XSL_MAIN_GPU0_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_GPU0_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return i_data.extractToRight<XSL_MAIN_GPU0_BAR_EXTENDED_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_XSL_MAIN_GPU0_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return i_data.getBit<XSL_MAIN_GPU0_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU0_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU0_BAR_RESERVED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU0_BAR_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU0_BAR_RESERVED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU0_BAR_RESERVED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.setBit<XSL_MAIN_GPU0_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_GPU0_BAR_RESERVED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return o_data.clearBit<XSL_MAIN_GPU0_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_GPU0_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return i_data.extractToRight<XSL_MAIN_GPU0_BAR_RESERVED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_XSL_MAIN_GPU0_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU0_BAR));
#endif
    return i_data.getBit<XSL_MAIN_GPU0_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU0_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_XSL_MAIN_GPU1_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_GPU1_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_XSL_MAIN_GPU1_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_GPU1_BAR;
#endif
    return fapi2::getScom(i_target, XSL_MAIN_GPU1_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_XSL_MAIN_GPU1_BAR(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return fapi2::putScom(i_target, XSL_MAIN_GPU1_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU1_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU1_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU1_BAR_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU1_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU1_BAR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.setBit<XSL_MAIN_GPU1_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_GPU1_BAR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.clearBit<XSL_MAIN_GPU1_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_GPU1_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return i_data.extractToRight<XSL_MAIN_GPU1_BAR_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_XSL_MAIN_GPU1_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return i_data.getBit<XSL_MAIN_GPU1_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU1_BAR_ADDR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU1_BAR_ADDR_MASK,
           XSL_MAIN_GPU1_BAR_ADDR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU1_BAR_ADDR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU1_BAR_ADDR_MASK,
           XSL_MAIN_GPU1_BAR_ADDR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_GPU1_BAR_ADDR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return i_data.extractToRight<XSL_MAIN_GPU1_BAR_ADDR_MASK,
           XSL_MAIN_GPU1_BAR_ADDR_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU1_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU1_BAR_SL_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU1_BAR_SL_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU1_BAR_SL_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU1_BAR_SL_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.setBit<XSL_MAIN_GPU1_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_GPU1_BAR_SL_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.clearBit<XSL_MAIN_GPU1_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_GPU1_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return i_data.extractToRight<XSL_MAIN_GPU1_BAR_SL_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_XSL_MAIN_GPU1_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return i_data.getBit<XSL_MAIN_GPU1_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU1_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU1_BAR_4T_LIMIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU1_BAR_4T_LIMIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU1_BAR_4T_LIMIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU1_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.setBit<XSL_MAIN_GPU1_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_GPU1_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.clearBit<XSL_MAIN_GPU1_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_GPU1_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return i_data.extractToRight<XSL_MAIN_GPU1_BAR_4T_LIMIT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_XSL_MAIN_GPU1_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return i_data.getBit<XSL_MAIN_GPU1_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU1_BAR_4T_SELECT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU1_BAR_4T_SELECT,
           XSL_MAIN_GPU1_BAR_4T_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU1_BAR_4T_SELECT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU1_BAR_4T_SELECT,
           XSL_MAIN_GPU1_BAR_4T_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_GPU1_BAR_4T_SELECT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return i_data.extractToRight<XSL_MAIN_GPU1_BAR_4T_SELECT,
           XSL_MAIN_GPU1_BAR_4T_SELECT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU1_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU1_BAR_MODE,
           XSL_MAIN_GPU1_BAR_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU1_BAR_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU1_BAR_MODE,
           XSL_MAIN_GPU1_BAR_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_GPU1_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return i_data.extractToRight<XSL_MAIN_GPU1_BAR_MODE,
           XSL_MAIN_GPU1_BAR_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU1_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU1_BAR_GRANULE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU1_BAR_GRANULE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU1_BAR_GRANULE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU1_BAR_GRANULE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.setBit<XSL_MAIN_GPU1_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_GPU1_BAR_GRANULE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.clearBit<XSL_MAIN_GPU1_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_GPU1_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return i_data.extractToRight<XSL_MAIN_GPU1_BAR_GRANULE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_XSL_MAIN_GPU1_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return i_data.getBit<XSL_MAIN_GPU1_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU1_BAR_POISON(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU1_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU1_BAR_POISON(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU1_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU1_BAR_POISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.setBit<XSL_MAIN_GPU1_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_GPU1_BAR_POISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.clearBit<XSL_MAIN_GPU1_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_GPU1_BAR_POISON(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return i_data.extractToRight<XSL_MAIN_GPU1_BAR_POISON,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_XSL_MAIN_GPU1_BAR_POISON(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return i_data.getBit<XSL_MAIN_GPU1_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU1_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU1_BAR_M2MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU1_BAR_M2MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU1_BAR_M2MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU1_BAR_M2MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.setBit<XSL_MAIN_GPU1_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_GPU1_BAR_M2MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.clearBit<XSL_MAIN_GPU1_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_GPU1_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return i_data.extractToRight<XSL_MAIN_GPU1_BAR_M2MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_XSL_MAIN_GPU1_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return i_data.getBit<XSL_MAIN_GPU1_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU1_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU1_BAR_PA_IGNORE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU1_BAR_PA_IGNORE_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU1_BAR_PA_IGNORE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU1_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.setBit<XSL_MAIN_GPU1_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_GPU1_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.clearBit<XSL_MAIN_GPU1_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_GPU1_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return i_data.extractToRight<XSL_MAIN_GPU1_BAR_PA_IGNORE_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_XSL_MAIN_GPU1_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return i_data.getBit<XSL_MAIN_GPU1_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU1_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU1_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU1_BAR_SECURE_A12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU1_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU1_BAR_SECURE_A12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.setBit<XSL_MAIN_GPU1_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_GPU1_BAR_SECURE_A12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.clearBit<XSL_MAIN_GPU1_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_GPU1_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return i_data.extractToRight<XSL_MAIN_GPU1_BAR_SECURE_A12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_XSL_MAIN_GPU1_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return i_data.getBit<XSL_MAIN_GPU1_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU1_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU1_BAR_CHIP_EQ_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU1_BAR_CHIP_EQ_GROUP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU1_BAR_CHIP_EQ_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU1_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.setBit<XSL_MAIN_GPU1_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_GPU1_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.clearBit<XSL_MAIN_GPU1_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_GPU1_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return i_data.extractToRight<XSL_MAIN_GPU1_BAR_CHIP_EQ_GROUP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_XSL_MAIN_GPU1_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return i_data.getBit<XSL_MAIN_GPU1_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU1_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU1_BAR_EXTENDED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU1_BAR_EXTENDED_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU1_BAR_EXTENDED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU1_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.setBit<XSL_MAIN_GPU1_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_GPU1_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.clearBit<XSL_MAIN_GPU1_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_GPU1_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return i_data.extractToRight<XSL_MAIN_GPU1_BAR_EXTENDED_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_XSL_MAIN_GPU1_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return i_data.getBit<XSL_MAIN_GPU1_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU1_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU1_BAR_RESERVED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU1_BAR_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.insertFromRight<XSL_MAIN_GPU1_BAR_RESERVED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_GPU1_BAR_RESERVED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.setBit<XSL_MAIN_GPU1_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_GPU1_BAR_RESERVED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return o_data.clearBit<XSL_MAIN_GPU1_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_GPU1_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return i_data.extractToRight<XSL_MAIN_GPU1_BAR_RESERVED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_XSL_MAIN_GPU1_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_GPU1_BAR));
#endif
    return i_data.getBit<XSL_MAIN_GPU1_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_GPU1_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0;
#endif
    return fapi2::getScom(i_target, XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0));
#endif
    return fapi2::putScom(i_target, XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_CC_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_CC_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_CC_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_CC_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_CC_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_CC_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_CC_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0));
#endif
    return o_data.setBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_CC_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_CC_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_CC_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0));
#endif
    return o_data.clearBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_CC_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_CC_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_CC_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_CC_DIAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_CC_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_CC_DIAL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0));
#endif
    return i_data.getBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_CC_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_CC_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_CS_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_CS_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_CS_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_CS_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_CS_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_CS_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_CS_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_CS_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_CS_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_CS_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_CS_DIAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_CS_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_DAT_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_DAT_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_DAT_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_DAT_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_DAT_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_DAT_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_DAT_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_DAT_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_DAT_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_DAT_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_DAT_DIAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_DAT_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_AC_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_AC_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_AC_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_AC_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_AC_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_AC_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_AC_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0));
#endif
    return o_data.setBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_AC_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_AC_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_AC_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0));
#endif
    return o_data.clearBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_AC_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_AC_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_AC_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_AC_DIAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_AC_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_AC_DIAL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0));
#endif
    return i_data.getBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_AC_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_AC_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_AS_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_AS_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_AS_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_AS_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_AS_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_AS_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_AS_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_AS_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_AS_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_AS_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_AS_DIAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_AS_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_DABDF_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_DABDF_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_DABDF_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_DABDF_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_DABDF_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_DABDF_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_DABDF_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_DABDF_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_DABDF_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_DABDF_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_DABDF_DIAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_DABDF_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_DAPASID_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_DAPASID_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_DAPASID_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_DAPASID_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_DAPASID_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_DAPASID_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_DAPASID_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_DAPASID_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_DAPASID_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_DAPASID_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_DAPASID_DIAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_DAPASID_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_SS_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_SS_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_SS_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_SS_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_SS_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_SS_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_SS_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_SS_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_SS_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_SS_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_SS_DIAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_SS_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_SC_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_SC_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_SC_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_SC_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_SC_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_SC_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_SC_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0));
#endif
    return o_data.setBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_SC_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_SC_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_SC_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0));
#endif
    return o_data.clearBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_SC_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_SC_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_SC_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_SC_DIAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_SC_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_SC_DIAL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0));
#endif
    return i_data.getBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_SC_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL0_SC_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_XSL_MAIN_ARY_RD_FUNC(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_ARY_RD_FUNC;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_XSL_MAIN_ARY_RD_FUNC(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_ARY_RD_FUNC;
#endif
    return fapi2::getScom(i_target, XSL_MAIN_ARY_RD_FUNC, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_XSL_MAIN_ARY_RD_FUNC(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(XSL_MAIN_ARY_RD_FUNC));
#endif
    return fapi2::putScom(i_target, XSL_MAIN_ARY_RD_FUNC, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_ARY_RD_FUNC_XSL_ARY_DATA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_ARY_RD_FUNC));
#endif
    return o_data.insertFromRight<XSL_MAIN_ARY_RD_FUNC_XSL_ARY_DATA,
           XSL_MAIN_ARY_RD_FUNC_XSL_ARY_DATA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_ARY_RD_FUNC_XSL_ARY_DATA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_ARY_RD_FUNC_XSL_ARY_DATA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_ARY_RD_FUNC));
#endif
    return o_data.insertFromRight<XSL_MAIN_ARY_RD_FUNC_XSL_ARY_DATA,
           XSL_MAIN_ARY_RD_FUNC_XSL_ARY_DATA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_ARY_RD_FUNC_XSL_ARY_DATA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_ARY_RD_FUNC_XSL_ARY_DATA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_ARY_RD_FUNC));
#endif
    return i_data.extractToRight<XSL_MAIN_ARY_RD_FUNC_XSL_ARY_DATA,
           XSL_MAIN_ARY_RD_FUNC_XSL_ARY_DATA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access XSL_MAIN_ARY_RD_FUNC_XSL_ARY_DATA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}


#ifndef __PPE_HCODE__
}
}

#endif
#endif
