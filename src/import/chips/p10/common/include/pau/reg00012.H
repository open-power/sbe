/* IBM_PROLOG_BEGIN_TAG                                                   */
/* This is an automatically generated prolog.                             */
/*                                                                        */
/* $Source: src/import/chips/p10/common/include/pau/reg00012.H $          */
/*                                                                        */
/* OpenPOWER sbe Project                                                  */
/*                                                                        */
/* Contributors Listed Below - COPYRIGHT 2019,2020                        */
/* [+] International Business Machines Corp.                              */
/*                                                                        */
/*                                                                        */
/* Licensed under the Apache License, Version 2.0 (the "License");        */
/* you may not use this file except in compliance with the License.       */
/* You may obtain a copy of the License at                                */
/*                                                                        */
/*     http://www.apache.org/licenses/LICENSE-2.0                         */
/*                                                                        */
/* Unless required by applicable law or agreed to in writing, software    */
/* distributed under the License is distributed on an "AS IS" BASIS,      */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        */
/* implied. See the License for the specific language governing           */
/* permissions and limitations under the License.                         */
/*                                                                        */
/* IBM_PROLOG_END_TAG                                                     */
#include "fapi2.H"

#ifndef __PAU_REG00012_H_
#define __PAU_REG00012_H_

#ifndef __PPE_HCODE__
namespace scomt
{
namespace pau
{
#endif


//>> PREP_[AME_AME1_MISC_INHIBIT_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AME_AME1_MISC_INHIBIT_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME1_MISC_INHIBIT_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AME_AME1_MISC_INHIBIT_CONFIG]

//>> GET_[AME_AME1_MISC_INHIBIT_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AME_AME1_MISC_INHIBIT_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME1_MISC_INHIBIT_CONFIG;
#endif
    return fapi2::getScom(i_target, AME_AME1_MISC_INHIBIT_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AME_AME1_MISC_INHIBIT_CONFIG]

//>> PUT_[AME_AME1_MISC_INHIBIT_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AME_AME1_MISC_INHIBIT_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return fapi2::putScom(i_target, AME_AME1_MISC_INHIBIT_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AME_AME1_MISC_INHIBIT_CONFIG]


//>> SET_[AME_AME1_MISC_INHIBIT_CONFIG_LFREQ0]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_INHIBIT_CONFIG_LFREQ0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_INHIBIT_CONFIG_LFREQ0,
           AME_AME1_MISC_INHIBIT_CONFIG_LFREQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_LFREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_INHIBIT_CONFIG_LFREQ0]

//>> SET_[AME_AME1_MISC_INHIBIT_CONFIG_LFREQ0]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_INHIBIT_CONFIG_LFREQ0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_INHIBIT_CONFIG_LFREQ0,
           AME_AME1_MISC_INHIBIT_CONFIG_LFREQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_LFREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_INHIBIT_CONFIG_LFREQ0]

//>> GET_[AME_AME1_MISC_INHIBIT_CONFIG_LFREQ0]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_INHIBIT_CONFIG_LFREQ0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_AME1_MISC_INHIBIT_CONFIG_LFREQ0,
           AME_AME1_MISC_INHIBIT_CONFIG_LFREQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_LFREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_INHIBIT_CONFIG_LFREQ0]

//>> SET_[AME_AME1_MISC_INHIBIT_CONFIG_RESERVED0]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_INHIBIT_CONFIG_RESERVED0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_INHIBIT_CONFIG_RESERVED0,
           AME_AME1_MISC_INHIBIT_CONFIG_RESERVED0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_RESERVED0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_INHIBIT_CONFIG_RESERVED0]

//>> SET_[AME_AME1_MISC_INHIBIT_CONFIG_RESERVED0]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_INHIBIT_CONFIG_RESERVED0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_INHIBIT_CONFIG_RESERVED0,
           AME_AME1_MISC_INHIBIT_CONFIG_RESERVED0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_RESERVED0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_INHIBIT_CONFIG_RESERVED0]

//>> GET_[AME_AME1_MISC_INHIBIT_CONFIG_RESERVED0]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_INHIBIT_CONFIG_RESERVED0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_AME1_MISC_INHIBIT_CONFIG_RESERVED0,
           AME_AME1_MISC_INHIBIT_CONFIG_RESERVED0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_RESERVED0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_INHIBIT_CONFIG_RESERVED0]

//>> SET_[AME_AME1_MISC_INHIBIT_CONFIG_TFREQ0]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_INHIBIT_CONFIG_TFREQ0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_INHIBIT_CONFIG_TFREQ0,
           AME_AME1_MISC_INHIBIT_CONFIG_TFREQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_TFREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_INHIBIT_CONFIG_TFREQ0]

//>> SET_[AME_AME1_MISC_INHIBIT_CONFIG_TFREQ0]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_INHIBIT_CONFIG_TFREQ0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_INHIBIT_CONFIG_TFREQ0,
           AME_AME1_MISC_INHIBIT_CONFIG_TFREQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_TFREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_INHIBIT_CONFIG_TFREQ0]

//>> GET_[AME_AME1_MISC_INHIBIT_CONFIG_TFREQ0]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_INHIBIT_CONFIG_TFREQ0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_AME1_MISC_INHIBIT_CONFIG_TFREQ0,
           AME_AME1_MISC_INHIBIT_CONFIG_TFREQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_TFREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_INHIBIT_CONFIG_TFREQ0]

//>> SET_[AME_AME1_MISC_INHIBIT_CONFIG_PFREQ0]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_INHIBIT_CONFIG_PFREQ0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_INHIBIT_CONFIG_PFREQ0,
           AME_AME1_MISC_INHIBIT_CONFIG_PFREQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_PFREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_INHIBIT_CONFIG_PFREQ0]

//>> SET_[AME_AME1_MISC_INHIBIT_CONFIG_PFREQ0]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_INHIBIT_CONFIG_PFREQ0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_INHIBIT_CONFIG_PFREQ0,
           AME_AME1_MISC_INHIBIT_CONFIG_PFREQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_PFREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_INHIBIT_CONFIG_PFREQ0]

//>> GET_[AME_AME1_MISC_INHIBIT_CONFIG_PFREQ0]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_INHIBIT_CONFIG_PFREQ0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_AME1_MISC_INHIBIT_CONFIG_PFREQ0,
           AME_AME1_MISC_INHIBIT_CONFIG_PFREQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_PFREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_INHIBIT_CONFIG_PFREQ0]

//>> SET_[AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY0]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY0]

//>> SET_[AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY0]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY0]

//>> SET_[AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY0]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY0]

//>> CLEAR_[AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY0]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY0]

//>> GET_[AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY0]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY0]

//>> GET_[AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY0]
static inline bool GET_AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY0]

//>> SET_[AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT0]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT0]

//>> SET_[AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT0]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT0]

//>> SET_[AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT0]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT0]

//>> CLEAR_[AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT0]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT0]

//>> GET_[AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT0]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT0]

//>> GET_[AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT0]
static inline bool GET_AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT0]

//>> SET_[AME_AME1_MISC_INHIBIT_CONFIG_DEST0]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_INHIBIT_CONFIG_DEST0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_INHIBIT_CONFIG_DEST0,
           AME_AME1_MISC_INHIBIT_CONFIG_DEST0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_DEST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_INHIBIT_CONFIG_DEST0]

//>> SET_[AME_AME1_MISC_INHIBIT_CONFIG_DEST0]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_INHIBIT_CONFIG_DEST0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_INHIBIT_CONFIG_DEST0,
           AME_AME1_MISC_INHIBIT_CONFIG_DEST0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_DEST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_INHIBIT_CONFIG_DEST0]

//>> GET_[AME_AME1_MISC_INHIBIT_CONFIG_DEST0]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_INHIBIT_CONFIG_DEST0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_AME1_MISC_INHIBIT_CONFIG_DEST0,
           AME_AME1_MISC_INHIBIT_CONFIG_DEST0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_DEST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_INHIBIT_CONFIG_DEST0]

//>> SET_[AME_AME1_MISC_INHIBIT_CONFIG_LFREQ1]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_INHIBIT_CONFIG_LFREQ1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_INHIBIT_CONFIG_LFREQ1,
           AME_AME1_MISC_INHIBIT_CONFIG_LFREQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_LFREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_INHIBIT_CONFIG_LFREQ1]

//>> SET_[AME_AME1_MISC_INHIBIT_CONFIG_LFREQ1]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_INHIBIT_CONFIG_LFREQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_INHIBIT_CONFIG_LFREQ1,
           AME_AME1_MISC_INHIBIT_CONFIG_LFREQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_LFREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_INHIBIT_CONFIG_LFREQ1]

//>> GET_[AME_AME1_MISC_INHIBIT_CONFIG_LFREQ1]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_INHIBIT_CONFIG_LFREQ1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_AME1_MISC_INHIBIT_CONFIG_LFREQ1,
           AME_AME1_MISC_INHIBIT_CONFIG_LFREQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_LFREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_INHIBIT_CONFIG_LFREQ1]

//>> SET_[AME_AME1_MISC_INHIBIT_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_INHIBIT_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_INHIBIT_CONFIG_RESERVED1,
           AME_AME1_MISC_INHIBIT_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_INHIBIT_CONFIG_RESERVED1]

//>> SET_[AME_AME1_MISC_INHIBIT_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_INHIBIT_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_INHIBIT_CONFIG_RESERVED1,
           AME_AME1_MISC_INHIBIT_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_INHIBIT_CONFIG_RESERVED1]

//>> GET_[AME_AME1_MISC_INHIBIT_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_INHIBIT_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_AME1_MISC_INHIBIT_CONFIG_RESERVED1,
           AME_AME1_MISC_INHIBIT_CONFIG_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_INHIBIT_CONFIG_RESERVED1]

//>> SET_[AME_AME1_MISC_INHIBIT_CONFIG_TFREQ1]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_INHIBIT_CONFIG_TFREQ1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_INHIBIT_CONFIG_TFREQ1,
           AME_AME1_MISC_INHIBIT_CONFIG_TFREQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_TFREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_INHIBIT_CONFIG_TFREQ1]

//>> SET_[AME_AME1_MISC_INHIBIT_CONFIG_TFREQ1]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_INHIBIT_CONFIG_TFREQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_INHIBIT_CONFIG_TFREQ1,
           AME_AME1_MISC_INHIBIT_CONFIG_TFREQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_TFREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_INHIBIT_CONFIG_TFREQ1]

//>> GET_[AME_AME1_MISC_INHIBIT_CONFIG_TFREQ1]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_INHIBIT_CONFIG_TFREQ1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_AME1_MISC_INHIBIT_CONFIG_TFREQ1,
           AME_AME1_MISC_INHIBIT_CONFIG_TFREQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_TFREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_INHIBIT_CONFIG_TFREQ1]

//>> SET_[AME_AME1_MISC_INHIBIT_CONFIG_PFREQ1]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_INHIBIT_CONFIG_PFREQ1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_INHIBIT_CONFIG_PFREQ1,
           AME_AME1_MISC_INHIBIT_CONFIG_PFREQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_PFREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_INHIBIT_CONFIG_PFREQ1]

//>> SET_[AME_AME1_MISC_INHIBIT_CONFIG_PFREQ1]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_INHIBIT_CONFIG_PFREQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_INHIBIT_CONFIG_PFREQ1,
           AME_AME1_MISC_INHIBIT_CONFIG_PFREQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_PFREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_INHIBIT_CONFIG_PFREQ1]

//>> GET_[AME_AME1_MISC_INHIBIT_CONFIG_PFREQ1]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_INHIBIT_CONFIG_PFREQ1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_AME1_MISC_INHIBIT_CONFIG_PFREQ1,
           AME_AME1_MISC_INHIBIT_CONFIG_PFREQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_PFREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_INHIBIT_CONFIG_PFREQ1]

//>> SET_[AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY1]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY1]

//>> SET_[AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY1]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY1]

//>> SET_[AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY1]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY1]

//>> CLEAR_[AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY1]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY1]

//>> GET_[AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY1]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY1]

//>> GET_[AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY1]
static inline bool GET_AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_INHIBIT_CONFIG_BLOCKY1]

//>> SET_[AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT1]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT1]

//>> SET_[AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT1]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT1]

//>> SET_[AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT1]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT1]

//>> CLEAR_[AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT1]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT1]

//>> GET_[AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT1]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT1]

//>> GET_[AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT1]
static inline bool GET_AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_INHIBIT_CONFIG_ONESHOT1]

//>> SET_[AME_AME1_MISC_INHIBIT_CONFIG_DEST1]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_INHIBIT_CONFIG_DEST1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_INHIBIT_CONFIG_DEST1,
           AME_AME1_MISC_INHIBIT_CONFIG_DEST1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_DEST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_INHIBIT_CONFIG_DEST1]

//>> SET_[AME_AME1_MISC_INHIBIT_CONFIG_DEST1]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_INHIBIT_CONFIG_DEST1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_INHIBIT_CONFIG_DEST1,
           AME_AME1_MISC_INHIBIT_CONFIG_DEST1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_DEST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_INHIBIT_CONFIG_DEST1]

//>> GET_[AME_AME1_MISC_INHIBIT_CONFIG_DEST1]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_INHIBIT_CONFIG_DEST1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_AME1_MISC_INHIBIT_CONFIG_DEST1,
           AME_AME1_MISC_INHIBIT_CONFIG_DEST1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_INHIBIT_CONFIG_DEST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_INHIBIT_CONFIG_DEST1]

//>> PREP_[AME_ATL_MISC_DEBUG_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AME_ATL_MISC_DEBUG_CONFIG1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_ATL_MISC_DEBUG_CONFIG1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AME_ATL_MISC_DEBUG_CONFIG1]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AME_ATL_MISC_DEBUG_CONFIG1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_ATL_MISC_DEBUG_CONFIG1;
#endif
    return fapi2::getScom(i_target, AME_ATL_MISC_DEBUG_CONFIG1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG1]

//>> PUT_[AME_ATL_MISC_DEBUG_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AME_ATL_MISC_DEBUG_CONFIG1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return fapi2::putScom(i_target, AME_ATL_MISC_DEBUG_CONFIG1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AME_ATL_MISC_DEBUG_CONFIG1]


//>> SET_[AME_ATL_MISC_DEBUG_CONFIG1_0_B4_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG1_0_B4_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG1_0_B4_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_0_B4_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_0_B4_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG1_0_B4_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG1_0_B4_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG1_0_B4_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG1_0_B4_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_0_B4_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_0_B4_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG1_0_B4_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG1_0_B4_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG1_0_B4_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG1_0_B4_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_0_B4_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_0_B4_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG1_0_B4_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG1_1_B4_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG1_1_B4_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG1_1_B4_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_1_B4_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_1_B4_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG1_1_B4_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG1_1_B4_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG1_1_B4_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG1_1_B4_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_1_B4_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_1_B4_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG1_1_B4_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG1_1_B4_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG1_1_B4_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG1_1_B4_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_1_B4_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_1_B4_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG1_1_B4_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG1_B4_G0_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG1_B4_G0_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG1_B4_G0_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_B4_G0_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_B4_G0_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG1_B4_G0_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG1_B4_G0_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG1_B4_G0_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG1_B4_G0_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_B4_G0_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_B4_G0_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG1_B4_G0_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG1_B4_G0_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG1_B4_G0_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG1_B4_G0_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_B4_G0_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_B4_G0_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG1_B4_G0_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG1_B4_G1_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG1_B4_G1_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG1_B4_G1_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_B4_G1_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_B4_G1_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG1_B4_G1_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG1_B4_G1_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG1_B4_G1_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG1_B4_G1_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_B4_G1_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_B4_G1_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG1_B4_G1_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG1_B4_G1_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG1_B4_G1_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG1_B4_G1_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_B4_G1_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_B4_G1_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG1_B4_G1_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG1_B4_G2_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG1_B4_G2_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG1_B4_G2_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_B4_G2_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_B4_G2_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG1_B4_G2_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG1_B4_G2_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG1_B4_G2_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG1_B4_G2_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_B4_G2_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_B4_G2_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG1_B4_G2_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG1_B4_G2_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG1_B4_G2_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG1_B4_G2_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_B4_G2_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_B4_G2_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG1_B4_G2_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG1_0_B5_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG1_0_B5_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG1_0_B5_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_0_B5_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_0_B5_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG1_0_B5_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG1_0_B5_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG1_0_B5_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG1_0_B5_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_0_B5_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_0_B5_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG1_0_B5_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG1_0_B5_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG1_0_B5_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG1_0_B5_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_0_B5_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_0_B5_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG1_0_B5_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG1_1_B5_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG1_1_B5_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG1_1_B5_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_1_B5_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_1_B5_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG1_1_B5_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG1_1_B5_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG1_1_B5_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG1_1_B5_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_1_B5_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_1_B5_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG1_1_B5_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG1_1_B5_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG1_1_B5_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG1_1_B5_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_1_B5_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_1_B5_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG1_1_B5_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG1_B5_G0_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG1_B5_G0_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG1_B5_G0_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_B5_G0_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_B5_G0_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG1_B5_G0_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG1_B5_G0_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG1_B5_G0_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG1_B5_G0_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_B5_G0_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_B5_G0_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG1_B5_G0_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG1_B5_G0_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG1_B5_G0_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG1_B5_G0_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_B5_G0_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_B5_G0_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG1_B5_G0_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG1_B5_G1_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG1_B5_G1_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG1_B5_G1_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_B5_G1_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_B5_G1_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG1_B5_G1_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG1_B5_G1_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG1_B5_G1_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG1_B5_G1_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_B5_G1_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_B5_G1_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG1_B5_G1_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG1_B5_G1_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG1_B5_G1_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG1_B5_G1_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_B5_G1_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_B5_G1_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG1_B5_G1_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG1_B5_G2_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG1_B5_G2_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG1_B5_G2_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_B5_G2_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_B5_G2_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG1_B5_G2_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG1_B5_G2_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG1_B5_G2_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG1_B5_G2_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_B5_G2_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_B5_G2_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG1_B5_G2_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG1_B5_G2_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG1_B5_G2_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG1_B5_G2_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_B5_G2_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_B5_G2_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG1_B5_G2_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG1_0_B6_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG1_0_B6_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG1_0_B6_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_0_B6_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_0_B6_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG1_0_B6_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG1_0_B6_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG1_0_B6_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG1_0_B6_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_0_B6_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_0_B6_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG1_0_B6_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG1_0_B6_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG1_0_B6_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG1_0_B6_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_0_B6_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_0_B6_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG1_0_B6_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG1_1_B6_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG1_1_B6_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG1_1_B6_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_1_B6_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_1_B6_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG1_1_B6_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG1_1_B6_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG1_1_B6_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG1_1_B6_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_1_B6_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_1_B6_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG1_1_B6_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG1_1_B6_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG1_1_B6_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG1_1_B6_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_1_B6_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_1_B6_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG1_1_B6_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG1_B6_G0_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG1_B6_G0_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG1_B6_G0_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_B6_G0_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_B6_G0_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG1_B6_G0_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG1_B6_G0_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG1_B6_G0_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG1_B6_G0_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_B6_G0_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_B6_G0_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG1_B6_G0_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG1_B6_G0_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG1_B6_G0_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG1_B6_G0_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_B6_G0_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_B6_G0_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG1_B6_G0_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG1_B6_G1_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG1_B6_G1_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG1_B6_G1_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_B6_G1_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_B6_G1_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG1_B6_G1_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG1_B6_G1_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG1_B6_G1_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG1_B6_G1_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_B6_G1_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_B6_G1_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG1_B6_G1_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG1_B6_G1_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG1_B6_G1_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG1_B6_G1_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_B6_G1_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_B6_G1_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG1_B6_G1_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG1_B6_G2_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG1_B6_G2_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG1_B6_G2_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_B6_G2_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_B6_G2_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG1_B6_G2_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG1_B6_G2_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG1_B6_G2_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG1_B6_G2_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_B6_G2_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_B6_G2_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG1_B6_G2_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG1_B6_G2_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG1_B6_G2_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG1_B6_G2_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_B6_G2_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_B6_G2_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG1_B6_G2_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG1_0_B7_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG1_0_B7_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG1_0_B7_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_0_B7_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_0_B7_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG1_0_B7_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG1_0_B7_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG1_0_B7_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG1_0_B7_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_0_B7_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_0_B7_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG1_0_B7_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG1_0_B7_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG1_0_B7_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG1_0_B7_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_0_B7_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_0_B7_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG1_0_B7_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG1_1_B7_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG1_1_B7_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG1_1_B7_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_1_B7_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_1_B7_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG1_1_B7_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG1_1_B7_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG1_1_B7_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG1_1_B7_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_1_B7_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_1_B7_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG1_1_B7_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG1_1_B7_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG1_1_B7_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG1_1_B7_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_1_B7_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_1_B7_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG1_1_B7_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG1_B7_G0_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG1_B7_G0_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG1_B7_G0_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_B7_G0_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_B7_G0_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG1_B7_G0_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG1_B7_G0_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG1_B7_G0_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG1_B7_G0_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_B7_G0_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_B7_G0_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG1_B7_G0_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG1_B7_G0_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG1_B7_G0_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG1_B7_G0_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_B7_G0_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_B7_G0_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG1_B7_G0_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG1_B7_G1_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG1_B7_G1_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG1_B7_G1_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_B7_G1_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_B7_G1_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG1_B7_G1_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG1_B7_G1_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG1_B7_G1_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG1_B7_G1_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_B7_G1_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_B7_G1_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG1_B7_G1_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG1_B7_G1_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG1_B7_G1_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG1_B7_G1_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_B7_G1_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_B7_G1_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG1_B7_G1_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG1_B7_G2_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG1_B7_G2_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG1_B7_G2_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_B7_G2_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_B7_G2_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG1_B7_G2_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG1_B7_G2_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG1_B7_G2_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG1_B7_G2_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_B7_G2_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_B7_G2_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG1_B7_G2_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG1_B7_G2_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG1_B7_G2_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG1_B7_G2_SEL,
           AME_ATL_MISC_DEBUG_CONFIG1_B7_G2_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_B7_G2_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG1_B7_G2_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG1_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG1_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG1_RESERVED1,
           AME_ATL_MISC_DEBUG_CONFIG1_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG1_RESERVED1]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG1_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG1_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG1_RESERVED1,
           AME_ATL_MISC_DEBUG_CONFIG1_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG1_RESERVED1]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG1_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG1_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG1_RESERVED1,
           AME_ATL_MISC_DEBUG_CONFIG1_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG1_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG1_RESERVED1]

//>> PREP_[CS_CTL_MISC_BDF2PE_11_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_BDF2PE_11_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_BDF2PE_11_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_CTL_MISC_BDF2PE_11_CONFIG]

//>> GET_[CS_CTL_MISC_BDF2PE_11_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_BDF2PE_11_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_BDF2PE_11_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_BDF2PE_11_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_11_CONFIG]

//>> PUT_[CS_CTL_MISC_BDF2PE_11_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_BDF2PE_11_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_11_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_BDF2PE_11_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_CTL_MISC_BDF2PE_11_CONFIG]


//>> SET_[CS_CTL_MISC_BDF2PE_11_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_11_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_11_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_11_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_11_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_11_CONFIG_ENABLE]

//>> SET_[CS_CTL_MISC_BDF2PE_11_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_11_CONFIG_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_11_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_11_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_11_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_11_CONFIG_ENABLE]

//>> SET_[CS_CTL_MISC_BDF2PE_11_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_11_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_11_CONFIG));
#endif
    return o_data.setBit<CS_CTL_MISC_BDF2PE_11_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_11_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_11_CONFIG_ENABLE]

//>> CLEAR_[CS_CTL_MISC_BDF2PE_11_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_BDF2PE_11_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_11_CONFIG));
#endif
    return o_data.clearBit<CS_CTL_MISC_BDF2PE_11_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_11_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_BDF2PE_11_CONFIG_ENABLE]

//>> GET_[CS_CTL_MISC_BDF2PE_11_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_11_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_11_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_11_CONFIG_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_11_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_11_CONFIG_ENABLE]

//>> GET_[CS_CTL_MISC_BDF2PE_11_CONFIG_ENABLE]
static inline bool GET_CS_CTL_MISC_BDF2PE_11_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_11_CONFIG));
#endif
    return i_data.getBit<CS_CTL_MISC_BDF2PE_11_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_11_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_11_CONFIG_ENABLE]

//>> SET_[CS_CTL_MISC_BDF2PE_11_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_11_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_11_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_11_CONFIG_RESERVED,
           CS_CTL_MISC_BDF2PE_11_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_11_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_11_CONFIG_RESERVED]

//>> SET_[CS_CTL_MISC_BDF2PE_11_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_11_CONFIG_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_11_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_11_CONFIG_RESERVED,
           CS_CTL_MISC_BDF2PE_11_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_11_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_11_CONFIG_RESERVED]

//>> GET_[CS_CTL_MISC_BDF2PE_11_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_11_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_11_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_11_CONFIG_RESERVED,
           CS_CTL_MISC_BDF2PE_11_CONFIG_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_11_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_11_CONFIG_RESERVED]

//>> SET_[CS_CTL_MISC_BDF2PE_11_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_11_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_11_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_11_CONFIG_PE,
           CS_CTL_MISC_BDF2PE_11_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_11_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_11_CONFIG_PE]

//>> SET_[CS_CTL_MISC_BDF2PE_11_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_11_CONFIG_PE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_11_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_11_CONFIG_PE,
           CS_CTL_MISC_BDF2PE_11_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_11_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_11_CONFIG_PE]

//>> GET_[CS_CTL_MISC_BDF2PE_11_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_11_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_11_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_11_CONFIG_PE,
           CS_CTL_MISC_BDF2PE_11_CONFIG_PE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_11_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_11_CONFIG_PE]

//>> SET_[CS_CTL_MISC_BDF2PE_11_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_11_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_11_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_11_CONFIG_BDF,
           CS_CTL_MISC_BDF2PE_11_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_11_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_11_CONFIG_BDF]

//>> SET_[CS_CTL_MISC_BDF2PE_11_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_11_CONFIG_BDF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_11_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_11_CONFIG_BDF,
           CS_CTL_MISC_BDF2PE_11_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_11_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_11_CONFIG_BDF]

//>> GET_[CS_CTL_MISC_BDF2PE_11_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_11_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_11_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_11_CONFIG_BDF,
           CS_CTL_MISC_BDF2PE_11_CONFIG_BDF_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_11_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_11_CONFIG_BDF]

//>> PREP_[CS_CTL_MISC_ELOGGER_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_ELOGGER_STATUS(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_ELOGGER_STATUS;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_CTL_MISC_ELOGGER_STATUS]

//>> GET_[CS_CTL_MISC_ELOGGER_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_ELOGGER_STATUS(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_ELOGGER_STATUS;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_ELOGGER_STATUS, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_CTL_MISC_ELOGGER_STATUS]

//>> PUT_[CS_CTL_MISC_ELOGGER_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_ELOGGER_STATUS(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_ELOGGER_STATUS));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_ELOGGER_STATUS, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_CTL_MISC_ELOGGER_STATUS]


//>> SET_[CS_CTL_MISC_ELOGGER_STATUS_NONIDLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_ELOGGER_STATUS_NONIDLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_ELOGGER_STATUS));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_ELOGGER_STATUS_NONIDLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_ELOGGER_STATUS_NONIDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_ELOGGER_STATUS_NONIDLE]

//>> SET_[CS_CTL_MISC_ELOGGER_STATUS_NONIDLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_ELOGGER_STATUS_NONIDLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_ELOGGER_STATUS));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_ELOGGER_STATUS_NONIDLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_ELOGGER_STATUS_NONIDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_ELOGGER_STATUS_NONIDLE]

//>> SET_[CS_CTL_MISC_ELOGGER_STATUS_NONIDLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_ELOGGER_STATUS_NONIDLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_ELOGGER_STATUS));
#endif
    return o_data.setBit<CS_CTL_MISC_ELOGGER_STATUS_NONIDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_ELOGGER_STATUS_NONIDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_ELOGGER_STATUS_NONIDLE]

//>> CLEAR_[CS_CTL_MISC_ELOGGER_STATUS_NONIDLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_ELOGGER_STATUS_NONIDLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_ELOGGER_STATUS));
#endif
    return o_data.clearBit<CS_CTL_MISC_ELOGGER_STATUS_NONIDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_ELOGGER_STATUS_NONIDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_ELOGGER_STATUS_NONIDLE]

//>> GET_[CS_CTL_MISC_ELOGGER_STATUS_NONIDLE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_ELOGGER_STATUS_NONIDLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_ELOGGER_STATUS));
#endif
    return i_data.extractToRight<CS_CTL_MISC_ELOGGER_STATUS_NONIDLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_ELOGGER_STATUS_NONIDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_ELOGGER_STATUS_NONIDLE]

//>> GET_[CS_CTL_MISC_ELOGGER_STATUS_NONIDLE]
static inline bool GET_CS_CTL_MISC_ELOGGER_STATUS_NONIDLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_ELOGGER_STATUS));
#endif
    return i_data.getBit<CS_CTL_MISC_ELOGGER_STATUS_NONIDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_ELOGGER_STATUS_NONIDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_ELOGGER_STATUS_NONIDLE]

//>> SET_[CS_CTL_MISC_ELOGGER_STATUS_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_ELOGGER_STATUS_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_ELOGGER_STATUS));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_ELOGGER_STATUS_RESERVED1,
           CS_CTL_MISC_ELOGGER_STATUS_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_ELOGGER_STATUS_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_ELOGGER_STATUS_RESERVED1]

//>> SET_[CS_CTL_MISC_ELOGGER_STATUS_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_ELOGGER_STATUS_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_ELOGGER_STATUS));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_ELOGGER_STATUS_RESERVED1,
           CS_CTL_MISC_ELOGGER_STATUS_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_ELOGGER_STATUS_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_ELOGGER_STATUS_RESERVED1]

//>> GET_[CS_CTL_MISC_ELOGGER_STATUS_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_ELOGGER_STATUS_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_ELOGGER_STATUS));
#endif
    return i_data.extractToRight<CS_CTL_MISC_ELOGGER_STATUS_RESERVED1,
           CS_CTL_MISC_ELOGGER_STATUS_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_ELOGGER_STATUS_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_ELOGGER_STATUS_RESERVED1]

//>> SET_[CS_CTL_MISC_ELOGGER_STATUS_ADDR]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_ELOGGER_STATUS_ADDR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_ELOGGER_STATUS));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_ELOGGER_STATUS_ADDR,
           CS_CTL_MISC_ELOGGER_STATUS_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_ELOGGER_STATUS_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_ELOGGER_STATUS_ADDR]

//>> SET_[CS_CTL_MISC_ELOGGER_STATUS_ADDR]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_ELOGGER_STATUS_ADDR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_ELOGGER_STATUS));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_ELOGGER_STATUS_ADDR,
           CS_CTL_MISC_ELOGGER_STATUS_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_ELOGGER_STATUS_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_ELOGGER_STATUS_ADDR]

//>> GET_[CS_CTL_MISC_ELOGGER_STATUS_ADDR]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_ELOGGER_STATUS_ADDR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_ELOGGER_STATUS));
#endif
    return i_data.extractToRight<CS_CTL_MISC_ELOGGER_STATUS_ADDR,
           CS_CTL_MISC_ELOGGER_STATUS_ADDR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_ELOGGER_STATUS_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_ELOGGER_STATUS_ADDR]

//>> SET_[CS_CTL_MISC_ELOGGER_STATUS_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_ELOGGER_STATUS_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_ELOGGER_STATUS));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_ELOGGER_STATUS_RESERVED2,
           CS_CTL_MISC_ELOGGER_STATUS_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_ELOGGER_STATUS_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_ELOGGER_STATUS_RESERVED2]

//>> SET_[CS_CTL_MISC_ELOGGER_STATUS_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_ELOGGER_STATUS_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_ELOGGER_STATUS));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_ELOGGER_STATUS_RESERVED2,
           CS_CTL_MISC_ELOGGER_STATUS_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_ELOGGER_STATUS_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_ELOGGER_STATUS_RESERVED2]

//>> GET_[CS_CTL_MISC_ELOGGER_STATUS_RESERVED2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_ELOGGER_STATUS_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_ELOGGER_STATUS));
#endif
    return i_data.extractToRight<CS_CTL_MISC_ELOGGER_STATUS_RESERVED2,
           CS_CTL_MISC_ELOGGER_STATUS_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_ELOGGER_STATUS_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_ELOGGER_STATUS_RESERVED2]

//>> SET_[CS_CTL_MISC_ELOGGER_STATUS_PEND_COUNT]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_ELOGGER_STATUS_PEND_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_ELOGGER_STATUS));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_ELOGGER_STATUS_PEND_COUNT,
           CS_CTL_MISC_ELOGGER_STATUS_PEND_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_ELOGGER_STATUS_PEND_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_ELOGGER_STATUS_PEND_COUNT]

//>> SET_[CS_CTL_MISC_ELOGGER_STATUS_PEND_COUNT]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_ELOGGER_STATUS_PEND_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_ELOGGER_STATUS));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_ELOGGER_STATUS_PEND_COUNT,
           CS_CTL_MISC_ELOGGER_STATUS_PEND_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_ELOGGER_STATUS_PEND_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_ELOGGER_STATUS_PEND_COUNT]

//>> GET_[CS_CTL_MISC_ELOGGER_STATUS_PEND_COUNT]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_ELOGGER_STATUS_PEND_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_ELOGGER_STATUS));
#endif
    return i_data.extractToRight<CS_CTL_MISC_ELOGGER_STATUS_PEND_COUNT,
           CS_CTL_MISC_ELOGGER_STATUS_PEND_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_ELOGGER_STATUS_PEND_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_ELOGGER_STATUS_PEND_COUNT]

//>> PREP_[CS_SM0_DIR_MISC_SCOM_L2_DATA]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_DIR_MISC_SCOM_L2_DATA(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_DIR_MISC_SCOM_L2_DATA;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_DIR_MISC_SCOM_L2_DATA]

//>> GET_[CS_SM0_DIR_MISC_SCOM_L2_DATA]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_DIR_MISC_SCOM_L2_DATA(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_DIR_MISC_SCOM_L2_DATA;
#endif
    return fapi2::getScom(i_target, CS_SM0_DIR_MISC_SCOM_L2_DATA, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_DIR_MISC_SCOM_L2_DATA]

//>> PUT_[CS_SM0_DIR_MISC_SCOM_L2_DATA]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_DIR_MISC_SCOM_L2_DATA(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_SCOM_L2_DATA));
#endif
    return fapi2::putScom(i_target, CS_SM0_DIR_MISC_SCOM_L2_DATA, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_DIR_MISC_SCOM_L2_DATA]


//>> SET_[CS_SM0_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_SCOM_L2_DATA));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA,
           CS_SM0_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA]

//>> SET_[CS_SM0_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_SCOM_L2_DATA));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA,
           CS_SM0_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA]

//>> GET_[CS_SM0_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_SCOM_L2_DATA));
#endif
    return i_data.extractToRight<CS_SM0_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA,
           CS_SM0_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA]

//>> PREP_[CS_SM0_MCP_MISC_CERR_MESSAGE7]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_MCP_MISC_CERR_MESSAGE7(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_CERR_MESSAGE7;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_MCP_MISC_CERR_MESSAGE7]

//>> GET_[CS_SM0_MCP_MISC_CERR_MESSAGE7]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_MCP_MISC_CERR_MESSAGE7(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_CERR_MESSAGE7;
#endif
    return fapi2::getScom(i_target, CS_SM0_MCP_MISC_CERR_MESSAGE7, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MESSAGE7]

//>> PUT_[CS_SM0_MCP_MISC_CERR_MESSAGE7]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_MCP_MISC_CERR_MESSAGE7(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MESSAGE7));
#endif
    return fapi2::putScom(i_target, CS_SM0_MCP_MISC_CERR_MESSAGE7, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_MCP_MISC_CERR_MESSAGE7]


//>> SET_[CS_SM0_MCP_MISC_CERR_MESSAGE7_CERR_MESSAGE_BITS7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MESSAGE7_CERR_MESSAGE_BITS7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MESSAGE7));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MESSAGE7_CERR_MESSAGE_BITS7,
           CS_SM0_MCP_MISC_CERR_MESSAGE7_CERR_MESSAGE_BITS7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MESSAGE7_CERR_MESSAGE_BITS7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MESSAGE7_CERR_MESSAGE_BITS7]

//>> SET_[CS_SM0_MCP_MISC_CERR_MESSAGE7_CERR_MESSAGE_BITS7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MESSAGE7_CERR_MESSAGE_BITS7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MESSAGE7));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MESSAGE7_CERR_MESSAGE_BITS7,
           CS_SM0_MCP_MISC_CERR_MESSAGE7_CERR_MESSAGE_BITS7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MESSAGE7_CERR_MESSAGE_BITS7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MESSAGE7_CERR_MESSAGE_BITS7]

//>> GET_[CS_SM0_MCP_MISC_CERR_MESSAGE7_CERR_MESSAGE_BITS7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MESSAGE7_CERR_MESSAGE_BITS7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MESSAGE7));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MESSAGE7_CERR_MESSAGE_BITS7,
           CS_SM0_MCP_MISC_CERR_MESSAGE7_CERR_MESSAGE_BITS7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MESSAGE7_CERR_MESSAGE_BITS7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MESSAGE7_CERR_MESSAGE_BITS7]

//>> PREP_[CS_SM0_MCP_MISC_XTIMER2_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_MCP_MISC_XTIMER2_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_XTIMER2_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_MCP_MISC_XTIMER2_CONFIG]

//>> GET_[CS_SM0_MCP_MISC_XTIMER2_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_MCP_MISC_XTIMER2_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_XTIMER2_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM0_MCP_MISC_XTIMER2_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_XTIMER2_CONFIG]

//>> PUT_[CS_SM0_MCP_MISC_XTIMER2_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_MCP_MISC_XTIMER2_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_XTIMER2_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM0_MCP_MISC_XTIMER2_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_MCP_MISC_XTIMER2_CONFIG]


//>> SET_[CS_SM0_MCP_MISC_XTIMER2_CONFIG_2_TICK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_XTIMER2_CONFIG_2_TICK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_XTIMER2_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_XTIMER2_CONFIG_2_TICK,
           CS_SM0_MCP_MISC_XTIMER2_CONFIG_2_TICK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_XTIMER2_CONFIG_2_TICK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_XTIMER2_CONFIG_2_TICK]

//>> SET_[CS_SM0_MCP_MISC_XTIMER2_CONFIG_2_TICK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_XTIMER2_CONFIG_2_TICK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_XTIMER2_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_XTIMER2_CONFIG_2_TICK,
           CS_SM0_MCP_MISC_XTIMER2_CONFIG_2_TICK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_XTIMER2_CONFIG_2_TICK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_XTIMER2_CONFIG_2_TICK]

//>> GET_[CS_SM0_MCP_MISC_XTIMER2_CONFIG_2_TICK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_XTIMER2_CONFIG_2_TICK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_XTIMER2_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_XTIMER2_CONFIG_2_TICK,
           CS_SM0_MCP_MISC_XTIMER2_CONFIG_2_TICK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_XTIMER2_CONFIG_2_TICK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_XTIMER2_CONFIG_2_TICK]

//>> SET_[CS_SM0_MCP_MISC_XTIMER2_CONFIG_3_TICK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_XTIMER2_CONFIG_3_TICK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_XTIMER2_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_XTIMER2_CONFIG_3_TICK,
           CS_SM0_MCP_MISC_XTIMER2_CONFIG_3_TICK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_XTIMER2_CONFIG_3_TICK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_XTIMER2_CONFIG_3_TICK]

//>> SET_[CS_SM0_MCP_MISC_XTIMER2_CONFIG_3_TICK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_XTIMER2_CONFIG_3_TICK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_XTIMER2_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_XTIMER2_CONFIG_3_TICK,
           CS_SM0_MCP_MISC_XTIMER2_CONFIG_3_TICK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_XTIMER2_CONFIG_3_TICK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_XTIMER2_CONFIG_3_TICK]

//>> GET_[CS_SM0_MCP_MISC_XTIMER2_CONFIG_3_TICK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_XTIMER2_CONFIG_3_TICK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_XTIMER2_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_XTIMER2_CONFIG_3_TICK,
           CS_SM0_MCP_MISC_XTIMER2_CONFIG_3_TICK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_XTIMER2_CONFIG_3_TICK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_XTIMER2_CONFIG_3_TICK]

//>> PREP_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0;
#endif
    return fapi2::getScom(i_target, CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0]

//>> PUT_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return fapi2::putScom(i_target, CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0]


//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]

//>> PREP_[CS_SM0_SNP_MISC_PERF_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_SNP_MISC_PERF_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_PERF_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_SNP_MISC_PERF_CONFIG]

//>> GET_[CS_SM0_SNP_MISC_PERF_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_SNP_MISC_PERF_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_PERF_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM0_SNP_MISC_PERF_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_PERF_CONFIG]

//>> PUT_[CS_SM0_SNP_MISC_PERF_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_SNP_MISC_PERF_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM0_SNP_MISC_PERF_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_SNP_MISC_PERF_CONFIG]


//>> SET_[CS_SM0_SNP_MISC_PERF_CONFIG_EVENT0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_CONFIG_EVENT0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PERF_CONFIG_EVENT0,
           CS_SM0_SNP_MISC_PERF_CONFIG_EVENT0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_CONFIG_EVENT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_CONFIG_EVENT0]

//>> SET_[CS_SM0_SNP_MISC_PERF_CONFIG_EVENT0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_CONFIG_EVENT0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PERF_CONFIG_EVENT0,
           CS_SM0_SNP_MISC_PERF_CONFIG_EVENT0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_CONFIG_EVENT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_CONFIG_EVENT0]

//>> GET_[CS_SM0_SNP_MISC_PERF_CONFIG_EVENT0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_PERF_CONFIG_EVENT0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_PERF_CONFIG_EVENT0,
           CS_SM0_SNP_MISC_PERF_CONFIG_EVENT0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_CONFIG_EVENT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_PERF_CONFIG_EVENT0]

//>> SET_[CS_SM0_SNP_MISC_PERF_CONFIG_EVENT1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_CONFIG_EVENT1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PERF_CONFIG_EVENT1,
           CS_SM0_SNP_MISC_PERF_CONFIG_EVENT1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_CONFIG_EVENT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_CONFIG_EVENT1]

//>> SET_[CS_SM0_SNP_MISC_PERF_CONFIG_EVENT1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_CONFIG_EVENT1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PERF_CONFIG_EVENT1,
           CS_SM0_SNP_MISC_PERF_CONFIG_EVENT1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_CONFIG_EVENT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_CONFIG_EVENT1]

//>> GET_[CS_SM0_SNP_MISC_PERF_CONFIG_EVENT1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_PERF_CONFIG_EVENT1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_PERF_CONFIG_EVENT1,
           CS_SM0_SNP_MISC_PERF_CONFIG_EVENT1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_CONFIG_EVENT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_PERF_CONFIG_EVENT1]

//>> SET_[CS_SM0_SNP_MISC_PERF_CONFIG_EVENT2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_CONFIG_EVENT2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PERF_CONFIG_EVENT2,
           CS_SM0_SNP_MISC_PERF_CONFIG_EVENT2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_CONFIG_EVENT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_CONFIG_EVENT2]

//>> SET_[CS_SM0_SNP_MISC_PERF_CONFIG_EVENT2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_CONFIG_EVENT2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PERF_CONFIG_EVENT2,
           CS_SM0_SNP_MISC_PERF_CONFIG_EVENT2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_CONFIG_EVENT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_CONFIG_EVENT2]

//>> GET_[CS_SM0_SNP_MISC_PERF_CONFIG_EVENT2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_PERF_CONFIG_EVENT2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_PERF_CONFIG_EVENT2,
           CS_SM0_SNP_MISC_PERF_CONFIG_EVENT2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_CONFIG_EVENT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_PERF_CONFIG_EVENT2]

//>> SET_[CS_SM0_SNP_MISC_PERF_CONFIG_EVENT3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_CONFIG_EVENT3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PERF_CONFIG_EVENT3,
           CS_SM0_SNP_MISC_PERF_CONFIG_EVENT3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_CONFIG_EVENT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_CONFIG_EVENT3]

//>> SET_[CS_SM0_SNP_MISC_PERF_CONFIG_EVENT3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_CONFIG_EVENT3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PERF_CONFIG_EVENT3,
           CS_SM0_SNP_MISC_PERF_CONFIG_EVENT3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_CONFIG_EVENT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_CONFIG_EVENT3]

//>> GET_[CS_SM0_SNP_MISC_PERF_CONFIG_EVENT3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_PERF_CONFIG_EVENT3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_PERF_CONFIG_EVENT3,
           CS_SM0_SNP_MISC_PERF_CONFIG_EVENT3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_CONFIG_EVENT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_PERF_CONFIG_EVENT3]

//>> SET_[CS_SM0_SNP_MISC_PERF_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_CONFIG_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PERF_CONFIG_RESERVED2,
           CS_SM0_SNP_MISC_PERF_CONFIG_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_CONFIG_RESERVED2]

//>> SET_[CS_SM0_SNP_MISC_PERF_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_CONFIG_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PERF_CONFIG_RESERVED2,
           CS_SM0_SNP_MISC_PERF_CONFIG_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_CONFIG_RESERVED2]

//>> GET_[CS_SM0_SNP_MISC_PERF_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_PERF_CONFIG_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_PERF_CONFIG_RESERVED2,
           CS_SM0_SNP_MISC_PERF_CONFIG_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_PERF_CONFIG_RESERVED2]

//>> SET_[CS_SM0_SNP_MISC_PERF_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PERF_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_CONFIG_ACT]

//>> SET_[CS_SM0_SNP_MISC_PERF_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_CONFIG_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PERF_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_CONFIG_ACT]

//>> SET_[CS_SM0_SNP_MISC_PERF_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_PERF_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_CONFIG_ACT]

//>> CLEAR_[CS_SM0_SNP_MISC_PERF_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_PERF_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_PERF_CONFIG_ACT]

//>> GET_[CS_SM0_SNP_MISC_PERF_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_PERF_CONFIG_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_PERF_CONFIG_ACT]

//>> GET_[CS_SM0_SNP_MISC_PERF_CONFIG_ACT]
static inline bool GET_CS_SM0_SNP_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_CONFIG));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_PERF_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_PERF_CONFIG_ACT]

//>> PREP_[CS_SM0_SNP_MISC_SCOM_L2_ADDR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_SNP_MISC_SCOM_L2_ADDR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_SCOM_L2_ADDR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_SNP_MISC_SCOM_L2_ADDR]

//>> GET_[CS_SM0_SNP_MISC_SCOM_L2_ADDR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_SNP_MISC_SCOM_L2_ADDR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_SCOM_L2_ADDR;
#endif
    return fapi2::getScom(i_target, CS_SM0_SNP_MISC_SCOM_L2_ADDR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SCOM_L2_ADDR]

//>> PUT_[CS_SM0_SNP_MISC_SCOM_L2_ADDR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_SNP_MISC_SCOM_L2_ADDR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SCOM_L2_ADDR));
#endif
    return fapi2::putScom(i_target, CS_SM0_SNP_MISC_SCOM_L2_ADDR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_SNP_MISC_SCOM_L2_ADDR]


//>> SET_[CS_SM0_SNP_MISC_SCOM_L2_ADDR_VALID]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SCOM_L2_ADDR_VALID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SCOM_L2_ADDR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SCOM_L2_ADDR_VALID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_SCOM_L2_ADDR_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SCOM_L2_ADDR_VALID]

//>> SET_[CS_SM0_SNP_MISC_SCOM_L2_ADDR_VALID]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SCOM_L2_ADDR_VALID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SCOM_L2_ADDR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SCOM_L2_ADDR_VALID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_SCOM_L2_ADDR_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SCOM_L2_ADDR_VALID]

//>> SET_[CS_SM0_SNP_MISC_SCOM_L2_ADDR_VALID]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SCOM_L2_ADDR_VALID(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SCOM_L2_ADDR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_SCOM_L2_ADDR_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_SCOM_L2_ADDR_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SCOM_L2_ADDR_VALID]

//>> CLEAR_[CS_SM0_SNP_MISC_SCOM_L2_ADDR_VALID]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_SCOM_L2_ADDR_VALID(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SCOM_L2_ADDR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_SCOM_L2_ADDR_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_SCOM_L2_ADDR_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_SCOM_L2_ADDR_VALID]

//>> GET_[CS_SM0_SNP_MISC_SCOM_L2_ADDR_VALID]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_SCOM_L2_ADDR_VALID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SCOM_L2_ADDR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_SCOM_L2_ADDR_VALID,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_SCOM_L2_ADDR_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SCOM_L2_ADDR_VALID]

//>> GET_[CS_SM0_SNP_MISC_SCOM_L2_ADDR_VALID]
static inline bool GET_CS_SM0_SNP_MISC_SCOM_L2_ADDR_VALID(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SCOM_L2_ADDR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_SCOM_L2_ADDR_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_SCOM_L2_ADDR_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SCOM_L2_ADDR_VALID]

//>> SET_[CS_SM0_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SCOM_L2_ADDR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1,
           CS_SM0_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SCOM_L2_ADDR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1,
           CS_SM0_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1]

//>> GET_[CS_SM0_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SCOM_L2_ADDR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1,
           CS_SM0_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_SCOM_L2_ADDR_CCI]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SCOM_L2_ADDR_CCI(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SCOM_L2_ADDR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SCOM_L2_ADDR_CCI,
           CS_SM0_SNP_MISC_SCOM_L2_ADDR_CCI_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_SCOM_L2_ADDR_CCI chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SCOM_L2_ADDR_CCI]

//>> SET_[CS_SM0_SNP_MISC_SCOM_L2_ADDR_CCI]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SCOM_L2_ADDR_CCI(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SCOM_L2_ADDR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SCOM_L2_ADDR_CCI,
           CS_SM0_SNP_MISC_SCOM_L2_ADDR_CCI_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_SCOM_L2_ADDR_CCI chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SCOM_L2_ADDR_CCI]

//>> GET_[CS_SM0_SNP_MISC_SCOM_L2_ADDR_CCI]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_SCOM_L2_ADDR_CCI(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SCOM_L2_ADDR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_SCOM_L2_ADDR_CCI,
           CS_SM0_SNP_MISC_SCOM_L2_ADDR_CCI_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_SCOM_L2_ADDR_CCI chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SCOM_L2_ADDR_CCI]

//>> SET_[CS_SM0_SNP_MISC_SCOM_L2_ADDR_WAY]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SCOM_L2_ADDR_WAY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SCOM_L2_ADDR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SCOM_L2_ADDR_WAY,
           CS_SM0_SNP_MISC_SCOM_L2_ADDR_WAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_SCOM_L2_ADDR_WAY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SCOM_L2_ADDR_WAY]

//>> SET_[CS_SM0_SNP_MISC_SCOM_L2_ADDR_WAY]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_SCOM_L2_ADDR_WAY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SCOM_L2_ADDR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_SCOM_L2_ADDR_WAY,
           CS_SM0_SNP_MISC_SCOM_L2_ADDR_WAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_SCOM_L2_ADDR_WAY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_SCOM_L2_ADDR_WAY]

//>> GET_[CS_SM0_SNP_MISC_SCOM_L2_ADDR_WAY]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_SCOM_L2_ADDR_WAY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_SCOM_L2_ADDR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_SCOM_L2_ADDR_WAY,
           CS_SM0_SNP_MISC_SCOM_L2_ADDR_WAY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_SCOM_L2_ADDR_WAY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_SCOM_L2_ADDR_WAY]

//>> PREP_[CS_SM1_DIR_MISC_CONFIG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_DIR_MISC_CONFIG0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_DIR_MISC_CONFIG0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_DIR_MISC_CONFIG0]

//>> GET_[CS_SM1_DIR_MISC_CONFIG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_DIR_MISC_CONFIG0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_DIR_MISC_CONFIG0;
#endif
    return fapi2::getScom(i_target, CS_SM1_DIR_MISC_CONFIG0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_DIR_MISC_CONFIG0]

//>> PUT_[CS_SM1_DIR_MISC_CONFIG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_DIR_MISC_CONFIG0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_CONFIG0));
#endif
    return fapi2::putScom(i_target, CS_SM1_DIR_MISC_CONFIG0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_DIR_MISC_CONFIG0]


//>> SET_[CS_SM1_DIR_MISC_CONFIG0_HOST_TAG_SIZE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_CONFIG0_HOST_TAG_SIZE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_CONFIG0_HOST_TAG_SIZE,
           CS_SM1_DIR_MISC_CONFIG0_HOST_TAG_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_DIR_MISC_CONFIG0_HOST_TAG_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_CONFIG0_HOST_TAG_SIZE]

//>> SET_[CS_SM1_DIR_MISC_CONFIG0_HOST_TAG_SIZE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_CONFIG0_HOST_TAG_SIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_CONFIG0_HOST_TAG_SIZE,
           CS_SM1_DIR_MISC_CONFIG0_HOST_TAG_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_DIR_MISC_CONFIG0_HOST_TAG_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_CONFIG0_HOST_TAG_SIZE]

//>> GET_[CS_SM1_DIR_MISC_CONFIG0_HOST_TAG_SIZE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_DIR_MISC_CONFIG0_HOST_TAG_SIZE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_DIR_MISC_CONFIG0_HOST_TAG_SIZE,
           CS_SM1_DIR_MISC_CONFIG0_HOST_TAG_SIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_DIR_MISC_CONFIG0_HOST_TAG_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_DIR_MISC_CONFIG0_HOST_TAG_SIZE]

//>> SET_[CS_SM1_DIR_MISC_CONFIG0_0_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_CONFIG0_0_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_CONFIG0_0_RESERVED,
           CS_SM1_DIR_MISC_CONFIG0_0_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_DIR_MISC_CONFIG0_0_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_CONFIG0_0_RESERVED]

//>> SET_[CS_SM1_DIR_MISC_CONFIG0_0_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_CONFIG0_0_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_CONFIG0_0_RESERVED,
           CS_SM1_DIR_MISC_CONFIG0_0_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_DIR_MISC_CONFIG0_0_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_CONFIG0_0_RESERVED]

//>> GET_[CS_SM1_DIR_MISC_CONFIG0_0_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_DIR_MISC_CONFIG0_0_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_DIR_MISC_CONFIG0_0_RESERVED,
           CS_SM1_DIR_MISC_CONFIG0_0_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_DIR_MISC_CONFIG0_0_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_DIR_MISC_CONFIG0_0_RESERVED]

//>> SET_[CS_SM1_DIR_MISC_CONFIG0_DEBUG0_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_CONFIG0_DEBUG0_ACT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_CONFIG0_DEBUG0_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_DIR_MISC_CONFIG0_DEBUG0_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_CONFIG0_DEBUG0_ACT]

//>> SET_[CS_SM1_DIR_MISC_CONFIG0_DEBUG0_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_CONFIG0_DEBUG0_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_CONFIG0_DEBUG0_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_DIR_MISC_CONFIG0_DEBUG0_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_CONFIG0_DEBUG0_ACT]

//>> SET_[CS_SM1_DIR_MISC_CONFIG0_DEBUG0_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_CONFIG0_DEBUG0_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_DIR_MISC_CONFIG0_DEBUG0_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_DIR_MISC_CONFIG0_DEBUG0_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_CONFIG0_DEBUG0_ACT]

//>> CLEAR_[CS_SM1_DIR_MISC_CONFIG0_DEBUG0_ACT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_DIR_MISC_CONFIG0_DEBUG0_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_DIR_MISC_CONFIG0_DEBUG0_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_DIR_MISC_CONFIG0_DEBUG0_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_DIR_MISC_CONFIG0_DEBUG0_ACT]

//>> GET_[CS_SM1_DIR_MISC_CONFIG0_DEBUG0_ACT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_DIR_MISC_CONFIG0_DEBUG0_ACT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_DIR_MISC_CONFIG0_DEBUG0_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_DIR_MISC_CONFIG0_DEBUG0_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_DIR_MISC_CONFIG0_DEBUG0_ACT]

//>> GET_[CS_SM1_DIR_MISC_CONFIG0_DEBUG0_ACT]
static inline bool GET_CS_SM1_DIR_MISC_CONFIG0_DEBUG0_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_DIR_MISC_CONFIG0_DEBUG0_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_DIR_MISC_CONFIG0_DEBUG0_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_DIR_MISC_CONFIG0_DEBUG0_ACT]

//>> PREP_[CS_SM1_MCP_MISC_CERR_MASK0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_MCP_MISC_CERR_MASK0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_CERR_MASK0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_MCP_MISC_CERR_MASK0]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_MCP_MISC_CERR_MASK0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_CERR_MASK0;
#endif
    return fapi2::getScom(i_target, CS_SM1_MCP_MISC_CERR_MASK0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0]

//>> PUT_[CS_SM1_MCP_MISC_CERR_MASK0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_MCP_MISC_CERR_MASK0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return fapi2::putScom(i_target, CS_SM1_MCP_MISC_CERR_MASK0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_MCP_MISC_CERR_MASK0]


//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_0]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_NVF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_0]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_1]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_NVF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_1]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_2]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_NVF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_2]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_3]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_NVF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_3]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_4]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_NVF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_4]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_4]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_4]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_5]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_NVF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_5]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_5]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_5]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_6]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_NVF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_6]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_6]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_6]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_7]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_NVF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_7]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_7]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_7]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_8]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_8]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_8]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_NVF_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_8]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_8]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_8]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_8]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_9]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_9]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_9]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_NVF_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_9]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_9]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_9]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_9]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_10]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_10]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_10]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_NVF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_10]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_10]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_10]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_10]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_11]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_11]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_11]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_NVF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_11]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_11]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_11]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_11]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_12]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_12]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_12]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_NVF_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_12]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_12]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_12]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_12]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_13]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_13]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_13]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_13]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_NVF_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_13]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_13]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_13]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_13]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_13]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_14]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_14]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_14]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_14]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_NVF_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_14]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_14]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_14]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_14]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_14]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_15]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_15]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_15]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_15]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_NVF_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_15]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_15]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_15]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_15]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_15]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_16]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_16]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_16]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_16]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_NVF_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_16]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_16]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_16]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_16]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_16]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_17]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_17]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_17]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_17]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_NVF_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_17]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_17]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_17]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_17]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_17]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_18]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_18]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_18]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_18]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_NVF_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_18]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_18]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_18]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_18]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_18]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_19]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_19]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_19]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_19]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_NVF_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_19]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_19]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_NVF_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_19]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_19]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_NVF_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_NVF_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_NVF_19]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_0]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_0]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_1]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_1]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_2]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_2]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_3]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_3]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_4]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_4]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_4]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_4]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_5]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_5]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_5]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_5]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_6]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_6]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_6]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_6]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_7]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_7]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_7]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_7]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_ASBE_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_ASBE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_ASBE_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_PBR_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_PBR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_PBR_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_PBR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_PBR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_0]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_PBR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_PBR_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_PBR_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_0]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_PBR_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_PBR_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_PBR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_PBR_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_PBR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_PBR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_1]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_PBR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_PBR_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_PBR_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_1]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_PBR_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_PBR_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_PBR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_PBR_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_PBR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_PBR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_2]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_PBR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_PBR_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_PBR_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_2]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_PBR_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_PBR_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_PBR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_PBR_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_PBR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_PBR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_3]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_PBR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_PBR_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_PBR_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_3]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_PBR_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_PBR_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_PBR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_PBR_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_PBR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_PBR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_4]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_PBR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_4]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_PBR_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_PBR_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_4]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_4]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_PBR_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_PBR_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_PBR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_PBR_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_PBR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_PBR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_5]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_PBR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_5]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_PBR_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_PBR_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_5]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_5]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_PBR_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_PBR_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_PBR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_PBR_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_PBR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_PBR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_6]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_PBR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_6]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_PBR_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_PBR_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_6]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_6]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_PBR_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_PBR_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_PBR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_PBR_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_PBR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_PBR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_7]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_PBR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_7]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_PBR_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_PBR_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_7]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_7]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_PBR_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_PBR_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_REG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_REG_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_REG_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_REG_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_REG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_REG_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_REG_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_REG_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_REG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_REG_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_REG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_REG_0]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_REG_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_REG_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_REG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_REG_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_REG_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_REG_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_REG_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_REG_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_REG_0]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_REG_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_REG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_REG_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_REG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_REG_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_REG_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_REG_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_REG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_REG_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_REG_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_REG_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_REG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_REG_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_REG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_REG_1]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_REG_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_REG_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_REG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_REG_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_REG_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_REG_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_REG_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_REG_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_REG_1]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_REG_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_REG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_REG_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_REG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_REG_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_REG_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_REG_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_REG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_REG_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_REG_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_REG_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_REG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_REG_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_REG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_REG_2]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_REG_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_REG_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_REG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_REG_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_REG_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_REG_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_REG_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_REG_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_REG_2]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_REG_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_REG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_REG_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_REG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_REG_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_REG_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_REG_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_REG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_REG_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_REG_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_REG_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_REG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_REG_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_REG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_REG_3]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_REG_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_REG_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_REG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_REG_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_REG_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_REG_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_REG_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_REG_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_REG_3]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_REG_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_REG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_REG_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_0]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_OCR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_0]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_1]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_OCR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_1]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_2]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_OCR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_2]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_3]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_OCR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_3]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_4]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_OCR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_4]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_4]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_4]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_5]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_OCR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_5]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_5]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_5]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_6]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_OCR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_6]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_6]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_6]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_7]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_OCR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_7]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_7]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_7]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_8]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_8]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_8]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_OCR_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_8]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_8]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_8]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_8]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_9]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_9]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_9]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_OCR_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_9]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_9]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_9]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_9]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_10]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_10]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_10]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_OCR_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_10]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_10]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_10]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_10]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_11]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_11]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_11]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_OCR_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_11]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_11]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_11]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_11]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_12]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_12]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_12]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_OCR_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_12]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_12]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_12]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_12]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_13]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_13]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_13]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_13]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_OCR_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_13]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_13]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_13]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_13]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_13]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_14]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_14]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_14]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_14]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_OCR_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_14]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_14]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_14]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_14]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_14]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_15]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_15]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_15]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_15]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK0_OCR_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_15]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_15]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK0_OCR_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_15]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_15]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK0_OCR_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK0_OCR_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK0_OCR_15]

//>> PREP_[CS_SM1_SNP_MISC_CERR_MESSAGE1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_SNP_MISC_CERR_MESSAGE1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_CERR_MESSAGE1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_SNP_MISC_CERR_MESSAGE1]

//>> GET_[CS_SM1_SNP_MISC_CERR_MESSAGE1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_SNP_MISC_CERR_MESSAGE1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_CERR_MESSAGE1;
#endif
    return fapi2::getScom(i_target, CS_SM1_SNP_MISC_CERR_MESSAGE1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_MESSAGE1]

//>> PUT_[CS_SM1_SNP_MISC_CERR_MESSAGE1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_SNP_MISC_CERR_MESSAGE1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_MESSAGE1));
#endif
    return fapi2::putScom(i_target, CS_SM1_SNP_MISC_CERR_MESSAGE1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_SNP_MISC_CERR_MESSAGE1]


//>> SET_[CS_SM1_SNP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_MESSAGE1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1,
           CS_SM1_SNP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1]

//>> SET_[CS_SM1_SNP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_MESSAGE1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1,
           CS_SM1_SNP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1]

//>> GET_[CS_SM1_SNP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_MESSAGE1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1,
           CS_SM1_SNP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1]

//>> PREP_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3;
#endif
    return fapi2::getScom(i_target, CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3]

//>> PUT_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return fapi2::putScom(i_target, CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3]


//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_TAG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_TAG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_TAG,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_TAG]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_TAG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_TAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_TAG,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_TAG]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_TAG]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_TAG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_TAG,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_TAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_TAG]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_WREND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_WREND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_WREND,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_WREND]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_WREND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_WREND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_WREND,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_WREND]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_WREND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_WREND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_WREND,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_WREND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC3_WREND]

//>> PREP_[CS_SM1_SNP_MISC_DEBUG1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_SNP_MISC_DEBUG1_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_DEBUG1_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_SNP_MISC_DEBUG1_CONFIG]

//>> GET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_SNP_MISC_DEBUG1_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_DEBUG1_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM1_SNP_MISC_DEBUG1_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG]

//>> PUT_[CS_SM1_SNP_MISC_DEBUG1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_SNP_MISC_DEBUG1_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG1_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM1_SNP_MISC_DEBUG1_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_SNP_MISC_DEBUG1_CONFIG]


//>> SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD0,
           CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD0]

//>> SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD0,
           CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD0]

//>> GET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD0,
           CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD0]

//>> SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD1,
           CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD1]

//>> SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD1,
           CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD1]

//>> GET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD1,
           CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD1]

//>> SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD2,
           CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD2]

//>> SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD2,
           CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD2]

//>> GET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD2,
           CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD2]

//>> SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD3,
           CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD3]

//>> SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD3,
           CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD3]

//>> GET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD3,
           CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD3]

//>> SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD4,
           CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD4]

//>> SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD4,
           CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD4]

//>> GET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD4,
           CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD4]

//>> SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD5,
           CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD5]

//>> SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD5,
           CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD5]

//>> GET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD5,
           CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD5]

//>> SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD6,
           CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD6]

//>> SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD6,
           CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD6]

//>> GET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD6,
           CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD6]

//>> SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD7,
           CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD7]

//>> SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD7,
           CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD7]

//>> GET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD7,
           CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD7]

//>> SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD8,
           CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD8]

//>> SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD8,
           CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD8]

//>> GET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD8,
           CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD8_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD8]

//>> SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD9,
           CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD9]

//>> SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD9,
           CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD9]

//>> GET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD9,
           CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD9]

//>> SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD10,
           CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD10]

//>> SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD10,
           CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD10]

//>> GET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD10,
           CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_POD10]

//>> SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG1_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG1_CONFIG_RESERVED1,
           CS_SM1_SNP_MISC_DEBUG1_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_DEBUG1_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_RESERVED1]

//>> SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG1_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG1_CONFIG_RESERVED1,
           CS_SM1_SNP_MISC_DEBUG1_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_DEBUG1_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_RESERVED1]

//>> GET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_DEBUG1_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_DEBUG1_CONFIG_RESERVED1,
           CS_SM1_SNP_MISC_DEBUG1_CONFIG_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_DEBUG1_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_RESERVED1]

//>> SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG1_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_ACT]

//>> SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG1_CONFIG_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG1_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_ACT]

//>> SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_DEBUG1_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_ACT]

//>> CLEAR_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_DEBUG1_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_ACT]

//>> GET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_DEBUG1_CONFIG_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_ACT]

//>> GET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_ACT]
static inline bool GET_CS_SM1_SNP_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_DEBUG1_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_DEBUG1_CONFIG_ACT]

//>> PREP_[CS_SM1_SNP_MISC_PERF_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_SNP_MISC_PERF_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_PERF_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_SNP_MISC_PERF_CONFIG]

//>> GET_[CS_SM1_SNP_MISC_PERF_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_SNP_MISC_PERF_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_PERF_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM1_SNP_MISC_PERF_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_PERF_CONFIG]

//>> PUT_[CS_SM1_SNP_MISC_PERF_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_SNP_MISC_PERF_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM1_SNP_MISC_PERF_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_SNP_MISC_PERF_CONFIG]


//>> SET_[CS_SM1_SNP_MISC_PERF_CONFIG_EVENT0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PERF_CONFIG_EVENT0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_PERF_CONFIG_EVENT0,
           CS_SM1_SNP_MISC_PERF_CONFIG_EVENT0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_CONFIG_EVENT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PERF_CONFIG_EVENT0]

//>> SET_[CS_SM1_SNP_MISC_PERF_CONFIG_EVENT0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PERF_CONFIG_EVENT0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_PERF_CONFIG_EVENT0,
           CS_SM1_SNP_MISC_PERF_CONFIG_EVENT0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_CONFIG_EVENT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PERF_CONFIG_EVENT0]

//>> GET_[CS_SM1_SNP_MISC_PERF_CONFIG_EVENT0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_PERF_CONFIG_EVENT0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_PERF_CONFIG_EVENT0,
           CS_SM1_SNP_MISC_PERF_CONFIG_EVENT0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_CONFIG_EVENT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_PERF_CONFIG_EVENT0]

//>> SET_[CS_SM1_SNP_MISC_PERF_CONFIG_EVENT1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PERF_CONFIG_EVENT1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_PERF_CONFIG_EVENT1,
           CS_SM1_SNP_MISC_PERF_CONFIG_EVENT1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_CONFIG_EVENT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PERF_CONFIG_EVENT1]

//>> SET_[CS_SM1_SNP_MISC_PERF_CONFIG_EVENT1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PERF_CONFIG_EVENT1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_PERF_CONFIG_EVENT1,
           CS_SM1_SNP_MISC_PERF_CONFIG_EVENT1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_CONFIG_EVENT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PERF_CONFIG_EVENT1]

//>> GET_[CS_SM1_SNP_MISC_PERF_CONFIG_EVENT1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_PERF_CONFIG_EVENT1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_PERF_CONFIG_EVENT1,
           CS_SM1_SNP_MISC_PERF_CONFIG_EVENT1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_CONFIG_EVENT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_PERF_CONFIG_EVENT1]

//>> SET_[CS_SM1_SNP_MISC_PERF_CONFIG_EVENT2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PERF_CONFIG_EVENT2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_PERF_CONFIG_EVENT2,
           CS_SM1_SNP_MISC_PERF_CONFIG_EVENT2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_CONFIG_EVENT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PERF_CONFIG_EVENT2]

//>> SET_[CS_SM1_SNP_MISC_PERF_CONFIG_EVENT2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PERF_CONFIG_EVENT2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_PERF_CONFIG_EVENT2,
           CS_SM1_SNP_MISC_PERF_CONFIG_EVENT2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_CONFIG_EVENT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PERF_CONFIG_EVENT2]

//>> GET_[CS_SM1_SNP_MISC_PERF_CONFIG_EVENT2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_PERF_CONFIG_EVENT2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_PERF_CONFIG_EVENT2,
           CS_SM1_SNP_MISC_PERF_CONFIG_EVENT2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_CONFIG_EVENT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_PERF_CONFIG_EVENT2]

//>> SET_[CS_SM1_SNP_MISC_PERF_CONFIG_EVENT3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PERF_CONFIG_EVENT3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_PERF_CONFIG_EVENT3,
           CS_SM1_SNP_MISC_PERF_CONFIG_EVENT3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_CONFIG_EVENT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PERF_CONFIG_EVENT3]

//>> SET_[CS_SM1_SNP_MISC_PERF_CONFIG_EVENT3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PERF_CONFIG_EVENT3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_PERF_CONFIG_EVENT3,
           CS_SM1_SNP_MISC_PERF_CONFIG_EVENT3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_CONFIG_EVENT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PERF_CONFIG_EVENT3]

//>> GET_[CS_SM1_SNP_MISC_PERF_CONFIG_EVENT3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_PERF_CONFIG_EVENT3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_PERF_CONFIG_EVENT3,
           CS_SM1_SNP_MISC_PERF_CONFIG_EVENT3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_CONFIG_EVENT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_PERF_CONFIG_EVENT3]

//>> SET_[CS_SM1_SNP_MISC_PERF_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PERF_CONFIG_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_PERF_CONFIG_RESERVED2,
           CS_SM1_SNP_MISC_PERF_CONFIG_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PERF_CONFIG_RESERVED2]

//>> SET_[CS_SM1_SNP_MISC_PERF_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PERF_CONFIG_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_PERF_CONFIG_RESERVED2,
           CS_SM1_SNP_MISC_PERF_CONFIG_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PERF_CONFIG_RESERVED2]

//>> GET_[CS_SM1_SNP_MISC_PERF_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_PERF_CONFIG_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_PERF_CONFIG_RESERVED2,
           CS_SM1_SNP_MISC_PERF_CONFIG_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_PERF_CONFIG_RESERVED2]

//>> SET_[CS_SM1_SNP_MISC_PERF_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_PERF_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PERF_CONFIG_ACT]

//>> SET_[CS_SM1_SNP_MISC_PERF_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PERF_CONFIG_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_PERF_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PERF_CONFIG_ACT]

//>> SET_[CS_SM1_SNP_MISC_PERF_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_PERF_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PERF_CONFIG_ACT]

//>> CLEAR_[CS_SM1_SNP_MISC_PERF_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_PERF_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_PERF_CONFIG_ACT]

//>> GET_[CS_SM1_SNP_MISC_PERF_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_PERF_CONFIG_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_PERF_CONFIG_ACT]

//>> GET_[CS_SM1_SNP_MISC_PERF_CONFIG_ACT]
static inline bool GET_CS_SM1_SNP_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_CONFIG));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_PERF_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_PERF_CONFIG_ACT]

//>> PREP_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_SNP_MISC_PERF_MASK_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_PERF_MASK_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG]

//>> GET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_SNP_MISC_PERF_MASK_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_PERF_MASK_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM1_SNP_MISC_PERF_MASK_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG]

//>> PUT_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_SNP_MISC_PERF_MASK_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM1_SNP_MISC_PERF_MASK_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG]


//>> SET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS,
           CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS]

//>> SET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS,
           CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS]

//>> GET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS,
           CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS]

//>> SET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_TTYPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PERF_MASK_CONFIG_TTYPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_PERF_MASK_CONFIG_TTYPE,
           CS_SM1_SNP_MISC_PERF_MASK_CONFIG_TTYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_MASK_CONFIG_TTYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_TTYPE]

//>> SET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_TTYPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PERF_MASK_CONFIG_TTYPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_PERF_MASK_CONFIG_TTYPE,
           CS_SM1_SNP_MISC_PERF_MASK_CONFIG_TTYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_MASK_CONFIG_TTYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_TTYPE]

//>> GET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_TTYPE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_PERF_MASK_CONFIG_TTYPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_PERF_MASK_CONFIG_TTYPE,
           CS_SM1_SNP_MISC_PERF_MASK_CONFIG_TTYPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_MASK_CONFIG_TTYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_TTYPE]

//>> SET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_TSIZE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PERF_MASK_CONFIG_TSIZE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_PERF_MASK_CONFIG_TSIZE,
           CS_SM1_SNP_MISC_PERF_MASK_CONFIG_TSIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_MASK_CONFIG_TSIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_TSIZE]

//>> SET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_TSIZE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PERF_MASK_CONFIG_TSIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_PERF_MASK_CONFIG_TSIZE,
           CS_SM1_SNP_MISC_PERF_MASK_CONFIG_TSIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_MASK_CONFIG_TSIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_TSIZE]

//>> GET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_TSIZE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_PERF_MASK_CONFIG_TSIZE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_PERF_MASK_CONFIG_TSIZE,
           CS_SM1_SNP_MISC_PERF_MASK_CONFIG_TSIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_MASK_CONFIG_TSIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_TSIZE]

//>> SET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_NVBE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PERF_MASK_CONFIG_NVBE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_PERF_MASK_CONFIG_NVBE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_MASK_CONFIG_NVBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_NVBE]

//>> SET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_NVBE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PERF_MASK_CONFIG_NVBE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_PERF_MASK_CONFIG_NVBE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_MASK_CONFIG_NVBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_NVBE]

//>> SET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_NVBE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PERF_MASK_CONFIG_NVBE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_PERF_MASK_CONFIG_NVBE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_MASK_CONFIG_NVBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_NVBE]

//>> CLEAR_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_NVBE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_PERF_MASK_CONFIG_NVBE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_PERF_MASK_CONFIG_NVBE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_MASK_CONFIG_NVBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_NVBE]

//>> GET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_NVBE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_PERF_MASK_CONFIG_NVBE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_PERF_MASK_CONFIG_NVBE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_MASK_CONFIG_NVBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_NVBE]

//>> GET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_NVBE]
static inline bool GET_CS_SM1_SNP_MISC_PERF_MASK_CONFIG_NVBE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_PERF_MASK_CONFIG_NVBE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_MASK_CONFIG_NVBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_NVBE]

//>> SET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_UT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PERF_MASK_CONFIG_UT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_PERF_MASK_CONFIG_UT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_MASK_CONFIG_UT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_UT]

//>> SET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_UT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PERF_MASK_CONFIG_UT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_PERF_MASK_CONFIG_UT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_MASK_CONFIG_UT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_UT]

//>> SET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_UT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PERF_MASK_CONFIG_UT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_PERF_MASK_CONFIG_UT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_MASK_CONFIG_UT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_UT]

//>> CLEAR_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_UT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_PERF_MASK_CONFIG_UT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_PERF_MASK_CONFIG_UT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_MASK_CONFIG_UT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_UT]

//>> GET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_UT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_PERF_MASK_CONFIG_UT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_PERF_MASK_CONFIG_UT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_MASK_CONFIG_UT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_UT]

//>> GET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_UT]
static inline bool GET_CS_SM1_SNP_MISC_PERF_MASK_CONFIG_UT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_PERF_MASK_CONFIG_UT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_MASK_CONFIG_UT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_UT]

//>> SET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ATYPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ATYPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ATYPE,
           CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ATYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ATYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ATYPE]

//>> SET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ATYPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ATYPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ATYPE,
           CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ATYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ATYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ATYPE]

//>> GET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ATYPE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ATYPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ATYPE,
           CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ATYPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ATYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ATYPE]

//>> SET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ALLOC]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ALLOC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ALLOC,
           CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ALLOC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ALLOC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ALLOC]

//>> SET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ALLOC]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ALLOC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ALLOC,
           CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ALLOC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ALLOC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ALLOC]

//>> GET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ALLOC]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ALLOC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ALLOC,
           CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ALLOC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ALLOC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_PERF_MASK_CONFIG_ALLOC]

//>> PREP_[CS_SM2_MCP_MISC_CERR_MESSAGE2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_MCP_MISC_CERR_MESSAGE2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_CERR_MESSAGE2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_MCP_MISC_CERR_MESSAGE2]

//>> GET_[CS_SM2_MCP_MISC_CERR_MESSAGE2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_MCP_MISC_CERR_MESSAGE2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_CERR_MESSAGE2;
#endif
    return fapi2::getScom(i_target, CS_SM2_MCP_MISC_CERR_MESSAGE2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MESSAGE2]

//>> PUT_[CS_SM2_MCP_MISC_CERR_MESSAGE2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_MCP_MISC_CERR_MESSAGE2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MESSAGE2));
#endif
    return fapi2::putScom(i_target, CS_SM2_MCP_MISC_CERR_MESSAGE2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_MCP_MISC_CERR_MESSAGE2]


//>> SET_[CS_SM2_MCP_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MESSAGE2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2,
           CS_SM2_MCP_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2]

//>> SET_[CS_SM2_MCP_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MESSAGE2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2,
           CS_SM2_MCP_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2]

//>> GET_[CS_SM2_MCP_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MESSAGE2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2,
           CS_SM2_MCP_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2]

//>> PREP_[CS_SM2_MCP_MISC_EPSILON_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_MCP_MISC_EPSILON_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_EPSILON_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_MCP_MISC_EPSILON_CONFIG]

//>> GET_[CS_SM2_MCP_MISC_EPSILON_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_MCP_MISC_EPSILON_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_EPSILON_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM2_MCP_MISC_EPSILON_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_EPSILON_CONFIG]

//>> PUT_[CS_SM2_MCP_MISC_EPSILON_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_MCP_MISC_EPSILON_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_EPSILON_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM2_MCP_MISC_EPSILON_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_MCP_MISC_EPSILON_CONFIG]


//>> SET_[CS_SM2_MCP_MISC_EPSILON_CONFIG_RATE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_EPSILON_CONFIG_RATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_EPSILON_CONFIG_RATE,
           CS_SM2_MCP_MISC_EPSILON_CONFIG_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_EPSILON_CONFIG_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_EPSILON_CONFIG_RATE]

//>> SET_[CS_SM2_MCP_MISC_EPSILON_CONFIG_RATE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_EPSILON_CONFIG_RATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_EPSILON_CONFIG_RATE,
           CS_SM2_MCP_MISC_EPSILON_CONFIG_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_EPSILON_CONFIG_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_EPSILON_CONFIG_RATE]

//>> GET_[CS_SM2_MCP_MISC_EPSILON_CONFIG_RATE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_EPSILON_CONFIG_RATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_EPSILON_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_EPSILON_CONFIG_RATE,
           CS_SM2_MCP_MISC_EPSILON_CONFIG_RATE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_EPSILON_CONFIG_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_EPSILON_CONFIG_RATE]

//>> SET_[CS_SM2_MCP_MISC_EPSILON_CONFIG_W0_COUNT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_EPSILON_CONFIG_W0_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_EPSILON_CONFIG_W0_COUNT,
           CS_SM2_MCP_MISC_EPSILON_CONFIG_W0_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_EPSILON_CONFIG_W0_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_EPSILON_CONFIG_W0_COUNT]

//>> SET_[CS_SM2_MCP_MISC_EPSILON_CONFIG_W0_COUNT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_EPSILON_CONFIG_W0_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_EPSILON_CONFIG_W0_COUNT,
           CS_SM2_MCP_MISC_EPSILON_CONFIG_W0_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_EPSILON_CONFIG_W0_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_EPSILON_CONFIG_W0_COUNT]

//>> GET_[CS_SM2_MCP_MISC_EPSILON_CONFIG_W0_COUNT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_EPSILON_CONFIG_W0_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_EPSILON_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_EPSILON_CONFIG_W0_COUNT,
           CS_SM2_MCP_MISC_EPSILON_CONFIG_W0_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_EPSILON_CONFIG_W0_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_EPSILON_CONFIG_W0_COUNT]

//>> SET_[CS_SM2_MCP_MISC_EPSILON_CONFIG_W1_COUNT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_EPSILON_CONFIG_W1_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_EPSILON_CONFIG_W1_COUNT,
           CS_SM2_MCP_MISC_EPSILON_CONFIG_W1_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_EPSILON_CONFIG_W1_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_EPSILON_CONFIG_W1_COUNT]

//>> SET_[CS_SM2_MCP_MISC_EPSILON_CONFIG_W1_COUNT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_EPSILON_CONFIG_W1_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_EPSILON_CONFIG_W1_COUNT,
           CS_SM2_MCP_MISC_EPSILON_CONFIG_W1_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_EPSILON_CONFIG_W1_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_EPSILON_CONFIG_W1_COUNT]

//>> GET_[CS_SM2_MCP_MISC_EPSILON_CONFIG_W1_COUNT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_EPSILON_CONFIG_W1_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_EPSILON_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_EPSILON_CONFIG_W1_COUNT,
           CS_SM2_MCP_MISC_EPSILON_CONFIG_W1_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_EPSILON_CONFIG_W1_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_EPSILON_CONFIG_W1_COUNT]

//>> SET_[CS_SM2_MCP_MISC_EPSILON_CONFIG_R0_COUNT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_EPSILON_CONFIG_R0_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_EPSILON_CONFIG_R0_COUNT,
           CS_SM2_MCP_MISC_EPSILON_CONFIG_R0_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_EPSILON_CONFIG_R0_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_EPSILON_CONFIG_R0_COUNT]

//>> SET_[CS_SM2_MCP_MISC_EPSILON_CONFIG_R0_COUNT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_EPSILON_CONFIG_R0_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_EPSILON_CONFIG_R0_COUNT,
           CS_SM2_MCP_MISC_EPSILON_CONFIG_R0_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_EPSILON_CONFIG_R0_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_EPSILON_CONFIG_R0_COUNT]

//>> GET_[CS_SM2_MCP_MISC_EPSILON_CONFIG_R0_COUNT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_EPSILON_CONFIG_R0_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_EPSILON_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_EPSILON_CONFIG_R0_COUNT,
           CS_SM2_MCP_MISC_EPSILON_CONFIG_R0_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_EPSILON_CONFIG_R0_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_EPSILON_CONFIG_R0_COUNT]

//>> SET_[CS_SM2_MCP_MISC_EPSILON_CONFIG_R1_COUNT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_EPSILON_CONFIG_R1_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_EPSILON_CONFIG_R1_COUNT,
           CS_SM2_MCP_MISC_EPSILON_CONFIG_R1_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_EPSILON_CONFIG_R1_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_EPSILON_CONFIG_R1_COUNT]

//>> SET_[CS_SM2_MCP_MISC_EPSILON_CONFIG_R1_COUNT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_EPSILON_CONFIG_R1_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_EPSILON_CONFIG_R1_COUNT,
           CS_SM2_MCP_MISC_EPSILON_CONFIG_R1_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_EPSILON_CONFIG_R1_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_EPSILON_CONFIG_R1_COUNT]

//>> GET_[CS_SM2_MCP_MISC_EPSILON_CONFIG_R1_COUNT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_EPSILON_CONFIG_R1_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_EPSILON_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_EPSILON_CONFIG_R1_COUNT,
           CS_SM2_MCP_MISC_EPSILON_CONFIG_R1_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_EPSILON_CONFIG_R1_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_EPSILON_CONFIG_R1_COUNT]

//>> SET_[CS_SM2_MCP_MISC_EPSILON_CONFIG_R2_COUNT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_EPSILON_CONFIG_R2_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_EPSILON_CONFIG_R2_COUNT,
           CS_SM2_MCP_MISC_EPSILON_CONFIG_R2_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_EPSILON_CONFIG_R2_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_EPSILON_CONFIG_R2_COUNT]

//>> SET_[CS_SM2_MCP_MISC_EPSILON_CONFIG_R2_COUNT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_EPSILON_CONFIG_R2_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_EPSILON_CONFIG_R2_COUNT,
           CS_SM2_MCP_MISC_EPSILON_CONFIG_R2_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_EPSILON_CONFIG_R2_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_EPSILON_CONFIG_R2_COUNT]

//>> GET_[CS_SM2_MCP_MISC_EPSILON_CONFIG_R2_COUNT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_EPSILON_CONFIG_R2_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_EPSILON_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_EPSILON_CONFIG_R2_COUNT,
           CS_SM2_MCP_MISC_EPSILON_CONFIG_R2_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_EPSILON_CONFIG_R2_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_EPSILON_CONFIG_R2_COUNT]

//>> PREP_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0;
#endif
    return fapi2::getScom(i_target, CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0]

//>> PUT_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return fapi2::putScom(i_target, CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0]


//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]

//>> PREP_[CS_SM2_SNP_MISC_PERF_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_SNP_MISC_PERF_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_PERF_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_SNP_MISC_PERF_CONFIG]

//>> GET_[CS_SM2_SNP_MISC_PERF_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_SNP_MISC_PERF_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_PERF_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM2_SNP_MISC_PERF_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_PERF_CONFIG]

//>> PUT_[CS_SM2_SNP_MISC_PERF_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_SNP_MISC_PERF_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM2_SNP_MISC_PERF_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_SNP_MISC_PERF_CONFIG]


//>> SET_[CS_SM2_SNP_MISC_PERF_CONFIG_EVENT0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_CONFIG_EVENT0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PERF_CONFIG_EVENT0,
           CS_SM2_SNP_MISC_PERF_CONFIG_EVENT0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_CONFIG_EVENT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PERF_CONFIG_EVENT0]

//>> SET_[CS_SM2_SNP_MISC_PERF_CONFIG_EVENT0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_CONFIG_EVENT0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PERF_CONFIG_EVENT0,
           CS_SM2_SNP_MISC_PERF_CONFIG_EVENT0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_CONFIG_EVENT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PERF_CONFIG_EVENT0]

//>> GET_[CS_SM2_SNP_MISC_PERF_CONFIG_EVENT0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_PERF_CONFIG_EVENT0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_PERF_CONFIG_EVENT0,
           CS_SM2_SNP_MISC_PERF_CONFIG_EVENT0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_CONFIG_EVENT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_PERF_CONFIG_EVENT0]

//>> SET_[CS_SM2_SNP_MISC_PERF_CONFIG_EVENT1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_CONFIG_EVENT1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PERF_CONFIG_EVENT1,
           CS_SM2_SNP_MISC_PERF_CONFIG_EVENT1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_CONFIG_EVENT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PERF_CONFIG_EVENT1]

//>> SET_[CS_SM2_SNP_MISC_PERF_CONFIG_EVENT1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_CONFIG_EVENT1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PERF_CONFIG_EVENT1,
           CS_SM2_SNP_MISC_PERF_CONFIG_EVENT1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_CONFIG_EVENT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PERF_CONFIG_EVENT1]

//>> GET_[CS_SM2_SNP_MISC_PERF_CONFIG_EVENT1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_PERF_CONFIG_EVENT1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_PERF_CONFIG_EVENT1,
           CS_SM2_SNP_MISC_PERF_CONFIG_EVENT1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_CONFIG_EVENT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_PERF_CONFIG_EVENT1]

//>> SET_[CS_SM2_SNP_MISC_PERF_CONFIG_EVENT2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_CONFIG_EVENT2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PERF_CONFIG_EVENT2,
           CS_SM2_SNP_MISC_PERF_CONFIG_EVENT2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_CONFIG_EVENT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PERF_CONFIG_EVENT2]

//>> SET_[CS_SM2_SNP_MISC_PERF_CONFIG_EVENT2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_CONFIG_EVENT2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PERF_CONFIG_EVENT2,
           CS_SM2_SNP_MISC_PERF_CONFIG_EVENT2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_CONFIG_EVENT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PERF_CONFIG_EVENT2]

//>> GET_[CS_SM2_SNP_MISC_PERF_CONFIG_EVENT2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_PERF_CONFIG_EVENT2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_PERF_CONFIG_EVENT2,
           CS_SM2_SNP_MISC_PERF_CONFIG_EVENT2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_CONFIG_EVENT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_PERF_CONFIG_EVENT2]

//>> SET_[CS_SM2_SNP_MISC_PERF_CONFIG_EVENT3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_CONFIG_EVENT3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PERF_CONFIG_EVENT3,
           CS_SM2_SNP_MISC_PERF_CONFIG_EVENT3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_CONFIG_EVENT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PERF_CONFIG_EVENT3]

//>> SET_[CS_SM2_SNP_MISC_PERF_CONFIG_EVENT3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_CONFIG_EVENT3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PERF_CONFIG_EVENT3,
           CS_SM2_SNP_MISC_PERF_CONFIG_EVENT3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_CONFIG_EVENT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PERF_CONFIG_EVENT3]

//>> GET_[CS_SM2_SNP_MISC_PERF_CONFIG_EVENT3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_PERF_CONFIG_EVENT3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_PERF_CONFIG_EVENT3,
           CS_SM2_SNP_MISC_PERF_CONFIG_EVENT3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_CONFIG_EVENT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_PERF_CONFIG_EVENT3]

//>> SET_[CS_SM2_SNP_MISC_PERF_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_CONFIG_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PERF_CONFIG_RESERVED2,
           CS_SM2_SNP_MISC_PERF_CONFIG_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PERF_CONFIG_RESERVED2]

//>> SET_[CS_SM2_SNP_MISC_PERF_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_CONFIG_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PERF_CONFIG_RESERVED2,
           CS_SM2_SNP_MISC_PERF_CONFIG_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PERF_CONFIG_RESERVED2]

//>> GET_[CS_SM2_SNP_MISC_PERF_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_PERF_CONFIG_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_PERF_CONFIG_RESERVED2,
           CS_SM2_SNP_MISC_PERF_CONFIG_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_PERF_CONFIG_RESERVED2]

//>> SET_[CS_SM2_SNP_MISC_PERF_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PERF_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PERF_CONFIG_ACT]

//>> SET_[CS_SM2_SNP_MISC_PERF_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_CONFIG_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PERF_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PERF_CONFIG_ACT]

//>> SET_[CS_SM2_SNP_MISC_PERF_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_PERF_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PERF_CONFIG_ACT]

//>> CLEAR_[CS_SM2_SNP_MISC_PERF_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_PERF_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_PERF_CONFIG_ACT]

//>> GET_[CS_SM2_SNP_MISC_PERF_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_PERF_CONFIG_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_PERF_CONFIG_ACT]

//>> GET_[CS_SM2_SNP_MISC_PERF_CONFIG_ACT]
static inline bool GET_CS_SM2_SNP_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_CONFIG));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_PERF_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_PERF_CONFIG_ACT]

//>> PREP_[CS_SM3_MCP_MISC_CERR_HOLD2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_MCP_MISC_CERR_HOLD2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_CERR_HOLD2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_MCP_MISC_CERR_HOLD2]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_MCP_MISC_CERR_HOLD2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_CERR_HOLD2;
#endif
    return fapi2::getScom(i_target, CS_SM3_MCP_MISC_CERR_HOLD2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2]

//>> PUT_[CS_SM3_MCP_MISC_CERR_HOLD2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_MCP_MISC_CERR_HOLD2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return fapi2::putScom(i_target, CS_SM3_MCP_MISC_CERR_HOLD2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_MCP_MISC_CERR_HOLD2]


//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_0]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_0]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_1]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_1]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_2]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_2]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_3]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_3]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_4]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_4]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_4]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_4]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_5]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_5]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_5]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_5]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_6]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_6]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_6]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_6]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_7]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_7]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_7]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_7]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_8]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_8]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_8]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_8]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_8]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_8]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_8]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_9]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_9]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_9]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_9]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_9]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_9]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_9]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_10]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_10]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_10]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_10]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_10]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_10]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_10]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_11]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_11]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_11]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_11]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_11]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_11]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_11]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_12]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_12]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_12]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_12]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_12]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_12]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_12]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_13]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_13]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_13]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_13]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_13]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_13]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_13]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_13]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_13]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_14]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_14]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_14]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_14]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_14]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_14]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_14]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_14]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_14]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_15]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_15]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_15]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_15]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_15]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_15]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_15]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_15]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_15]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_16]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_16]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_16]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_16]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_16]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_16]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_16]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_16]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_16]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_17]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_17]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_17]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_17]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_17]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_17]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_17]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_17]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_17]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_18]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_18]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_18]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_18]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_18]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_18]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_18]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_18]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_18]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_19]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_19]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_19]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_19]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_19]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_19]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_19]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_19]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_19]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_20(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_20]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_20(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_20]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_20]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_20]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_20]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_20]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_20(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_20,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_20]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_20]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_20(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_20]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_21(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_21]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_21(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_21]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_21]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_21]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_21]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_21]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_21(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_21,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_21]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_21]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_21(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_21]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_22(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_22]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_22(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_22]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_22]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_22]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_22]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_22]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_22(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_22,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_22]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_22]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_22(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_22]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_23]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_23]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_23]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_23]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_23]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_23]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_23,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_23]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_23]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_23(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_23]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_24]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_24(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_24]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_24]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_24(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_24]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_24]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_24]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_24]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_24]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_24]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_24(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_24,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_24]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_24]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_24(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_24]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_25]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_25(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_25]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_25]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_25(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_25]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_25]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_25]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_25]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_25]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_25]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_25(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_25,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_25]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_25]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_25(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_25]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_26]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_26(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_26]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_26]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_26(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_26]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_26]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_26]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_26]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_26]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_26]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_26(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_26,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_26]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_26]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_26(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_26]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_27]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_27(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_27]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_27]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_27(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_27]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_27]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_27]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_27]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_27]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_27]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_27(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_27,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_27]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_27]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_27(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_27]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_28]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_28(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_28]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_28]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_28(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_28]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_28]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_28]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_28]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_28]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_28]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_28(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_28,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_28]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_28]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_28(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_28]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_29]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_29(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_29]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_29]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_29(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_29]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_29]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_29]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_29]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_29]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_29]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_29(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_29,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_29]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_29]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_29(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_29]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_30]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_30(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_30]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_30]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_30(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_30]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_30]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_30]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_30]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_30]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_30]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_30(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_30,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_30]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_30]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_30(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_30]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_31]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_31(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_31]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_31]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_31(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_31]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_31]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_31]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_31]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_31]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_31]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_31(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_31,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_31]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_31]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_31(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_31]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_32]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_32(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_32]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_32]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_32(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_32]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_32]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_32]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_32]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_32]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_32]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_32(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_32,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_32]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_32]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_32(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_32]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_33]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_33(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_33]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_33]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_33(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_33]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_33]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_33]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_33]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_33]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_33]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_33(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_33,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_33]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_33]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_33(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_33]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_34]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_34(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_34]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_34]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_34(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_34]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_34]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_34]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_34]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_34]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_34]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_34(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_34,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_34]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_34]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_34(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_34]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_35]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_35(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_35]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_35]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_35(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_35]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_35]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_35]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_35]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_35]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_35]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_35(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_35,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_35]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_35]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_35(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_35]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_36]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_36(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_36]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_36]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_36(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_36]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_36]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_36]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_36]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_36]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_36]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_36(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_36,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_36]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_36]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_36(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_36]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_37]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_37(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_37]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_37]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_37(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_37]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_37]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_37]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_37]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_37]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_37]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_37(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_37,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_37]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_37]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_37(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_37]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_38]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_38(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_38]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_38]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_38(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_38]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_38]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_38]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_38]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_38]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_38]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_38(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_38,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_38]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_38]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_38(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_38]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_39]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_39(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_39]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_39]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_39(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_39]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_39]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_39]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_39]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_39]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_39]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_39(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_39,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_39]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_39]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_39(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_39]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_40]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_40(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_40]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_40]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_40(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_40]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_40]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_40]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_40]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_40]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_40]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_40(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_40,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_40]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_40]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_40(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_40]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_41]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_41(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_41]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_41]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_41(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_41]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_41]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_41]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_41]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_41]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_41]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_41(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_41,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_41]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_41]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_41(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_41]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_42]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_42(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_42]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_42]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_42(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_42]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_42]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_42]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_42]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_42]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_42]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_42(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_42,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_42]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_42]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_42(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_42]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_43]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_43(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_43]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_43]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_43(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_43]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_43]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_43]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_43]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_43]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_43]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_43(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_43,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_43]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_43]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_43(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_43]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_44]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_44(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_44]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_44]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_44(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_44]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_44]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_44]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_44]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_44]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_44]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_44(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_44,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_44]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_44]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_44(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_44]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_45]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_45(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_45]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_45]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_45(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_45]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_45]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_45]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_45]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_45]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_45]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_45(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_45,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_45]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_45]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_45(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_45]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_46]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_46(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_46]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_46]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_46(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_46]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_46]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_46]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_46]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_46]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_46]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_46(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_46,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_46]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_46]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_46(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_46]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_47]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_47(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_47]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_47]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_47(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_47]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_47]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_47]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_47]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_47]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_47]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_47(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_47,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_47]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_47]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_47(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_47]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_48]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_48(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_48]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_48]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_48(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_48]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_48]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_48]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_48]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_48]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_48]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_48(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_48,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_48]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_48]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_48(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_48]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_49]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_49(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_49]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_49]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_49(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_49]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_49]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_49]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_49]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_49]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_49]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_49(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_49,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_49]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_49]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_49(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_49]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_50]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_50(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_50]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_50]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_50(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_50]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_50]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_50]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_50]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_50]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_50]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_50(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_50,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_50]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_50]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_50(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_50]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_51]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_51(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_51]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_51]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_51(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_51]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_51]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_51]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_51]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_51]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_51]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_51(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_51,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_51]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_51]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_51(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_51]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_52]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_52(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_52]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_52]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_52(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_52]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_52]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_52]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_52]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_52]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_52]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_52(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_52,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_52]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_52]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_52(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_52]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_53]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_53(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_53]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_53]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_53(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_53]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_53]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_53]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_53]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_53]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_53]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_53(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_53,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_53]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_53]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_53(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_53]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_54]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_54(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_54,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_54]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_54]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_54(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_54,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_54]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_54]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_54(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_54]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_54]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_54(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_54]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_54]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_54(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_54,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_54]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_54]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_54(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_54]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_55]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_55(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_55,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_55]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_55]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_55(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_55,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_55]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_55]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_55(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_55]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_55]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_55(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_55]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_55]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_55(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_55,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_55]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_55]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_55(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_55]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_56]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_56(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_56,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_56]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_56]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_56(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_56,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_56]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_56]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_56(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_56]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_56]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_56(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_56]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_56]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_56(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_56,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_56]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_56]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_56(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_56]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_57]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_57(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_57,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_57]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_57]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_57(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_57,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_57]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_57]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_57(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_57]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_57]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_57(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_57]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_57]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_57(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_57,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_57]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_57]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_57(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_57]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_58]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_58(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_58,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_58]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_58]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_58(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_58,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_58]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_58]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_58(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_58]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_58]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_58(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_58]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_58]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_58(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_58,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_58]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_58]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_58(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_58]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_59]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_59(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_59,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_59]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_59]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_59(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_59,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_59]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_59]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_59(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_59]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_59]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_59(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_59]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_59]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_59(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_59,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_59]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_59]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_59(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_59]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_60]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_60(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_60,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_60]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_60]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_60(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_60,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_60]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_60]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_60(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_60]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_60]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_60(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_60]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_60]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_60(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_60,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_60]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_60]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_60(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_60]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_61]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_61(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_61,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_61]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_61]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_61(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_61,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_61]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_61]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_61(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_61]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_61]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_61(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_61]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_61]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_61(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_61,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_61]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_61]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_61(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_61]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_62]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_62(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_62,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_62]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_62]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_62(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_62,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_62]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_62]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_62(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_62]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_62]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_62(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_62]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_62]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_62(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_62,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_62]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_62]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_62(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_62]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_63]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_63(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_63,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_63]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_63]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_63(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD2_63,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_63]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD2_63]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD2_63(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD2_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD2_63]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_63]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD2_63(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD2_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD2_63]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_63]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD2_63(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD2_63,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_63]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD2_63]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD2_63(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD2_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD2_63]

//>> PREP_[CS_SM3_MCP_MISC_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_MCP_MISC_CONFIG1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_CONFIG1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_MCP_MISC_CONFIG1]

//>> GET_[CS_SM3_MCP_MISC_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_MCP_MISC_CONFIG1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_CONFIG1;
#endif
    return fapi2::getScom(i_target, CS_SM3_MCP_MISC_CONFIG1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG1]

//>> PUT_[CS_SM3_MCP_MISC_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_MCP_MISC_CONFIG1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return fapi2::putScom(i_target, CS_SM3_MCP_MISC_CONFIG1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_MCP_MISC_CONFIG1]


//>> SET_[CS_SM3_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK,
           CS_SM3_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK,
           CS_SM3_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK]

//>> GET_[CS_SM3_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK,
           CS_SM3_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ,
           CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ,
           CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ]

//>> GET_[CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ,
           CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST,
           CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST,
           CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST]

//>> GET_[CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST,
           CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB,
           CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB,
           CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB]

//>> GET_[CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB,
           CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT,
           CS_SM3_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT,
           CS_SM3_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT]

//>> GET_[CS_SM3_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT,
           CS_SM3_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_1_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_1_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG1_1_RESERVED2,
           CS_SM3_MCP_MISC_CONFIG1_1_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_1_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_1_RESERVED2]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_1_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_1_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG1_1_RESERVED2,
           CS_SM3_MCP_MISC_CONFIG1_1_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_1_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_1_RESERVED2]

//>> GET_[CS_SM3_MCP_MISC_CONFIG1_1_RESERVED2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG1_1_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG1_1_RESERVED2,
           CS_SM3_MCP_MISC_CONFIG1_1_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_1_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG1_1_RESERVED2]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ]

//>> GET_[CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ]

//>> GET_[CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ]

//>> GET_[CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ]

//>> GET_[CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT,
           CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT,
           CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT]

//>> GET_[CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT,
           CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG]

//>> GET_[CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG]

//>> GET_[CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG]

//>> GET_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG]

//>> GET_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED]

//>> GET_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED]

//>> GET_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT]

//>> GET_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT]

//>> GET_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED]

//>> GET_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED]

//>> GET_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE]

//>> GET_[CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE]

//>> GET_[CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE]

//>> GET_[CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE]

//>> GET_[CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY]

//>> GET_[CS_SM3_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY]

//>> GET_[CS_SM3_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE]

//>> GET_[CS_SM3_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE]

//>> GET_[CS_SM3_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS]

//>> GET_[CS_SM3_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS]

//>> GET_[CS_SM3_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_1_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_1_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG1_1_RESERVED,
           CS_SM3_MCP_MISC_CONFIG1_1_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_1_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_1_RESERVED]

//>> SET_[CS_SM3_MCP_MISC_CONFIG1_1_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG1_1_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG1_1_RESERVED,
           CS_SM3_MCP_MISC_CONFIG1_1_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_1_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG1_1_RESERVED]

//>> GET_[CS_SM3_MCP_MISC_CONFIG1_1_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG1_1_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG1_1_RESERVED,
           CS_SM3_MCP_MISC_CONFIG1_1_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG1_1_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG1_1_RESERVED]

//>> PREP_[CS_SM3_MCP_MISC_DEBUG3_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_MCP_MISC_DEBUG3_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_DEBUG3_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_MCP_MISC_DEBUG3_CONFIG]

//>> GET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_MCP_MISC_DEBUG3_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_DEBUG3_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM3_MCP_MISC_DEBUG3_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG]

//>> PUT_[CS_SM3_MCP_MISC_DEBUG3_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_MCP_MISC_DEBUG3_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG3_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM3_MCP_MISC_DEBUG3_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_MCP_MISC_DEBUG3_CONFIG]


//>> SET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG3_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE0,
           CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE0]

//>> SET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG3_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE0,
           CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE0]

//>> GET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG3_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE0,
           CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE0]

//>> SET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG3_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE1,
           CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE1]

//>> SET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG3_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE1,
           CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE1]

//>> GET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG3_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE1,
           CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE1]

//>> SET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG3_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE2,
           CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE2]

//>> SET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG3_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE2,
           CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE2]

//>> GET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG3_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE2,
           CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE2]

//>> SET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG3_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE3,
           CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE3]

//>> SET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG3_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE3,
           CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE3]

//>> GET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG3_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE3,
           CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE3]

//>> SET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG3_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE4,
           CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE4]

//>> SET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG3_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE4,
           CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE4]

//>> GET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG3_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE4,
           CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE4]

//>> SET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG3_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE5,
           CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE5]

//>> SET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG3_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE5,
           CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE5]

//>> GET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG3_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE5,
           CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE5]

//>> SET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG3_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE6,
           CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE6]

//>> SET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG3_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE6,
           CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE6]

//>> GET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG3_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE6,
           CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE6]

//>> SET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG3_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE7,
           CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE7]

//>> SET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG3_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE7,
           CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE7]

//>> GET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG3_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE7,
           CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE7]

//>> SET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG3_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE8,
           CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE8]

//>> SET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG3_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE8,
           CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE8]

//>> GET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG3_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE8,
           CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE8_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_BYTE8]

//>> SET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG3_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG3_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG3_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG3_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_ACT]

//>> SET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG3_CONFIG_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG3_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG3_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG3_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_ACT]

//>> SET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG3_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG3_CONFIG));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_DEBUG3_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG3_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_ACT]

//>> CLEAR_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_DEBUG3_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG3_CONFIG));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_DEBUG3_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG3_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_ACT]

//>> GET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_DEBUG3_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG3_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_DEBUG3_CONFIG_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG3_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_ACT]

//>> GET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_ACT]
static inline bool GET_CS_SM3_MCP_MISC_DEBUG3_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG3_CONFIG));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_DEBUG3_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG3_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_DEBUG3_CONFIG_ACT]

//>> PREP_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3;
#endif
    return fapi2::getScom(i_target, CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3]

//>> PUT_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return fapi2::putScom(i_target, CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3]


//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_TAG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_TAG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_TAG,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_TAG]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_TAG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_TAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_TAG,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_TAG]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_TAG]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_TAG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_TAG,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_TAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_TAG]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_WREND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_WREND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_WREND,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_WREND]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_WREND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_WREND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_WREND,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_WREND]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_WREND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_WREND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_WREND,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_WREND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC3_WREND]

//>> PREP_[CS_SM3_SNP_MISC_PERF_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_SNP_MISC_PERF_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_PERF_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_SNP_MISC_PERF_CONFIG]

//>> GET_[CS_SM3_SNP_MISC_PERF_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_SNP_MISC_PERF_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_PERF_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM3_SNP_MISC_PERF_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_PERF_CONFIG]

//>> PUT_[CS_SM3_SNP_MISC_PERF_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_SNP_MISC_PERF_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM3_SNP_MISC_PERF_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_SNP_MISC_PERF_CONFIG]


//>> SET_[CS_SM3_SNP_MISC_PERF_CONFIG_EVENT0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PERF_CONFIG_EVENT0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PERF_CONFIG_EVENT0,
           CS_SM3_SNP_MISC_PERF_CONFIG_EVENT0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_CONFIG_EVENT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PERF_CONFIG_EVENT0]

//>> SET_[CS_SM3_SNP_MISC_PERF_CONFIG_EVENT0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PERF_CONFIG_EVENT0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PERF_CONFIG_EVENT0,
           CS_SM3_SNP_MISC_PERF_CONFIG_EVENT0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_CONFIG_EVENT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PERF_CONFIG_EVENT0]

//>> GET_[CS_SM3_SNP_MISC_PERF_CONFIG_EVENT0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_PERF_CONFIG_EVENT0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_PERF_CONFIG_EVENT0,
           CS_SM3_SNP_MISC_PERF_CONFIG_EVENT0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_CONFIG_EVENT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_PERF_CONFIG_EVENT0]

//>> SET_[CS_SM3_SNP_MISC_PERF_CONFIG_EVENT1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PERF_CONFIG_EVENT1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PERF_CONFIG_EVENT1,
           CS_SM3_SNP_MISC_PERF_CONFIG_EVENT1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_CONFIG_EVENT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PERF_CONFIG_EVENT1]

//>> SET_[CS_SM3_SNP_MISC_PERF_CONFIG_EVENT1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PERF_CONFIG_EVENT1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PERF_CONFIG_EVENT1,
           CS_SM3_SNP_MISC_PERF_CONFIG_EVENT1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_CONFIG_EVENT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PERF_CONFIG_EVENT1]

//>> GET_[CS_SM3_SNP_MISC_PERF_CONFIG_EVENT1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_PERF_CONFIG_EVENT1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_PERF_CONFIG_EVENT1,
           CS_SM3_SNP_MISC_PERF_CONFIG_EVENT1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_CONFIG_EVENT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_PERF_CONFIG_EVENT1]

//>> SET_[CS_SM3_SNP_MISC_PERF_CONFIG_EVENT2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PERF_CONFIG_EVENT2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PERF_CONFIG_EVENT2,
           CS_SM3_SNP_MISC_PERF_CONFIG_EVENT2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_CONFIG_EVENT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PERF_CONFIG_EVENT2]

//>> SET_[CS_SM3_SNP_MISC_PERF_CONFIG_EVENT2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PERF_CONFIG_EVENT2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PERF_CONFIG_EVENT2,
           CS_SM3_SNP_MISC_PERF_CONFIG_EVENT2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_CONFIG_EVENT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PERF_CONFIG_EVENT2]

//>> GET_[CS_SM3_SNP_MISC_PERF_CONFIG_EVENT2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_PERF_CONFIG_EVENT2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_PERF_CONFIG_EVENT2,
           CS_SM3_SNP_MISC_PERF_CONFIG_EVENT2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_CONFIG_EVENT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_PERF_CONFIG_EVENT2]

//>> SET_[CS_SM3_SNP_MISC_PERF_CONFIG_EVENT3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PERF_CONFIG_EVENT3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PERF_CONFIG_EVENT3,
           CS_SM3_SNP_MISC_PERF_CONFIG_EVENT3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_CONFIG_EVENT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PERF_CONFIG_EVENT3]

//>> SET_[CS_SM3_SNP_MISC_PERF_CONFIG_EVENT3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PERF_CONFIG_EVENT3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PERF_CONFIG_EVENT3,
           CS_SM3_SNP_MISC_PERF_CONFIG_EVENT3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_CONFIG_EVENT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PERF_CONFIG_EVENT3]

//>> GET_[CS_SM3_SNP_MISC_PERF_CONFIG_EVENT3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_PERF_CONFIG_EVENT3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_PERF_CONFIG_EVENT3,
           CS_SM3_SNP_MISC_PERF_CONFIG_EVENT3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_CONFIG_EVENT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_PERF_CONFIG_EVENT3]

//>> SET_[CS_SM3_SNP_MISC_PERF_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PERF_CONFIG_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PERF_CONFIG_RESERVED2,
           CS_SM3_SNP_MISC_PERF_CONFIG_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PERF_CONFIG_RESERVED2]

//>> SET_[CS_SM3_SNP_MISC_PERF_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PERF_CONFIG_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PERF_CONFIG_RESERVED2,
           CS_SM3_SNP_MISC_PERF_CONFIG_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PERF_CONFIG_RESERVED2]

//>> GET_[CS_SM3_SNP_MISC_PERF_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_PERF_CONFIG_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_PERF_CONFIG_RESERVED2,
           CS_SM3_SNP_MISC_PERF_CONFIG_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_PERF_CONFIG_RESERVED2]

//>> SET_[CS_SM3_SNP_MISC_PERF_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PERF_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PERF_CONFIG_ACT]

//>> SET_[CS_SM3_SNP_MISC_PERF_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PERF_CONFIG_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PERF_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PERF_CONFIG_ACT]

//>> SET_[CS_SM3_SNP_MISC_PERF_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_PERF_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PERF_CONFIG_ACT]

//>> CLEAR_[CS_SM3_SNP_MISC_PERF_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_CONFIG));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_PERF_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_PERF_CONFIG_ACT]

//>> GET_[CS_SM3_SNP_MISC_PERF_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_PERF_CONFIG_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_PERF_CONFIG_ACT]

//>> GET_[CS_SM3_SNP_MISC_PERF_CONFIG_ACT]
static inline bool GET_CS_SM3_SNP_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_CONFIG));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_PERF_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_PERF_CONFIG_ACT]

//>> PREP_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_SNP_MISC_TOPOLOGY_TABLE0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_TOPOLOGY_TABLE0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0]

//>> GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_TOPOLOGY_TABLE0;
#endif
    return fapi2::getScom(i_target, CS_SM3_SNP_MISC_TOPOLOGY_TABLE0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0]

//>> PUT_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_SNP_MISC_TOPOLOGY_TABLE0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return fapi2::putScom(i_target, CS_SM3_SNP_MISC_TOPOLOGY_TABLE0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0]


//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_ABLE_0_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_ABLE_0_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_ABLE_0_7,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_ABLE_0_7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_ABLE_0_7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_ABLE_0_7]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_ABLE_0_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_ABLE_0_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_ABLE_0_7,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_ABLE_0_7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_ABLE_0_7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_ABLE_0_7]

//>> GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_ABLE_0_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_ABLE_0_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_ABLE_0_7,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_ABLE_0_7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_ABLE_0_7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_ABLE_0_7]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY0,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY0]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY0,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY0]

//>> GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY0,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY0]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY1,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY1]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY1,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY1]

//>> GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY1,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY1]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY2,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY2]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY2,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY2]

//>> GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY2,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY2]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY3,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY3]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY3,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY3]

//>> GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY3,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY3]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY4,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY4]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY4,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY4]

//>> GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY4,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY4]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY5,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY5]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY5,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY5]

//>> GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY5,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY5]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY6,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY6]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY6,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY6]

//>> GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY6,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY6]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY7,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY7]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY7,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY7]

//>> GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY7,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE0_TRY7]

//>> PREP_[MISC_REGS_FREEZE_0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_FREEZE_0_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_FREEZE_0_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_FREEZE_0_CONFIG]

//>> GET_[MISC_REGS_FREEZE_0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_FREEZE_0_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_FREEZE_0_CONFIG;
#endif
    return fapi2::getScom(i_target, MISC_REGS_FREEZE_0_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_FREEZE_0_CONFIG]

//>> PUT_[MISC_REGS_FREEZE_0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_FREEZE_0_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_FREEZE_0_CONFIG));
#endif
    return fapi2::putScom(i_target, MISC_REGS_FREEZE_0_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_FREEZE_0_CONFIG]


//>> SET_[MISC_REGS_FREEZE_0_CONFIG_CONFIG_FREEZE_0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_FREEZE_0_CONFIG_CONFIG_FREEZE_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_FREEZE_0_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_FREEZE_0_CONFIG_CONFIG_FREEZE_0,
           MISC_REGS_FREEZE_0_CONFIG_CONFIG_FREEZE_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_FREEZE_0_CONFIG_CONFIG_FREEZE_0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_FREEZE_0_CONFIG_CONFIG_FREEZE_0]

//>> SET_[MISC_REGS_FREEZE_0_CONFIG_CONFIG_FREEZE_0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_FREEZE_0_CONFIG_CONFIG_FREEZE_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_FREEZE_0_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_FREEZE_0_CONFIG_CONFIG_FREEZE_0,
           MISC_REGS_FREEZE_0_CONFIG_CONFIG_FREEZE_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_FREEZE_0_CONFIG_CONFIG_FREEZE_0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_FREEZE_0_CONFIG_CONFIG_FREEZE_0]

//>> GET_[MISC_REGS_FREEZE_0_CONFIG_CONFIG_FREEZE_0]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_FREEZE_0_CONFIG_CONFIG_FREEZE_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_FREEZE_0_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_FREEZE_0_CONFIG_CONFIG_FREEZE_0,
           MISC_REGS_FREEZE_0_CONFIG_CONFIG_FREEZE_0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_FREEZE_0_CONFIG_CONFIG_FREEZE_0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_FREEZE_0_CONFIG_CONFIG_FREEZE_0]

//>> PREP_[MISC_REGS_INT_LOG_0_PE0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_INT_LOG_0_PE0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_0_PE0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_INT_LOG_0_PE0]

//>> GET_[MISC_REGS_INT_LOG_0_PE0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_INT_LOG_0_PE0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_0_PE0;
#endif
    return fapi2::getScom(i_target, MISC_REGS_INT_LOG_0_PE0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE0]

//>> PUT_[MISC_REGS_INT_LOG_0_PE0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_INT_LOG_0_PE0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE0));
#endif
    return fapi2::putScom(i_target, MISC_REGS_INT_LOG_0_PE0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_INT_LOG_0_PE0]


//>> SET_[MISC_REGS_INT_LOG_0_PE0_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE0_VLD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE0));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE0_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE0_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE0_VLD]

//>> SET_[MISC_REGS_INT_LOG_0_PE0_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE0_VLD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE0));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE0_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE0_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE0_VLD]

//>> SET_[MISC_REGS_INT_LOG_0_PE0_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE0_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE0));
#endif
    return o_data.setBit<MISC_REGS_INT_LOG_0_PE0_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE0_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE0_VLD]

//>> CLEAR_[MISC_REGS_INT_LOG_0_PE0_VLD]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_INT_LOG_0_PE0_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE0));
#endif
    return o_data.clearBit<MISC_REGS_INT_LOG_0_PE0_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE0_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_INT_LOG_0_PE0_VLD]

//>> GET_[MISC_REGS_INT_LOG_0_PE0_VLD]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_0_PE0_VLD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE0));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_0_PE0_VLD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE0_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE0_VLD]

//>> GET_[MISC_REGS_INT_LOG_0_PE0_VLD]
static inline bool GET_MISC_REGS_INT_LOG_0_PE0_VLD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE0));
#endif
    return i_data.getBit<MISC_REGS_INT_LOG_0_PE0_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE0_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE0_VLD]

//>> SET_[MISC_REGS_INT_LOG_0_PE0_LVL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE0_LVL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE0));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE0_LVL,
           MISC_REGS_INT_LOG_0_PE0_LVL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE0_LVL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE0_LVL]

//>> SET_[MISC_REGS_INT_LOG_0_PE0_LVL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE0_LVL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE0));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE0_LVL,
           MISC_REGS_INT_LOG_0_PE0_LVL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE0_LVL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE0_LVL]

//>> GET_[MISC_REGS_INT_LOG_0_PE0_LVL]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_0_PE0_LVL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE0));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_0_PE0_LVL,
           MISC_REGS_INT_LOG_0_PE0_LVL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE0_LVL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE0_LVL]

//>> SET_[MISC_REGS_INT_LOG_0_PE0_RSVD0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE0_RSVD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE0));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE0_RSVD0,
           MISC_REGS_INT_LOG_0_PE0_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE0_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE0_RSVD0]

//>> SET_[MISC_REGS_INT_LOG_0_PE0_RSVD0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE0_RSVD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE0));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE0_RSVD0,
           MISC_REGS_INT_LOG_0_PE0_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE0_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE0_RSVD0]

//>> GET_[MISC_REGS_INT_LOG_0_PE0_RSVD0]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_0_PE0_RSVD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE0));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_0_PE0_RSVD0,
           MISC_REGS_INT_LOG_0_PE0_RSVD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE0_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE0_RSVD0]

//>> PREP_[MISC_REGS_INT_LOG_0_PE12]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_INT_LOG_0_PE12(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_0_PE12;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_INT_LOG_0_PE12]

//>> GET_[MISC_REGS_INT_LOG_0_PE12]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_INT_LOG_0_PE12(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_0_PE12;
#endif
    return fapi2::getScom(i_target, MISC_REGS_INT_LOG_0_PE12, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE12]

//>> PUT_[MISC_REGS_INT_LOG_0_PE12]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_INT_LOG_0_PE12(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE12));
#endif
    return fapi2::putScom(i_target, MISC_REGS_INT_LOG_0_PE12, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_INT_LOG_0_PE12]


//>> SET_[MISC_REGS_INT_LOG_0_PE12_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE12_VLD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE12));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE12_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE12_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE12_VLD]

//>> SET_[MISC_REGS_INT_LOG_0_PE12_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE12_VLD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE12));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE12_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE12_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE12_VLD]

//>> SET_[MISC_REGS_INT_LOG_0_PE12_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE12_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE12));
#endif
    return o_data.setBit<MISC_REGS_INT_LOG_0_PE12_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE12_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE12_VLD]

//>> CLEAR_[MISC_REGS_INT_LOG_0_PE12_VLD]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_INT_LOG_0_PE12_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE12));
#endif
    return o_data.clearBit<MISC_REGS_INT_LOG_0_PE12_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE12_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_INT_LOG_0_PE12_VLD]

//>> GET_[MISC_REGS_INT_LOG_0_PE12_VLD]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_0_PE12_VLD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE12));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_0_PE12_VLD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE12_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE12_VLD]

//>> GET_[MISC_REGS_INT_LOG_0_PE12_VLD]
static inline bool GET_MISC_REGS_INT_LOG_0_PE12_VLD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE12));
#endif
    return i_data.getBit<MISC_REGS_INT_LOG_0_PE12_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE12_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE12_VLD]

//>> SET_[MISC_REGS_INT_LOG_0_PE12_LVL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE12_LVL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE12));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE12_LVL,
           MISC_REGS_INT_LOG_0_PE12_LVL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE12_LVL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE12_LVL]

//>> SET_[MISC_REGS_INT_LOG_0_PE12_LVL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE12_LVL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE12));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE12_LVL,
           MISC_REGS_INT_LOG_0_PE12_LVL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE12_LVL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE12_LVL]

//>> GET_[MISC_REGS_INT_LOG_0_PE12_LVL]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_0_PE12_LVL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE12));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_0_PE12_LVL,
           MISC_REGS_INT_LOG_0_PE12_LVL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE12_LVL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE12_LVL]

//>> SET_[MISC_REGS_INT_LOG_0_PE12_RSVD0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE12_RSVD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE12));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE12_RSVD0,
           MISC_REGS_INT_LOG_0_PE12_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE12_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE12_RSVD0]

//>> SET_[MISC_REGS_INT_LOG_0_PE12_RSVD0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE12_RSVD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE12));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE12_RSVD0,
           MISC_REGS_INT_LOG_0_PE12_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE12_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE12_RSVD0]

//>> GET_[MISC_REGS_INT_LOG_0_PE12_RSVD0]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_0_PE12_RSVD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE12));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_0_PE12_RSVD0,
           MISC_REGS_INT_LOG_0_PE12_RSVD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE12_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE12_RSVD0]

//>> PREP_[MISC_REGS_INT_LOG_1_PE0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_INT_LOG_1_PE0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_1_PE0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_INT_LOG_1_PE0]

//>> GET_[MISC_REGS_INT_LOG_1_PE0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_INT_LOG_1_PE0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_1_PE0;
#endif
    return fapi2::getScom(i_target, MISC_REGS_INT_LOG_1_PE0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE0]

//>> PUT_[MISC_REGS_INT_LOG_1_PE0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_INT_LOG_1_PE0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE0));
#endif
    return fapi2::putScom(i_target, MISC_REGS_INT_LOG_1_PE0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_INT_LOG_1_PE0]


//>> SET_[MISC_REGS_INT_LOG_1_PE0_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE0_VLD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE0));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE0_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE0_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE0_VLD]

//>> SET_[MISC_REGS_INT_LOG_1_PE0_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE0_VLD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE0));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE0_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE0_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE0_VLD]

//>> SET_[MISC_REGS_INT_LOG_1_PE0_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE0_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE0));
#endif
    return o_data.setBit<MISC_REGS_INT_LOG_1_PE0_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE0_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE0_VLD]

//>> CLEAR_[MISC_REGS_INT_LOG_1_PE0_VLD]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_INT_LOG_1_PE0_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE0));
#endif
    return o_data.clearBit<MISC_REGS_INT_LOG_1_PE0_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE0_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_INT_LOG_1_PE0_VLD]

//>> GET_[MISC_REGS_INT_LOG_1_PE0_VLD]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE0_VLD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE0));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE0_VLD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE0_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE0_VLD]

//>> GET_[MISC_REGS_INT_LOG_1_PE0_VLD]
static inline bool GET_MISC_REGS_INT_LOG_1_PE0_VLD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE0));
#endif
    return i_data.getBit<MISC_REGS_INT_LOG_1_PE0_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE0_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE0_VLD]

//>> SET_[MISC_REGS_INT_LOG_1_PE0_DETAIL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE0_DETAIL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE0));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE0_DETAIL,
           MISC_REGS_INT_LOG_1_PE0_DETAIL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE0_DETAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE0_DETAIL]

//>> SET_[MISC_REGS_INT_LOG_1_PE0_DETAIL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE0_DETAIL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE0));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE0_DETAIL,
           MISC_REGS_INT_LOG_1_PE0_DETAIL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE0_DETAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE0_DETAIL]

//>> GET_[MISC_REGS_INT_LOG_1_PE0_DETAIL]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE0_DETAIL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE0));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE0_DETAIL,
           MISC_REGS_INT_LOG_1_PE0_DETAIL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE0_DETAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE0_DETAIL]

//>> SET_[MISC_REGS_INT_LOG_1_PE0_CQ]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE0_CQ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE0));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE0_CQ,
           MISC_REGS_INT_LOG_1_PE0_CQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE0_CQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE0_CQ]

//>> SET_[MISC_REGS_INT_LOG_1_PE0_CQ]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE0_CQ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE0));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE0_CQ,
           MISC_REGS_INT_LOG_1_PE0_CQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE0_CQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE0_CQ]

//>> GET_[MISC_REGS_INT_LOG_1_PE0_CQ]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE0_CQ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE0));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE0_CQ,
           MISC_REGS_INT_LOG_1_PE0_CQ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE0_CQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE0_CQ]

//>> SET_[MISC_REGS_INT_LOG_1_PE0_RSVD0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE0_RSVD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE0));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE0_RSVD0,
           MISC_REGS_INT_LOG_1_PE0_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE0_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE0_RSVD0]

//>> SET_[MISC_REGS_INT_LOG_1_PE0_RSVD0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE0_RSVD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE0));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE0_RSVD0,
           MISC_REGS_INT_LOG_1_PE0_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE0_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE0_RSVD0]

//>> GET_[MISC_REGS_INT_LOG_1_PE0_RSVD0]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE0_RSVD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE0));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE0_RSVD0,
           MISC_REGS_INT_LOG_1_PE0_RSVD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE0_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE0_RSVD0]

//>> PREP_[MISC_REGS_INT_LOG_1_PE14]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_INT_LOG_1_PE14(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_1_PE14;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_INT_LOG_1_PE14]

//>> GET_[MISC_REGS_INT_LOG_1_PE14]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_INT_LOG_1_PE14(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_1_PE14;
#endif
    return fapi2::getScom(i_target, MISC_REGS_INT_LOG_1_PE14, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE14]

//>> PUT_[MISC_REGS_INT_LOG_1_PE14]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_INT_LOG_1_PE14(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE14));
#endif
    return fapi2::putScom(i_target, MISC_REGS_INT_LOG_1_PE14, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_INT_LOG_1_PE14]


//>> SET_[MISC_REGS_INT_LOG_1_PE14_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE14_VLD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE14));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE14_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE14_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE14_VLD]

//>> SET_[MISC_REGS_INT_LOG_1_PE14_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE14_VLD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE14));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE14_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE14_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE14_VLD]

//>> SET_[MISC_REGS_INT_LOG_1_PE14_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE14_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE14));
#endif
    return o_data.setBit<MISC_REGS_INT_LOG_1_PE14_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE14_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE14_VLD]

//>> CLEAR_[MISC_REGS_INT_LOG_1_PE14_VLD]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_INT_LOG_1_PE14_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE14));
#endif
    return o_data.clearBit<MISC_REGS_INT_LOG_1_PE14_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE14_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_INT_LOG_1_PE14_VLD]

//>> GET_[MISC_REGS_INT_LOG_1_PE14_VLD]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE14_VLD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE14));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE14_VLD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE14_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE14_VLD]

//>> GET_[MISC_REGS_INT_LOG_1_PE14_VLD]
static inline bool GET_MISC_REGS_INT_LOG_1_PE14_VLD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE14));
#endif
    return i_data.getBit<MISC_REGS_INT_LOG_1_PE14_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE14_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE14_VLD]

//>> SET_[MISC_REGS_INT_LOG_1_PE14_DETAIL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE14_DETAIL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE14));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE14_DETAIL,
           MISC_REGS_INT_LOG_1_PE14_DETAIL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE14_DETAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE14_DETAIL]

//>> SET_[MISC_REGS_INT_LOG_1_PE14_DETAIL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE14_DETAIL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE14));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE14_DETAIL,
           MISC_REGS_INT_LOG_1_PE14_DETAIL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE14_DETAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE14_DETAIL]

//>> GET_[MISC_REGS_INT_LOG_1_PE14_DETAIL]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE14_DETAIL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE14));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE14_DETAIL,
           MISC_REGS_INT_LOG_1_PE14_DETAIL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE14_DETAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE14_DETAIL]

//>> SET_[MISC_REGS_INT_LOG_1_PE14_CQ]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE14_CQ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE14));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE14_CQ,
           MISC_REGS_INT_LOG_1_PE14_CQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE14_CQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE14_CQ]

//>> SET_[MISC_REGS_INT_LOG_1_PE14_CQ]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE14_CQ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE14));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE14_CQ,
           MISC_REGS_INT_LOG_1_PE14_CQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE14_CQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE14_CQ]

//>> GET_[MISC_REGS_INT_LOG_1_PE14_CQ]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE14_CQ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE14));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE14_CQ,
           MISC_REGS_INT_LOG_1_PE14_CQ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE14_CQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE14_CQ]

//>> SET_[MISC_REGS_INT_LOG_1_PE14_RSVD0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE14_RSVD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE14));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE14_RSVD0,
           MISC_REGS_INT_LOG_1_PE14_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE14_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE14_RSVD0]

//>> SET_[MISC_REGS_INT_LOG_1_PE14_RSVD0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE14_RSVD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE14));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE14_RSVD0,
           MISC_REGS_INT_LOG_1_PE14_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE14_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE14_RSVD0]

//>> GET_[MISC_REGS_INT_LOG_1_PE14_RSVD0]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE14_RSVD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE14));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE14_RSVD0,
           MISC_REGS_INT_LOG_1_PE14_RSVD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE14_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE14_RSVD0]

//>> PREP_[MISC_REGS_PESTB_ADDR_PE0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_PESTB_ADDR_PE0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_ADDR_PE0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_PESTB_ADDR_PE0]

//>> GET_[MISC_REGS_PESTB_ADDR_PE0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_PESTB_ADDR_PE0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_ADDR_PE0;
#endif
    return fapi2::getScom(i_target, MISC_REGS_PESTB_ADDR_PE0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_PESTB_ADDR_PE0]

//>> PUT_[MISC_REGS_PESTB_ADDR_PE0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_PESTB_ADDR_PE0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE0));
#endif
    return fapi2::putScom(i_target, MISC_REGS_PESTB_ADDR_PE0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_PESTB_ADDR_PE0]


//>> SET_[MISC_REGS_PESTB_ADDR_PE0_DMA_STOPPED_STATE_ADDR_PE0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_ADDR_PE0_DMA_STOPPED_STATE_ADDR_PE0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE0));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_ADDR_PE0_DMA_STOPPED_STATE_ADDR_PE0,
           MISC_REGS_PESTB_ADDR_PE0_DMA_STOPPED_STATE_ADDR_PE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_PESTB_ADDR_PE0_DMA_STOPPED_STATE_ADDR_PE0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_ADDR_PE0_DMA_STOPPED_STATE_ADDR_PE0]

//>> SET_[MISC_REGS_PESTB_ADDR_PE0_DMA_STOPPED_STATE_ADDR_PE0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_ADDR_PE0_DMA_STOPPED_STATE_ADDR_PE0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE0));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_ADDR_PE0_DMA_STOPPED_STATE_ADDR_PE0,
           MISC_REGS_PESTB_ADDR_PE0_DMA_STOPPED_STATE_ADDR_PE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_PESTB_ADDR_PE0_DMA_STOPPED_STATE_ADDR_PE0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_ADDR_PE0_DMA_STOPPED_STATE_ADDR_PE0]

//>> GET_[MISC_REGS_PESTB_ADDR_PE0_DMA_STOPPED_STATE_ADDR_PE0]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_PESTB_ADDR_PE0_DMA_STOPPED_STATE_ADDR_PE0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE0));
#endif
    return i_data.extractToRight<MISC_REGS_PESTB_ADDR_PE0_DMA_STOPPED_STATE_ADDR_PE0,
           MISC_REGS_PESTB_ADDR_PE0_DMA_STOPPED_STATE_ADDR_PE0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_PESTB_ADDR_PE0_DMA_STOPPED_STATE_ADDR_PE0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_PESTB_ADDR_PE0_DMA_STOPPED_STATE_ADDR_PE0]

//>> PREP_[MISC_REGS_PESTB_ADDR_PE15]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_PESTB_ADDR_PE15(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_ADDR_PE15;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_PESTB_ADDR_PE15]

//>> GET_[MISC_REGS_PESTB_ADDR_PE15]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_PESTB_ADDR_PE15(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_ADDR_PE15;
#endif
    return fapi2::getScom(i_target, MISC_REGS_PESTB_ADDR_PE15, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_PESTB_ADDR_PE15]

//>> PUT_[MISC_REGS_PESTB_ADDR_PE15]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_PESTB_ADDR_PE15(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE15));
#endif
    return fapi2::putScom(i_target, MISC_REGS_PESTB_ADDR_PE15, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_PESTB_ADDR_PE15]


//>> SET_[MISC_REGS_PESTB_ADDR_PE15_DMA_STOPPED_STATE_ADDR_PE15]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_ADDR_PE15_DMA_STOPPED_STATE_ADDR_PE15(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE15));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_ADDR_PE15_DMA_STOPPED_STATE_ADDR_PE15,
           MISC_REGS_PESTB_ADDR_PE15_DMA_STOPPED_STATE_ADDR_PE15_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_PESTB_ADDR_PE15_DMA_STOPPED_STATE_ADDR_PE15 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_ADDR_PE15_DMA_STOPPED_STATE_ADDR_PE15]

//>> SET_[MISC_REGS_PESTB_ADDR_PE15_DMA_STOPPED_STATE_ADDR_PE15]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_ADDR_PE15_DMA_STOPPED_STATE_ADDR_PE15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE15));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_ADDR_PE15_DMA_STOPPED_STATE_ADDR_PE15,
           MISC_REGS_PESTB_ADDR_PE15_DMA_STOPPED_STATE_ADDR_PE15_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_PESTB_ADDR_PE15_DMA_STOPPED_STATE_ADDR_PE15 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_ADDR_PE15_DMA_STOPPED_STATE_ADDR_PE15]

//>> GET_[MISC_REGS_PESTB_ADDR_PE15_DMA_STOPPED_STATE_ADDR_PE15]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_PESTB_ADDR_PE15_DMA_STOPPED_STATE_ADDR_PE15(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE15));
#endif
    return i_data.extractToRight<MISC_REGS_PESTB_ADDR_PE15_DMA_STOPPED_STATE_ADDR_PE15,
           MISC_REGS_PESTB_ADDR_PE15_DMA_STOPPED_STATE_ADDR_PE15_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_PESTB_ADDR_PE15_DMA_STOPPED_STATE_ADDR_PE15 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_PESTB_ADDR_PE15_DMA_STOPPED_STATE_ADDR_PE15]

//>> PREP_[MISC_REGS_PESTB_DATA_PE15]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_PESTB_DATA_PE15(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_DATA_PE15;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_PESTB_DATA_PE15]

//>> GET_[MISC_REGS_PESTB_DATA_PE15]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_PESTB_DATA_PE15(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_DATA_PE15;
#endif
    return fapi2::getScom(i_target, MISC_REGS_PESTB_DATA_PE15, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_PESTB_DATA_PE15]

//>> PUT_[MISC_REGS_PESTB_DATA_PE15]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_PESTB_DATA_PE15(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE15));
#endif
    return fapi2::putScom(i_target, MISC_REGS_PESTB_DATA_PE15, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_PESTB_DATA_PE15]


//>> SET_[MISC_REGS_PESTB_DATA_PE15_DMA_STOPPED_STATE_PE15]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_DATA_PE15_DMA_STOPPED_STATE_PE15(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE15));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_DATA_PE15_DMA_STOPPED_STATE_PE15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE15_DMA_STOPPED_STATE_PE15 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_DATA_PE15_DMA_STOPPED_STATE_PE15]

//>> SET_[MISC_REGS_PESTB_DATA_PE15_DMA_STOPPED_STATE_PE15]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_DATA_PE15_DMA_STOPPED_STATE_PE15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE15));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_DATA_PE15_DMA_STOPPED_STATE_PE15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE15_DMA_STOPPED_STATE_PE15 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_DATA_PE15_DMA_STOPPED_STATE_PE15]

//>> SET_[MISC_REGS_PESTB_DATA_PE15_DMA_STOPPED_STATE_PE15]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_DATA_PE15_DMA_STOPPED_STATE_PE15(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE15));
#endif
    return o_data.setBit<MISC_REGS_PESTB_DATA_PE15_DMA_STOPPED_STATE_PE15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE15_DMA_STOPPED_STATE_PE15 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_DATA_PE15_DMA_STOPPED_STATE_PE15]

//>> CLEAR_[MISC_REGS_PESTB_DATA_PE15_DMA_STOPPED_STATE_PE15]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_PESTB_DATA_PE15_DMA_STOPPED_STATE_PE15(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE15));
#endif
    return o_data.clearBit<MISC_REGS_PESTB_DATA_PE15_DMA_STOPPED_STATE_PE15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE15_DMA_STOPPED_STATE_PE15 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_PESTB_DATA_PE15_DMA_STOPPED_STATE_PE15]

//>> GET_[MISC_REGS_PESTB_DATA_PE15_DMA_STOPPED_STATE_PE15]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_PESTB_DATA_PE15_DMA_STOPPED_STATE_PE15(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE15));
#endif
    return i_data.extractToRight<MISC_REGS_PESTB_DATA_PE15_DMA_STOPPED_STATE_PE15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE15_DMA_STOPPED_STATE_PE15 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_PESTB_DATA_PE15_DMA_STOPPED_STATE_PE15]

//>> GET_[MISC_REGS_PESTB_DATA_PE15_DMA_STOPPED_STATE_PE15]
static inline bool GET_MISC_REGS_PESTB_DATA_PE15_DMA_STOPPED_STATE_PE15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE15));
#endif
    return i_data.getBit<MISC_REGS_PESTB_DATA_PE15_DMA_STOPPED_STATE_PE15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE15_DMA_STOPPED_STATE_PE15 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_PESTB_DATA_PE15_DMA_STOPPED_STATE_PE15]

//>> PREP_[MISC_REGS_PESTB_DATA_PE3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_PESTB_DATA_PE3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_DATA_PE3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_PESTB_DATA_PE3]

//>> GET_[MISC_REGS_PESTB_DATA_PE3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_PESTB_DATA_PE3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_DATA_PE3;
#endif
    return fapi2::getScom(i_target, MISC_REGS_PESTB_DATA_PE3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_PESTB_DATA_PE3]

//>> PUT_[MISC_REGS_PESTB_DATA_PE3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_PESTB_DATA_PE3(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE3));
#endif
    return fapi2::putScom(i_target, MISC_REGS_PESTB_DATA_PE3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_PESTB_DATA_PE3]


//>> SET_[MISC_REGS_PESTB_DATA_PE3_DMA_STOPPED_STATE_PE3]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_DATA_PE3_DMA_STOPPED_STATE_PE3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE3));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_DATA_PE3_DMA_STOPPED_STATE_PE3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE3_DMA_STOPPED_STATE_PE3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_DATA_PE3_DMA_STOPPED_STATE_PE3]

//>> SET_[MISC_REGS_PESTB_DATA_PE3_DMA_STOPPED_STATE_PE3]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_DATA_PE3_DMA_STOPPED_STATE_PE3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE3));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_DATA_PE3_DMA_STOPPED_STATE_PE3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE3_DMA_STOPPED_STATE_PE3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_DATA_PE3_DMA_STOPPED_STATE_PE3]

//>> SET_[MISC_REGS_PESTB_DATA_PE3_DMA_STOPPED_STATE_PE3]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_DATA_PE3_DMA_STOPPED_STATE_PE3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE3));
#endif
    return o_data.setBit<MISC_REGS_PESTB_DATA_PE3_DMA_STOPPED_STATE_PE3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE3_DMA_STOPPED_STATE_PE3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_DATA_PE3_DMA_STOPPED_STATE_PE3]

//>> CLEAR_[MISC_REGS_PESTB_DATA_PE3_DMA_STOPPED_STATE_PE3]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_PESTB_DATA_PE3_DMA_STOPPED_STATE_PE3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE3));
#endif
    return o_data.clearBit<MISC_REGS_PESTB_DATA_PE3_DMA_STOPPED_STATE_PE3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE3_DMA_STOPPED_STATE_PE3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_PESTB_DATA_PE3_DMA_STOPPED_STATE_PE3]

//>> GET_[MISC_REGS_PESTB_DATA_PE3_DMA_STOPPED_STATE_PE3]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_PESTB_DATA_PE3_DMA_STOPPED_STATE_PE3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE3));
#endif
    return i_data.extractToRight<MISC_REGS_PESTB_DATA_PE3_DMA_STOPPED_STATE_PE3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE3_DMA_STOPPED_STATE_PE3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_PESTB_DATA_PE3_DMA_STOPPED_STATE_PE3]

//>> GET_[MISC_REGS_PESTB_DATA_PE3_DMA_STOPPED_STATE_PE3]
static inline bool GET_MISC_REGS_PESTB_DATA_PE3_DMA_STOPPED_STATE_PE3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE3));
#endif
    return i_data.getBit<MISC_REGS_PESTB_DATA_PE3_DMA_STOPPED_STATE_PE3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE3_DMA_STOPPED_STATE_PE3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_PESTB_DATA_PE3_DMA_STOPPED_STATE_PE3]

//>> PREP_[OTL0_MISC_C_ERR_RPT_MASK1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL0_MISC_C_ERR_RPT_MASK1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_C_ERR_RPT_MASK1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL0_MISC_C_ERR_RPT_MASK1]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL0_MISC_C_ERR_RPT_MASK1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_C_ERR_RPT_MASK1;
#endif
    return fapi2::getScom(i_target, OTL0_MISC_C_ERR_RPT_MASK1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1]

//>> PUT_[OTL0_MISC_C_ERR_RPT_MASK1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL0_MISC_C_ERR_RPT_MASK1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return fapi2::putScom(i_target, OTL0_MISC_C_ERR_RPT_MASK1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL0_MISC_C_ERR_RPT_MASK1]


//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_00]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_00(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_00,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_00]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_00]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_00(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_00,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_00]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_00]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_00(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK1_00>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_00]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_00]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK1_00(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK1_00>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_00]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_00]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK1_00(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK1_00,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_00]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_00]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK1_00(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK1_00>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_00]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_01]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_01(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_01,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_01]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_01]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_01(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_01,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_01]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_01]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_01(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK1_01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_01]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_01]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK1_01(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK1_01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_01]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_01]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK1_01(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK1_01,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_01]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_01]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK1_01(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK1_01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_01]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_02]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_02(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_02,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_02]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_02]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_02(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_02,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_02]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_02]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_02(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK1_02>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_02]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_02]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK1_02(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK1_02>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_02]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_02]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK1_02(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK1_02,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_02]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_02]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK1_02(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK1_02>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_02]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_03]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_03(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_03,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_03]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_03]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_03(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_03,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_03]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_03]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_03(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK1_03>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_03]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_03]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK1_03(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK1_03>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_03]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_03]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK1_03(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK1_03,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_03]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_03]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK1_03(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK1_03>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_03]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_04]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_04(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_04,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_04]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_04]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_04(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_04,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_04]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_04]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_04(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK1_04>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_04]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_04]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK1_04(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK1_04>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_04]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_04]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK1_04(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK1_04,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_04]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_04]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK1_04(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK1_04>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_04]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_05]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_05(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_05,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_05]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_05]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_05(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_05,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_05]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_05]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_05(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK1_05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_05]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_05]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK1_05(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK1_05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_05]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_05]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK1_05(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK1_05,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_05]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_05]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK1_05(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK1_05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_05]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_06]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_06(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_06,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_06]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_06]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_06(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_06,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_06]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_06]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_06(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK1_06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_06]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_06]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK1_06(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK1_06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_06]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_06]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK1_06(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK1_06,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_06]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_06]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK1_06(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK1_06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_06]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_07]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_07(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_07,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_07]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_07]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_07(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_07,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_07]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_07]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_07(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK1_07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_07]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_07]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK1_07(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK1_07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_07]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_07]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK1_07(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK1_07,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_07]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_07]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK1_07(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK1_07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_07]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_08]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_08(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_08,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_08]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_08]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_08(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_08,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_08]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_08]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_08(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK1_08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_08]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_08]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK1_08(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK1_08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_08]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_08]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK1_08(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK1_08,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_08]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_08]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK1_08(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK1_08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_08]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_09]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_09(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_09,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_09]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_09]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_09(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_09,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_09]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_09]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_09(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK1_09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_09]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_09]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK1_09(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK1_09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_09]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_09]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK1_09(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK1_09,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_09]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_09]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK1_09(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK1_09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_09]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_10]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_10]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_10]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_10]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_10]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK1_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_10]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_10]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK1_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK1_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_10]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_10]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK1_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK1_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_10]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_10]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK1_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK1_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_10]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_11]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_11]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_11]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_11]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_11]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK1_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_11]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_11]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK1_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK1_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_11]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_11]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK1_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK1_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_11]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_11]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK1_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK1_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_11]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_12]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_12]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_12]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_12]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_12]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK1_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_12]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_12]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK1_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK1_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_12]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_12]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK1_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK1_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_12]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_12]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK1_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK1_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_12]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_13]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_13]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_13]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_13]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_13]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK1_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_13]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_13]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK1_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK1_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_13]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_13]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK1_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK1_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_13]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_13]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK1_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK1_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_13]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_14]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_14]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_14]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_14]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_14]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK1_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_14]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_14]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK1_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK1_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_14]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_14]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK1_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK1_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_14]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_14]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK1_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK1_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_14]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_15]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_15]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_15]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_15]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_15]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK1_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_15]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_15]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK1_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK1_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_15]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_15]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK1_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK1_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_15]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_15]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK1_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK1_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_15]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_16]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_16]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_16]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_16]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_16]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK1_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_16]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_16]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK1_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK1_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_16]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_16]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK1_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK1_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_16]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_16]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK1_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK1_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_16]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_17]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_17]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_17]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_17]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_17]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK1_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_17]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_17]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK1_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK1_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_17]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_17]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK1_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK1_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_17]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_17]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK1_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK1_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_17]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_18]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_18]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_18]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_18]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_18]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK1_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_18]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_18]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK1_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK1_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_18]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_18]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK1_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK1_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_18]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_18]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK1_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK1_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_18]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_19]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_19]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_19]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_19]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_19]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK1_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_19]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_19]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK1_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK1_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_19]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_19]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK1_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK1_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_19]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_19]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK1_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK1_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_19]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_20]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_20(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_20]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_20]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_20(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_20]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_20]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK1_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_20]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_20]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK1_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK1_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_20]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_20]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK1_20(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK1_20,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_20]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_20]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK1_20(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK1_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_20]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_21]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_21(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_21]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_21]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_21(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_21]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_21]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK1_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_21]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_21]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK1_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK1_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_21]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_21]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK1_21(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK1_21,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_21]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_21]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK1_21(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK1_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_21]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_22]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_22(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_22]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_22]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_22(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_22]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_22]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK1_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_22]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_22]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK1_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK1_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_22]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_22]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK1_22(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK1_22,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_22]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_22]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK1_22(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK1_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_22]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_23]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_23]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_23]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_23]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_23]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK1_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_23]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_23]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK1_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK1_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_23]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_23]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK1_23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK1_23,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_23]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_23]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK1_23(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK1_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_23]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_24]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_24(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_24]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_24]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_24(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_24]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_24]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK1_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_24]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_24]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK1_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK1_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_24]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_24]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK1_24(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK1_24,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_24]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_24]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK1_24(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK1_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_24]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_25]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_25(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_25]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_25]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_25(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_25]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_25]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK1_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_25]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_25]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK1_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK1_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_25]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_25]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK1_25(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK1_25,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_25]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_25]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK1_25(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK1_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_25]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_26]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_26(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_26]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_26]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_26(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_26]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_26]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK1_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_26]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_26]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK1_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK1_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_26]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_26]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK1_26(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK1_26,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_26]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_26]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK1_26(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK1_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_26]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_27]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_27(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_27]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_27]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_27(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_27]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_27]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK1_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_27]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_27]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK1_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK1_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_27]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_27]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK1_27(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK1_27,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_27]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_27]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK1_27(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK1_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_27]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_28]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_28(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_28]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_28]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_28(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_28]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_28]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK1_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_28]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_28]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK1_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK1_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_28]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_28]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK1_28(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK1_28,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_28]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_28]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK1_28(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK1_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_28]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_29]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_29(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_29]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_29]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_29(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_29]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_29]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK1_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_29]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_29]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK1_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK1_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_29]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_29]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK1_29(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK1_29,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_29]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_29]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK1_29(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK1_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_29]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_30]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_30(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_30]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_30]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_30(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_30]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_30]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK1_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_30]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_30]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK1_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK1_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_30]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_30]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK1_30(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK1_30,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_30]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_30]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK1_30(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK1_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_30]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_31]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_31(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_31]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_31]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_31(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK1_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_31]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK1_31]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK1_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK1_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK1_31]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_31]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK1_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK1_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK1_31]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_31]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK1_31(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK1_31,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_31]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK1_31]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK1_31(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK1_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK1_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK1_31]

//>> PREP_[OTL0_MISC_PMU_CONTROL0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL0_MISC_PMU_CONTROL0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_PMU_CONTROL0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL0_MISC_PMU_CONTROL0]

//>> GET_[OTL0_MISC_PMU_CONTROL0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL0_MISC_PMU_CONTROL0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_PMU_CONTROL0;
#endif
    return fapi2::getScom(i_target, OTL0_MISC_PMU_CONTROL0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL0]

//>> PUT_[OTL0_MISC_PMU_CONTROL0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL0_MISC_PMU_CONTROL0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return fapi2::putScom(i_target, OTL0_MISC_PMU_CONTROL0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL0_MISC_PMU_CONTROL0]


//>> SET_[OTL0_MISC_PMU_CONTROL0_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL0_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL0_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL0_ENABLE]

//>> SET_[OTL0_MISC_PMU_CONTROL0_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL0_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL0_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL0_ENABLE]

//>> SET_[OTL0_MISC_PMU_CONTROL0_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL0_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.setBit<OTL0_MISC_PMU_CONTROL0_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL0_ENABLE]

//>> CLEAR_[OTL0_MISC_PMU_CONTROL0_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_PMU_CONTROL0_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.clearBit<OTL0_MISC_PMU_CONTROL0_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_PMU_CONTROL0_ENABLE]

//>> GET_[OTL0_MISC_PMU_CONTROL0_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_PMU_CONTROL0_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return i_data.extractToRight<OTL0_MISC_PMU_CONTROL0_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL0_ENABLE]

//>> GET_[OTL0_MISC_PMU_CONTROL0_ENABLE]
static inline bool GET_OTL0_MISC_PMU_CONTROL0_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return i_data.getBit<OTL0_MISC_PMU_CONTROL0_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL0_ENABLE]

//>> SET_[OTL0_MISC_PMU_CONTROL0_RESETMODE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL0_RESETMODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL0_RESETMODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_RESETMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL0_RESETMODE]

//>> SET_[OTL0_MISC_PMU_CONTROL0_RESETMODE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL0_RESETMODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL0_RESETMODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_RESETMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL0_RESETMODE]

//>> SET_[OTL0_MISC_PMU_CONTROL0_RESETMODE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL0_RESETMODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.setBit<OTL0_MISC_PMU_CONTROL0_RESETMODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_RESETMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL0_RESETMODE]

//>> CLEAR_[OTL0_MISC_PMU_CONTROL0_RESETMODE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_PMU_CONTROL0_RESETMODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.clearBit<OTL0_MISC_PMU_CONTROL0_RESETMODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_RESETMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_PMU_CONTROL0_RESETMODE]

//>> GET_[OTL0_MISC_PMU_CONTROL0_RESETMODE]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_PMU_CONTROL0_RESETMODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return i_data.extractToRight<OTL0_MISC_PMU_CONTROL0_RESETMODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_RESETMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL0_RESETMODE]

//>> GET_[OTL0_MISC_PMU_CONTROL0_RESETMODE]
static inline bool GET_OTL0_MISC_PMU_CONTROL0_RESETMODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return i_data.getBit<OTL0_MISC_PMU_CONTROL0_RESETMODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_RESETMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL0_RESETMODE]

//>> SET_[OTL0_MISC_PMU_CONTROL0_FREEZEMODE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL0_FREEZEMODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL0_FREEZEMODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_FREEZEMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL0_FREEZEMODE]

//>> SET_[OTL0_MISC_PMU_CONTROL0_FREEZEMODE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL0_FREEZEMODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL0_FREEZEMODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_FREEZEMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL0_FREEZEMODE]

//>> SET_[OTL0_MISC_PMU_CONTROL0_FREEZEMODE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL0_FREEZEMODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.setBit<OTL0_MISC_PMU_CONTROL0_FREEZEMODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_FREEZEMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL0_FREEZEMODE]

//>> CLEAR_[OTL0_MISC_PMU_CONTROL0_FREEZEMODE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_PMU_CONTROL0_FREEZEMODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.clearBit<OTL0_MISC_PMU_CONTROL0_FREEZEMODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_FREEZEMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_PMU_CONTROL0_FREEZEMODE]

//>> GET_[OTL0_MISC_PMU_CONTROL0_FREEZEMODE]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_PMU_CONTROL0_FREEZEMODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return i_data.extractToRight<OTL0_MISC_PMU_CONTROL0_FREEZEMODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_FREEZEMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL0_FREEZEMODE]

//>> GET_[OTL0_MISC_PMU_CONTROL0_FREEZEMODE]
static inline bool GET_OTL0_MISC_PMU_CONTROL0_FREEZEMODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return i_data.getBit<OTL0_MISC_PMU_CONTROL0_FREEZEMODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_FREEZEMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL0_FREEZEMODE]

//>> SET_[OTL0_MISC_PMU_CONTROL0_DISABLE_PMISC]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL0_DISABLE_PMISC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL0_DISABLE_PMISC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_DISABLE_PMISC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL0_DISABLE_PMISC]

//>> SET_[OTL0_MISC_PMU_CONTROL0_DISABLE_PMISC]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL0_DISABLE_PMISC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL0_DISABLE_PMISC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_DISABLE_PMISC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL0_DISABLE_PMISC]

//>> SET_[OTL0_MISC_PMU_CONTROL0_DISABLE_PMISC]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL0_DISABLE_PMISC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.setBit<OTL0_MISC_PMU_CONTROL0_DISABLE_PMISC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_DISABLE_PMISC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL0_DISABLE_PMISC]

//>> CLEAR_[OTL0_MISC_PMU_CONTROL0_DISABLE_PMISC]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_PMU_CONTROL0_DISABLE_PMISC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.clearBit<OTL0_MISC_PMU_CONTROL0_DISABLE_PMISC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_DISABLE_PMISC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_PMU_CONTROL0_DISABLE_PMISC]

//>> GET_[OTL0_MISC_PMU_CONTROL0_DISABLE_PMISC]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_PMU_CONTROL0_DISABLE_PMISC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return i_data.extractToRight<OTL0_MISC_PMU_CONTROL0_DISABLE_PMISC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_DISABLE_PMISC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL0_DISABLE_PMISC]

//>> GET_[OTL0_MISC_PMU_CONTROL0_DISABLE_PMISC]
static inline bool GET_OTL0_MISC_PMU_CONTROL0_DISABLE_PMISC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return i_data.getBit<OTL0_MISC_PMU_CONTROL0_DISABLE_PMISC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_DISABLE_PMISC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL0_DISABLE_PMISC]

//>> SET_[OTL0_MISC_PMU_CONTROL0_PMISC_MODE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL0_PMISC_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL0_PMISC_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_PMISC_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL0_PMISC_MODE]

//>> SET_[OTL0_MISC_PMU_CONTROL0_PMISC_MODE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL0_PMISC_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL0_PMISC_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_PMISC_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL0_PMISC_MODE]

//>> SET_[OTL0_MISC_PMU_CONTROL0_PMISC_MODE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL0_PMISC_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.setBit<OTL0_MISC_PMU_CONTROL0_PMISC_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_PMISC_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL0_PMISC_MODE]

//>> CLEAR_[OTL0_MISC_PMU_CONTROL0_PMISC_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_PMU_CONTROL0_PMISC_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.clearBit<OTL0_MISC_PMU_CONTROL0_PMISC_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_PMISC_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_PMU_CONTROL0_PMISC_MODE]

//>> GET_[OTL0_MISC_PMU_CONTROL0_PMISC_MODE]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_PMU_CONTROL0_PMISC_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return i_data.extractToRight<OTL0_MISC_PMU_CONTROL0_PMISC_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_PMISC_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL0_PMISC_MODE]

//>> GET_[OTL0_MISC_PMU_CONTROL0_PMISC_MODE]
static inline bool GET_OTL0_MISC_PMU_CONTROL0_PMISC_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return i_data.getBit<OTL0_MISC_PMU_CONTROL0_PMISC_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_PMISC_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL0_PMISC_MODE]

//>> SET_[OTL0_MISC_PMU_CONTROL0_CASCADE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL0_CASCADE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL0_CASCADE,
           OTL0_MISC_PMU_CONTROL0_CASCADE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_CASCADE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL0_CASCADE]

//>> SET_[OTL0_MISC_PMU_CONTROL0_CASCADE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL0_CASCADE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL0_CASCADE,
           OTL0_MISC_PMU_CONTROL0_CASCADE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_CASCADE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL0_CASCADE]

//>> GET_[OTL0_MISC_PMU_CONTROL0_CASCADE]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_PMU_CONTROL0_CASCADE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return i_data.extractToRight<OTL0_MISC_PMU_CONTROL0_CASCADE,
           OTL0_MISC_PMU_CONTROL0_CASCADE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_CASCADE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL0_CASCADE]

//>> SET_[OTL0_MISC_PMU_CONTROL0_PRESCALE_C0]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL0_PRESCALE_C0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL0_PRESCALE_C0,
           OTL0_MISC_PMU_CONTROL0_PRESCALE_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_PRESCALE_C0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL0_PRESCALE_C0]

//>> SET_[OTL0_MISC_PMU_CONTROL0_PRESCALE_C0]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL0_PRESCALE_C0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL0_PRESCALE_C0,
           OTL0_MISC_PMU_CONTROL0_PRESCALE_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_PRESCALE_C0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL0_PRESCALE_C0]

//>> GET_[OTL0_MISC_PMU_CONTROL0_PRESCALE_C0]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_PMU_CONTROL0_PRESCALE_C0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return i_data.extractToRight<OTL0_MISC_PMU_CONTROL0_PRESCALE_C0,
           OTL0_MISC_PMU_CONTROL0_PRESCALE_C0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_PRESCALE_C0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL0_PRESCALE_C0]

//>> SET_[OTL0_MISC_PMU_CONTROL0_PRESCALE_C1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL0_PRESCALE_C1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL0_PRESCALE_C1,
           OTL0_MISC_PMU_CONTROL0_PRESCALE_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_PRESCALE_C1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL0_PRESCALE_C1]

//>> SET_[OTL0_MISC_PMU_CONTROL0_PRESCALE_C1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL0_PRESCALE_C1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL0_PRESCALE_C1,
           OTL0_MISC_PMU_CONTROL0_PRESCALE_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_PRESCALE_C1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL0_PRESCALE_C1]

//>> GET_[OTL0_MISC_PMU_CONTROL0_PRESCALE_C1]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_PMU_CONTROL0_PRESCALE_C1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return i_data.extractToRight<OTL0_MISC_PMU_CONTROL0_PRESCALE_C1,
           OTL0_MISC_PMU_CONTROL0_PRESCALE_C1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_PRESCALE_C1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL0_PRESCALE_C1]

//>> SET_[OTL0_MISC_PMU_CONTROL0_PRESCALE_C2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL0_PRESCALE_C2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL0_PRESCALE_C2,
           OTL0_MISC_PMU_CONTROL0_PRESCALE_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_PRESCALE_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL0_PRESCALE_C2]

//>> SET_[OTL0_MISC_PMU_CONTROL0_PRESCALE_C2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL0_PRESCALE_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL0_PRESCALE_C2,
           OTL0_MISC_PMU_CONTROL0_PRESCALE_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_PRESCALE_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL0_PRESCALE_C2]

//>> GET_[OTL0_MISC_PMU_CONTROL0_PRESCALE_C2]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_PMU_CONTROL0_PRESCALE_C2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return i_data.extractToRight<OTL0_MISC_PMU_CONTROL0_PRESCALE_C2,
           OTL0_MISC_PMU_CONTROL0_PRESCALE_C2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_PRESCALE_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL0_PRESCALE_C2]

//>> SET_[OTL0_MISC_PMU_CONTROL0_PRESCALE_C3]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL0_PRESCALE_C3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL0_PRESCALE_C3,
           OTL0_MISC_PMU_CONTROL0_PRESCALE_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_PRESCALE_C3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL0_PRESCALE_C3]

//>> SET_[OTL0_MISC_PMU_CONTROL0_PRESCALE_C3]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL0_PRESCALE_C3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL0_PRESCALE_C3,
           OTL0_MISC_PMU_CONTROL0_PRESCALE_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_PRESCALE_C3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL0_PRESCALE_C3]

//>> GET_[OTL0_MISC_PMU_CONTROL0_PRESCALE_C3]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_PMU_CONTROL0_PRESCALE_C3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return i_data.extractToRight<OTL0_MISC_PMU_CONTROL0_PRESCALE_C3,
           OTL0_MISC_PMU_CONTROL0_PRESCALE_C3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_PRESCALE_C3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL0_PRESCALE_C3]

//>> SET_[OTL0_MISC_PMU_CONTROL0_OPERATION_C0]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL0_OPERATION_C0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL0_OPERATION_C0,
           OTL0_MISC_PMU_CONTROL0_OPERATION_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_OPERATION_C0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL0_OPERATION_C0]

//>> SET_[OTL0_MISC_PMU_CONTROL0_OPERATION_C0]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL0_OPERATION_C0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL0_OPERATION_C0,
           OTL0_MISC_PMU_CONTROL0_OPERATION_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_OPERATION_C0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL0_OPERATION_C0]

//>> GET_[OTL0_MISC_PMU_CONTROL0_OPERATION_C0]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_PMU_CONTROL0_OPERATION_C0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return i_data.extractToRight<OTL0_MISC_PMU_CONTROL0_OPERATION_C0,
           OTL0_MISC_PMU_CONTROL0_OPERATION_C0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_OPERATION_C0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL0_OPERATION_C0]

//>> SET_[OTL0_MISC_PMU_CONTROL0_OPERATION_C1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL0_OPERATION_C1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL0_OPERATION_C1,
           OTL0_MISC_PMU_CONTROL0_OPERATION_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_OPERATION_C1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL0_OPERATION_C1]

//>> SET_[OTL0_MISC_PMU_CONTROL0_OPERATION_C1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL0_OPERATION_C1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL0_OPERATION_C1,
           OTL0_MISC_PMU_CONTROL0_OPERATION_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_OPERATION_C1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL0_OPERATION_C1]

//>> GET_[OTL0_MISC_PMU_CONTROL0_OPERATION_C1]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_PMU_CONTROL0_OPERATION_C1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return i_data.extractToRight<OTL0_MISC_PMU_CONTROL0_OPERATION_C1,
           OTL0_MISC_PMU_CONTROL0_OPERATION_C1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_OPERATION_C1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL0_OPERATION_C1]

//>> SET_[OTL0_MISC_PMU_CONTROL0_OPERATION_C2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL0_OPERATION_C2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL0_OPERATION_C2,
           OTL0_MISC_PMU_CONTROL0_OPERATION_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_OPERATION_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL0_OPERATION_C2]

//>> SET_[OTL0_MISC_PMU_CONTROL0_OPERATION_C2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL0_OPERATION_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL0_OPERATION_C2,
           OTL0_MISC_PMU_CONTROL0_OPERATION_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_OPERATION_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL0_OPERATION_C2]

//>> GET_[OTL0_MISC_PMU_CONTROL0_OPERATION_C2]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_PMU_CONTROL0_OPERATION_C2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return i_data.extractToRight<OTL0_MISC_PMU_CONTROL0_OPERATION_C2,
           OTL0_MISC_PMU_CONTROL0_OPERATION_C2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_OPERATION_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL0_OPERATION_C2]

//>> SET_[OTL0_MISC_PMU_CONTROL0_OPERATION_C3]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL0_OPERATION_C3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL0_OPERATION_C3,
           OTL0_MISC_PMU_CONTROL0_OPERATION_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_OPERATION_C3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL0_OPERATION_C3]

//>> SET_[OTL0_MISC_PMU_CONTROL0_OPERATION_C3]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL0_OPERATION_C3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL0_OPERATION_C3,
           OTL0_MISC_PMU_CONTROL0_OPERATION_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_OPERATION_C3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL0_OPERATION_C3]

//>> GET_[OTL0_MISC_PMU_CONTROL0_OPERATION_C3]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_PMU_CONTROL0_OPERATION_C3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return i_data.extractToRight<OTL0_MISC_PMU_CONTROL0_OPERATION_C3,
           OTL0_MISC_PMU_CONTROL0_OPERATION_C3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_OPERATION_C3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL0_OPERATION_C3]

//>> SET_[OTL0_MISC_PMU_CONTROL0_EVENTS_C0]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL0_EVENTS_C0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL0_EVENTS_C0,
           OTL0_MISC_PMU_CONTROL0_EVENTS_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_EVENTS_C0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL0_EVENTS_C0]

//>> SET_[OTL0_MISC_PMU_CONTROL0_EVENTS_C0]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL0_EVENTS_C0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL0_EVENTS_C0,
           OTL0_MISC_PMU_CONTROL0_EVENTS_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_EVENTS_C0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL0_EVENTS_C0]

//>> GET_[OTL0_MISC_PMU_CONTROL0_EVENTS_C0]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_PMU_CONTROL0_EVENTS_C0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return i_data.extractToRight<OTL0_MISC_PMU_CONTROL0_EVENTS_C0,
           OTL0_MISC_PMU_CONTROL0_EVENTS_C0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_EVENTS_C0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL0_EVENTS_C0]

//>> SET_[OTL0_MISC_PMU_CONTROL0_EVENTS_C1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL0_EVENTS_C1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL0_EVENTS_C1,
           OTL0_MISC_PMU_CONTROL0_EVENTS_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_EVENTS_C1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL0_EVENTS_C1]

//>> SET_[OTL0_MISC_PMU_CONTROL0_EVENTS_C1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL0_EVENTS_C1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL0_EVENTS_C1,
           OTL0_MISC_PMU_CONTROL0_EVENTS_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_EVENTS_C1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL0_EVENTS_C1]

//>> GET_[OTL0_MISC_PMU_CONTROL0_EVENTS_C1]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_PMU_CONTROL0_EVENTS_C1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return i_data.extractToRight<OTL0_MISC_PMU_CONTROL0_EVENTS_C1,
           OTL0_MISC_PMU_CONTROL0_EVENTS_C1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_EVENTS_C1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL0_EVENTS_C1]

//>> SET_[OTL0_MISC_PMU_CONTROL0_EVENTS_C2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL0_EVENTS_C2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL0_EVENTS_C2,
           OTL0_MISC_PMU_CONTROL0_EVENTS_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_EVENTS_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL0_EVENTS_C2]

//>> SET_[OTL0_MISC_PMU_CONTROL0_EVENTS_C2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL0_EVENTS_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL0_EVENTS_C2,
           OTL0_MISC_PMU_CONTROL0_EVENTS_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_EVENTS_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL0_EVENTS_C2]

//>> GET_[OTL0_MISC_PMU_CONTROL0_EVENTS_C2]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_PMU_CONTROL0_EVENTS_C2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return i_data.extractToRight<OTL0_MISC_PMU_CONTROL0_EVENTS_C2,
           OTL0_MISC_PMU_CONTROL0_EVENTS_C2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_EVENTS_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL0_EVENTS_C2]

//>> SET_[OTL0_MISC_PMU_CONTROL0_EVENTS_C3]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL0_EVENTS_C3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL0_EVENTS_C3,
           OTL0_MISC_PMU_CONTROL0_EVENTS_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_EVENTS_C3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL0_EVENTS_C3]

//>> SET_[OTL0_MISC_PMU_CONTROL0_EVENTS_C3]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL0_EVENTS_C3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL0_EVENTS_C3,
           OTL0_MISC_PMU_CONTROL0_EVENTS_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_EVENTS_C3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL0_EVENTS_C3]

//>> GET_[OTL0_MISC_PMU_CONTROL0_EVENTS_C3]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_PMU_CONTROL0_EVENTS_C3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return i_data.extractToRight<OTL0_MISC_PMU_CONTROL0_EVENTS_C3,
           OTL0_MISC_PMU_CONTROL0_EVENTS_C3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_EVENTS_C3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL0_EVENTS_C3]

//>> SET_[OTL0_MISC_PMU_CONTROL0_RESERVED0]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL0_RESERVED0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL0_RESERVED0,
           OTL0_MISC_PMU_CONTROL0_RESERVED0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_RESERVED0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL0_RESERVED0]

//>> SET_[OTL0_MISC_PMU_CONTROL0_RESERVED0]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL0_RESERVED0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL0_RESERVED0,
           OTL0_MISC_PMU_CONTROL0_RESERVED0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_RESERVED0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL0_RESERVED0]

//>> GET_[OTL0_MISC_PMU_CONTROL0_RESERVED0]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_PMU_CONTROL0_RESERVED0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL0));
#endif
    return i_data.extractToRight<OTL0_MISC_PMU_CONTROL0_RESERVED0,
           OTL0_MISC_PMU_CONTROL0_RESERVED0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL0_RESERVED0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL0_RESERVED0]

//>> PREP_[OTL0_MISC_TLX_CREDIT_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL0_MISC_TLX_CREDIT_STATUS(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_TLX_CREDIT_STATUS;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL0_MISC_TLX_CREDIT_STATUS]

//>> GET_[OTL0_MISC_TLX_CREDIT_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL0_MISC_TLX_CREDIT_STATUS(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_TLX_CREDIT_STATUS;
#endif
    return fapi2::getScom(i_target, OTL0_MISC_TLX_CREDIT_STATUS, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL0_MISC_TLX_CREDIT_STATUS]

//>> PUT_[OTL0_MISC_TLX_CREDIT_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL0_MISC_TLX_CREDIT_STATUS(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TLX_CREDIT_STATUS));
#endif
    return fapi2::putScom(i_target, OTL0_MISC_TLX_CREDIT_STATUS, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL0_MISC_TLX_CREDIT_STATUS]


//>> SET_[OTL0_MISC_TLX_CREDIT_STATUS_VC0_COUNT]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_TLX_CREDIT_STATUS_VC0_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TLX_CREDIT_STATUS));
#endif
    return o_data.insertFromRight<OTL0_MISC_TLX_CREDIT_STATUS_VC0_COUNT,
           OTL0_MISC_TLX_CREDIT_STATUS_VC0_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_TLX_CREDIT_STATUS_VC0_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_TLX_CREDIT_STATUS_VC0_COUNT]

//>> SET_[OTL0_MISC_TLX_CREDIT_STATUS_VC0_COUNT]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_TLX_CREDIT_STATUS_VC0_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TLX_CREDIT_STATUS));
#endif
    return o_data.insertFromRight<OTL0_MISC_TLX_CREDIT_STATUS_VC0_COUNT,
           OTL0_MISC_TLX_CREDIT_STATUS_VC0_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_TLX_CREDIT_STATUS_VC0_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_TLX_CREDIT_STATUS_VC0_COUNT]

//>> GET_[OTL0_MISC_TLX_CREDIT_STATUS_VC0_COUNT]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_TLX_CREDIT_STATUS_VC0_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TLX_CREDIT_STATUS));
#endif
    return i_data.extractToRight<OTL0_MISC_TLX_CREDIT_STATUS_VC0_COUNT,
           OTL0_MISC_TLX_CREDIT_STATUS_VC0_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_TLX_CREDIT_STATUS_VC0_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_TLX_CREDIT_STATUS_VC0_COUNT]

//>> SET_[OTL0_MISC_TLX_CREDIT_STATUS_VC1_COUNT]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_TLX_CREDIT_STATUS_VC1_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TLX_CREDIT_STATUS));
#endif
    return o_data.insertFromRight<OTL0_MISC_TLX_CREDIT_STATUS_VC1_COUNT,
           OTL0_MISC_TLX_CREDIT_STATUS_VC1_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_TLX_CREDIT_STATUS_VC1_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_TLX_CREDIT_STATUS_VC1_COUNT]

//>> SET_[OTL0_MISC_TLX_CREDIT_STATUS_VC1_COUNT]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_TLX_CREDIT_STATUS_VC1_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TLX_CREDIT_STATUS));
#endif
    return o_data.insertFromRight<OTL0_MISC_TLX_CREDIT_STATUS_VC1_COUNT,
           OTL0_MISC_TLX_CREDIT_STATUS_VC1_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_TLX_CREDIT_STATUS_VC1_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_TLX_CREDIT_STATUS_VC1_COUNT]

//>> GET_[OTL0_MISC_TLX_CREDIT_STATUS_VC1_COUNT]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_TLX_CREDIT_STATUS_VC1_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TLX_CREDIT_STATUS));
#endif
    return i_data.extractToRight<OTL0_MISC_TLX_CREDIT_STATUS_VC1_COUNT,
           OTL0_MISC_TLX_CREDIT_STATUS_VC1_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_TLX_CREDIT_STATUS_VC1_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_TLX_CREDIT_STATUS_VC1_COUNT]

//>> SET_[OTL0_MISC_TLX_CREDIT_STATUS_VC2_COUNT]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_TLX_CREDIT_STATUS_VC2_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TLX_CREDIT_STATUS));
#endif
    return o_data.insertFromRight<OTL0_MISC_TLX_CREDIT_STATUS_VC2_COUNT,
           OTL0_MISC_TLX_CREDIT_STATUS_VC2_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_TLX_CREDIT_STATUS_VC2_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_TLX_CREDIT_STATUS_VC2_COUNT]

//>> SET_[OTL0_MISC_TLX_CREDIT_STATUS_VC2_COUNT]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_TLX_CREDIT_STATUS_VC2_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TLX_CREDIT_STATUS));
#endif
    return o_data.insertFromRight<OTL0_MISC_TLX_CREDIT_STATUS_VC2_COUNT,
           OTL0_MISC_TLX_CREDIT_STATUS_VC2_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_TLX_CREDIT_STATUS_VC2_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_TLX_CREDIT_STATUS_VC2_COUNT]

//>> GET_[OTL0_MISC_TLX_CREDIT_STATUS_VC2_COUNT]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_TLX_CREDIT_STATUS_VC2_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TLX_CREDIT_STATUS));
#endif
    return i_data.extractToRight<OTL0_MISC_TLX_CREDIT_STATUS_VC2_COUNT,
           OTL0_MISC_TLX_CREDIT_STATUS_VC2_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_TLX_CREDIT_STATUS_VC2_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_TLX_CREDIT_STATUS_VC2_COUNT]

//>> SET_[OTL0_MISC_TLX_CREDIT_STATUS_VC3_COUNT]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_TLX_CREDIT_STATUS_VC3_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TLX_CREDIT_STATUS));
#endif
    return o_data.insertFromRight<OTL0_MISC_TLX_CREDIT_STATUS_VC3_COUNT,
           OTL0_MISC_TLX_CREDIT_STATUS_VC3_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_TLX_CREDIT_STATUS_VC3_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_TLX_CREDIT_STATUS_VC3_COUNT]

//>> SET_[OTL0_MISC_TLX_CREDIT_STATUS_VC3_COUNT]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_TLX_CREDIT_STATUS_VC3_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TLX_CREDIT_STATUS));
#endif
    return o_data.insertFromRight<OTL0_MISC_TLX_CREDIT_STATUS_VC3_COUNT,
           OTL0_MISC_TLX_CREDIT_STATUS_VC3_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_TLX_CREDIT_STATUS_VC3_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_TLX_CREDIT_STATUS_VC3_COUNT]

//>> GET_[OTL0_MISC_TLX_CREDIT_STATUS_VC3_COUNT]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_TLX_CREDIT_STATUS_VC3_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TLX_CREDIT_STATUS));
#endif
    return i_data.extractToRight<OTL0_MISC_TLX_CREDIT_STATUS_VC3_COUNT,
           OTL0_MISC_TLX_CREDIT_STATUS_VC3_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_TLX_CREDIT_STATUS_VC3_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_TLX_CREDIT_STATUS_VC3_COUNT]

//>> SET_[OTL0_MISC_TLX_CREDIT_STATUS_DCP0_COUNT]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_TLX_CREDIT_STATUS_DCP0_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TLX_CREDIT_STATUS));
#endif
    return o_data.insertFromRight<OTL0_MISC_TLX_CREDIT_STATUS_DCP0_COUNT,
           OTL0_MISC_TLX_CREDIT_STATUS_DCP0_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_TLX_CREDIT_STATUS_DCP0_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_TLX_CREDIT_STATUS_DCP0_COUNT]

//>> SET_[OTL0_MISC_TLX_CREDIT_STATUS_DCP0_COUNT]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_TLX_CREDIT_STATUS_DCP0_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TLX_CREDIT_STATUS));
#endif
    return o_data.insertFromRight<OTL0_MISC_TLX_CREDIT_STATUS_DCP0_COUNT,
           OTL0_MISC_TLX_CREDIT_STATUS_DCP0_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_TLX_CREDIT_STATUS_DCP0_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_TLX_CREDIT_STATUS_DCP0_COUNT]

//>> GET_[OTL0_MISC_TLX_CREDIT_STATUS_DCP0_COUNT]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_TLX_CREDIT_STATUS_DCP0_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TLX_CREDIT_STATUS));
#endif
    return i_data.extractToRight<OTL0_MISC_TLX_CREDIT_STATUS_DCP0_COUNT,
           OTL0_MISC_TLX_CREDIT_STATUS_DCP0_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_TLX_CREDIT_STATUS_DCP0_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_TLX_CREDIT_STATUS_DCP0_COUNT]

//>> SET_[OTL0_MISC_TLX_CREDIT_STATUS_DCP2_COUNT]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_TLX_CREDIT_STATUS_DCP2_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TLX_CREDIT_STATUS));
#endif
    return o_data.insertFromRight<OTL0_MISC_TLX_CREDIT_STATUS_DCP2_COUNT,
           OTL0_MISC_TLX_CREDIT_STATUS_DCP2_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_TLX_CREDIT_STATUS_DCP2_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_TLX_CREDIT_STATUS_DCP2_COUNT]

//>> SET_[OTL0_MISC_TLX_CREDIT_STATUS_DCP2_COUNT]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_TLX_CREDIT_STATUS_DCP2_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TLX_CREDIT_STATUS));
#endif
    return o_data.insertFromRight<OTL0_MISC_TLX_CREDIT_STATUS_DCP2_COUNT,
           OTL0_MISC_TLX_CREDIT_STATUS_DCP2_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_TLX_CREDIT_STATUS_DCP2_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_TLX_CREDIT_STATUS_DCP2_COUNT]

//>> GET_[OTL0_MISC_TLX_CREDIT_STATUS_DCP2_COUNT]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_TLX_CREDIT_STATUS_DCP2_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TLX_CREDIT_STATUS));
#endif
    return i_data.extractToRight<OTL0_MISC_TLX_CREDIT_STATUS_DCP2_COUNT,
           OTL0_MISC_TLX_CREDIT_STATUS_DCP2_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_TLX_CREDIT_STATUS_DCP2_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_TLX_CREDIT_STATUS_DCP2_COUNT]

//>> SET_[OTL0_MISC_TLX_CREDIT_STATUS_DCP3_COUNT]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_TLX_CREDIT_STATUS_DCP3_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TLX_CREDIT_STATUS));
#endif
    return o_data.insertFromRight<OTL0_MISC_TLX_CREDIT_STATUS_DCP3_COUNT,
           OTL0_MISC_TLX_CREDIT_STATUS_DCP3_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_TLX_CREDIT_STATUS_DCP3_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_TLX_CREDIT_STATUS_DCP3_COUNT]

//>> SET_[OTL0_MISC_TLX_CREDIT_STATUS_DCP3_COUNT]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_TLX_CREDIT_STATUS_DCP3_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TLX_CREDIT_STATUS));
#endif
    return o_data.insertFromRight<OTL0_MISC_TLX_CREDIT_STATUS_DCP3_COUNT,
           OTL0_MISC_TLX_CREDIT_STATUS_DCP3_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_TLX_CREDIT_STATUS_DCP3_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_TLX_CREDIT_STATUS_DCP3_COUNT]

//>> GET_[OTL0_MISC_TLX_CREDIT_STATUS_DCP3_COUNT]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_TLX_CREDIT_STATUS_DCP3_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TLX_CREDIT_STATUS));
#endif
    return i_data.extractToRight<OTL0_MISC_TLX_CREDIT_STATUS_DCP3_COUNT,
           OTL0_MISC_TLX_CREDIT_STATUS_DCP3_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_TLX_CREDIT_STATUS_DCP3_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_TLX_CREDIT_STATUS_DCP3_COUNT]

//>> PREP_[OTL0_MISC_TXI_ERR_INJ]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL0_MISC_TXI_ERR_INJ(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_TXI_ERR_INJ;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL0_MISC_TXI_ERR_INJ]

//>> GET_[OTL0_MISC_TXI_ERR_INJ]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL0_MISC_TXI_ERR_INJ(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_TXI_ERR_INJ;
#endif
    return fapi2::getScom(i_target, OTL0_MISC_TXI_ERR_INJ, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL0_MISC_TXI_ERR_INJ]

//>> PUT_[OTL0_MISC_TXI_ERR_INJ]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL0_MISC_TXI_ERR_INJ(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TXI_ERR_INJ));
#endif
    return fapi2::putScom(i_target, OTL0_MISC_TXI_ERR_INJ, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL0_MISC_TXI_ERR_INJ]


//>> SET_[OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TXI_ERR_INJ));
#endif
    return o_data.insertFromRight<OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE]

//>> SET_[OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TXI_ERR_INJ));
#endif
    return o_data.insertFromRight<OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE]

//>> SET_[OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TXI_ERR_INJ));
#endif
    return o_data.setBit<OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE]

//>> CLEAR_[OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TXI_ERR_INJ));
#endif
    return o_data.clearBit<OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE]

//>> GET_[OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TXI_ERR_INJ));
#endif
    return i_data.extractToRight<OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE]

//>> GET_[OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE]
static inline bool GET_OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TXI_ERR_INJ));
#endif
    return i_data.getBit<OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE]

//>> SET_[OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TXI_ERR_INJ));
#endif
    return o_data.insertFromRight<OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE]

//>> SET_[OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TXI_ERR_INJ));
#endif
    return o_data.insertFromRight<OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE]

//>> SET_[OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TXI_ERR_INJ));
#endif
    return o_data.setBit<OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE]

//>> CLEAR_[OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TXI_ERR_INJ));
#endif
    return o_data.clearBit<OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE]

//>> GET_[OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TXI_ERR_INJ));
#endif
    return i_data.extractToRight<OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE]

//>> GET_[OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE]
static inline bool GET_OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TXI_ERR_INJ));
#endif
    return i_data.getBit<OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE]

//>> SET_[OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TXI_ERR_INJ));
#endif
    return o_data.insertFromRight<OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE]

//>> SET_[OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TXI_ERR_INJ));
#endif
    return o_data.insertFromRight<OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE]

//>> SET_[OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TXI_ERR_INJ));
#endif
    return o_data.setBit<OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE]

//>> CLEAR_[OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TXI_ERR_INJ));
#endif
    return o_data.clearBit<OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE]

//>> GET_[OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TXI_ERR_INJ));
#endif
    return i_data.extractToRight<OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE]

//>> GET_[OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE]
static inline bool GET_OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TXI_ERR_INJ));
#endif
    return i_data.getBit<OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE]

//>> SET_[OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TXI_ERR_INJ));
#endif
    return o_data.insertFromRight<OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE]

//>> SET_[OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TXI_ERR_INJ));
#endif
    return o_data.insertFromRight<OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE]

//>> SET_[OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TXI_ERR_INJ));
#endif
    return o_data.setBit<OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE]

//>> CLEAR_[OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TXI_ERR_INJ));
#endif
    return o_data.clearBit<OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE]

//>> GET_[OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TXI_ERR_INJ));
#endif
    return i_data.extractToRight<OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE]

//>> GET_[OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE]
static inline bool GET_OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TXI_ERR_INJ));
#endif
    return i_data.getBit<OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE]

//>> SET_[OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TXI_ERR_INJ));
#endif
    return o_data.insertFromRight<OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND]

//>> SET_[OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TXI_ERR_INJ));
#endif
    return o_data.insertFromRight<OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND]

//>> SET_[OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TXI_ERR_INJ));
#endif
    return o_data.setBit<OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND]

//>> CLEAR_[OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TXI_ERR_INJ));
#endif
    return o_data.clearBit<OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND]

//>> GET_[OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TXI_ERR_INJ));
#endif
    return i_data.extractToRight<OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND]

//>> GET_[OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND]
static inline bool GET_OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TXI_ERR_INJ));
#endif
    return i_data.getBit<OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND]

//>> SET_[OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TXI_ERR_INJ));
#endif
    return o_data.insertFromRight<OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND]

//>> SET_[OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TXI_ERR_INJ));
#endif
    return o_data.insertFromRight<OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND]

//>> SET_[OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TXI_ERR_INJ));
#endif
    return o_data.setBit<OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND]

//>> CLEAR_[OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TXI_ERR_INJ));
#endif
    return o_data.clearBit<OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND]

//>> GET_[OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TXI_ERR_INJ));
#endif
    return i_data.extractToRight<OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND]

//>> GET_[OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND]
static inline bool GET_OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TXI_ERR_INJ));
#endif
    return i_data.getBit<OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND]

//>> PREP_[OTL1_MISC_CHKSW0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL1_MISC_CHKSW0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_CHKSW0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL1_MISC_CHKSW0]

//>> GET_[OTL1_MISC_CHKSW0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL1_MISC_CHKSW0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_CHKSW0;
#endif
    return fapi2::getScom(i_target, OTL1_MISC_CHKSW0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL1_MISC_CHKSW0]

//>> PUT_[OTL1_MISC_CHKSW0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL1_MISC_CHKSW0(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return fapi2::putScom(i_target, OTL1_MISC_CHKSW0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL1_MISC_CHKSW0]


//>> SET_[OTL1_MISC_CHKSW0_INHIBIT_EN]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CHKSW0_INHIBIT_EN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CHKSW0_INHIBIT_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CHKSW0_INHIBIT_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CHKSW0_INHIBIT_EN]

//>> SET_[OTL1_MISC_CHKSW0_INHIBIT_EN]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CHKSW0_INHIBIT_EN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CHKSW0_INHIBIT_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CHKSW0_INHIBIT_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CHKSW0_INHIBIT_EN]

//>> SET_[OTL1_MISC_CHKSW0_INHIBIT_EN]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CHKSW0_INHIBIT_EN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return o_data.setBit<OTL1_MISC_CHKSW0_INHIBIT_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_CHKSW0_INHIBIT_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CHKSW0_INHIBIT_EN]

//>> CLEAR_[OTL1_MISC_CHKSW0_INHIBIT_EN]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_CHKSW0_INHIBIT_EN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return o_data.clearBit<OTL1_MISC_CHKSW0_INHIBIT_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_CHKSW0_INHIBIT_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_CHKSW0_INHIBIT_EN]

//>> GET_[OTL1_MISC_CHKSW0_INHIBIT_EN]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CHKSW0_INHIBIT_EN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return i_data.extractToRight<OTL1_MISC_CHKSW0_INHIBIT_EN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CHKSW0_INHIBIT_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CHKSW0_INHIBIT_EN]

//>> GET_[OTL1_MISC_CHKSW0_INHIBIT_EN]
static inline bool GET_OTL1_MISC_CHKSW0_INHIBIT_EN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return i_data.getBit<OTL1_MISC_CHKSW0_INHIBIT_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_CHKSW0_INHIBIT_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CHKSW0_INHIBIT_EN]

//>> SET_[OTL1_MISC_CHKSW0_INHIBIT_PACE_ENABLE_CMD]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CHKSW0_INHIBIT_PACE_ENABLE_CMD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CHKSW0_INHIBIT_PACE_ENABLE_CMD,
           OTL1_MISC_CHKSW0_INHIBIT_PACE_ENABLE_CMD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CHKSW0_INHIBIT_PACE_ENABLE_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CHKSW0_INHIBIT_PACE_ENABLE_CMD]

//>> SET_[OTL1_MISC_CHKSW0_INHIBIT_PACE_ENABLE_CMD]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CHKSW0_INHIBIT_PACE_ENABLE_CMD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CHKSW0_INHIBIT_PACE_ENABLE_CMD,
           OTL1_MISC_CHKSW0_INHIBIT_PACE_ENABLE_CMD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CHKSW0_INHIBIT_PACE_ENABLE_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CHKSW0_INHIBIT_PACE_ENABLE_CMD]

//>> GET_[OTL1_MISC_CHKSW0_INHIBIT_PACE_ENABLE_CMD]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CHKSW0_INHIBIT_PACE_ENABLE_CMD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return i_data.extractToRight<OTL1_MISC_CHKSW0_INHIBIT_PACE_ENABLE_CMD,
           OTL1_MISC_CHKSW0_INHIBIT_PACE_ENABLE_CMD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CHKSW0_INHIBIT_PACE_ENABLE_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CHKSW0_INHIBIT_PACE_ENABLE_CMD]

//>> SET_[OTL1_MISC_CHKSW0_INHIBIT_PACE_DISABLE_CMD]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CHKSW0_INHIBIT_PACE_DISABLE_CMD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CHKSW0_INHIBIT_PACE_DISABLE_CMD,
           OTL1_MISC_CHKSW0_INHIBIT_PACE_DISABLE_CMD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CHKSW0_INHIBIT_PACE_DISABLE_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CHKSW0_INHIBIT_PACE_DISABLE_CMD]

//>> SET_[OTL1_MISC_CHKSW0_INHIBIT_PACE_DISABLE_CMD]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CHKSW0_INHIBIT_PACE_DISABLE_CMD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CHKSW0_INHIBIT_PACE_DISABLE_CMD,
           OTL1_MISC_CHKSW0_INHIBIT_PACE_DISABLE_CMD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CHKSW0_INHIBIT_PACE_DISABLE_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CHKSW0_INHIBIT_PACE_DISABLE_CMD]

//>> GET_[OTL1_MISC_CHKSW0_INHIBIT_PACE_DISABLE_CMD]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CHKSW0_INHIBIT_PACE_DISABLE_CMD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return i_data.extractToRight<OTL1_MISC_CHKSW0_INHIBIT_PACE_DISABLE_CMD,
           OTL1_MISC_CHKSW0_INHIBIT_PACE_DISABLE_CMD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CHKSW0_INHIBIT_PACE_DISABLE_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CHKSW0_INHIBIT_PACE_DISABLE_CMD]

//>> SET_[OTL1_MISC_CHKSW0_INHIBIT_PACE_ENABLE_RESP]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CHKSW0_INHIBIT_PACE_ENABLE_RESP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CHKSW0_INHIBIT_PACE_ENABLE_RESP,
           OTL1_MISC_CHKSW0_INHIBIT_PACE_ENABLE_RESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CHKSW0_INHIBIT_PACE_ENABLE_RESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CHKSW0_INHIBIT_PACE_ENABLE_RESP]

//>> SET_[OTL1_MISC_CHKSW0_INHIBIT_PACE_ENABLE_RESP]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CHKSW0_INHIBIT_PACE_ENABLE_RESP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CHKSW0_INHIBIT_PACE_ENABLE_RESP,
           OTL1_MISC_CHKSW0_INHIBIT_PACE_ENABLE_RESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CHKSW0_INHIBIT_PACE_ENABLE_RESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CHKSW0_INHIBIT_PACE_ENABLE_RESP]

//>> GET_[OTL1_MISC_CHKSW0_INHIBIT_PACE_ENABLE_RESP]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CHKSW0_INHIBIT_PACE_ENABLE_RESP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return i_data.extractToRight<OTL1_MISC_CHKSW0_INHIBIT_PACE_ENABLE_RESP,
           OTL1_MISC_CHKSW0_INHIBIT_PACE_ENABLE_RESP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CHKSW0_INHIBIT_PACE_ENABLE_RESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CHKSW0_INHIBIT_PACE_ENABLE_RESP]

//>> SET_[OTL1_MISC_CHKSW0_INHIBIT_PACE_DISABLE_RESP]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CHKSW0_INHIBIT_PACE_DISABLE_RESP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CHKSW0_INHIBIT_PACE_DISABLE_RESP,
           OTL1_MISC_CHKSW0_INHIBIT_PACE_DISABLE_RESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CHKSW0_INHIBIT_PACE_DISABLE_RESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CHKSW0_INHIBIT_PACE_DISABLE_RESP]

//>> SET_[OTL1_MISC_CHKSW0_INHIBIT_PACE_DISABLE_RESP]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CHKSW0_INHIBIT_PACE_DISABLE_RESP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CHKSW0_INHIBIT_PACE_DISABLE_RESP,
           OTL1_MISC_CHKSW0_INHIBIT_PACE_DISABLE_RESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CHKSW0_INHIBIT_PACE_DISABLE_RESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CHKSW0_INHIBIT_PACE_DISABLE_RESP]

//>> GET_[OTL1_MISC_CHKSW0_INHIBIT_PACE_DISABLE_RESP]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CHKSW0_INHIBIT_PACE_DISABLE_RESP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return i_data.extractToRight<OTL1_MISC_CHKSW0_INHIBIT_PACE_DISABLE_RESP,
           OTL1_MISC_CHKSW0_INHIBIT_PACE_DISABLE_RESP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CHKSW0_INHIBIT_PACE_DISABLE_RESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CHKSW0_INHIBIT_PACE_DISABLE_RESP]

//>> SET_[OTL1_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS]

//>> SET_[OTL1_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS]

//>> SET_[OTL1_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return o_data.setBit<OTL1_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS]

//>> CLEAR_[OTL1_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return o_data.clearBit<OTL1_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS]

//>> GET_[OTL1_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return i_data.extractToRight<OTL1_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS]

//>> GET_[OTL1_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS]
static inline bool GET_OTL1_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return i_data.getBit<OTL1_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS]

//>> SET_[OTL1_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ]

//>> SET_[OTL1_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ]

//>> SET_[OTL1_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return o_data.setBit<OTL1_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ]

//>> CLEAR_[OTL1_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return o_data.clearBit<OTL1_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ]

//>> GET_[OTL1_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return i_data.extractToRight<OTL1_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ]

//>> GET_[OTL1_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ]
static inline bool GET_OTL1_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return i_data.getBit<OTL1_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ]

//>> SET_[OTL1_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE]

//>> SET_[OTL1_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE]

//>> SET_[OTL1_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return o_data.setBit<OTL1_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE]

//>> CLEAR_[OTL1_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return o_data.clearBit<OTL1_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE]

//>> GET_[OTL1_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return i_data.extractToRight<OTL1_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE]

//>> GET_[OTL1_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE]
static inline bool GET_OTL1_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return i_data.getBit<OTL1_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE]

//>> SET_[OTL1_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE]

//>> SET_[OTL1_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE]

//>> SET_[OTL1_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return o_data.setBit<OTL1_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE]

//>> CLEAR_[OTL1_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return o_data.clearBit<OTL1_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE]

//>> GET_[OTL1_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return i_data.extractToRight<OTL1_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE]

//>> GET_[OTL1_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE]
static inline bool GET_OTL1_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return i_data.getBit<OTL1_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE]

//>> SET_[OTL1_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL]

//>> SET_[OTL1_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL]

//>> SET_[OTL1_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return o_data.setBit<OTL1_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL]

//>> CLEAR_[OTL1_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return o_data.clearBit<OTL1_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL]

//>> GET_[OTL1_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return i_data.extractToRight<OTL1_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL]

//>> GET_[OTL1_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL]
static inline bool GET_OTL1_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return i_data.getBit<OTL1_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL]

//>> SET_[OTL1_MISC_CHKSW0_OTL_CHKSW00]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CHKSW0_OTL_CHKSW00(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CHKSW0_OTL_CHKSW00,
           OTL1_MISC_CHKSW0_OTL_CHKSW00_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CHKSW0_OTL_CHKSW00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CHKSW0_OTL_CHKSW00]

//>> SET_[OTL1_MISC_CHKSW0_OTL_CHKSW00]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CHKSW0_OTL_CHKSW00(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CHKSW0_OTL_CHKSW00,
           OTL1_MISC_CHKSW0_OTL_CHKSW00_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CHKSW0_OTL_CHKSW00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CHKSW0_OTL_CHKSW00]

//>> GET_[OTL1_MISC_CHKSW0_OTL_CHKSW00]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CHKSW0_OTL_CHKSW00(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return i_data.extractToRight<OTL1_MISC_CHKSW0_OTL_CHKSW00,
           OTL1_MISC_CHKSW0_OTL_CHKSW00_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CHKSW0_OTL_CHKSW00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CHKSW0_OTL_CHKSW00]

//>> SET_[OTL1_MISC_CHKSW0_OTL_CHKSW01]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CHKSW0_OTL_CHKSW01(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CHKSW0_OTL_CHKSW01,
           OTL1_MISC_CHKSW0_OTL_CHKSW01_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CHKSW0_OTL_CHKSW01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CHKSW0_OTL_CHKSW01]

//>> SET_[OTL1_MISC_CHKSW0_OTL_CHKSW01]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CHKSW0_OTL_CHKSW01(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CHKSW0_OTL_CHKSW01,
           OTL1_MISC_CHKSW0_OTL_CHKSW01_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CHKSW0_OTL_CHKSW01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CHKSW0_OTL_CHKSW01]

//>> GET_[OTL1_MISC_CHKSW0_OTL_CHKSW01]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CHKSW0_OTL_CHKSW01(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CHKSW0));
#endif
    return i_data.extractToRight<OTL1_MISC_CHKSW0_OTL_CHKSW01,
           OTL1_MISC_CHKSW0_OTL_CHKSW01_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CHKSW0_OTL_CHKSW01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CHKSW0_OTL_CHKSW01]

//>> PREP_[OTL1_MISC_C_ERR_RPT_MASK1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL1_MISC_C_ERR_RPT_MASK1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_C_ERR_RPT_MASK1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL1_MISC_C_ERR_RPT_MASK1]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL1_MISC_C_ERR_RPT_MASK1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_C_ERR_RPT_MASK1;
#endif
    return fapi2::getScom(i_target, OTL1_MISC_C_ERR_RPT_MASK1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1]

//>> PUT_[OTL1_MISC_C_ERR_RPT_MASK1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL1_MISC_C_ERR_RPT_MASK1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return fapi2::putScom(i_target, OTL1_MISC_C_ERR_RPT_MASK1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL1_MISC_C_ERR_RPT_MASK1]


//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_00]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_00(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_00,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_00]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_00]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_00(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_00,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_00]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_00]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_00(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK1_00>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_00]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_00]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK1_00(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK1_00>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_00]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_00]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK1_00(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK1_00,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_00]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_00]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK1_00(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK1_00>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_00]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_01]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_01(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_01,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_01]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_01]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_01(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_01,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_01]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_01]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_01(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK1_01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_01]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_01]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK1_01(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK1_01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_01]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_01]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK1_01(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK1_01,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_01]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_01]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK1_01(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK1_01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_01]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_02]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_02(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_02,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_02]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_02]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_02(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_02,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_02]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_02]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_02(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK1_02>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_02]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_02]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK1_02(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK1_02>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_02]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_02]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK1_02(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK1_02,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_02]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_02]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK1_02(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK1_02>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_02]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_03]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_03(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_03,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_03]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_03]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_03(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_03,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_03]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_03]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_03(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK1_03>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_03]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_03]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK1_03(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK1_03>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_03]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_03]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK1_03(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK1_03,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_03]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_03]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK1_03(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK1_03>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_03]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_04]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_04(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_04,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_04]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_04]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_04(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_04,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_04]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_04]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_04(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK1_04>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_04]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_04]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK1_04(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK1_04>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_04]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_04]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK1_04(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK1_04,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_04]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_04]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK1_04(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK1_04>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_04]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_05]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_05(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_05,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_05]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_05]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_05(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_05,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_05]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_05]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_05(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK1_05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_05]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_05]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK1_05(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK1_05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_05]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_05]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK1_05(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK1_05,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_05]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_05]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK1_05(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK1_05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_05]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_06]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_06(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_06,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_06]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_06]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_06(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_06,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_06]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_06]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_06(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK1_06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_06]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_06]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK1_06(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK1_06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_06]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_06]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK1_06(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK1_06,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_06]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_06]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK1_06(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK1_06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_06]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_07]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_07(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_07,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_07]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_07]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_07(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_07,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_07]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_07]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_07(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK1_07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_07]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_07]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK1_07(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK1_07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_07]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_07]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK1_07(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK1_07,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_07]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_07]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK1_07(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK1_07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_07]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_08]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_08(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_08,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_08]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_08]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_08(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_08,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_08]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_08]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_08(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK1_08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_08]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_08]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK1_08(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK1_08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_08]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_08]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK1_08(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK1_08,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_08]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_08]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK1_08(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK1_08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_08]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_09]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_09(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_09,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_09]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_09]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_09(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_09,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_09]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_09]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_09(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK1_09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_09]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_09]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK1_09(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK1_09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_09]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_09]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK1_09(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK1_09,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_09]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_09]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK1_09(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK1_09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_09]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_10]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_10]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_10]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_10]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_10]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK1_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_10]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_10]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK1_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK1_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_10]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_10]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK1_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK1_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_10]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_10]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK1_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK1_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_10]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_11]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_11]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_11]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_11]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_11]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK1_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_11]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_11]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK1_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK1_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_11]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_11]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK1_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK1_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_11]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_11]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK1_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK1_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_11]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_12]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_12]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_12]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_12]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_12]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK1_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_12]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_12]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK1_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK1_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_12]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_12]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK1_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK1_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_12]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_12]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK1_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK1_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_12]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_13]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_13]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_13]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_13]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_13]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK1_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_13]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_13]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK1_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK1_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_13]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_13]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK1_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK1_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_13]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_13]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK1_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK1_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_13]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_14]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_14]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_14]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_14]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_14]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK1_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_14]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_14]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK1_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK1_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_14]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_14]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK1_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK1_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_14]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_14]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK1_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK1_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_14]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_15]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_15]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_15]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_15]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_15]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK1_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_15]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_15]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK1_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK1_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_15]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_15]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK1_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK1_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_15]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_15]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK1_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK1_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_15]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_16]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_16]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_16]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_16]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_16]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK1_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_16]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_16]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK1_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK1_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_16]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_16]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK1_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK1_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_16]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_16]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK1_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK1_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_16]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_17]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_17]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_17]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_17]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_17]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK1_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_17]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_17]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK1_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK1_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_17]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_17]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK1_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK1_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_17]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_17]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK1_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK1_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_17]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_18]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_18]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_18]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_18]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_18]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK1_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_18]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_18]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK1_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK1_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_18]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_18]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK1_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK1_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_18]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_18]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK1_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK1_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_18]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_19]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_19]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_19]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_19]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_19]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK1_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_19]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_19]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK1_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK1_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_19]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_19]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK1_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK1_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_19]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_19]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK1_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK1_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_19]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_20]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_20(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_20]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_20]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_20(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_20]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_20]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK1_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_20]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_20]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK1_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK1_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_20]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_20]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK1_20(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK1_20,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_20]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_20]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK1_20(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK1_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_20]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_21]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_21(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_21]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_21]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_21(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_21]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_21]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK1_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_21]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_21]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK1_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK1_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_21]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_21]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK1_21(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK1_21,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_21]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_21]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK1_21(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK1_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_21]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_22]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_22(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_22]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_22]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_22(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_22]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_22]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK1_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_22]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_22]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK1_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK1_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_22]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_22]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK1_22(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK1_22,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_22]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_22]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK1_22(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK1_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_22]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_23]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_23]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_23]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_23]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_23]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK1_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_23]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_23]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK1_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK1_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_23]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_23]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK1_23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK1_23,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_23]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_23]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK1_23(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK1_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_23]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_24]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_24(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_24]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_24]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_24(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_24]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_24]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK1_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_24]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_24]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK1_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK1_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_24]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_24]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK1_24(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK1_24,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_24]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_24]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK1_24(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK1_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_24]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_25]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_25(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_25]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_25]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_25(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_25]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_25]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK1_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_25]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_25]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK1_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK1_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_25]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_25]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK1_25(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK1_25,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_25]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_25]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK1_25(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK1_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_25]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_26]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_26(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_26]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_26]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_26(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_26]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_26]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK1_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_26]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_26]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK1_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK1_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_26]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_26]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK1_26(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK1_26,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_26]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_26]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK1_26(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK1_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_26]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_27]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_27(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_27]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_27]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_27(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_27]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_27]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK1_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_27]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_27]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK1_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK1_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_27]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_27]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK1_27(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK1_27,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_27]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_27]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK1_27(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK1_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_27]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_28]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_28(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_28]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_28]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_28(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_28]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_28]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK1_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_28]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_28]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK1_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK1_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_28]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_28]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK1_28(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK1_28,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_28]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_28]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK1_28(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK1_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_28]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_29]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_29(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_29]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_29]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_29(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_29]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_29]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK1_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_29]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_29]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK1_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK1_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_29]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_29]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK1_29(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK1_29,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_29]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_29]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK1_29(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK1_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_29]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_30]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_30(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_30]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_30]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_30(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_30]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_30]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK1_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_30]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_30]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK1_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK1_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_30]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_30]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK1_30(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK1_30,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_30]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_30]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK1_30(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK1_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_30]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_31]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_31(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_31]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_31]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_31(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK1_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_31]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK1_31]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK1_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK1_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK1_31]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_31]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK1_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK1_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK1_31]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_31]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK1_31(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK1_31,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_31]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK1_31]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK1_31(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK1_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK1_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK1_31]

//>> PREP_[OTL1_MISC_ERROR_SIG_TXI]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL1_MISC_ERROR_SIG_TXI(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_ERROR_SIG_TXI;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL1_MISC_ERROR_SIG_TXI]

//>> GET_[OTL1_MISC_ERROR_SIG_TXI]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL1_MISC_ERROR_SIG_TXI(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_ERROR_SIG_TXI;
#endif
    return fapi2::getScom(i_target, OTL1_MISC_ERROR_SIG_TXI, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL1_MISC_ERROR_SIG_TXI]

//>> PUT_[OTL1_MISC_ERROR_SIG_TXI]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL1_MISC_ERROR_SIG_TXI(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL1_MISC_ERROR_SIG_TXI));
#endif
    return fapi2::putScom(i_target, OTL1_MISC_ERROR_SIG_TXI, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL1_MISC_ERROR_SIG_TXI]


//>> SET_[OTL1_MISC_ERROR_SIG_TXI_ERRSIGTXI_BAD_OPCODE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_ERROR_SIG_TXI_ERRSIGTXI_BAD_OPCODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_ERROR_SIG_TXI));
#endif
    return o_data.insertFromRight<OTL1_MISC_ERROR_SIG_TXI_ERRSIGTXI_BAD_OPCODE,
           OTL1_MISC_ERROR_SIG_TXI_ERRSIGTXI_BAD_OPCODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_ERROR_SIG_TXI_ERRSIGTXI_BAD_OPCODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_ERROR_SIG_TXI_ERRSIGTXI_BAD_OPCODE]

//>> SET_[OTL1_MISC_ERROR_SIG_TXI_ERRSIGTXI_BAD_OPCODE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_ERROR_SIG_TXI_ERRSIGTXI_BAD_OPCODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_ERROR_SIG_TXI));
#endif
    return o_data.insertFromRight<OTL1_MISC_ERROR_SIG_TXI_ERRSIGTXI_BAD_OPCODE,
           OTL1_MISC_ERROR_SIG_TXI_ERRSIGTXI_BAD_OPCODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_ERROR_SIG_TXI_ERRSIGTXI_BAD_OPCODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_ERROR_SIG_TXI_ERRSIGTXI_BAD_OPCODE]

//>> GET_[OTL1_MISC_ERROR_SIG_TXI_ERRSIGTXI_BAD_OPCODE]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_ERROR_SIG_TXI_ERRSIGTXI_BAD_OPCODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_ERROR_SIG_TXI));
#endif
    return i_data.extractToRight<OTL1_MISC_ERROR_SIG_TXI_ERRSIGTXI_BAD_OPCODE,
           OTL1_MISC_ERROR_SIG_TXI_ERRSIGTXI_BAD_OPCODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_ERROR_SIG_TXI_ERRSIGTXI_BAD_OPCODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_ERROR_SIG_TXI_ERRSIGTXI_BAD_OPCODE]

//>> PREP_[XSL_MAIN_XSLOP_VLOG_RGS_DEF]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_XSL_MAIN_XSLOP_VLOG_RGS_DEF(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_XSLOP_VLOG_RGS_DEF;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[XSL_MAIN_XSLOP_VLOG_RGS_DEF]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_XSL_MAIN_XSLOP_VLOG_RGS_DEF(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_XSLOP_VLOG_RGS_DEF;
#endif
    return fapi2::getScom(i_target, XSL_MAIN_XSLOP_VLOG_RGS_DEF, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF]

//>> PUT_[XSL_MAIN_XSLOP_VLOG_RGS_DEF]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_XSL_MAIN_XSLOP_VLOG_RGS_DEF(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return fapi2::putScom(i_target, XSL_MAIN_XSLOP_VLOG_RGS_DEF, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[XSL_MAIN_XSLOP_VLOG_RGS_DEF]


//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_MEE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_MEE_DIAL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_DEF_MEE_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_DEF_MEE_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_MEE_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_MEE_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_MEE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_MEE_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_DEF_MEE_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_DEF_MEE_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_MEE_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_MEE_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_MEE_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_MEE_DIAL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_DEF_MEE_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_DEF_MEE_DIAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_MEE_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_MEE_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_ITL_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_ITL_DIAL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_DEF_ITL_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_DEF_ITL_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_ITL_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_ITL_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_ITL_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_ITL_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_DEF_ITL_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_DEF_ITL_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_ITL_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_ITL_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_ITL_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_ITL_DIAL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_DEF_ITL_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_DEF_ITL_DIAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_ITL_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_ITL_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_ITE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_ITE_DIAL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_DEF_ITE_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_DEF_ITE_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_ITE_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_ITE_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_ITE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_ITE_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_DEF_ITE_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_DEF_ITE_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_ITE_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_ITE_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_ITE_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_ITE_DIAL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_DEF_ITE_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_DEF_ITE_DIAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_ITE_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_ITE_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_ERT_SIZE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_ERT_SIZE_DIAL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_DEF_ERT_SIZE_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_DEF_ERT_SIZE_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_ERT_SIZE_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_ERT_SIZE_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_ERT_SIZE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_ERT_SIZE_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_DEF_ERT_SIZE_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_DEF_ERT_SIZE_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_ERT_SIZE_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_ERT_SIZE_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_ERT_SIZE_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_ERT_SIZE_DIAL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_DEF_ERT_SIZE_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_DEF_ERT_SIZE_DIAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_ERT_SIZE_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_ERT_SIZE_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTX_SIZE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTX_SIZE_DIAL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTX_SIZE_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTX_SIZE_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTX_SIZE_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTX_SIZE_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTX_SIZE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTX_SIZE_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTX_SIZE_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTX_SIZE_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTX_SIZE_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTX_SIZE_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTX_SIZE_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTX_SIZE_DIAL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTX_SIZE_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTX_SIZE_DIAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTX_SIZE_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTX_SIZE_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_TAD_SIZE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_TAD_SIZE_DIAL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_DEF_TAD_SIZE_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_DEF_TAD_SIZE_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_TAD_SIZE_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_TAD_SIZE_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_TAD_SIZE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_TAD_SIZE_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_DEF_TAD_SIZE_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_DEF_TAD_SIZE_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_TAD_SIZE_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_TAD_SIZE_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_TAD_SIZE_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_TAD_SIZE_DIAL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_DEF_TAD_SIZE_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_DEF_TAD_SIZE_DIAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_TAD_SIZE_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_TAD_SIZE_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTXM_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTXM_DIAL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTXM_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTXM_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTXM_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTXM_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTXM_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTXM_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTXM_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTXM_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTXM_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTXM_DIAL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return o_data.setBit<XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTXM_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTXM_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTXM_DIAL]

//>> CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTXM_DIAL]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTXM_DIAL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return o_data.clearBit<XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTXM_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTXM_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTXM_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTXM_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTXM_DIAL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTXM_DIAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTXM_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTXM_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTXM_DIAL]
static inline bool GET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTXM_DIAL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return i_data.getBit<XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTXM_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTXM_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_CTXM_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOE_ASSIGN_METHOD_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOE_ASSIGN_METHOD_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOE_ASSIGN_METHOD_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOE_ASSIGN_METHOD_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOE_ASSIGN_METHOD_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOE_ASSIGN_METHOD_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOE_ASSIGN_METHOD_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOE_ASSIGN_METHOD_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOE_ASSIGN_METHOD_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOE_ASSIGN_METHOD_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOE_ASSIGN_METHOD_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOE_ASSIGN_METHOD_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return o_data.setBit<XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOE_ASSIGN_METHOD_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOE_ASSIGN_METHOD_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOE_ASSIGN_METHOD_DIAL]

//>> CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOE_ASSIGN_METHOD_DIAL]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOE_ASSIGN_METHOD_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return o_data.clearBit<XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOE_ASSIGN_METHOD_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOE_ASSIGN_METHOD_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOE_ASSIGN_METHOD_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOE_ASSIGN_METHOD_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOE_ASSIGN_METHOD_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOE_ASSIGN_METHOD_DIAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOE_ASSIGN_METHOD_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOE_ASSIGN_METHOD_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOE_ASSIGN_METHOD_DIAL]
static inline bool GET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOE_ASSIGN_METHOD_DIAL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return i_data.getBit<XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOE_ASSIGN_METHOD_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOE_ASSIGN_METHOD_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOE_ASSIGN_METHOD_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOEE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOEE_DIAL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOEE_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOEE_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOEE_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOEE_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOEE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOEE_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOEE_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOEE_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOEE_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOEE_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOEE_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOEE_DIAL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOEE_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOEE_DIAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOEE_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_ECOEE_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_TCOEE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_TCOEE_DIAL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_DEF_TCOEE_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_DEF_TCOEE_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_TCOEE_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_TCOEE_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_TCOEE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_TCOEE_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_DEF_TCOEE_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_DEF_TCOEE_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_TCOEE_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_TCOEE_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_TCOEE_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_TCOEE_DIAL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_DEF_TCOEE_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_DEF_TCOEE_DIAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_TCOEE_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_TCOEE_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_DIS_ECOE_BLOCKER_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_DIS_ECOE_BLOCKER_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_DEF_DIS_ECOE_BLOCKER_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_DIS_ECOE_BLOCKER_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_DIS_ECOE_BLOCKER_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_DIS_ECOE_BLOCKER_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_DIS_ECOE_BLOCKER_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_DEF_DIS_ECOE_BLOCKER_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_DIS_ECOE_BLOCKER_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_DIS_ECOE_BLOCKER_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_DIS_ECOE_BLOCKER_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_DIS_ECOE_BLOCKER_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return o_data.setBit<XSL_MAIN_XSLOP_VLOG_RGS_DEF_DIS_ECOE_BLOCKER_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_DIS_ECOE_BLOCKER_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_DIS_ECOE_BLOCKER_DIAL]

//>> CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_DIS_ECOE_BLOCKER_DIAL]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_XSLOP_VLOG_RGS_DEF_DIS_ECOE_BLOCKER_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return o_data.clearBit<XSL_MAIN_XSLOP_VLOG_RGS_DEF_DIS_ECOE_BLOCKER_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_DIS_ECOE_BLOCKER_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_DIS_ECOE_BLOCKER_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_DIS_ECOE_BLOCKER_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_DIS_ECOE_BLOCKER_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_DEF_DIS_ECOE_BLOCKER_DIAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_DIS_ECOE_BLOCKER_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_DIS_ECOE_BLOCKER_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_DIS_ECOE_BLOCKER_DIAL]
static inline bool GET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_DIS_ECOE_BLOCKER_DIAL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return i_data.getBit<XSL_MAIN_XSLOP_VLOG_RGS_DEF_DIS_ECOE_BLOCKER_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_DIS_ECOE_BLOCKER_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_DIS_ECOE_BLOCKER_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_CO_RTRY_LIM_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_CO_RTRY_LIM_DIAL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_DEF_CO_RTRY_LIM_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_DEF_CO_RTRY_LIM_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_CO_RTRY_LIM_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_CO_RTRY_LIM_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_CO_RTRY_LIM_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_CO_RTRY_LIM_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_DEF_CO_RTRY_LIM_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_DEF_CO_RTRY_LIM_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_CO_RTRY_LIM_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_CO_RTRY_LIM_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_CO_RTRY_LIM_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_CO_RTRY_LIM_DIAL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_DEF_CO_RTRY_LIM_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_DEF_CO_RTRY_LIM_DIAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_CO_RTRY_LIM_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_CO_RTRY_LIM_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_DEFE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_DEFE_DIAL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_DEF_DEFE_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_DEFE_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_DEFE_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_DEFE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_DEFE_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_DEF_DEFE_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_DEFE_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_DEFE_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_DEFE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_DEFE_DIAL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return o_data.setBit<XSL_MAIN_XSLOP_VLOG_RGS_DEF_DEFE_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_DEFE_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_DEFE_DIAL]

//>> CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_DEFE_DIAL]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_XSLOP_VLOG_RGS_DEF_DEFE_DIAL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return o_data.clearBit<XSL_MAIN_XSLOP_VLOG_RGS_DEF_DEFE_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_DEFE_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_DEFE_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_DEFE_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_DEFE_DIAL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_DEF_DEFE_DIAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_DEFE_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_DEFE_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_DEFE_DIAL]
static inline bool GET_XSL_MAIN_XSLOP_VLOG_RGS_DEF_DEFE_DIAL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_DEF));
#endif
    return i_data.getBit<XSL_MAIN_XSLOP_VLOG_RGS_DEF_DEFE_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_DEF_DEFE_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_DEF_DEFE_DIAL]

//>> PREP_[XSL_MAIN_XSLOP_VLOG_RGS_PMON]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_XSL_MAIN_XSLOP_VLOG_RGS_PMON(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_XSLOP_VLOG_RGS_PMON;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[XSL_MAIN_XSLOP_VLOG_RGS_PMON]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_XSL_MAIN_XSLOP_VLOG_RGS_PMON(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_XSLOP_VLOG_RGS_PMON;
#endif
    return fapi2::getScom(i_target, XSL_MAIN_XSLOP_VLOG_RGS_PMON, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON]

//>> PUT_[XSL_MAIN_XSLOP_VLOG_RGS_PMON]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_XSL_MAIN_XSLOP_VLOG_RGS_PMON(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_PMON));
#endif
    return fapi2::putScom(i_target, XSL_MAIN_XSLOP_VLOG_RGS_PMON, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[XSL_MAIN_XSLOP_VLOG_RGS_PMON]


//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_0_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_PMON_0_DIAL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_PMON));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_PMON_0_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_PMON_0_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_PMON_0_DIAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_0_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_0_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_PMON_0_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_PMON));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_PMON_0_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_PMON_0_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_PMON_0_DIAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_0_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_0_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_PMON_0_DIAL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_PMON));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_PMON_0_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_PMON_0_DIAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_PMON_0_DIAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_0_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_1_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_PMON_1_DIAL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_PMON));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_PMON_1_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_PMON_1_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_PMON_1_DIAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_1_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_1_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_PMON_1_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_PMON));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_PMON_1_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_PMON_1_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_PMON_1_DIAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_1_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_1_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_PMON_1_DIAL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_PMON));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_PMON_1_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_PMON_1_DIAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_PMON_1_DIAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_1_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_2_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_PMON_2_DIAL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_PMON));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_PMON_2_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_PMON_2_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_PMON_2_DIAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_2_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_2_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_PMON_2_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_PMON));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_PMON_2_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_PMON_2_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_PMON_2_DIAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_2_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_2_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_PMON_2_DIAL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_PMON));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_PMON_2_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_PMON_2_DIAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_PMON_2_DIAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_2_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_3_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_PMON_3_DIAL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_PMON));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_PMON_3_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_PMON_3_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_PMON_3_DIAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_3_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_3_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_PMON_3_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_PMON));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_PMON_3_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_PMON_3_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_PMON_3_DIAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_3_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_3_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_PMON_3_DIAL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_PMON));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_PMON_3_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_PMON_3_DIAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_PMON_3_DIAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_3_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_4_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_PMON_4_DIAL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_PMON));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_PMON_4_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_PMON_4_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_PMON_4_DIAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_4_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_4_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_PMON_4_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_PMON));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_PMON_4_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_PMON_4_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_PMON_4_DIAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_4_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_4_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_PMON_4_DIAL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_PMON));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_PMON_4_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_PMON_4_DIAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_PMON_4_DIAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_4_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_5_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_PMON_5_DIAL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_PMON));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_PMON_5_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_PMON_5_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_PMON_5_DIAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_5_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_5_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_PMON_5_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_PMON));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_PMON_5_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_PMON_5_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_PMON_5_DIAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_5_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_5_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_PMON_5_DIAL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_PMON));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_PMON_5_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_PMON_5_DIAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_PMON_5_DIAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_5_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_6_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_PMON_6_DIAL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_PMON));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_PMON_6_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_PMON_6_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_PMON_6_DIAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_6_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_6_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_PMON_6_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_PMON));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_PMON_6_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_PMON_6_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_PMON_6_DIAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_6_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_6_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_PMON_6_DIAL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_PMON));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_PMON_6_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_PMON_6_DIAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_PMON_6_DIAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_6_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_7_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_PMON_7_DIAL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_PMON));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_PMON_7_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_PMON_7_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_PMON_7_DIAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_7_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_7_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_PMON_7_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_PMON));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_PMON_7_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_PMON_7_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_PMON_7_DIAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_7_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_7_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_PMON_7_DIAL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_PMON));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_PMON_7_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_PMON_7_DIAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_PMON_7_DIAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_PMON_7_DIAL]

//>> PREP_[XSL_MAIN_WRAP_ERR_MASK_1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_XSL_MAIN_WRAP_ERR_MASK_1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_WRAP_ERR_MASK_1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[XSL_MAIN_WRAP_ERR_MASK_1]

//>> GET_[XSL_MAIN_WRAP_ERR_MASK_1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_XSL_MAIN_WRAP_ERR_MASK_1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_WRAP_ERR_MASK_1;
#endif
    return fapi2::getScom(i_target, XSL_MAIN_WRAP_ERR_MASK_1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERR_MASK_1]

//>> PUT_[XSL_MAIN_WRAP_ERR_MASK_1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_XSL_MAIN_WRAP_ERR_MASK_1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERR_MASK_1));
#endif
    return fapi2::putScom(i_target, XSL_MAIN_WRAP_ERR_MASK_1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[XSL_MAIN_WRAP_ERR_MASK_1]


//>> SET_[XSL_MAIN_WRAP_ERR_MASK_1_XSL_WRAP_ERR_MASK_1_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERR_MASK_1_XSL_WRAP_ERR_MASK_1_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERR_MASK_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERR_MASK_1_XSL_WRAP_ERR_MASK_1_DIAL,
           XSL_MAIN_WRAP_ERR_MASK_1_XSL_WRAP_ERR_MASK_1_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERR_MASK_1_XSL_WRAP_ERR_MASK_1_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERR_MASK_1_XSL_WRAP_ERR_MASK_1_DIAL]

//>> SET_[XSL_MAIN_WRAP_ERR_MASK_1_XSL_WRAP_ERR_MASK_1_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERR_MASK_1_XSL_WRAP_ERR_MASK_1_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERR_MASK_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERR_MASK_1_XSL_WRAP_ERR_MASK_1_DIAL,
           XSL_MAIN_WRAP_ERR_MASK_1_XSL_WRAP_ERR_MASK_1_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERR_MASK_1_XSL_WRAP_ERR_MASK_1_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERR_MASK_1_XSL_WRAP_ERR_MASK_1_DIAL]

//>> GET_[XSL_MAIN_WRAP_ERR_MASK_1_XSL_WRAP_ERR_MASK_1_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERR_MASK_1_XSL_WRAP_ERR_MASK_1_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERR_MASK_1));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERR_MASK_1_XSL_WRAP_ERR_MASK_1_DIAL,
           XSL_MAIN_WRAP_ERR_MASK_1_XSL_WRAP_ERR_MASK_1_DIAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERR_MASK_1_XSL_WRAP_ERR_MASK_1_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERR_MASK_1_XSL_WRAP_ERR_MASK_1_DIAL]

//>> PREP_[XTS_ATSD_HYP10]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_XTS_ATSD_HYP10(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XTS_ATSD_HYP10;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[XTS_ATSD_HYP10]

//>> GET_[XTS_ATSD_HYP10]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_XTS_ATSD_HYP10(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XTS_ATSD_HYP10;
#endif
    return fapi2::getScom(i_target, XTS_ATSD_HYP10, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[XTS_ATSD_HYP10]

//>> PUT_[XTS_ATSD_HYP10]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_XTS_ATSD_HYP10(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP10));
#endif
    return fapi2::putScom(i_target, XTS_ATSD_HYP10, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[XTS_ATSD_HYP10]


//>> SET_[XTS_ATSD_HYP10_MSRHV]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP10_MSRHV(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP10));
#endif
    return o_data.insertFromRight<XTS_ATSD_HYP10_MSRHV,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_ATSD_HYP10_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP10_MSRHV]

//>> SET_[XTS_ATSD_HYP10_MSRHV]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP10_MSRHV(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP10));
#endif
    return o_data.insertFromRight<XTS_ATSD_HYP10_MSRHV,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_ATSD_HYP10_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP10_MSRHV]

//>> SET_[XTS_ATSD_HYP10_MSRHV]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP10_MSRHV(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP10));
#endif
    return o_data.setBit<XTS_ATSD_HYP10_MSRHV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XTS_ATSD_HYP10_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP10_MSRHV]

//>> CLEAR_[XTS_ATSD_HYP10_MSRHV]
static inline fapi2::buffer<uint64_t>& CLEAR_XTS_ATSD_HYP10_MSRHV(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP10));
#endif
    return o_data.clearBit<XTS_ATSD_HYP10_MSRHV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XTS_ATSD_HYP10_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XTS_ATSD_HYP10_MSRHV]

//>> GET_[XTS_ATSD_HYP10_MSRHV]
static inline fapi2::buffer<uint64_t>& GET_XTS_ATSD_HYP10_MSRHV(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP10));
#endif
    return i_data.extractToRight<XTS_ATSD_HYP10_MSRHV,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_ATSD_HYP10_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_ATSD_HYP10_MSRHV]

//>> GET_[XTS_ATSD_HYP10_MSRHV]
static inline bool GET_XTS_ATSD_HYP10_MSRHV(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP10));
#endif
    return i_data.getBit<XTS_ATSD_HYP10_MSRHV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XTS_ATSD_HYP10_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_ATSD_HYP10_MSRHV]

//>> SET_[XTS_ATSD_HYP10_LPARID]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP10_LPARID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP10));
#endif
    return o_data.insertFromRight<XTS_ATSD_HYP10_LPARID,
           XTS_ATSD_HYP10_LPARID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_ATSD_HYP10_LPARID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP10_LPARID]

//>> SET_[XTS_ATSD_HYP10_LPARID]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP10_LPARID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP10));
#endif
    return o_data.insertFromRight<XTS_ATSD_HYP10_LPARID,
           XTS_ATSD_HYP10_LPARID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_ATSD_HYP10_LPARID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP10_LPARID]

//>> GET_[XTS_ATSD_HYP10_LPARID]
static inline fapi2::buffer<uint64_t>& GET_XTS_ATSD_HYP10_LPARID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP10));
#endif
    return i_data.extractToRight<XTS_ATSD_HYP10_LPARID,
           XTS_ATSD_HYP10_LPARID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_ATSD_HYP10_LPARID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_ATSD_HYP10_LPARID]

//>> PREP_[XTS_REG_ERR_FIRST]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_XTS_REG_ERR_FIRST(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XTS_REG_ERR_FIRST;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[XTS_REG_ERR_FIRST]

//>> GET_[XTS_REG_ERR_FIRST]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_XTS_REG_ERR_FIRST(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XTS_REG_ERR_FIRST;
#endif
    return fapi2::getScom(i_target, XTS_REG_ERR_FIRST, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[XTS_REG_ERR_FIRST]

//>> PUT_[XTS_REG_ERR_FIRST]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_XTS_REG_ERR_FIRST(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(XTS_REG_ERR_FIRST));
#endif
    return fapi2::putScom(i_target, XTS_REG_ERR_FIRST, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[XTS_REG_ERR_FIRST]


//>> SET_[XTS_REG_ERR_FIRST_ERR_FIRST_BITS]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_ERR_FIRST_ERR_FIRST_BITS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_ERR_FIRST));
#endif
    return o_data.insertFromRight<XTS_REG_ERR_FIRST_ERR_FIRST_BITS,
           XTS_REG_ERR_FIRST_ERR_FIRST_BITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_ERR_FIRST_ERR_FIRST_BITS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_ERR_FIRST_ERR_FIRST_BITS]

//>> SET_[XTS_REG_ERR_FIRST_ERR_FIRST_BITS]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_ERR_FIRST_ERR_FIRST_BITS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_ERR_FIRST));
#endif
    return o_data.insertFromRight<XTS_REG_ERR_FIRST_ERR_FIRST_BITS,
           XTS_REG_ERR_FIRST_ERR_FIRST_BITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_ERR_FIRST_ERR_FIRST_BITS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_ERR_FIRST_ERR_FIRST_BITS]

//>> GET_[XTS_REG_ERR_FIRST_ERR_FIRST_BITS]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_ERR_FIRST_ERR_FIRST_BITS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_ERR_FIRST));
#endif
    return i_data.extractToRight<XTS_REG_ERR_FIRST_ERR_FIRST_BITS,
           XTS_REG_ERR_FIRST_ERR_FIRST_BITS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_ERR_FIRST_ERR_FIRST_BITS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_ERR_FIRST_ERR_FIRST_BITS]


//>>THE END<<

#ifndef __PPE_HCODE__
}
}

#endif
#endif
