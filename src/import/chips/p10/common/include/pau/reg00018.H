/* IBM_PROLOG_BEGIN_TAG                                                   */
/* This is an automatically generated prolog.                             */
/*                                                                        */
/* $Source: src/import/chips/p10/common/include/pau/reg00018.H $          */
/*                                                                        */
/* OpenPOWER sbe Project                                                  */
/*                                                                        */
/* Contributors Listed Below - COPYRIGHT 2019,2020                        */
/* [+] International Business Machines Corp.                              */
/*                                                                        */
/*                                                                        */
/* Licensed under the Apache License, Version 2.0 (the "License");        */
/* you may not use this file except in compliance with the License.       */
/* You may obtain a copy of the License at                                */
/*                                                                        */
/*     http://www.apache.org/licenses/LICENSE-2.0                         */
/*                                                                        */
/* Unless required by applicable law or agreed to in writing, software    */
/* distributed under the License is distributed on an "AS IS" BASIS,      */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        */
/* implied. See the License for the specific language governing           */
/* permissions and limitations under the License.                         */
/*                                                                        */
/* IBM_PROLOG_END_TAG                                                     */
#include "fapi2.H"

#ifndef __PAU_REG00018_H_
#define __PAU_REG00018_H_

#ifndef __PPE_HCODE__
namespace scomt
{
namespace pau
{
#endif


//>> PREP_[AME_AME0_MISC_AMM_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AME_AME0_MISC_AMM_CONFIG1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME0_MISC_AMM_CONFIG1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AME_AME0_MISC_AMM_CONFIG1]

//>> GET_[AME_AME0_MISC_AMM_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AME_AME0_MISC_AMM_CONFIG1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME0_MISC_AMM_CONFIG1;
#endif
    return fapi2::getScom(i_target, AME_AME0_MISC_AMM_CONFIG1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AME_AME0_MISC_AMM_CONFIG1]

//>> PUT_[AME_AME0_MISC_AMM_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AME_AME0_MISC_AMM_CONFIG1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_AMM_CONFIG1));
#endif
    return fapi2::putScom(i_target, AME_AME0_MISC_AMM_CONFIG1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AME_AME0_MISC_AMM_CONFIG1]


//>> SET_[AME_AME0_MISC_AMM_CONFIG1_1_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_AMM_CONFIG1_1_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_AMM_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_AMM_CONFIG1_1_RESERVED,
           AME_AME0_MISC_AMM_CONFIG1_1_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_AMM_CONFIG1_1_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_AMM_CONFIG1_1_RESERVED]

//>> SET_[AME_AME0_MISC_AMM_CONFIG1_1_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_AMM_CONFIG1_1_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_AMM_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_AMM_CONFIG1_1_RESERVED,
           AME_AME0_MISC_AMM_CONFIG1_1_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_AMM_CONFIG1_1_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_AMM_CONFIG1_1_RESERVED]

//>> GET_[AME_AME0_MISC_AMM_CONFIG1_1_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_AMM_CONFIG1_1_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_AMM_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME0_MISC_AMM_CONFIG1_1_RESERVED,
           AME_AME0_MISC_AMM_CONFIG1_1_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_AMM_CONFIG1_1_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_AMM_CONFIG1_1_RESERVED]

//>> SET_[AME_AME0_MISC_AMM_CONFIG1_MRQ_WD_CRD]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_AMM_CONFIG1_MRQ_WD_CRD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_AMM_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_AMM_CONFIG1_MRQ_WD_CRD,
           AME_AME0_MISC_AMM_CONFIG1_MRQ_WD_CRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_AMM_CONFIG1_MRQ_WD_CRD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_AMM_CONFIG1_MRQ_WD_CRD]

//>> SET_[AME_AME0_MISC_AMM_CONFIG1_MRQ_WD_CRD]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_AMM_CONFIG1_MRQ_WD_CRD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_AMM_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_AMM_CONFIG1_MRQ_WD_CRD,
           AME_AME0_MISC_AMM_CONFIG1_MRQ_WD_CRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_AMM_CONFIG1_MRQ_WD_CRD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_AMM_CONFIG1_MRQ_WD_CRD]

//>> GET_[AME_AME0_MISC_AMM_CONFIG1_MRQ_WD_CRD]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_AMM_CONFIG1_MRQ_WD_CRD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_AMM_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME0_MISC_AMM_CONFIG1_MRQ_WD_CRD,
           AME_AME0_MISC_AMM_CONFIG1_MRQ_WD_CRD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_AMM_CONFIG1_MRQ_WD_CRD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_AMM_CONFIG1_MRQ_WD_CRD]

//>> SET_[AME_AME0_MISC_AMM_CONFIG1_MRQ_SD_CRD]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_AMM_CONFIG1_MRQ_SD_CRD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_AMM_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_AMM_CONFIG1_MRQ_SD_CRD,
           AME_AME0_MISC_AMM_CONFIG1_MRQ_SD_CRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_AMM_CONFIG1_MRQ_SD_CRD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_AMM_CONFIG1_MRQ_SD_CRD]

//>> SET_[AME_AME0_MISC_AMM_CONFIG1_MRQ_SD_CRD]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_AMM_CONFIG1_MRQ_SD_CRD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_AMM_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_AMM_CONFIG1_MRQ_SD_CRD,
           AME_AME0_MISC_AMM_CONFIG1_MRQ_SD_CRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_AMM_CONFIG1_MRQ_SD_CRD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_AMM_CONFIG1_MRQ_SD_CRD]

//>> GET_[AME_AME0_MISC_AMM_CONFIG1_MRQ_SD_CRD]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_AMM_CONFIG1_MRQ_SD_CRD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_AMM_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME0_MISC_AMM_CONFIG1_MRQ_SD_CRD,
           AME_AME0_MISC_AMM_CONFIG1_MRQ_SD_CRD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_AMM_CONFIG1_MRQ_SD_CRD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_AMM_CONFIG1_MRQ_SD_CRD]

//>> SET_[AME_AME0_MISC_AMM_CONFIG1_MRQ_ACT_TIMER]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_AMM_CONFIG1_MRQ_ACT_TIMER(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_AMM_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_AMM_CONFIG1_MRQ_ACT_TIMER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_AMM_CONFIG1_MRQ_ACT_TIMER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_AMM_CONFIG1_MRQ_ACT_TIMER]

//>> SET_[AME_AME0_MISC_AMM_CONFIG1_MRQ_ACT_TIMER]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_AMM_CONFIG1_MRQ_ACT_TIMER(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_AMM_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_AMM_CONFIG1_MRQ_ACT_TIMER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_AMM_CONFIG1_MRQ_ACT_TIMER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_AMM_CONFIG1_MRQ_ACT_TIMER]

//>> SET_[AME_AME0_MISC_AMM_CONFIG1_MRQ_ACT_TIMER]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_AMM_CONFIG1_MRQ_ACT_TIMER(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_AMM_CONFIG1));
#endif
    return o_data.setBit<AME_AME0_MISC_AMM_CONFIG1_MRQ_ACT_TIMER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME0_MISC_AMM_CONFIG1_MRQ_ACT_TIMER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_AMM_CONFIG1_MRQ_ACT_TIMER]

//>> CLEAR_[AME_AME0_MISC_AMM_CONFIG1_MRQ_ACT_TIMER]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME0_MISC_AMM_CONFIG1_MRQ_ACT_TIMER(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_AMM_CONFIG1));
#endif
    return o_data.clearBit<AME_AME0_MISC_AMM_CONFIG1_MRQ_ACT_TIMER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME0_MISC_AMM_CONFIG1_MRQ_ACT_TIMER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME0_MISC_AMM_CONFIG1_MRQ_ACT_TIMER]

//>> GET_[AME_AME0_MISC_AMM_CONFIG1_MRQ_ACT_TIMER]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_AMM_CONFIG1_MRQ_ACT_TIMER(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_AMM_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME0_MISC_AMM_CONFIG1_MRQ_ACT_TIMER,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_AMM_CONFIG1_MRQ_ACT_TIMER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_AMM_CONFIG1_MRQ_ACT_TIMER]

//>> GET_[AME_AME0_MISC_AMM_CONFIG1_MRQ_ACT_TIMER]
static inline bool GET_AME_AME0_MISC_AMM_CONFIG1_MRQ_ACT_TIMER(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_AMM_CONFIG1));
#endif
    return i_data.getBit<AME_AME0_MISC_AMM_CONFIG1_MRQ_ACT_TIMER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME0_MISC_AMM_CONFIG1_MRQ_ACT_TIMER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_AMM_CONFIG1_MRQ_ACT_TIMER]

//>> SET_[AME_AME0_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_AMM_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR]

//>> SET_[AME_AME0_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_AMM_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR]

//>> SET_[AME_AME0_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_AMM_CONFIG1));
#endif
    return o_data.setBit<AME_AME0_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME0_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR]

//>> CLEAR_[AME_AME0_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME0_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_AMM_CONFIG1));
#endif
    return o_data.clearBit<AME_AME0_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME0_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME0_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR]

//>> GET_[AME_AME0_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_AMM_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME0_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR]

//>> GET_[AME_AME0_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR]
static inline bool GET_AME_AME0_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_AMM_CONFIG1));
#endif
    return i_data.getBit<AME_AME0_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME0_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR]

//>> SET_[AME_AME0_MISC_AMM_CONFIG1_MRQ_SMR_MAX]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_AMM_CONFIG1_MRQ_SMR_MAX(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_AMM_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_AMM_CONFIG1_MRQ_SMR_MAX,
           AME_AME0_MISC_AMM_CONFIG1_MRQ_SMR_MAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_AMM_CONFIG1_MRQ_SMR_MAX chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_AMM_CONFIG1_MRQ_SMR_MAX]

//>> SET_[AME_AME0_MISC_AMM_CONFIG1_MRQ_SMR_MAX]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_AMM_CONFIG1_MRQ_SMR_MAX(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_AMM_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_AMM_CONFIG1_MRQ_SMR_MAX,
           AME_AME0_MISC_AMM_CONFIG1_MRQ_SMR_MAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_AMM_CONFIG1_MRQ_SMR_MAX chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_AMM_CONFIG1_MRQ_SMR_MAX]

//>> GET_[AME_AME0_MISC_AMM_CONFIG1_MRQ_SMR_MAX]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_AMM_CONFIG1_MRQ_SMR_MAX(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_AMM_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME0_MISC_AMM_CONFIG1_MRQ_SMR_MAX,
           AME_AME0_MISC_AMM_CONFIG1_MRQ_SMR_MAX_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_AMM_CONFIG1_MRQ_SMR_MAX chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_AMM_CONFIG1_MRQ_SMR_MAX]

//>> PREP_[AME_AME1_MISC_ECC_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AME_AME1_MISC_ECC_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME1_MISC_ECC_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AME_AME1_MISC_ECC_CONFIG]

//>> GET_[AME_AME1_MISC_ECC_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AME_AME1_MISC_ECC_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME1_MISC_ECC_CONFIG;
#endif
    return fapi2::getScom(i_target, AME_AME1_MISC_ECC_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AME_AME1_MISC_ECC_CONFIG]

//>> PUT_[AME_AME1_MISC_ECC_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AME_AME1_MISC_ECC_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return fapi2::putScom(i_target, AME_AME1_MISC_ECC_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AME_AME1_MISC_ECC_CONFIG]


//>> SET_[AME_AME1_MISC_ECC_CONFIG_ERAT_RA_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_ERAT_RA_COREN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_ECC_CONFIG_ERAT_RA_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_ERAT_RA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_ERAT_RA_COREN]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_ERAT_RA_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_ERAT_RA_COREN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_ECC_CONFIG_ERAT_RA_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_ERAT_RA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_ERAT_RA_COREN]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_ERAT_RA_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_ERAT_RA_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.setBit<AME_AME1_MISC_ECC_CONFIG_ERAT_RA_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_ERAT_RA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_ERAT_RA_COREN]

//>> CLEAR_[AME_AME1_MISC_ECC_CONFIG_ERAT_RA_COREN]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_ECC_CONFIG_ERAT_RA_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.clearBit<AME_AME1_MISC_ECC_CONFIG_ERAT_RA_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_ERAT_RA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_ECC_CONFIG_ERAT_RA_COREN]

//>> GET_[AME_AME1_MISC_ECC_CONFIG_ERAT_RA_COREN]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_ECC_CONFIG_ERAT_RA_COREN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME1_MISC_ECC_CONFIG_ERAT_RA_COREN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_ERAT_RA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_ECC_CONFIG_ERAT_RA_COREN]

//>> GET_[AME_AME1_MISC_ECC_CONFIG_ERAT_RA_COREN]
static inline bool GET_AME_AME1_MISC_ECC_CONFIG_ERAT_RA_COREN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return i_data.getBit<AME_AME1_MISC_ECC_CONFIG_ERAT_RA_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_ERAT_RA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_ECC_CONFIG_ERAT_RA_COREN]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_ERAT_RA_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_ERAT_RA_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_ECC_CONFIG_ERAT_RA_ERRINJ,
           AME_AME1_MISC_ECC_CONFIG_ERAT_RA_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_ERAT_RA_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_ERAT_RA_ERRINJ]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_ERAT_RA_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_ERAT_RA_ERRINJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_ECC_CONFIG_ERAT_RA_ERRINJ,
           AME_AME1_MISC_ECC_CONFIG_ERAT_RA_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_ERAT_RA_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_ERAT_RA_ERRINJ]

//>> GET_[AME_AME1_MISC_ECC_CONFIG_ERAT_RA_ERRINJ]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_ECC_CONFIG_ERAT_RA_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME1_MISC_ECC_CONFIG_ERAT_RA_ERRINJ,
           AME_AME1_MISC_ECC_CONFIG_ERAT_RA_ERRINJ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_ERAT_RA_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_ECC_CONFIG_ERAT_RA_ERRINJ]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_ERAT_PE_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_ERAT_PE_COREN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_ECC_CONFIG_ERAT_PE_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_ERAT_PE_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_ERAT_PE_COREN]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_ERAT_PE_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_ERAT_PE_COREN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_ECC_CONFIG_ERAT_PE_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_ERAT_PE_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_ERAT_PE_COREN]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_ERAT_PE_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_ERAT_PE_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.setBit<AME_AME1_MISC_ECC_CONFIG_ERAT_PE_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_ERAT_PE_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_ERAT_PE_COREN]

//>> CLEAR_[AME_AME1_MISC_ECC_CONFIG_ERAT_PE_COREN]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_ECC_CONFIG_ERAT_PE_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.clearBit<AME_AME1_MISC_ECC_CONFIG_ERAT_PE_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_ERAT_PE_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_ECC_CONFIG_ERAT_PE_COREN]

//>> GET_[AME_AME1_MISC_ECC_CONFIG_ERAT_PE_COREN]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_ECC_CONFIG_ERAT_PE_COREN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME1_MISC_ECC_CONFIG_ERAT_PE_COREN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_ERAT_PE_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_ECC_CONFIG_ERAT_PE_COREN]

//>> GET_[AME_AME1_MISC_ECC_CONFIG_ERAT_PE_COREN]
static inline bool GET_AME_AME1_MISC_ECC_CONFIG_ERAT_PE_COREN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return i_data.getBit<AME_AME1_MISC_ECC_CONFIG_ERAT_PE_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_ERAT_PE_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_ECC_CONFIG_ERAT_PE_COREN]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_ERAT_PE_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_ERAT_PE_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_ECC_CONFIG_ERAT_PE_ERRINJ,
           AME_AME1_MISC_ECC_CONFIG_ERAT_PE_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_ERAT_PE_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_ERAT_PE_ERRINJ]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_ERAT_PE_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_ERAT_PE_ERRINJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_ECC_CONFIG_ERAT_PE_ERRINJ,
           AME_AME1_MISC_ECC_CONFIG_ERAT_PE_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_ERAT_PE_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_ERAT_PE_ERRINJ]

//>> GET_[AME_AME1_MISC_ECC_CONFIG_ERAT_PE_ERRINJ]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_ECC_CONFIG_ERAT_PE_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME1_MISC_ECC_CONFIG_ERAT_PE_ERRINJ,
           AME_AME1_MISC_ECC_CONFIG_ERAT_PE_ERRINJ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_ERAT_PE_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_ECC_CONFIG_ERAT_PE_ERRINJ]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_COREN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_COREN]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_COREN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_COREN]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.setBit<AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_COREN]

//>> CLEAR_[AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_COREN]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.clearBit<AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_COREN]

//>> GET_[AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_COREN]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_COREN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_COREN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_COREN]

//>> GET_[AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_COREN]
static inline bool GET_AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_COREN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return i_data.getBit<AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_COREN]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ,
           AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ,
           AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ]

//>> GET_[AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ,
           AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_CL0_WB_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_CL0_WB_COREN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_ECC_CONFIG_CL0_WB_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL0_WB_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_CL0_WB_COREN]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_CL0_WB_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_CL0_WB_COREN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_ECC_CONFIG_CL0_WB_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL0_WB_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_CL0_WB_COREN]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_CL0_WB_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_CL0_WB_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.setBit<AME_AME1_MISC_ECC_CONFIG_CL0_WB_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL0_WB_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_CL0_WB_COREN]

//>> CLEAR_[AME_AME1_MISC_ECC_CONFIG_CL0_WB_COREN]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_ECC_CONFIG_CL0_WB_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.clearBit<AME_AME1_MISC_ECC_CONFIG_CL0_WB_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL0_WB_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_ECC_CONFIG_CL0_WB_COREN]

//>> GET_[AME_AME1_MISC_ECC_CONFIG_CL0_WB_COREN]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_ECC_CONFIG_CL0_WB_COREN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME1_MISC_ECC_CONFIG_CL0_WB_COREN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL0_WB_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_ECC_CONFIG_CL0_WB_COREN]

//>> GET_[AME_AME1_MISC_ECC_CONFIG_CL0_WB_COREN]
static inline bool GET_AME_AME1_MISC_ECC_CONFIG_CL0_WB_COREN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return i_data.getBit<AME_AME1_MISC_ECC_CONFIG_CL0_WB_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL0_WB_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_ECC_CONFIG_CL0_WB_COREN]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_CL0_WB_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_CL0_WB_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_ECC_CONFIG_CL0_WB_ERRINJ,
           AME_AME1_MISC_ECC_CONFIG_CL0_WB_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL0_WB_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_CL0_WB_ERRINJ]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_CL0_WB_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_CL0_WB_ERRINJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_ECC_CONFIG_CL0_WB_ERRINJ,
           AME_AME1_MISC_ECC_CONFIG_CL0_WB_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL0_WB_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_CL0_WB_ERRINJ]

//>> GET_[AME_AME1_MISC_ECC_CONFIG_CL0_WB_ERRINJ]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_ECC_CONFIG_CL0_WB_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME1_MISC_ECC_CONFIG_CL0_WB_ERRINJ,
           AME_AME1_MISC_ECC_CONFIG_CL0_WB_ERRINJ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL0_WB_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_ECC_CONFIG_CL0_WB_ERRINJ]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_CL0_CBA_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_CL0_CBA_COREN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_ECC_CONFIG_CL0_CBA_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL0_CBA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_CL0_CBA_COREN]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_CL0_CBA_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_CL0_CBA_COREN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_ECC_CONFIG_CL0_CBA_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL0_CBA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_CL0_CBA_COREN]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_CL0_CBA_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_CL0_CBA_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.setBit<AME_AME1_MISC_ECC_CONFIG_CL0_CBA_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL0_CBA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_CL0_CBA_COREN]

//>> CLEAR_[AME_AME1_MISC_ECC_CONFIG_CL0_CBA_COREN]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_ECC_CONFIG_CL0_CBA_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.clearBit<AME_AME1_MISC_ECC_CONFIG_CL0_CBA_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL0_CBA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_ECC_CONFIG_CL0_CBA_COREN]

//>> GET_[AME_AME1_MISC_ECC_CONFIG_CL0_CBA_COREN]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_ECC_CONFIG_CL0_CBA_COREN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME1_MISC_ECC_CONFIG_CL0_CBA_COREN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL0_CBA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_ECC_CONFIG_CL0_CBA_COREN]

//>> GET_[AME_AME1_MISC_ECC_CONFIG_CL0_CBA_COREN]
static inline bool GET_AME_AME1_MISC_ECC_CONFIG_CL0_CBA_COREN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return i_data.getBit<AME_AME1_MISC_ECC_CONFIG_CL0_CBA_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL0_CBA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_ECC_CONFIG_CL0_CBA_COREN]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_CL0_CBA_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_CL0_CBA_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_ECC_CONFIG_CL0_CBA_ERRINJ,
           AME_AME1_MISC_ECC_CONFIG_CL0_CBA_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL0_CBA_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_CL0_CBA_ERRINJ]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_CL0_CBA_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_CL0_CBA_ERRINJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_ECC_CONFIG_CL0_CBA_ERRINJ,
           AME_AME1_MISC_ECC_CONFIG_CL0_CBA_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL0_CBA_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_CL0_CBA_ERRINJ]

//>> GET_[AME_AME1_MISC_ECC_CONFIG_CL0_CBA_ERRINJ]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_ECC_CONFIG_CL0_CBA_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME1_MISC_ECC_CONFIG_CL0_CBA_ERRINJ,
           AME_AME1_MISC_ECC_CONFIG_CL0_CBA_ERRINJ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL0_CBA_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_ECC_CONFIG_CL0_CBA_ERRINJ]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_CL0_PCT_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_CL0_PCT_COREN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_ECC_CONFIG_CL0_PCT_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL0_PCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_CL0_PCT_COREN]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_CL0_PCT_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_CL0_PCT_COREN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_ECC_CONFIG_CL0_PCT_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL0_PCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_CL0_PCT_COREN]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_CL0_PCT_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_CL0_PCT_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.setBit<AME_AME1_MISC_ECC_CONFIG_CL0_PCT_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL0_PCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_CL0_PCT_COREN]

//>> CLEAR_[AME_AME1_MISC_ECC_CONFIG_CL0_PCT_COREN]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_ECC_CONFIG_CL0_PCT_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.clearBit<AME_AME1_MISC_ECC_CONFIG_CL0_PCT_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL0_PCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_ECC_CONFIG_CL0_PCT_COREN]

//>> GET_[AME_AME1_MISC_ECC_CONFIG_CL0_PCT_COREN]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_ECC_CONFIG_CL0_PCT_COREN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME1_MISC_ECC_CONFIG_CL0_PCT_COREN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL0_PCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_ECC_CONFIG_CL0_PCT_COREN]

//>> GET_[AME_AME1_MISC_ECC_CONFIG_CL0_PCT_COREN]
static inline bool GET_AME_AME1_MISC_ECC_CONFIG_CL0_PCT_COREN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return i_data.getBit<AME_AME1_MISC_ECC_CONFIG_CL0_PCT_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL0_PCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_ECC_CONFIG_CL0_PCT_COREN]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_CL0_PCT_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_CL0_PCT_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_ECC_CONFIG_CL0_PCT_ERRINJ,
           AME_AME1_MISC_ECC_CONFIG_CL0_PCT_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL0_PCT_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_CL0_PCT_ERRINJ]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_CL0_PCT_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_CL0_PCT_ERRINJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_ECC_CONFIG_CL0_PCT_ERRINJ,
           AME_AME1_MISC_ECC_CONFIG_CL0_PCT_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL0_PCT_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_CL0_PCT_ERRINJ]

//>> GET_[AME_AME1_MISC_ECC_CONFIG_CL0_PCT_ERRINJ]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_ECC_CONFIG_CL0_PCT_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME1_MISC_ECC_CONFIG_CL0_PCT_ERRINJ,
           AME_AME1_MISC_ECC_CONFIG_CL0_PCT_ERRINJ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL0_PCT_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_ECC_CONFIG_CL0_PCT_ERRINJ]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_CL1_WB_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_CL1_WB_COREN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_ECC_CONFIG_CL1_WB_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL1_WB_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_CL1_WB_COREN]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_CL1_WB_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_CL1_WB_COREN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_ECC_CONFIG_CL1_WB_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL1_WB_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_CL1_WB_COREN]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_CL1_WB_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_CL1_WB_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.setBit<AME_AME1_MISC_ECC_CONFIG_CL1_WB_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL1_WB_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_CL1_WB_COREN]

//>> CLEAR_[AME_AME1_MISC_ECC_CONFIG_CL1_WB_COREN]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_ECC_CONFIG_CL1_WB_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.clearBit<AME_AME1_MISC_ECC_CONFIG_CL1_WB_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL1_WB_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_ECC_CONFIG_CL1_WB_COREN]

//>> GET_[AME_AME1_MISC_ECC_CONFIG_CL1_WB_COREN]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_ECC_CONFIG_CL1_WB_COREN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME1_MISC_ECC_CONFIG_CL1_WB_COREN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL1_WB_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_ECC_CONFIG_CL1_WB_COREN]

//>> GET_[AME_AME1_MISC_ECC_CONFIG_CL1_WB_COREN]
static inline bool GET_AME_AME1_MISC_ECC_CONFIG_CL1_WB_COREN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return i_data.getBit<AME_AME1_MISC_ECC_CONFIG_CL1_WB_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL1_WB_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_ECC_CONFIG_CL1_WB_COREN]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_CL1_WB_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_CL1_WB_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_ECC_CONFIG_CL1_WB_ERRINJ,
           AME_AME1_MISC_ECC_CONFIG_CL1_WB_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL1_WB_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_CL1_WB_ERRINJ]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_CL1_WB_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_CL1_WB_ERRINJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_ECC_CONFIG_CL1_WB_ERRINJ,
           AME_AME1_MISC_ECC_CONFIG_CL1_WB_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL1_WB_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_CL1_WB_ERRINJ]

//>> GET_[AME_AME1_MISC_ECC_CONFIG_CL1_WB_ERRINJ]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_ECC_CONFIG_CL1_WB_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME1_MISC_ECC_CONFIG_CL1_WB_ERRINJ,
           AME_AME1_MISC_ECC_CONFIG_CL1_WB_ERRINJ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL1_WB_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_ECC_CONFIG_CL1_WB_ERRINJ]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_CL1_CBA_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_CL1_CBA_COREN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_ECC_CONFIG_CL1_CBA_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL1_CBA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_CL1_CBA_COREN]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_CL1_CBA_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_CL1_CBA_COREN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_ECC_CONFIG_CL1_CBA_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL1_CBA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_CL1_CBA_COREN]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_CL1_CBA_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_CL1_CBA_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.setBit<AME_AME1_MISC_ECC_CONFIG_CL1_CBA_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL1_CBA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_CL1_CBA_COREN]

//>> CLEAR_[AME_AME1_MISC_ECC_CONFIG_CL1_CBA_COREN]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_ECC_CONFIG_CL1_CBA_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.clearBit<AME_AME1_MISC_ECC_CONFIG_CL1_CBA_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL1_CBA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_ECC_CONFIG_CL1_CBA_COREN]

//>> GET_[AME_AME1_MISC_ECC_CONFIG_CL1_CBA_COREN]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_ECC_CONFIG_CL1_CBA_COREN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME1_MISC_ECC_CONFIG_CL1_CBA_COREN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL1_CBA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_ECC_CONFIG_CL1_CBA_COREN]

//>> GET_[AME_AME1_MISC_ECC_CONFIG_CL1_CBA_COREN]
static inline bool GET_AME_AME1_MISC_ECC_CONFIG_CL1_CBA_COREN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return i_data.getBit<AME_AME1_MISC_ECC_CONFIG_CL1_CBA_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL1_CBA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_ECC_CONFIG_CL1_CBA_COREN]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_CL1_CBA_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_CL1_CBA_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_ECC_CONFIG_CL1_CBA_ERRINJ,
           AME_AME1_MISC_ECC_CONFIG_CL1_CBA_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL1_CBA_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_CL1_CBA_ERRINJ]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_CL1_CBA_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_CL1_CBA_ERRINJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_ECC_CONFIG_CL1_CBA_ERRINJ,
           AME_AME1_MISC_ECC_CONFIG_CL1_CBA_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL1_CBA_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_CL1_CBA_ERRINJ]

//>> GET_[AME_AME1_MISC_ECC_CONFIG_CL1_CBA_ERRINJ]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_ECC_CONFIG_CL1_CBA_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME1_MISC_ECC_CONFIG_CL1_CBA_ERRINJ,
           AME_AME1_MISC_ECC_CONFIG_CL1_CBA_ERRINJ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL1_CBA_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_ECC_CONFIG_CL1_CBA_ERRINJ]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_CL1_PCT_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_CL1_PCT_COREN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_ECC_CONFIG_CL1_PCT_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL1_PCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_CL1_PCT_COREN]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_CL1_PCT_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_CL1_PCT_COREN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_ECC_CONFIG_CL1_PCT_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL1_PCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_CL1_PCT_COREN]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_CL1_PCT_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_CL1_PCT_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.setBit<AME_AME1_MISC_ECC_CONFIG_CL1_PCT_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL1_PCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_CL1_PCT_COREN]

//>> CLEAR_[AME_AME1_MISC_ECC_CONFIG_CL1_PCT_COREN]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_ECC_CONFIG_CL1_PCT_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.clearBit<AME_AME1_MISC_ECC_CONFIG_CL1_PCT_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL1_PCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_ECC_CONFIG_CL1_PCT_COREN]

//>> GET_[AME_AME1_MISC_ECC_CONFIG_CL1_PCT_COREN]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_ECC_CONFIG_CL1_PCT_COREN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME1_MISC_ECC_CONFIG_CL1_PCT_COREN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL1_PCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_ECC_CONFIG_CL1_PCT_COREN]

//>> GET_[AME_AME1_MISC_ECC_CONFIG_CL1_PCT_COREN]
static inline bool GET_AME_AME1_MISC_ECC_CONFIG_CL1_PCT_COREN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return i_data.getBit<AME_AME1_MISC_ECC_CONFIG_CL1_PCT_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL1_PCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_ECC_CONFIG_CL1_PCT_COREN]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_CL1_PCT_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_CL1_PCT_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_ECC_CONFIG_CL1_PCT_ERRINJ,
           AME_AME1_MISC_ECC_CONFIG_CL1_PCT_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL1_PCT_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_CL1_PCT_ERRINJ]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_CL1_PCT_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_CL1_PCT_ERRINJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_ECC_CONFIG_CL1_PCT_ERRINJ,
           AME_AME1_MISC_ECC_CONFIG_CL1_PCT_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL1_PCT_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_CL1_PCT_ERRINJ]

//>> GET_[AME_AME1_MISC_ECC_CONFIG_CL1_PCT_ERRINJ]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_ECC_CONFIG_CL1_PCT_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME1_MISC_ECC_CONFIG_CL1_PCT_ERRINJ,
           AME_AME1_MISC_ECC_CONFIG_CL1_PCT_ERRINJ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_CL1_PCT_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_ECC_CONFIG_CL1_PCT_ERRINJ]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_ECC_SPARE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_ECC_SPARE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_ECC_CONFIG_ECC_SPARE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_ECC_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_ECC_SPARE]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_ECC_SPARE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_ECC_SPARE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_ECC_CONFIG_ECC_SPARE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_ECC_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_ECC_SPARE]

//>> SET_[AME_AME1_MISC_ECC_CONFIG_ECC_SPARE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_ECC_CONFIG_ECC_SPARE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.setBit<AME_AME1_MISC_ECC_CONFIG_ECC_SPARE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_ECC_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_ECC_CONFIG_ECC_SPARE]

//>> CLEAR_[AME_AME1_MISC_ECC_CONFIG_ECC_SPARE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_ECC_CONFIG_ECC_SPARE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return o_data.clearBit<AME_AME1_MISC_ECC_CONFIG_ECC_SPARE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_ECC_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_ECC_CONFIG_ECC_SPARE]

//>> GET_[AME_AME1_MISC_ECC_CONFIG_ECC_SPARE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_ECC_CONFIG_ECC_SPARE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME1_MISC_ECC_CONFIG_ECC_SPARE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_ECC_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_ECC_CONFIG_ECC_SPARE]

//>> GET_[AME_AME1_MISC_ECC_CONFIG_ECC_SPARE]
static inline bool GET_AME_AME1_MISC_ECC_CONFIG_ECC_SPARE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_ECC_CONFIG));
#endif
    return i_data.getBit<AME_AME1_MISC_ECC_CONFIG_ECC_SPARE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_ECC_CONFIG_ECC_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_ECC_CONFIG_ECC_SPARE]

//>> PREP_[AME_AME1_MISC_TEST_CERR_RPT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AME_AME1_MISC_TEST_CERR_RPT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME1_MISC_TEST_CERR_RPT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AME_AME1_MISC_TEST_CERR_RPT]

//>> GET_[AME_AME1_MISC_TEST_CERR_RPT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AME_AME1_MISC_TEST_CERR_RPT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME1_MISC_TEST_CERR_RPT;
#endif
    return fapi2::getScom(i_target, AME_AME1_MISC_TEST_CERR_RPT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AME_AME1_MISC_TEST_CERR_RPT]

//>> PUT_[AME_AME1_MISC_TEST_CERR_RPT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AME_AME1_MISC_TEST_CERR_RPT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_TEST_CERR_RPT));
#endif
    return fapi2::putScom(i_target, AME_AME1_MISC_TEST_CERR_RPT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AME_AME1_MISC_TEST_CERR_RPT]


//>> SET_[AME_AME1_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_TEST_CERR_RPT));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL,
           AME_AME1_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL]

//>> SET_[AME_AME1_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_TEST_CERR_RPT));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL,
           AME_AME1_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL]

//>> GET_[AME_AME1_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_TEST_CERR_RPT));
#endif
    return i_data.extractToRight<AME_AME1_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL,
           AME_AME1_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL]

//>> PREP_[AME_ATL_MISC_PMU_COUNT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AME_ATL_MISC_PMU_COUNT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_ATL_MISC_PMU_COUNT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AME_ATL_MISC_PMU_COUNT]

//>> GET_[AME_ATL_MISC_PMU_COUNT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AME_ATL_MISC_PMU_COUNT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_ATL_MISC_PMU_COUNT;
#endif
    return fapi2::getScom(i_target, AME_ATL_MISC_PMU_COUNT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AME_ATL_MISC_PMU_COUNT]

//>> PUT_[AME_ATL_MISC_PMU_COUNT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AME_ATL_MISC_PMU_COUNT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_COUNT));
#endif
    return fapi2::putScom(i_target, AME_ATL_MISC_PMU_COUNT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AME_ATL_MISC_PMU_COUNT]


//>> SET_[AME_ATL_MISC_PMU_COUNT_0]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_COUNT_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_COUNT));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_PMU_COUNT_0,
           AME_ATL_MISC_PMU_COUNT_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_PMU_COUNT_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_COUNT_0]

//>> SET_[AME_ATL_MISC_PMU_COUNT_0]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_COUNT_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_COUNT));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_PMU_COUNT_0,
           AME_ATL_MISC_PMU_COUNT_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_PMU_COUNT_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_COUNT_0]

//>> GET_[AME_ATL_MISC_PMU_COUNT_0]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_PMU_COUNT_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_COUNT));
#endif
    return i_data.extractToRight<AME_ATL_MISC_PMU_COUNT_0,
           AME_ATL_MISC_PMU_COUNT_0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_PMU_COUNT_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_PMU_COUNT_0]

//>> SET_[AME_ATL_MISC_PMU_COUNT_1]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_COUNT_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_COUNT));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_PMU_COUNT_1,
           AME_ATL_MISC_PMU_COUNT_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_PMU_COUNT_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_COUNT_1]

//>> SET_[AME_ATL_MISC_PMU_COUNT_1]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_COUNT_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_COUNT));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_PMU_COUNT_1,
           AME_ATL_MISC_PMU_COUNT_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_PMU_COUNT_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_COUNT_1]

//>> GET_[AME_ATL_MISC_PMU_COUNT_1]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_PMU_COUNT_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_COUNT));
#endif
    return i_data.extractToRight<AME_ATL_MISC_PMU_COUNT_1,
           AME_ATL_MISC_PMU_COUNT_1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_PMU_COUNT_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_PMU_COUNT_1]

//>> SET_[AME_ATL_MISC_PMU_COUNT_2]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_COUNT_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_COUNT));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_PMU_COUNT_2,
           AME_ATL_MISC_PMU_COUNT_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_PMU_COUNT_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_COUNT_2]

//>> SET_[AME_ATL_MISC_PMU_COUNT_2]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_COUNT_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_COUNT));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_PMU_COUNT_2,
           AME_ATL_MISC_PMU_COUNT_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_PMU_COUNT_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_COUNT_2]

//>> GET_[AME_ATL_MISC_PMU_COUNT_2]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_PMU_COUNT_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_COUNT));
#endif
    return i_data.extractToRight<AME_ATL_MISC_PMU_COUNT_2,
           AME_ATL_MISC_PMU_COUNT_2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_PMU_COUNT_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_PMU_COUNT_2]

//>> SET_[AME_ATL_MISC_PMU_COUNT_3]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_COUNT_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_COUNT));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_PMU_COUNT_3,
           AME_ATL_MISC_PMU_COUNT_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_PMU_COUNT_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_COUNT_3]

//>> SET_[AME_ATL_MISC_PMU_COUNT_3]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_COUNT_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_COUNT));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_PMU_COUNT_3,
           AME_ATL_MISC_PMU_COUNT_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_PMU_COUNT_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_COUNT_3]

//>> GET_[AME_ATL_MISC_PMU_COUNT_3]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_PMU_COUNT_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_COUNT));
#endif
    return i_data.extractToRight<AME_ATL_MISC_PMU_COUNT_3,
           AME_ATL_MISC_PMU_COUNT_3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_PMU_COUNT_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_PMU_COUNT_3]

//>> PREP_[CS_CTL_MISC_BDF2PE_2_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_BDF2PE_2_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_BDF2PE_2_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_CTL_MISC_BDF2PE_2_CONFIG]

//>> GET_[CS_CTL_MISC_BDF2PE_2_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_BDF2PE_2_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_BDF2PE_2_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_BDF2PE_2_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_2_CONFIG]

//>> PUT_[CS_CTL_MISC_BDF2PE_2_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_BDF2PE_2_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_2_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_BDF2PE_2_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_CTL_MISC_BDF2PE_2_CONFIG]


//>> SET_[CS_CTL_MISC_BDF2PE_2_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_2_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_2_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_2_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_2_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_2_CONFIG_ENABLE]

//>> SET_[CS_CTL_MISC_BDF2PE_2_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_2_CONFIG_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_2_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_2_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_2_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_2_CONFIG_ENABLE]

//>> SET_[CS_CTL_MISC_BDF2PE_2_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_2_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_2_CONFIG));
#endif
    return o_data.setBit<CS_CTL_MISC_BDF2PE_2_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_2_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_2_CONFIG_ENABLE]

//>> CLEAR_[CS_CTL_MISC_BDF2PE_2_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_BDF2PE_2_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_2_CONFIG));
#endif
    return o_data.clearBit<CS_CTL_MISC_BDF2PE_2_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_2_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_BDF2PE_2_CONFIG_ENABLE]

//>> GET_[CS_CTL_MISC_BDF2PE_2_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_2_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_2_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_2_CONFIG_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_2_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_2_CONFIG_ENABLE]

//>> GET_[CS_CTL_MISC_BDF2PE_2_CONFIG_ENABLE]
static inline bool GET_CS_CTL_MISC_BDF2PE_2_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_2_CONFIG));
#endif
    return i_data.getBit<CS_CTL_MISC_BDF2PE_2_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_2_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_2_CONFIG_ENABLE]

//>> SET_[CS_CTL_MISC_BDF2PE_2_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_2_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_2_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_2_CONFIG_RESERVED,
           CS_CTL_MISC_BDF2PE_2_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_2_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_2_CONFIG_RESERVED]

//>> SET_[CS_CTL_MISC_BDF2PE_2_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_2_CONFIG_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_2_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_2_CONFIG_RESERVED,
           CS_CTL_MISC_BDF2PE_2_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_2_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_2_CONFIG_RESERVED]

//>> GET_[CS_CTL_MISC_BDF2PE_2_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_2_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_2_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_2_CONFIG_RESERVED,
           CS_CTL_MISC_BDF2PE_2_CONFIG_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_2_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_2_CONFIG_RESERVED]

//>> SET_[CS_CTL_MISC_BDF2PE_2_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_2_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_2_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_2_CONFIG_PE,
           CS_CTL_MISC_BDF2PE_2_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_2_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_2_CONFIG_PE]

//>> SET_[CS_CTL_MISC_BDF2PE_2_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_2_CONFIG_PE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_2_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_2_CONFIG_PE,
           CS_CTL_MISC_BDF2PE_2_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_2_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_2_CONFIG_PE]

//>> GET_[CS_CTL_MISC_BDF2PE_2_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_2_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_2_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_2_CONFIG_PE,
           CS_CTL_MISC_BDF2PE_2_CONFIG_PE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_2_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_2_CONFIG_PE]

//>> SET_[CS_CTL_MISC_BDF2PE_2_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_2_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_2_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_2_CONFIG_BDF,
           CS_CTL_MISC_BDF2PE_2_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_2_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_2_CONFIG_BDF]

//>> SET_[CS_CTL_MISC_BDF2PE_2_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_2_CONFIG_BDF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_2_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_2_CONFIG_BDF,
           CS_CTL_MISC_BDF2PE_2_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_2_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_2_CONFIG_BDF]

//>> GET_[CS_CTL_MISC_BDF2PE_2_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_2_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_2_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_2_CONFIG_BDF,
           CS_CTL_MISC_BDF2PE_2_CONFIG_BDF_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_2_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_2_CONFIG_BDF]

//>> PREP_[CS_CTL_MISC_PERF_MASK_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_PERF_MASK_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_PERF_MASK_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_CTL_MISC_PERF_MASK_CONFIG]

//>> GET_[CS_CTL_MISC_PERF_MASK_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_PERF_MASK_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_PERF_MASK_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_PERF_MASK_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_CTL_MISC_PERF_MASK_CONFIG]

//>> PUT_[CS_CTL_MISC_PERF_MASK_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_PERF_MASK_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_MASK_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_PERF_MASK_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_CTL_MISC_PERF_MASK_CONFIG]


//>> SET_[CS_CTL_MISC_PERF_MASK_CONFIG_TTYPE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_MASK_CONFIG_TTYPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_MASK_CONFIG_TTYPE,
           CS_CTL_MISC_PERF_MASK_CONFIG_TTYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_PERF_MASK_CONFIG_TTYPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_PERF_MASK_CONFIG_TTYPE]

//>> SET_[CS_CTL_MISC_PERF_MASK_CONFIG_TTYPE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_MASK_CONFIG_TTYPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_MASK_CONFIG_TTYPE,
           CS_CTL_MISC_PERF_MASK_CONFIG_TTYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_PERF_MASK_CONFIG_TTYPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_PERF_MASK_CONFIG_TTYPE]

//>> GET_[CS_CTL_MISC_PERF_MASK_CONFIG_TTYPE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_PERF_MASK_CONFIG_TTYPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_PERF_MASK_CONFIG_TTYPE,
           CS_CTL_MISC_PERF_MASK_CONFIG_TTYPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_PERF_MASK_CONFIG_TTYPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_PERF_MASK_CONFIG_TTYPE]

//>> SET_[CS_CTL_MISC_PERF_MASK_CONFIG_TSIZE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_MASK_CONFIG_TSIZE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_MASK_CONFIG_TSIZE,
           CS_CTL_MISC_PERF_MASK_CONFIG_TSIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_PERF_MASK_CONFIG_TSIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_PERF_MASK_CONFIG_TSIZE]

//>> SET_[CS_CTL_MISC_PERF_MASK_CONFIG_TSIZE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_MASK_CONFIG_TSIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_MASK_CONFIG_TSIZE,
           CS_CTL_MISC_PERF_MASK_CONFIG_TSIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_PERF_MASK_CONFIG_TSIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_PERF_MASK_CONFIG_TSIZE]

//>> GET_[CS_CTL_MISC_PERF_MASK_CONFIG_TSIZE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_PERF_MASK_CONFIG_TSIZE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_PERF_MASK_CONFIG_TSIZE,
           CS_CTL_MISC_PERF_MASK_CONFIG_TSIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_PERF_MASK_CONFIG_TSIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_PERF_MASK_CONFIG_TSIZE]

//>> SET_[CS_CTL_MISC_PERF_MASK_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_MASK_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_MASK_CONFIG_PE,
           CS_CTL_MISC_PERF_MASK_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_PERF_MASK_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_PERF_MASK_CONFIG_PE]

//>> SET_[CS_CTL_MISC_PERF_MASK_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_MASK_CONFIG_PE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_MASK_CONFIG_PE,
           CS_CTL_MISC_PERF_MASK_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_PERF_MASK_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_PERF_MASK_CONFIG_PE]

//>> GET_[CS_CTL_MISC_PERF_MASK_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_PERF_MASK_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_PERF_MASK_CONFIG_PE,
           CS_CTL_MISC_PERF_MASK_CONFIG_PE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_PERF_MASK_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_PERF_MASK_CONFIG_PE]

//>> SET_[CS_CTL_MISC_PERF_MASK_CONFIG_BE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_MASK_CONFIG_BE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_MASK_CONFIG_BE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_PERF_MASK_CONFIG_BE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_PERF_MASK_CONFIG_BE]

//>> SET_[CS_CTL_MISC_PERF_MASK_CONFIG_BE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_MASK_CONFIG_BE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_MASK_CONFIG_BE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_PERF_MASK_CONFIG_BE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_PERF_MASK_CONFIG_BE]

//>> SET_[CS_CTL_MISC_PERF_MASK_CONFIG_BE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_MASK_CONFIG_BE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.setBit<CS_CTL_MISC_PERF_MASK_CONFIG_BE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_PERF_MASK_CONFIG_BE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_PERF_MASK_CONFIG_BE]

//>> CLEAR_[CS_CTL_MISC_PERF_MASK_CONFIG_BE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_PERF_MASK_CONFIG_BE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.clearBit<CS_CTL_MISC_PERF_MASK_CONFIG_BE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_PERF_MASK_CONFIG_BE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_PERF_MASK_CONFIG_BE]

//>> GET_[CS_CTL_MISC_PERF_MASK_CONFIG_BE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_PERF_MASK_CONFIG_BE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_PERF_MASK_CONFIG_BE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_PERF_MASK_CONFIG_BE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_PERF_MASK_CONFIG_BE]

//>> GET_[CS_CTL_MISC_PERF_MASK_CONFIG_BE]
static inline bool GET_CS_CTL_MISC_PERF_MASK_CONFIG_BE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.getBit<CS_CTL_MISC_PERF_MASK_CONFIG_BE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_PERF_MASK_CONFIG_BE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_PERF_MASK_CONFIG_BE]

//>> SET_[CS_CTL_MISC_PERF_MASK_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_MASK_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_MASK_CONFIG_RESERVED,
           CS_CTL_MISC_PERF_MASK_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_PERF_MASK_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_PERF_MASK_CONFIG_RESERVED]

//>> SET_[CS_CTL_MISC_PERF_MASK_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_MASK_CONFIG_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_MASK_CONFIG_RESERVED,
           CS_CTL_MISC_PERF_MASK_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_PERF_MASK_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_PERF_MASK_CONFIG_RESERVED]

//>> GET_[CS_CTL_MISC_PERF_MASK_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_PERF_MASK_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_PERF_MASK_CONFIG_RESERVED,
           CS_CTL_MISC_PERF_MASK_CONFIG_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_PERF_MASK_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_PERF_MASK_CONFIG_RESERVED]

//>> PREP_[CS_CTL_MISC_SCOPE_PREDICT0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_SCOPE_PREDICT0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_SCOPE_PREDICT0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_CTL_MISC_SCOPE_PREDICT0]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_SCOPE_PREDICT0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_SCOPE_PREDICT0;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_SCOPE_PREDICT0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT0]

//>> PUT_[CS_CTL_MISC_SCOPE_PREDICT0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_SCOPE_PREDICT0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_SCOPE_PREDICT0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_CTL_MISC_SCOPE_PREDICT0]


//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_LN_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_B0RD_LN_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_B0RD_LN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_B0RD_LN_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0RD_LN_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_LN_FAIL_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_LN_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_B0RD_LN_FAIL_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_B0RD_LN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_B0RD_LN_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0RD_LN_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_LN_FAIL_THRESH]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_LN_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT0_B0RD_LN_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT0_B0RD_LN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_B0RD_LN_FAIL_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0RD_LN_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_LN_FAIL_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_NN_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_B0RD_NN_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_B0RD_NN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_B0RD_NN_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0RD_NN_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_NN_FAIL_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_NN_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_B0RD_NN_FAIL_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_B0RD_NN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_B0RD_NN_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0RD_NN_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_NN_FAIL_THRESH]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_NN_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT0_B0RD_NN_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT0_B0RD_NN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_B0RD_NN_FAIL_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0RD_NN_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_NN_FAIL_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_RN_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_B0RD_RN_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_B0RD_RN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_B0RD_RN_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0RD_RN_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_RN_FAIL_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_RN_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_B0RD_RN_FAIL_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_B0RD_RN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_B0RD_RN_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0RD_RN_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_RN_FAIL_THRESH]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_RN_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT0_B0RD_RN_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT0_B0RD_RN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_B0RD_RN_FAIL_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0RD_RN_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_RN_FAIL_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_G_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_B0RD_G_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_B0RD_G_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_B0RD_G_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0RD_G_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_G_FAIL_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_G_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_B0RD_G_FAIL_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_B0RD_G_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_B0RD_G_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0RD_G_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_G_FAIL_THRESH]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_G_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT0_B0RD_G_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT0_B0RD_G_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_B0RD_G_FAIL_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0RD_G_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_G_FAIL_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_LN_INTV_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_B0RD_LN_INTV_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_B0RD_LN_INTV_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_B0RD_LN_INTV_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0RD_LN_INTV_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_LN_INTV_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_LN_INTV_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_B0RD_LN_INTV_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_B0RD_LN_INTV_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_B0RD_LN_INTV_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0RD_LN_INTV_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_LN_INTV_THRESH]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_LN_INTV_THRESH]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT0_B0RD_LN_INTV_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT0_B0RD_LN_INTV_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_B0RD_LN_INTV_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0RD_LN_INTV_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_LN_INTV_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_G_INTV_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_B0RD_G_INTV_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_B0RD_G_INTV_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_B0RD_G_INTV_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0RD_G_INTV_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_G_INTV_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_G_INTV_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_B0RD_G_INTV_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_B0RD_G_INTV_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_B0RD_G_INTV_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0RD_G_INTV_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_G_INTV_THRESH]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_G_INTV_THRESH]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT0_B0RD_G_INTV_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT0_B0RD_G_INTV_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_B0RD_G_INTV_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0RD_G_INTV_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_G_INTV_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_VG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_B0RD_VG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_B0RD_VG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0RD_VG_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_VG_ENABLE]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_VG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_B0RD_VG_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_B0RD_VG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0RD_VG_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_VG_ENABLE]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_VG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_B0RD_VG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.setBit<CS_CTL_MISC_SCOPE_PREDICT0_B0RD_VG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0RD_VG_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_VG_ENABLE]

//>> CLEAR_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_VG_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_SCOPE_PREDICT0_B0RD_VG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.clearBit<CS_CTL_MISC_SCOPE_PREDICT0_B0RD_VG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0RD_VG_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_VG_ENABLE]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_VG_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT0_B0RD_VG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT0_B0RD_VG_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0RD_VG_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_VG_ENABLE]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_VG_ENABLE]
static inline bool GET_CS_CTL_MISC_SCOPE_PREDICT0_B0RD_VG_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return i_data.getBit<CS_CTL_MISC_SCOPE_PREDICT0_B0RD_VG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0RD_VG_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT0_B0RD_VG_ENABLE]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED1]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED1]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.setBit<CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED1]

//>> CLEAR_[CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.clearBit<CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED1]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED1]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED1]
static inline bool GET_CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return i_data.getBit<CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED1]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_LN_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_B0WR_LN_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_B0WR_LN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_B0WR_LN_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0WR_LN_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_LN_FAIL_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_LN_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_B0WR_LN_FAIL_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_B0WR_LN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_B0WR_LN_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0WR_LN_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_LN_FAIL_THRESH]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_LN_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT0_B0WR_LN_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT0_B0WR_LN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_B0WR_LN_FAIL_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0WR_LN_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_LN_FAIL_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_NN_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_B0WR_NN_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_B0WR_NN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_B0WR_NN_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0WR_NN_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_NN_FAIL_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_NN_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_B0WR_NN_FAIL_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_B0WR_NN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_B0WR_NN_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0WR_NN_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_NN_FAIL_THRESH]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_NN_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT0_B0WR_NN_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT0_B0WR_NN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_B0WR_NN_FAIL_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0WR_NN_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_NN_FAIL_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_RN_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_B0WR_RN_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_B0WR_RN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_B0WR_RN_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0WR_RN_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_RN_FAIL_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_RN_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_B0WR_RN_FAIL_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_B0WR_RN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_B0WR_RN_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0WR_RN_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_RN_FAIL_THRESH]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_RN_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT0_B0WR_RN_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT0_B0WR_RN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_B0WR_RN_FAIL_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0WR_RN_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_RN_FAIL_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_G_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_B0WR_G_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_B0WR_G_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_B0WR_G_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0WR_G_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_G_FAIL_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_G_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_B0WR_G_FAIL_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_B0WR_G_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_B0WR_G_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0WR_G_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_G_FAIL_THRESH]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_G_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT0_B0WR_G_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT0_B0WR_G_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_B0WR_G_FAIL_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0WR_G_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_G_FAIL_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_LN_INTV_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_B0WR_LN_INTV_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_B0WR_LN_INTV_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_B0WR_LN_INTV_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0WR_LN_INTV_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_LN_INTV_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_LN_INTV_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_B0WR_LN_INTV_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_B0WR_LN_INTV_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_B0WR_LN_INTV_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0WR_LN_INTV_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_LN_INTV_THRESH]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_LN_INTV_THRESH]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT0_B0WR_LN_INTV_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT0_B0WR_LN_INTV_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_B0WR_LN_INTV_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0WR_LN_INTV_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_LN_INTV_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_G_INTV_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_B0WR_G_INTV_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_B0WR_G_INTV_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_B0WR_G_INTV_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0WR_G_INTV_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_G_INTV_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_G_INTV_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_B0WR_G_INTV_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_B0WR_G_INTV_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_B0WR_G_INTV_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0WR_G_INTV_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_G_INTV_THRESH]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_G_INTV_THRESH]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT0_B0WR_G_INTV_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT0_B0WR_G_INTV_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_B0WR_G_INTV_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0WR_G_INTV_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_G_INTV_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_VG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_B0WR_VG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_B0WR_VG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0WR_VG_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_VG_ENABLE]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_VG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_B0WR_VG_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_B0WR_VG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0WR_VG_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_VG_ENABLE]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_VG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_B0WR_VG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.setBit<CS_CTL_MISC_SCOPE_PREDICT0_B0WR_VG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0WR_VG_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_VG_ENABLE]

//>> CLEAR_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_VG_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_SCOPE_PREDICT0_B0WR_VG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.clearBit<CS_CTL_MISC_SCOPE_PREDICT0_B0WR_VG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0WR_VG_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_VG_ENABLE]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_VG_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT0_B0WR_VG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT0_B0WR_VG_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0WR_VG_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_VG_ENABLE]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_VG_ENABLE]
static inline bool GET_CS_CTL_MISC_SCOPE_PREDICT0_B0WR_VG_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return i_data.getBit<CS_CTL_MISC_SCOPE_PREDICT0_B0WR_VG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_B0WR_VG_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT0_B0WR_VG_ENABLE]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED2]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED2]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.setBit<CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED2]

//>> CLEAR_[CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.clearBit<CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED2]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED2]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED2]
static inline bool GET_CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return i_data.getBit<CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED2]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_LN_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_OTH_LN_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_OTH_LN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_OTH_LN_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_OTH_LN_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_LN_FAIL_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_LN_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_OTH_LN_FAIL_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_OTH_LN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_OTH_LN_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_OTH_LN_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_LN_FAIL_THRESH]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_LN_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT0_OTH_LN_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT0_OTH_LN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_OTH_LN_FAIL_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_OTH_LN_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_LN_FAIL_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_NN_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_OTH_NN_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_OTH_NN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_OTH_NN_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_OTH_NN_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_NN_FAIL_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_NN_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_OTH_NN_FAIL_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_OTH_NN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_OTH_NN_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_OTH_NN_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_NN_FAIL_THRESH]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_NN_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT0_OTH_NN_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT0_OTH_NN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_OTH_NN_FAIL_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_OTH_NN_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_NN_FAIL_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_RN_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_OTH_RN_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_OTH_RN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_OTH_RN_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_OTH_RN_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_RN_FAIL_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_RN_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_OTH_RN_FAIL_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_OTH_RN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_OTH_RN_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_OTH_RN_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_RN_FAIL_THRESH]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_RN_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT0_OTH_RN_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT0_OTH_RN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_OTH_RN_FAIL_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_OTH_RN_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_RN_FAIL_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_G_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_OTH_G_FAIL_THRESH(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_OTH_G_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_OTH_G_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_OTH_G_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_G_FAIL_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_G_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_OTH_G_FAIL_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_OTH_G_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_OTH_G_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_OTH_G_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_G_FAIL_THRESH]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_G_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT0_OTH_G_FAIL_THRESH(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT0_OTH_G_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_OTH_G_FAIL_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_OTH_G_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_G_FAIL_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_LN_INTV_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_OTH_LN_INTV_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_OTH_LN_INTV_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_OTH_LN_INTV_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_OTH_LN_INTV_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_LN_INTV_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_LN_INTV_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_OTH_LN_INTV_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_OTH_LN_INTV_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_OTH_LN_INTV_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_OTH_LN_INTV_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_LN_INTV_THRESH]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_LN_INTV_THRESH]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT0_OTH_LN_INTV_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT0_OTH_LN_INTV_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_OTH_LN_INTV_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_OTH_LN_INTV_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_LN_INTV_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_G_INTV_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_OTH_G_INTV_THRESH(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_OTH_G_INTV_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_OTH_G_INTV_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_OTH_G_INTV_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_G_INTV_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_G_INTV_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_OTH_G_INTV_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_OTH_G_INTV_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_OTH_G_INTV_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_OTH_G_INTV_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_G_INTV_THRESH]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_G_INTV_THRESH]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT0_OTH_G_INTV_THRESH(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT0_OTH_G_INTV_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT0_OTH_G_INTV_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_OTH_G_INTV_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_G_INTV_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_VG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_OTH_VG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_OTH_VG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_OTH_VG_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_VG_ENABLE]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_VG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_OTH_VG_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_OTH_VG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_OTH_VG_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_VG_ENABLE]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_VG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_OTH_VG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.setBit<CS_CTL_MISC_SCOPE_PREDICT0_OTH_VG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_OTH_VG_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_VG_ENABLE]

//>> CLEAR_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_VG_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_SCOPE_PREDICT0_OTH_VG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.clearBit<CS_CTL_MISC_SCOPE_PREDICT0_OTH_VG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_OTH_VG_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_VG_ENABLE]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_VG_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT0_OTH_VG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT0_OTH_VG_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_OTH_VG_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_VG_ENABLE]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_VG_ENABLE]
static inline bool GET_CS_CTL_MISC_SCOPE_PREDICT0_OTH_VG_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return i_data.getBit<CS_CTL_MISC_SCOPE_PREDICT0_OTH_VG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_OTH_VG_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT0_OTH_VG_ENABLE]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED3]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED3]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.setBit<CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED3]

//>> CLEAR_[CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return o_data.clearBit<CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED3]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED3]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED3]
static inline bool GET_CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT0));
#endif
    return i_data.getBit<CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT0_0_RESERVED3]

//>> PREP_[CS_SM0_MCP_MISC_CERR_MESSAGE1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_MCP_MISC_CERR_MESSAGE1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_CERR_MESSAGE1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_MCP_MISC_CERR_MESSAGE1]

//>> GET_[CS_SM0_MCP_MISC_CERR_MESSAGE1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_MCP_MISC_CERR_MESSAGE1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_CERR_MESSAGE1;
#endif
    return fapi2::getScom(i_target, CS_SM0_MCP_MISC_CERR_MESSAGE1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MESSAGE1]

//>> PUT_[CS_SM0_MCP_MISC_CERR_MESSAGE1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_MCP_MISC_CERR_MESSAGE1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MESSAGE1));
#endif
    return fapi2::putScom(i_target, CS_SM0_MCP_MISC_CERR_MESSAGE1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_MCP_MISC_CERR_MESSAGE1]


//>> SET_[CS_SM0_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MESSAGE1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1,
           CS_SM0_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1]

//>> SET_[CS_SM0_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MESSAGE1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1,
           CS_SM0_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1]

//>> GET_[CS_SM0_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MESSAGE1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1,
           CS_SM0_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1]

//>> PREP_[CS_SM0_MCP_MISC_DEBUG1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_MCP_MISC_DEBUG1_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_DEBUG1_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_MCP_MISC_DEBUG1_CONFIG]

//>> GET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_MCP_MISC_DEBUG1_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_DEBUG1_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM0_MCP_MISC_DEBUG1_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG]

//>> PUT_[CS_SM0_MCP_MISC_DEBUG1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_MCP_MISC_DEBUG1_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG1_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM0_MCP_MISC_DEBUG1_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_MCP_MISC_DEBUG1_CONFIG]


//>> SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD0,
           CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD0]

//>> SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD0,
           CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD0]

//>> GET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD0,
           CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD0]

//>> SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD1,
           CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD1]

//>> SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD1,
           CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD1]

//>> GET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD1,
           CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD1]

//>> SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD2,
           CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD2]

//>> SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD2,
           CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD2]

//>> GET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD2,
           CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD2]

//>> SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD3,
           CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD3]

//>> SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD3,
           CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD3]

//>> GET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD3,
           CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD3]

//>> SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD4,
           CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD4]

//>> SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD4,
           CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD4]

//>> GET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD4,
           CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD4]

//>> SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD5,
           CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD5]

//>> SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD5,
           CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD5]

//>> GET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD5,
           CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD5]

//>> SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD6,
           CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD6]

//>> SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD6,
           CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD6]

//>> GET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD6,
           CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD6]

//>> SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD7,
           CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD7]

//>> SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD7,
           CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD7]

//>> GET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD7,
           CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD7]

//>> SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD8,
           CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD8]

//>> SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD8,
           CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD8]

//>> GET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD8,
           CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD8_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD8]

//>> SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD9,
           CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD9]

//>> SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD9,
           CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD9]

//>> GET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD9,
           CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD9]

//>> SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD10,
           CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD10]

//>> SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD10,
           CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD10]

//>> GET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD10,
           CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_POD10]

//>> SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG1_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG1_CONFIG_RESERVED1,
           CS_SM0_MCP_MISC_DEBUG1_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG1_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_RESERVED1]

//>> SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG1_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG1_CONFIG_RESERVED1,
           CS_SM0_MCP_MISC_DEBUG1_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG1_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_RESERVED1]

//>> GET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_DEBUG1_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_DEBUG1_CONFIG_RESERVED1,
           CS_SM0_MCP_MISC_DEBUG1_CONFIG_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG1_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_RESERVED1]

//>> SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG1_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_ACT]

//>> SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG1_CONFIG_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG1_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_ACT]

//>> SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_DEBUG1_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_ACT]

//>> CLEAR_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_DEBUG1_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_ACT]

//>> GET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_DEBUG1_CONFIG_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_ACT]

//>> GET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_ACT]
static inline bool GET_CS_SM0_MCP_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_DEBUG1_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG1_CONFIG_ACT]

//>> PREP_[CS_SM0_MCP_MISC_PERF_MATCH_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_MCP_MISC_PERF_MATCH_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_PERF_MATCH_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_MCP_MISC_PERF_MATCH_CONFIG]

//>> GET_[CS_SM0_MCP_MISC_PERF_MATCH_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_MCP_MISC_PERF_MATCH_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_PERF_MATCH_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM0_MCP_MISC_PERF_MATCH_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_PERF_MATCH_CONFIG]

//>> PUT_[CS_SM0_MCP_MISC_PERF_MATCH_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_MCP_MISC_PERF_MATCH_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM0_MCP_MISC_PERF_MATCH_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_MCP_MISC_PERF_MATCH_CONFIG]


//>> SET_[CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2,
           CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2]

//>> SET_[CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2,
           CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2]

//>> GET_[CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2,
           CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2]

//>> SET_[CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_CRESP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_CRESP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_CRESP,
           CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_CRESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_CRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_CRESP]

//>> SET_[CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_CRESP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_CRESP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_CRESP,
           CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_CRESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_CRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_CRESP]

//>> GET_[CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_CRESP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_CRESP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_CRESP,
           CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_CRESP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_CRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_CRESP]

//>> SET_[CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_SCOPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_SCOPE,
           CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_SCOPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_SCOPE]

//>> SET_[CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_SCOPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_SCOPE,
           CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_SCOPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_SCOPE]

//>> GET_[CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_SCOPE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_SCOPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_SCOPE,
           CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_SCOPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_SCOPE]

//>> SET_[CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_MCMD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_MCMD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_MCMD,
           CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_MCMD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_MCMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_MCMD]

//>> SET_[CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_MCMD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_MCMD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_MCMD,
           CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_MCMD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_MCMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_MCMD]

//>> GET_[CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_MCMD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_MCMD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_MCMD,
           CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_MCMD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_MCMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_MCMD]

//>> SET_[CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1,
           CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1]

//>> SET_[CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1,
           CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1]

//>> GET_[CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1,
           CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1]

//>> PREP_[CS_SM0_SNP_MISC_GPU0_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_SNP_MISC_GPU0_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_GPU0_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_SNP_MISC_GPU0_BAR]

//>> GET_[CS_SM0_SNP_MISC_GPU0_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_SNP_MISC_GPU0_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_GPU0_BAR;
#endif
    return fapi2::getScom(i_target, CS_SM0_SNP_MISC_GPU0_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU0_BAR]

//>> PUT_[CS_SM0_SNP_MISC_GPU0_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_SNP_MISC_GPU0_BAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return fapi2::putScom(i_target, CS_SM0_SNP_MISC_GPU0_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_SNP_MISC_GPU0_BAR]


//>> SET_[CS_SM0_SNP_MISC_GPU0_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU0_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU0_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU0_BAR_ENABLE]

//>> SET_[CS_SM0_SNP_MISC_GPU0_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU0_BAR_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU0_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU0_BAR_ENABLE]

//>> SET_[CS_SM0_SNP_MISC_GPU0_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU0_BAR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU0_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU0_BAR_ENABLE]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU0_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU0_BAR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU0_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU0_BAR_ENABLE]

//>> GET_[CS_SM0_SNP_MISC_GPU0_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU0_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU0_BAR_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU0_BAR_ENABLE]

//>> GET_[CS_SM0_SNP_MISC_GPU0_BAR_ENABLE]
static inline bool GET_CS_SM0_SNP_MISC_GPU0_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU0_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU0_BAR_ENABLE]

//>> SET_[CS_SM0_SNP_MISC_GPU0_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU0_BAR_ADDR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU0_BAR_ADDR_MASK,
           CS_SM0_SNP_MISC_GPU0_BAR_ADDR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU0_BAR_ADDR_MASK]

//>> SET_[CS_SM0_SNP_MISC_GPU0_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU0_BAR_ADDR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU0_BAR_ADDR_MASK,
           CS_SM0_SNP_MISC_GPU0_BAR_ADDR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU0_BAR_ADDR_MASK]

//>> GET_[CS_SM0_SNP_MISC_GPU0_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU0_BAR_ADDR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU0_BAR_ADDR_MASK,
           CS_SM0_SNP_MISC_GPU0_BAR_ADDR_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU0_BAR_ADDR_MASK]

//>> SET_[CS_SM0_SNP_MISC_GPU0_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU0_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU0_BAR_SL_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU0_BAR_SL_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU0_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU0_BAR_SL_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU0_BAR_SL_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU0_BAR_SL_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU0_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU0_BAR_SL_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU0_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU0_BAR_SL_MODE]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU0_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU0_BAR_SL_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU0_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU0_BAR_SL_MODE]

//>> GET_[CS_SM0_SNP_MISC_GPU0_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU0_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU0_BAR_SL_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU0_BAR_SL_MODE]

//>> GET_[CS_SM0_SNP_MISC_GPU0_BAR_SL_MODE]
static inline bool GET_CS_SM0_SNP_MISC_GPU0_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU0_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU0_BAR_SL_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU0_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU0_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU0_BAR_4T_LIMIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU0_BAR_4T_LIMIT]

//>> SET_[CS_SM0_SNP_MISC_GPU0_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU0_BAR_4T_LIMIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU0_BAR_4T_LIMIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU0_BAR_4T_LIMIT]

//>> SET_[CS_SM0_SNP_MISC_GPU0_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU0_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU0_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU0_BAR_4T_LIMIT]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU0_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU0_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU0_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU0_BAR_4T_LIMIT]

//>> GET_[CS_SM0_SNP_MISC_GPU0_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU0_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU0_BAR_4T_LIMIT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU0_BAR_4T_LIMIT]

//>> GET_[CS_SM0_SNP_MISC_GPU0_BAR_4T_LIMIT]
static inline bool GET_CS_SM0_SNP_MISC_GPU0_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU0_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU0_BAR_4T_LIMIT]

//>> SET_[CS_SM0_SNP_MISC_GPU0_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU0_BAR_4T_SELECT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU0_BAR_4T_SELECT,
           CS_SM0_SNP_MISC_GPU0_BAR_4T_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU0_BAR_4T_SELECT]

//>> SET_[CS_SM0_SNP_MISC_GPU0_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU0_BAR_4T_SELECT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU0_BAR_4T_SELECT,
           CS_SM0_SNP_MISC_GPU0_BAR_4T_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU0_BAR_4T_SELECT]

//>> GET_[CS_SM0_SNP_MISC_GPU0_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU0_BAR_4T_SELECT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU0_BAR_4T_SELECT,
           CS_SM0_SNP_MISC_GPU0_BAR_4T_SELECT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU0_BAR_4T_SELECT]

//>> SET_[CS_SM0_SNP_MISC_GPU0_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU0_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU0_BAR_MODE,
           CS_SM0_SNP_MISC_GPU0_BAR_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU0_BAR_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU0_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU0_BAR_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU0_BAR_MODE,
           CS_SM0_SNP_MISC_GPU0_BAR_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU0_BAR_MODE]

//>> GET_[CS_SM0_SNP_MISC_GPU0_BAR_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU0_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU0_BAR_MODE,
           CS_SM0_SNP_MISC_GPU0_BAR_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU0_BAR_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU0_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU0_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU0_BAR_GRANULE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU0_BAR_GRANULE]

//>> SET_[CS_SM0_SNP_MISC_GPU0_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU0_BAR_GRANULE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU0_BAR_GRANULE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU0_BAR_GRANULE]

//>> SET_[CS_SM0_SNP_MISC_GPU0_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU0_BAR_GRANULE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU0_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU0_BAR_GRANULE]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU0_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU0_BAR_GRANULE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU0_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU0_BAR_GRANULE]

//>> GET_[CS_SM0_SNP_MISC_GPU0_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU0_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU0_BAR_GRANULE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU0_BAR_GRANULE]

//>> GET_[CS_SM0_SNP_MISC_GPU0_BAR_GRANULE]
static inline bool GET_CS_SM0_SNP_MISC_GPU0_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU0_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU0_BAR_GRANULE]

//>> SET_[CS_SM0_SNP_MISC_GPU0_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU0_BAR_POISON(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU0_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU0_BAR_POISON]

//>> SET_[CS_SM0_SNP_MISC_GPU0_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU0_BAR_POISON(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU0_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU0_BAR_POISON]

//>> SET_[CS_SM0_SNP_MISC_GPU0_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU0_BAR_POISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU0_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU0_BAR_POISON]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU0_BAR_POISON]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU0_BAR_POISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU0_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU0_BAR_POISON]

//>> GET_[CS_SM0_SNP_MISC_GPU0_BAR_POISON]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU0_BAR_POISON(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU0_BAR_POISON,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU0_BAR_POISON]

//>> GET_[CS_SM0_SNP_MISC_GPU0_BAR_POISON]
static inline bool GET_CS_SM0_SNP_MISC_GPU0_BAR_POISON(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU0_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU0_BAR_POISON]

//>> SET_[CS_SM0_SNP_MISC_GPU0_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU0_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU0_BAR_M2MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU0_BAR_M2MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU0_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU0_BAR_M2MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU0_BAR_M2MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU0_BAR_M2MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU0_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU0_BAR_M2MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU0_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU0_BAR_M2MODE]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU0_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU0_BAR_M2MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU0_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU0_BAR_M2MODE]

//>> GET_[CS_SM0_SNP_MISC_GPU0_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU0_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU0_BAR_M2MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU0_BAR_M2MODE]

//>> GET_[CS_SM0_SNP_MISC_GPU0_BAR_M2MODE]
static inline bool GET_CS_SM0_SNP_MISC_GPU0_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU0_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU0_BAR_M2MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]

//>> GET_[CS_SM0_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]

//>> GET_[CS_SM0_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]
static inline bool GET_CS_SM0_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU0_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU0_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU0_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU0_BAR_SECURE_A12]

//>> SET_[CS_SM0_SNP_MISC_GPU0_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU0_BAR_SECURE_A12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU0_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU0_BAR_SECURE_A12]

//>> SET_[CS_SM0_SNP_MISC_GPU0_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU0_BAR_SECURE_A12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU0_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU0_BAR_SECURE_A12]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU0_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU0_BAR_SECURE_A12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU0_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU0_BAR_SECURE_A12]

//>> GET_[CS_SM0_SNP_MISC_GPU0_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU0_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU0_BAR_SECURE_A12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU0_BAR_SECURE_A12]

//>> GET_[CS_SM0_SNP_MISC_GPU0_BAR_SECURE_A12]
static inline bool GET_CS_SM0_SNP_MISC_GPU0_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU0_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU0_BAR_SECURE_A12]

//>> SET_[CS_SM0_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM0_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM0_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]

//>> GET_[CS_SM0_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]

//>> GET_[CS_SM0_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]
static inline bool GET_CS_SM0_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM0_SNP_MISC_GPU0_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU0_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU0_BAR_EXTENDED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU0_BAR_EXTENDED_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU0_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU0_BAR_EXTENDED_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU0_BAR_EXTENDED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU0_BAR_EXTENDED_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU0_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU0_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU0_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU0_BAR_EXTENDED_MODE]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU0_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU0_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU0_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU0_BAR_EXTENDED_MODE]

//>> GET_[CS_SM0_SNP_MISC_GPU0_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU0_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU0_BAR_EXTENDED_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU0_BAR_EXTENDED_MODE]

//>> GET_[CS_SM0_SNP_MISC_GPU0_BAR_EXTENDED_MODE]
static inline bool GET_CS_SM0_SNP_MISC_GPU0_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU0_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU0_BAR_EXTENDED_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU0_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU0_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU0_BAR_RESERVED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU0_BAR_RESERVED]

//>> SET_[CS_SM0_SNP_MISC_GPU0_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU0_BAR_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU0_BAR_RESERVED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU0_BAR_RESERVED]

//>> SET_[CS_SM0_SNP_MISC_GPU0_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU0_BAR_RESERVED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU0_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU0_BAR_RESERVED]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU0_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU0_BAR_RESERVED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU0_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU0_BAR_RESERVED]

//>> GET_[CS_SM0_SNP_MISC_GPU0_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU0_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU0_BAR_RESERVED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU0_BAR_RESERVED]

//>> GET_[CS_SM0_SNP_MISC_GPU0_BAR_RESERVED]
static inline bool GET_CS_SM0_SNP_MISC_GPU0_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU0_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU0_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU0_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU0_BAR_RESERVED]

//>> PREP_[CS_SM0_SNP_MISC_GPU1_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_SNP_MISC_GPU1_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_GPU1_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_SNP_MISC_GPU1_BAR]

//>> GET_[CS_SM0_SNP_MISC_GPU1_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_SNP_MISC_GPU1_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_GPU1_BAR;
#endif
    return fapi2::getScom(i_target, CS_SM0_SNP_MISC_GPU1_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU1_BAR]

//>> PUT_[CS_SM0_SNP_MISC_GPU1_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_SNP_MISC_GPU1_BAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return fapi2::putScom(i_target, CS_SM0_SNP_MISC_GPU1_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_SNP_MISC_GPU1_BAR]


//>> SET_[CS_SM0_SNP_MISC_GPU1_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU1_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU1_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU1_BAR_ENABLE]

//>> SET_[CS_SM0_SNP_MISC_GPU1_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU1_BAR_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU1_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU1_BAR_ENABLE]

//>> SET_[CS_SM0_SNP_MISC_GPU1_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU1_BAR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU1_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU1_BAR_ENABLE]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU1_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU1_BAR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU1_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU1_BAR_ENABLE]

//>> GET_[CS_SM0_SNP_MISC_GPU1_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU1_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU1_BAR_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU1_BAR_ENABLE]

//>> GET_[CS_SM0_SNP_MISC_GPU1_BAR_ENABLE]
static inline bool GET_CS_SM0_SNP_MISC_GPU1_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU1_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU1_BAR_ENABLE]

//>> SET_[CS_SM0_SNP_MISC_GPU1_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU1_BAR_ADDR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU1_BAR_ADDR_MASK,
           CS_SM0_SNP_MISC_GPU1_BAR_ADDR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU1_BAR_ADDR_MASK]

//>> SET_[CS_SM0_SNP_MISC_GPU1_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU1_BAR_ADDR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU1_BAR_ADDR_MASK,
           CS_SM0_SNP_MISC_GPU1_BAR_ADDR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU1_BAR_ADDR_MASK]

//>> GET_[CS_SM0_SNP_MISC_GPU1_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU1_BAR_ADDR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU1_BAR_ADDR_MASK,
           CS_SM0_SNP_MISC_GPU1_BAR_ADDR_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU1_BAR_ADDR_MASK]

//>> SET_[CS_SM0_SNP_MISC_GPU1_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU1_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU1_BAR_SL_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU1_BAR_SL_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU1_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU1_BAR_SL_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU1_BAR_SL_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU1_BAR_SL_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU1_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU1_BAR_SL_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU1_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU1_BAR_SL_MODE]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU1_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU1_BAR_SL_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU1_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU1_BAR_SL_MODE]

//>> GET_[CS_SM0_SNP_MISC_GPU1_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU1_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU1_BAR_SL_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU1_BAR_SL_MODE]

//>> GET_[CS_SM0_SNP_MISC_GPU1_BAR_SL_MODE]
static inline bool GET_CS_SM0_SNP_MISC_GPU1_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU1_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU1_BAR_SL_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU1_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU1_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU1_BAR_4T_LIMIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU1_BAR_4T_LIMIT]

//>> SET_[CS_SM0_SNP_MISC_GPU1_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU1_BAR_4T_LIMIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU1_BAR_4T_LIMIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU1_BAR_4T_LIMIT]

//>> SET_[CS_SM0_SNP_MISC_GPU1_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU1_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU1_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU1_BAR_4T_LIMIT]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU1_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU1_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU1_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU1_BAR_4T_LIMIT]

//>> GET_[CS_SM0_SNP_MISC_GPU1_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU1_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU1_BAR_4T_LIMIT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU1_BAR_4T_LIMIT]

//>> GET_[CS_SM0_SNP_MISC_GPU1_BAR_4T_LIMIT]
static inline bool GET_CS_SM0_SNP_MISC_GPU1_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU1_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU1_BAR_4T_LIMIT]

//>> SET_[CS_SM0_SNP_MISC_GPU1_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU1_BAR_4T_SELECT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU1_BAR_4T_SELECT,
           CS_SM0_SNP_MISC_GPU1_BAR_4T_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU1_BAR_4T_SELECT]

//>> SET_[CS_SM0_SNP_MISC_GPU1_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU1_BAR_4T_SELECT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU1_BAR_4T_SELECT,
           CS_SM0_SNP_MISC_GPU1_BAR_4T_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU1_BAR_4T_SELECT]

//>> GET_[CS_SM0_SNP_MISC_GPU1_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU1_BAR_4T_SELECT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU1_BAR_4T_SELECT,
           CS_SM0_SNP_MISC_GPU1_BAR_4T_SELECT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU1_BAR_4T_SELECT]

//>> SET_[CS_SM0_SNP_MISC_GPU1_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU1_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU1_BAR_MODE,
           CS_SM0_SNP_MISC_GPU1_BAR_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU1_BAR_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU1_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU1_BAR_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU1_BAR_MODE,
           CS_SM0_SNP_MISC_GPU1_BAR_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU1_BAR_MODE]

//>> GET_[CS_SM0_SNP_MISC_GPU1_BAR_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU1_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU1_BAR_MODE,
           CS_SM0_SNP_MISC_GPU1_BAR_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU1_BAR_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU1_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU1_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU1_BAR_GRANULE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU1_BAR_GRANULE]

//>> SET_[CS_SM0_SNP_MISC_GPU1_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU1_BAR_GRANULE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU1_BAR_GRANULE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU1_BAR_GRANULE]

//>> SET_[CS_SM0_SNP_MISC_GPU1_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU1_BAR_GRANULE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU1_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU1_BAR_GRANULE]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU1_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU1_BAR_GRANULE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU1_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU1_BAR_GRANULE]

//>> GET_[CS_SM0_SNP_MISC_GPU1_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU1_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU1_BAR_GRANULE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU1_BAR_GRANULE]

//>> GET_[CS_SM0_SNP_MISC_GPU1_BAR_GRANULE]
static inline bool GET_CS_SM0_SNP_MISC_GPU1_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU1_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU1_BAR_GRANULE]

//>> SET_[CS_SM0_SNP_MISC_GPU1_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU1_BAR_POISON(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU1_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU1_BAR_POISON]

//>> SET_[CS_SM0_SNP_MISC_GPU1_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU1_BAR_POISON(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU1_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU1_BAR_POISON]

//>> SET_[CS_SM0_SNP_MISC_GPU1_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU1_BAR_POISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU1_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU1_BAR_POISON]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU1_BAR_POISON]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU1_BAR_POISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU1_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU1_BAR_POISON]

//>> GET_[CS_SM0_SNP_MISC_GPU1_BAR_POISON]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU1_BAR_POISON(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU1_BAR_POISON,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU1_BAR_POISON]

//>> GET_[CS_SM0_SNP_MISC_GPU1_BAR_POISON]
static inline bool GET_CS_SM0_SNP_MISC_GPU1_BAR_POISON(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU1_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU1_BAR_POISON]

//>> SET_[CS_SM0_SNP_MISC_GPU1_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU1_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU1_BAR_M2MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU1_BAR_M2MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU1_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU1_BAR_M2MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU1_BAR_M2MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU1_BAR_M2MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU1_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU1_BAR_M2MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU1_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU1_BAR_M2MODE]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU1_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU1_BAR_M2MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU1_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU1_BAR_M2MODE]

//>> GET_[CS_SM0_SNP_MISC_GPU1_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU1_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU1_BAR_M2MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU1_BAR_M2MODE]

//>> GET_[CS_SM0_SNP_MISC_GPU1_BAR_M2MODE]
static inline bool GET_CS_SM0_SNP_MISC_GPU1_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU1_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU1_BAR_M2MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]

//>> GET_[CS_SM0_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]

//>> GET_[CS_SM0_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]
static inline bool GET_CS_SM0_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU1_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU1_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU1_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU1_BAR_SECURE_A12]

//>> SET_[CS_SM0_SNP_MISC_GPU1_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU1_BAR_SECURE_A12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU1_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU1_BAR_SECURE_A12]

//>> SET_[CS_SM0_SNP_MISC_GPU1_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU1_BAR_SECURE_A12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU1_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU1_BAR_SECURE_A12]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU1_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU1_BAR_SECURE_A12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU1_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU1_BAR_SECURE_A12]

//>> GET_[CS_SM0_SNP_MISC_GPU1_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU1_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU1_BAR_SECURE_A12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU1_BAR_SECURE_A12]

//>> GET_[CS_SM0_SNP_MISC_GPU1_BAR_SECURE_A12]
static inline bool GET_CS_SM0_SNP_MISC_GPU1_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU1_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU1_BAR_SECURE_A12]

//>> SET_[CS_SM0_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM0_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM0_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]

//>> GET_[CS_SM0_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]

//>> GET_[CS_SM0_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]
static inline bool GET_CS_SM0_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM0_SNP_MISC_GPU1_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU1_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU1_BAR_EXTENDED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU1_BAR_EXTENDED_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU1_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU1_BAR_EXTENDED_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU1_BAR_EXTENDED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU1_BAR_EXTENDED_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU1_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU1_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU1_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU1_BAR_EXTENDED_MODE]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU1_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU1_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU1_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU1_BAR_EXTENDED_MODE]

//>> GET_[CS_SM0_SNP_MISC_GPU1_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU1_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU1_BAR_EXTENDED_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU1_BAR_EXTENDED_MODE]

//>> GET_[CS_SM0_SNP_MISC_GPU1_BAR_EXTENDED_MODE]
static inline bool GET_CS_SM0_SNP_MISC_GPU1_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU1_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU1_BAR_EXTENDED_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU1_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU1_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU1_BAR_RESERVED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU1_BAR_RESERVED]

//>> SET_[CS_SM0_SNP_MISC_GPU1_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU1_BAR_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU1_BAR_RESERVED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU1_BAR_RESERVED]

//>> SET_[CS_SM0_SNP_MISC_GPU1_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU1_BAR_RESERVED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU1_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU1_BAR_RESERVED]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU1_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU1_BAR_RESERVED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU1_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU1_BAR_RESERVED]

//>> GET_[CS_SM0_SNP_MISC_GPU1_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU1_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU1_BAR_RESERVED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU1_BAR_RESERVED]

//>> GET_[CS_SM0_SNP_MISC_GPU1_BAR_RESERVED]
static inline bool GET_CS_SM0_SNP_MISC_GPU1_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU1_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU1_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU1_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU1_BAR_RESERVED]

//>> PREP_[CS_SM0_SNP_MISC_GPU2_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_SNP_MISC_GPU2_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_GPU2_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_SNP_MISC_GPU2_BAR]

//>> GET_[CS_SM0_SNP_MISC_GPU2_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_SNP_MISC_GPU2_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_GPU2_BAR;
#endif
    return fapi2::getScom(i_target, CS_SM0_SNP_MISC_GPU2_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU2_BAR]

//>> PUT_[CS_SM0_SNP_MISC_GPU2_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_SNP_MISC_GPU2_BAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return fapi2::putScom(i_target, CS_SM0_SNP_MISC_GPU2_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_SNP_MISC_GPU2_BAR]


//>> SET_[CS_SM0_SNP_MISC_GPU2_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU2_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU2_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU2_BAR_ENABLE]

//>> SET_[CS_SM0_SNP_MISC_GPU2_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU2_BAR_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU2_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU2_BAR_ENABLE]

//>> SET_[CS_SM0_SNP_MISC_GPU2_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU2_BAR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU2_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU2_BAR_ENABLE]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU2_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU2_BAR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU2_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU2_BAR_ENABLE]

//>> GET_[CS_SM0_SNP_MISC_GPU2_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU2_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU2_BAR_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU2_BAR_ENABLE]

//>> GET_[CS_SM0_SNP_MISC_GPU2_BAR_ENABLE]
static inline bool GET_CS_SM0_SNP_MISC_GPU2_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU2_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU2_BAR_ENABLE]

//>> SET_[CS_SM0_SNP_MISC_GPU2_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU2_BAR_ADDR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU2_BAR_ADDR_MASK,
           CS_SM0_SNP_MISC_GPU2_BAR_ADDR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU2_BAR_ADDR_MASK]

//>> SET_[CS_SM0_SNP_MISC_GPU2_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU2_BAR_ADDR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU2_BAR_ADDR_MASK,
           CS_SM0_SNP_MISC_GPU2_BAR_ADDR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU2_BAR_ADDR_MASK]

//>> GET_[CS_SM0_SNP_MISC_GPU2_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU2_BAR_ADDR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU2_BAR_ADDR_MASK,
           CS_SM0_SNP_MISC_GPU2_BAR_ADDR_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU2_BAR_ADDR_MASK]

//>> SET_[CS_SM0_SNP_MISC_GPU2_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU2_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU2_BAR_SL_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU2_BAR_SL_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU2_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU2_BAR_SL_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU2_BAR_SL_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU2_BAR_SL_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU2_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU2_BAR_SL_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU2_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU2_BAR_SL_MODE]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU2_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU2_BAR_SL_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU2_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU2_BAR_SL_MODE]

//>> GET_[CS_SM0_SNP_MISC_GPU2_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU2_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU2_BAR_SL_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU2_BAR_SL_MODE]

//>> GET_[CS_SM0_SNP_MISC_GPU2_BAR_SL_MODE]
static inline bool GET_CS_SM0_SNP_MISC_GPU2_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU2_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU2_BAR_SL_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU2_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU2_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU2_BAR_4T_LIMIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU2_BAR_4T_LIMIT]

//>> SET_[CS_SM0_SNP_MISC_GPU2_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU2_BAR_4T_LIMIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU2_BAR_4T_LIMIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU2_BAR_4T_LIMIT]

//>> SET_[CS_SM0_SNP_MISC_GPU2_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU2_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU2_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU2_BAR_4T_LIMIT]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU2_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU2_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU2_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU2_BAR_4T_LIMIT]

//>> GET_[CS_SM0_SNP_MISC_GPU2_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU2_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU2_BAR_4T_LIMIT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU2_BAR_4T_LIMIT]

//>> GET_[CS_SM0_SNP_MISC_GPU2_BAR_4T_LIMIT]
static inline bool GET_CS_SM0_SNP_MISC_GPU2_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU2_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU2_BAR_4T_LIMIT]

//>> SET_[CS_SM0_SNP_MISC_GPU2_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU2_BAR_4T_SELECT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU2_BAR_4T_SELECT,
           CS_SM0_SNP_MISC_GPU2_BAR_4T_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU2_BAR_4T_SELECT]

//>> SET_[CS_SM0_SNP_MISC_GPU2_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU2_BAR_4T_SELECT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU2_BAR_4T_SELECT,
           CS_SM0_SNP_MISC_GPU2_BAR_4T_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU2_BAR_4T_SELECT]

//>> GET_[CS_SM0_SNP_MISC_GPU2_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU2_BAR_4T_SELECT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU2_BAR_4T_SELECT,
           CS_SM0_SNP_MISC_GPU2_BAR_4T_SELECT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU2_BAR_4T_SELECT]

//>> SET_[CS_SM0_SNP_MISC_GPU2_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU2_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU2_BAR_MODE,
           CS_SM0_SNP_MISC_GPU2_BAR_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU2_BAR_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU2_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU2_BAR_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU2_BAR_MODE,
           CS_SM0_SNP_MISC_GPU2_BAR_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU2_BAR_MODE]

//>> GET_[CS_SM0_SNP_MISC_GPU2_BAR_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU2_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU2_BAR_MODE,
           CS_SM0_SNP_MISC_GPU2_BAR_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU2_BAR_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU2_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU2_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU2_BAR_GRANULE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU2_BAR_GRANULE]

//>> SET_[CS_SM0_SNP_MISC_GPU2_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU2_BAR_GRANULE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU2_BAR_GRANULE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU2_BAR_GRANULE]

//>> SET_[CS_SM0_SNP_MISC_GPU2_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU2_BAR_GRANULE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU2_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU2_BAR_GRANULE]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU2_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU2_BAR_GRANULE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU2_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU2_BAR_GRANULE]

//>> GET_[CS_SM0_SNP_MISC_GPU2_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU2_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU2_BAR_GRANULE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU2_BAR_GRANULE]

//>> GET_[CS_SM0_SNP_MISC_GPU2_BAR_GRANULE]
static inline bool GET_CS_SM0_SNP_MISC_GPU2_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU2_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU2_BAR_GRANULE]

//>> SET_[CS_SM0_SNP_MISC_GPU2_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU2_BAR_POISON(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU2_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU2_BAR_POISON]

//>> SET_[CS_SM0_SNP_MISC_GPU2_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU2_BAR_POISON(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU2_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU2_BAR_POISON]

//>> SET_[CS_SM0_SNP_MISC_GPU2_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU2_BAR_POISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU2_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU2_BAR_POISON]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU2_BAR_POISON]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU2_BAR_POISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU2_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU2_BAR_POISON]

//>> GET_[CS_SM0_SNP_MISC_GPU2_BAR_POISON]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU2_BAR_POISON(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU2_BAR_POISON,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU2_BAR_POISON]

//>> GET_[CS_SM0_SNP_MISC_GPU2_BAR_POISON]
static inline bool GET_CS_SM0_SNP_MISC_GPU2_BAR_POISON(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU2_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU2_BAR_POISON]

//>> SET_[CS_SM0_SNP_MISC_GPU2_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU2_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU2_BAR_M2MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU2_BAR_M2MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU2_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU2_BAR_M2MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU2_BAR_M2MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU2_BAR_M2MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU2_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU2_BAR_M2MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU2_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU2_BAR_M2MODE]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU2_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU2_BAR_M2MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU2_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU2_BAR_M2MODE]

//>> GET_[CS_SM0_SNP_MISC_GPU2_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU2_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU2_BAR_M2MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU2_BAR_M2MODE]

//>> GET_[CS_SM0_SNP_MISC_GPU2_BAR_M2MODE]
static inline bool GET_CS_SM0_SNP_MISC_GPU2_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU2_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU2_BAR_M2MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]

//>> GET_[CS_SM0_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]

//>> GET_[CS_SM0_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]
static inline bool GET_CS_SM0_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU2_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU2_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU2_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU2_BAR_SECURE_A12]

//>> SET_[CS_SM0_SNP_MISC_GPU2_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU2_BAR_SECURE_A12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU2_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU2_BAR_SECURE_A12]

//>> SET_[CS_SM0_SNP_MISC_GPU2_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU2_BAR_SECURE_A12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU2_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU2_BAR_SECURE_A12]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU2_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU2_BAR_SECURE_A12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU2_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU2_BAR_SECURE_A12]

//>> GET_[CS_SM0_SNP_MISC_GPU2_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU2_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU2_BAR_SECURE_A12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU2_BAR_SECURE_A12]

//>> GET_[CS_SM0_SNP_MISC_GPU2_BAR_SECURE_A12]
static inline bool GET_CS_SM0_SNP_MISC_GPU2_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU2_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU2_BAR_SECURE_A12]

//>> SET_[CS_SM0_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM0_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM0_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]

//>> GET_[CS_SM0_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]

//>> GET_[CS_SM0_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]
static inline bool GET_CS_SM0_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM0_SNP_MISC_GPU2_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU2_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU2_BAR_EXTENDED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU2_BAR_EXTENDED_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU2_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU2_BAR_EXTENDED_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU2_BAR_EXTENDED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU2_BAR_EXTENDED_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU2_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU2_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU2_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU2_BAR_EXTENDED_MODE]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU2_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU2_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU2_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU2_BAR_EXTENDED_MODE]

//>> GET_[CS_SM0_SNP_MISC_GPU2_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU2_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU2_BAR_EXTENDED_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU2_BAR_EXTENDED_MODE]

//>> GET_[CS_SM0_SNP_MISC_GPU2_BAR_EXTENDED_MODE]
static inline bool GET_CS_SM0_SNP_MISC_GPU2_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU2_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU2_BAR_EXTENDED_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU2_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU2_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU2_BAR_RESERVED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU2_BAR_RESERVED]

//>> SET_[CS_SM0_SNP_MISC_GPU2_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU2_BAR_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU2_BAR_RESERVED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU2_BAR_RESERVED]

//>> SET_[CS_SM0_SNP_MISC_GPU2_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU2_BAR_RESERVED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU2_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU2_BAR_RESERVED]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU2_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU2_BAR_RESERVED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU2_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU2_BAR_RESERVED]

//>> GET_[CS_SM0_SNP_MISC_GPU2_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU2_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU2_BAR_RESERVED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU2_BAR_RESERVED]

//>> GET_[CS_SM0_SNP_MISC_GPU2_BAR_RESERVED]
static inline bool GET_CS_SM0_SNP_MISC_GPU2_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU2_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU2_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU2_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU2_BAR_RESERVED]

//>> PREP_[CS_SM0_SNP_MISC_GPU3_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_SNP_MISC_GPU3_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_GPU3_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_SNP_MISC_GPU3_BAR]

//>> GET_[CS_SM0_SNP_MISC_GPU3_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_SNP_MISC_GPU3_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_GPU3_BAR;
#endif
    return fapi2::getScom(i_target, CS_SM0_SNP_MISC_GPU3_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU3_BAR]

//>> PUT_[CS_SM0_SNP_MISC_GPU3_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_SNP_MISC_GPU3_BAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return fapi2::putScom(i_target, CS_SM0_SNP_MISC_GPU3_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_SNP_MISC_GPU3_BAR]


//>> SET_[CS_SM0_SNP_MISC_GPU3_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU3_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU3_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU3_BAR_ENABLE]

//>> SET_[CS_SM0_SNP_MISC_GPU3_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU3_BAR_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU3_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU3_BAR_ENABLE]

//>> SET_[CS_SM0_SNP_MISC_GPU3_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU3_BAR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU3_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU3_BAR_ENABLE]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU3_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU3_BAR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU3_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU3_BAR_ENABLE]

//>> GET_[CS_SM0_SNP_MISC_GPU3_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU3_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU3_BAR_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU3_BAR_ENABLE]

//>> GET_[CS_SM0_SNP_MISC_GPU3_BAR_ENABLE]
static inline bool GET_CS_SM0_SNP_MISC_GPU3_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU3_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU3_BAR_ENABLE]

//>> SET_[CS_SM0_SNP_MISC_GPU3_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU3_BAR_ADDR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU3_BAR_ADDR_MASK,
           CS_SM0_SNP_MISC_GPU3_BAR_ADDR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU3_BAR_ADDR_MASK]

//>> SET_[CS_SM0_SNP_MISC_GPU3_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU3_BAR_ADDR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU3_BAR_ADDR_MASK,
           CS_SM0_SNP_MISC_GPU3_BAR_ADDR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU3_BAR_ADDR_MASK]

//>> GET_[CS_SM0_SNP_MISC_GPU3_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU3_BAR_ADDR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU3_BAR_ADDR_MASK,
           CS_SM0_SNP_MISC_GPU3_BAR_ADDR_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU3_BAR_ADDR_MASK]

//>> SET_[CS_SM0_SNP_MISC_GPU3_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU3_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU3_BAR_SL_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU3_BAR_SL_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU3_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU3_BAR_SL_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU3_BAR_SL_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU3_BAR_SL_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU3_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU3_BAR_SL_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU3_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU3_BAR_SL_MODE]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU3_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU3_BAR_SL_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU3_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU3_BAR_SL_MODE]

//>> GET_[CS_SM0_SNP_MISC_GPU3_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU3_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU3_BAR_SL_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU3_BAR_SL_MODE]

//>> GET_[CS_SM0_SNP_MISC_GPU3_BAR_SL_MODE]
static inline bool GET_CS_SM0_SNP_MISC_GPU3_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU3_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU3_BAR_SL_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU3_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU3_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU3_BAR_4T_LIMIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU3_BAR_4T_LIMIT]

//>> SET_[CS_SM0_SNP_MISC_GPU3_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU3_BAR_4T_LIMIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU3_BAR_4T_LIMIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU3_BAR_4T_LIMIT]

//>> SET_[CS_SM0_SNP_MISC_GPU3_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU3_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU3_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU3_BAR_4T_LIMIT]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU3_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU3_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU3_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU3_BAR_4T_LIMIT]

//>> GET_[CS_SM0_SNP_MISC_GPU3_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU3_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU3_BAR_4T_LIMIT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU3_BAR_4T_LIMIT]

//>> GET_[CS_SM0_SNP_MISC_GPU3_BAR_4T_LIMIT]
static inline bool GET_CS_SM0_SNP_MISC_GPU3_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU3_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU3_BAR_4T_LIMIT]

//>> SET_[CS_SM0_SNP_MISC_GPU3_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU3_BAR_4T_SELECT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU3_BAR_4T_SELECT,
           CS_SM0_SNP_MISC_GPU3_BAR_4T_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU3_BAR_4T_SELECT]

//>> SET_[CS_SM0_SNP_MISC_GPU3_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU3_BAR_4T_SELECT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU3_BAR_4T_SELECT,
           CS_SM0_SNP_MISC_GPU3_BAR_4T_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU3_BAR_4T_SELECT]

//>> GET_[CS_SM0_SNP_MISC_GPU3_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU3_BAR_4T_SELECT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU3_BAR_4T_SELECT,
           CS_SM0_SNP_MISC_GPU3_BAR_4T_SELECT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU3_BAR_4T_SELECT]

//>> SET_[CS_SM0_SNP_MISC_GPU3_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU3_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU3_BAR_MODE,
           CS_SM0_SNP_MISC_GPU3_BAR_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU3_BAR_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU3_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU3_BAR_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU3_BAR_MODE,
           CS_SM0_SNP_MISC_GPU3_BAR_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU3_BAR_MODE]

//>> GET_[CS_SM0_SNP_MISC_GPU3_BAR_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU3_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU3_BAR_MODE,
           CS_SM0_SNP_MISC_GPU3_BAR_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU3_BAR_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU3_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU3_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU3_BAR_GRANULE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU3_BAR_GRANULE]

//>> SET_[CS_SM0_SNP_MISC_GPU3_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU3_BAR_GRANULE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU3_BAR_GRANULE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU3_BAR_GRANULE]

//>> SET_[CS_SM0_SNP_MISC_GPU3_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU3_BAR_GRANULE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU3_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU3_BAR_GRANULE]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU3_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU3_BAR_GRANULE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU3_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU3_BAR_GRANULE]

//>> GET_[CS_SM0_SNP_MISC_GPU3_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU3_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU3_BAR_GRANULE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU3_BAR_GRANULE]

//>> GET_[CS_SM0_SNP_MISC_GPU3_BAR_GRANULE]
static inline bool GET_CS_SM0_SNP_MISC_GPU3_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU3_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU3_BAR_GRANULE]

//>> SET_[CS_SM0_SNP_MISC_GPU3_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU3_BAR_POISON(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU3_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU3_BAR_POISON]

//>> SET_[CS_SM0_SNP_MISC_GPU3_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU3_BAR_POISON(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU3_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU3_BAR_POISON]

//>> SET_[CS_SM0_SNP_MISC_GPU3_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU3_BAR_POISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU3_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU3_BAR_POISON]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU3_BAR_POISON]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU3_BAR_POISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU3_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU3_BAR_POISON]

//>> GET_[CS_SM0_SNP_MISC_GPU3_BAR_POISON]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU3_BAR_POISON(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU3_BAR_POISON,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU3_BAR_POISON]

//>> GET_[CS_SM0_SNP_MISC_GPU3_BAR_POISON]
static inline bool GET_CS_SM0_SNP_MISC_GPU3_BAR_POISON(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU3_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU3_BAR_POISON]

//>> SET_[CS_SM0_SNP_MISC_GPU3_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU3_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU3_BAR_M2MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU3_BAR_M2MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU3_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU3_BAR_M2MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU3_BAR_M2MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU3_BAR_M2MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU3_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU3_BAR_M2MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU3_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU3_BAR_M2MODE]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU3_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU3_BAR_M2MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU3_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU3_BAR_M2MODE]

//>> GET_[CS_SM0_SNP_MISC_GPU3_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU3_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU3_BAR_M2MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU3_BAR_M2MODE]

//>> GET_[CS_SM0_SNP_MISC_GPU3_BAR_M2MODE]
static inline bool GET_CS_SM0_SNP_MISC_GPU3_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU3_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU3_BAR_M2MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]

//>> GET_[CS_SM0_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]

//>> GET_[CS_SM0_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]
static inline bool GET_CS_SM0_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU3_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU3_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU3_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU3_BAR_SECURE_A12]

//>> SET_[CS_SM0_SNP_MISC_GPU3_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU3_BAR_SECURE_A12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU3_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU3_BAR_SECURE_A12]

//>> SET_[CS_SM0_SNP_MISC_GPU3_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU3_BAR_SECURE_A12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU3_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU3_BAR_SECURE_A12]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU3_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU3_BAR_SECURE_A12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU3_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU3_BAR_SECURE_A12]

//>> GET_[CS_SM0_SNP_MISC_GPU3_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU3_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU3_BAR_SECURE_A12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU3_BAR_SECURE_A12]

//>> GET_[CS_SM0_SNP_MISC_GPU3_BAR_SECURE_A12]
static inline bool GET_CS_SM0_SNP_MISC_GPU3_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU3_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU3_BAR_SECURE_A12]

//>> SET_[CS_SM0_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM0_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM0_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]

//>> GET_[CS_SM0_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]

//>> GET_[CS_SM0_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]
static inline bool GET_CS_SM0_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM0_SNP_MISC_GPU3_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU3_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU3_BAR_EXTENDED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU3_BAR_EXTENDED_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU3_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU3_BAR_EXTENDED_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU3_BAR_EXTENDED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU3_BAR_EXTENDED_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU3_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU3_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU3_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU3_BAR_EXTENDED_MODE]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU3_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU3_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU3_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU3_BAR_EXTENDED_MODE]

//>> GET_[CS_SM0_SNP_MISC_GPU3_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU3_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU3_BAR_EXTENDED_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU3_BAR_EXTENDED_MODE]

//>> GET_[CS_SM0_SNP_MISC_GPU3_BAR_EXTENDED_MODE]
static inline bool GET_CS_SM0_SNP_MISC_GPU3_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU3_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU3_BAR_EXTENDED_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU3_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU3_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU3_BAR_RESERVED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU3_BAR_RESERVED]

//>> SET_[CS_SM0_SNP_MISC_GPU3_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU3_BAR_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU3_BAR_RESERVED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU3_BAR_RESERVED]

//>> SET_[CS_SM0_SNP_MISC_GPU3_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU3_BAR_RESERVED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU3_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU3_BAR_RESERVED]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU3_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU3_BAR_RESERVED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU3_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU3_BAR_RESERVED]

//>> GET_[CS_SM0_SNP_MISC_GPU3_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU3_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU3_BAR_RESERVED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU3_BAR_RESERVED]

//>> GET_[CS_SM0_SNP_MISC_GPU3_BAR_RESERVED]
static inline bool GET_CS_SM0_SNP_MISC_GPU3_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU3_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU3_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU3_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU3_BAR_RESERVED]

//>> PREP_[CS_SM0_SNP_MISC_GPU4_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_SNP_MISC_GPU4_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_GPU4_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_SNP_MISC_GPU4_BAR]

//>> GET_[CS_SM0_SNP_MISC_GPU4_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_SNP_MISC_GPU4_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_GPU4_BAR;
#endif
    return fapi2::getScom(i_target, CS_SM0_SNP_MISC_GPU4_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU4_BAR]

//>> PUT_[CS_SM0_SNP_MISC_GPU4_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_SNP_MISC_GPU4_BAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return fapi2::putScom(i_target, CS_SM0_SNP_MISC_GPU4_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_SNP_MISC_GPU4_BAR]


//>> SET_[CS_SM0_SNP_MISC_GPU4_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU4_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU4_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU4_BAR_ENABLE]

//>> SET_[CS_SM0_SNP_MISC_GPU4_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU4_BAR_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU4_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU4_BAR_ENABLE]

//>> SET_[CS_SM0_SNP_MISC_GPU4_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU4_BAR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU4_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU4_BAR_ENABLE]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU4_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU4_BAR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU4_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU4_BAR_ENABLE]

//>> GET_[CS_SM0_SNP_MISC_GPU4_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU4_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU4_BAR_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU4_BAR_ENABLE]

//>> GET_[CS_SM0_SNP_MISC_GPU4_BAR_ENABLE]
static inline bool GET_CS_SM0_SNP_MISC_GPU4_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU4_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU4_BAR_ENABLE]

//>> SET_[CS_SM0_SNP_MISC_GPU4_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU4_BAR_ADDR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU4_BAR_ADDR_MASK,
           CS_SM0_SNP_MISC_GPU4_BAR_ADDR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU4_BAR_ADDR_MASK]

//>> SET_[CS_SM0_SNP_MISC_GPU4_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU4_BAR_ADDR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU4_BAR_ADDR_MASK,
           CS_SM0_SNP_MISC_GPU4_BAR_ADDR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU4_BAR_ADDR_MASK]

//>> GET_[CS_SM0_SNP_MISC_GPU4_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU4_BAR_ADDR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU4_BAR_ADDR_MASK,
           CS_SM0_SNP_MISC_GPU4_BAR_ADDR_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU4_BAR_ADDR_MASK]

//>> SET_[CS_SM0_SNP_MISC_GPU4_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU4_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU4_BAR_SL_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU4_BAR_SL_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU4_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU4_BAR_SL_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU4_BAR_SL_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU4_BAR_SL_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU4_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU4_BAR_SL_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU4_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU4_BAR_SL_MODE]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU4_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU4_BAR_SL_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU4_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU4_BAR_SL_MODE]

//>> GET_[CS_SM0_SNP_MISC_GPU4_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU4_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU4_BAR_SL_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU4_BAR_SL_MODE]

//>> GET_[CS_SM0_SNP_MISC_GPU4_BAR_SL_MODE]
static inline bool GET_CS_SM0_SNP_MISC_GPU4_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU4_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU4_BAR_SL_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU4_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU4_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU4_BAR_4T_LIMIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU4_BAR_4T_LIMIT]

//>> SET_[CS_SM0_SNP_MISC_GPU4_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU4_BAR_4T_LIMIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU4_BAR_4T_LIMIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU4_BAR_4T_LIMIT]

//>> SET_[CS_SM0_SNP_MISC_GPU4_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU4_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU4_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU4_BAR_4T_LIMIT]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU4_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU4_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU4_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU4_BAR_4T_LIMIT]

//>> GET_[CS_SM0_SNP_MISC_GPU4_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU4_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU4_BAR_4T_LIMIT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU4_BAR_4T_LIMIT]

//>> GET_[CS_SM0_SNP_MISC_GPU4_BAR_4T_LIMIT]
static inline bool GET_CS_SM0_SNP_MISC_GPU4_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU4_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU4_BAR_4T_LIMIT]

//>> SET_[CS_SM0_SNP_MISC_GPU4_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU4_BAR_4T_SELECT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU4_BAR_4T_SELECT,
           CS_SM0_SNP_MISC_GPU4_BAR_4T_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU4_BAR_4T_SELECT]

//>> SET_[CS_SM0_SNP_MISC_GPU4_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU4_BAR_4T_SELECT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU4_BAR_4T_SELECT,
           CS_SM0_SNP_MISC_GPU4_BAR_4T_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU4_BAR_4T_SELECT]

//>> GET_[CS_SM0_SNP_MISC_GPU4_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU4_BAR_4T_SELECT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU4_BAR_4T_SELECT,
           CS_SM0_SNP_MISC_GPU4_BAR_4T_SELECT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU4_BAR_4T_SELECT]

//>> SET_[CS_SM0_SNP_MISC_GPU4_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU4_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU4_BAR_MODE,
           CS_SM0_SNP_MISC_GPU4_BAR_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU4_BAR_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU4_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU4_BAR_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU4_BAR_MODE,
           CS_SM0_SNP_MISC_GPU4_BAR_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU4_BAR_MODE]

//>> GET_[CS_SM0_SNP_MISC_GPU4_BAR_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU4_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU4_BAR_MODE,
           CS_SM0_SNP_MISC_GPU4_BAR_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU4_BAR_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU4_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU4_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU4_BAR_GRANULE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU4_BAR_GRANULE]

//>> SET_[CS_SM0_SNP_MISC_GPU4_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU4_BAR_GRANULE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU4_BAR_GRANULE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU4_BAR_GRANULE]

//>> SET_[CS_SM0_SNP_MISC_GPU4_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU4_BAR_GRANULE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU4_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU4_BAR_GRANULE]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU4_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU4_BAR_GRANULE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU4_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU4_BAR_GRANULE]

//>> GET_[CS_SM0_SNP_MISC_GPU4_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU4_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU4_BAR_GRANULE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU4_BAR_GRANULE]

//>> GET_[CS_SM0_SNP_MISC_GPU4_BAR_GRANULE]
static inline bool GET_CS_SM0_SNP_MISC_GPU4_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU4_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU4_BAR_GRANULE]

//>> SET_[CS_SM0_SNP_MISC_GPU4_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU4_BAR_POISON(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU4_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU4_BAR_POISON]

//>> SET_[CS_SM0_SNP_MISC_GPU4_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU4_BAR_POISON(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU4_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU4_BAR_POISON]

//>> SET_[CS_SM0_SNP_MISC_GPU4_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU4_BAR_POISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU4_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU4_BAR_POISON]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU4_BAR_POISON]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU4_BAR_POISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU4_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU4_BAR_POISON]

//>> GET_[CS_SM0_SNP_MISC_GPU4_BAR_POISON]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU4_BAR_POISON(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU4_BAR_POISON,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU4_BAR_POISON]

//>> GET_[CS_SM0_SNP_MISC_GPU4_BAR_POISON]
static inline bool GET_CS_SM0_SNP_MISC_GPU4_BAR_POISON(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU4_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU4_BAR_POISON]

//>> SET_[CS_SM0_SNP_MISC_GPU4_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU4_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU4_BAR_M2MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU4_BAR_M2MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU4_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU4_BAR_M2MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU4_BAR_M2MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU4_BAR_M2MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU4_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU4_BAR_M2MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU4_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU4_BAR_M2MODE]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU4_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU4_BAR_M2MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU4_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU4_BAR_M2MODE]

//>> GET_[CS_SM0_SNP_MISC_GPU4_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU4_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU4_BAR_M2MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU4_BAR_M2MODE]

//>> GET_[CS_SM0_SNP_MISC_GPU4_BAR_M2MODE]
static inline bool GET_CS_SM0_SNP_MISC_GPU4_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU4_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU4_BAR_M2MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]

//>> GET_[CS_SM0_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]

//>> GET_[CS_SM0_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]
static inline bool GET_CS_SM0_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU4_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU4_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU4_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU4_BAR_SECURE_A12]

//>> SET_[CS_SM0_SNP_MISC_GPU4_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU4_BAR_SECURE_A12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU4_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU4_BAR_SECURE_A12]

//>> SET_[CS_SM0_SNP_MISC_GPU4_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU4_BAR_SECURE_A12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU4_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU4_BAR_SECURE_A12]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU4_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU4_BAR_SECURE_A12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU4_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU4_BAR_SECURE_A12]

//>> GET_[CS_SM0_SNP_MISC_GPU4_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU4_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU4_BAR_SECURE_A12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU4_BAR_SECURE_A12]

//>> GET_[CS_SM0_SNP_MISC_GPU4_BAR_SECURE_A12]
static inline bool GET_CS_SM0_SNP_MISC_GPU4_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU4_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU4_BAR_SECURE_A12]

//>> SET_[CS_SM0_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM0_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM0_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]

//>> GET_[CS_SM0_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]

//>> GET_[CS_SM0_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]
static inline bool GET_CS_SM0_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM0_SNP_MISC_GPU4_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU4_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU4_BAR_EXTENDED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU4_BAR_EXTENDED_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU4_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU4_BAR_EXTENDED_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU4_BAR_EXTENDED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU4_BAR_EXTENDED_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU4_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU4_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU4_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU4_BAR_EXTENDED_MODE]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU4_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU4_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU4_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU4_BAR_EXTENDED_MODE]

//>> GET_[CS_SM0_SNP_MISC_GPU4_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU4_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU4_BAR_EXTENDED_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU4_BAR_EXTENDED_MODE]

//>> GET_[CS_SM0_SNP_MISC_GPU4_BAR_EXTENDED_MODE]
static inline bool GET_CS_SM0_SNP_MISC_GPU4_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU4_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU4_BAR_EXTENDED_MODE]

//>> SET_[CS_SM0_SNP_MISC_GPU4_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU4_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU4_BAR_RESERVED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU4_BAR_RESERVED]

//>> SET_[CS_SM0_SNP_MISC_GPU4_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU4_BAR_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_GPU4_BAR_RESERVED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU4_BAR_RESERVED]

//>> SET_[CS_SM0_SNP_MISC_GPU4_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_GPU4_BAR_RESERVED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_GPU4_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_GPU4_BAR_RESERVED]

//>> CLEAR_[CS_SM0_SNP_MISC_GPU4_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_GPU4_BAR_RESERVED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_GPU4_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_GPU4_BAR_RESERVED]

//>> GET_[CS_SM0_SNP_MISC_GPU4_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_GPU4_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_GPU4_BAR_RESERVED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU4_BAR_RESERVED]

//>> GET_[CS_SM0_SNP_MISC_GPU4_BAR_RESERVED]
static inline bool GET_CS_SM0_SNP_MISC_GPU4_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_GPU4_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_GPU4_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_GPU4_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_GPU4_BAR_RESERVED]

//>> PREP_[CS_SM0_SNP_MISC_MACHINE_ALLOC]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_SNP_MISC_MACHINE_ALLOC(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_MACHINE_ALLOC;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_SNP_MISC_MACHINE_ALLOC]

//>> GET_[CS_SM0_SNP_MISC_MACHINE_ALLOC]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_SNP_MISC_MACHINE_ALLOC(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_MACHINE_ALLOC;
#endif
    return fapi2::getScom(i_target, CS_SM0_SNP_MISC_MACHINE_ALLOC, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_MACHINE_ALLOC]

//>> PUT_[CS_SM0_SNP_MISC_MACHINE_ALLOC]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_SNP_MISC_MACHINE_ALLOC(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_MACHINE_ALLOC));
#endif
    return fapi2::putScom(i_target, CS_SM0_SNP_MISC_MACHINE_ALLOC, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_SNP_MISC_MACHINE_ALLOC]


//>> SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]

//>> SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]

//>> SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]

//>> CLEAR_[CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]

//>> GET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]

//>> GET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]
static inline bool GET_CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]

//>> SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]

//>> SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]

//>> SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]

//>> CLEAR_[CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]

//>> GET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]

//>> GET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]
static inline bool GET_CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]

//>> SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES,
           CS_SM0_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES]

//>> SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES,
           CS_SM0_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES]

//>> GET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES,
           CS_SM0_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES]

//>> SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE,
           CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE]

//>> SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE,
           CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE]

//>> GET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE,
           CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE]

//>> SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1,
           CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1]

//>> SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1,
           CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1]

//>> GET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1,
           CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1]

//>> SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE,
           CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE]

//>> SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE,
           CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE]

//>> GET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE,
           CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE]

//>> SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2,
           CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2]

//>> SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2,
           CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2]

//>> GET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2,
           CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2]

//>> SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED,
           CS_SM0_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED]

//>> SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED,
           CS_SM0_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED]

//>> GET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED,
           CS_SM0_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED]

//>> SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0,
           CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0]

//>> SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0,
           CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0]

//>> GET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0,
           CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0]

//>> SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1,
           CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1]

//>> SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1,
           CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1]

//>> GET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1,
           CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1]

//>> SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2,
           CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2]

//>> SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2,
           CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2]

//>> GET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2,
           CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2]

//>> SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3,
           CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3]

//>> SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3,
           CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3]

//>> GET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3,
           CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3]

//>> PREP_[CS_SM1_DIR_MISC_DEBUG1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_DIR_MISC_DEBUG1_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_DIR_MISC_DEBUG1_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_DIR_MISC_DEBUG1_CONFIG]

//>> GET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_DIR_MISC_DEBUG1_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_DIR_MISC_DEBUG1_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM1_DIR_MISC_DEBUG1_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG]

//>> PUT_[CS_SM1_DIR_MISC_DEBUG1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_DIR_MISC_DEBUG1_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG1_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM1_DIR_MISC_DEBUG1_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_DIR_MISC_DEBUG1_CONFIG]


//>> SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD0,
           CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD0]

//>> SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD0,
           CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD0]

//>> GET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD0,
           CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD0]

//>> SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD1,
           CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD1]

//>> SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD1,
           CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD1]

//>> GET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD1,
           CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD1]

//>> SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD2,
           CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD2]

//>> SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD2,
           CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD2]

//>> GET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD2,
           CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD2]

//>> SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD3,
           CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD3]

//>> SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD3,
           CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD3]

//>> GET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD3,
           CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD3]

//>> SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD4,
           CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD4]

//>> SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD4,
           CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD4]

//>> GET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD4,
           CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD4]

//>> SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD5,
           CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD5]

//>> SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD5,
           CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD5]

//>> GET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD5,
           CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD5]

//>> SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD6,
           CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD6]

//>> SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD6,
           CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD6]

//>> GET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD6,
           CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD6]

//>> SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD7,
           CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD7]

//>> SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD7,
           CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD7]

//>> GET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD7,
           CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD7]

//>> SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD8,
           CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD8]

//>> SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD8,
           CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD8]

//>> GET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD8,
           CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD8_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD8]

//>> SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD9,
           CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD9]

//>> SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD9,
           CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD9]

//>> GET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD9,
           CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD9]

//>> SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD10,
           CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD10]

//>> SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD10,
           CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD10]

//>> GET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD10,
           CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_POD10]

//>> SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG1_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG1_CONFIG_RESERVED1,
           CS_SM1_DIR_MISC_DEBUG1_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG1_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_RESERVED1]

//>> SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG1_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG1_CONFIG_RESERVED1,
           CS_SM1_DIR_MISC_DEBUG1_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG1_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_RESERVED1]

//>> GET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_DIR_MISC_DEBUG1_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_DIR_MISC_DEBUG1_CONFIG_RESERVED1,
           CS_SM1_DIR_MISC_DEBUG1_CONFIG_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG1_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_RESERVED1]

//>> SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG1_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_ACT]

//>> SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG1_CONFIG_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG1_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_ACT]

//>> SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.setBit<CS_SM1_DIR_MISC_DEBUG1_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_ACT]

//>> CLEAR_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_DIR_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.clearBit<CS_SM1_DIR_MISC_DEBUG1_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_ACT]

//>> GET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_DIR_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_DIR_MISC_DEBUG1_CONFIG_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_ACT]

//>> GET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_ACT]
static inline bool GET_CS_SM1_DIR_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.getBit<CS_SM1_DIR_MISC_DEBUG1_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_DIR_MISC_DEBUG1_CONFIG_ACT]

//>> PREP_[CS_SM1_MCP_MISC_CONFIG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_MCP_MISC_CONFIG0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_CONFIG0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_MCP_MISC_CONFIG0]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_MCP_MISC_CONFIG0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_CONFIG0;
#endif
    return fapi2::getScom(i_target, CS_SM1_MCP_MISC_CONFIG0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0]

//>> PUT_[CS_SM1_MCP_MISC_CONFIG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_MCP_MISC_CONFIG0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return fapi2::putScom(i_target, CS_SM1_MCP_MISC_CONFIG0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_MCP_MISC_CONFIG0]


//>> SET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_ADR_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_ADR_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_ADR_BAR_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_ADR_BAR_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_ADR_BAR_MODE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_ADR_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_ADR_BAR_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_ADR_BAR_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_ADR_BAR_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_ADR_BAR_MODE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_ADR_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_ADR_BAR_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_ADR_BAR_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_ADR_BAR_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_ADR_BAR_MODE]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_ADR_BAR_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_ADR_BAR_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_ADR_BAR_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_ADR_BAR_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_ADR_BAR_MODE]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_ADR_BAR_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_ADR_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_ADR_BAR_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_ADR_BAR_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_ADR_BAR_MODE]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_ADR_BAR_MODE]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_ADR_BAR_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_ADR_BAR_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_ADR_BAR_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_ADR_BAR_MODE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_NN_RN]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_DISABLE_NN_RN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_DISABLE_NN_RN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_DISABLE_NN_RN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_NN_RN]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_NN_RN]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_DISABLE_NN_RN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_DISABLE_NN_RN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_DISABLE_NN_RN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_NN_RN]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_NN_RN]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_DISABLE_NN_RN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_DISABLE_NN_RN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_DISABLE_NN_RN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_NN_RN]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_NN_RN]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_DISABLE_NN_RN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_DISABLE_NN_RN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_DISABLE_NN_RN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_NN_RN]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_NN_RN]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_DISABLE_NN_RN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_DISABLE_NN_RN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_DISABLE_NN_RN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_NN_RN]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_NN_RN]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_DISABLE_NN_RN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_DISABLE_NN_RN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_DISABLE_NN_RN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_NN_RN]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_G]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_DISABLE_G(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_DISABLE_G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_DISABLE_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_G]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_G]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_DISABLE_G(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_DISABLE_G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_DISABLE_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_G]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_G]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_DISABLE_G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_DISABLE_G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_DISABLE_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_G]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_G]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_DISABLE_G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_DISABLE_G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_DISABLE_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_G]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_G]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_DISABLE_G(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_DISABLE_G,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_DISABLE_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_G]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_G]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_DISABLE_G(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_DISABLE_G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_DISABLE_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_G]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_LN]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_DISABLE_LN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_DISABLE_LN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_DISABLE_LN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_LN]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_LN]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_DISABLE_LN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_DISABLE_LN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_DISABLE_LN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_LN]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_LN]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_DISABLE_LN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_DISABLE_LN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_DISABLE_LN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_LN]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_LN]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_DISABLE_LN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_DISABLE_LN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_DISABLE_LN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_LN]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_LN]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_DISABLE_LN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_DISABLE_LN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_DISABLE_LN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_LN]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_LN]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_DISABLE_LN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_DISABLE_LN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_DISABLE_LN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_LN]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_SKIP_G]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_SKIP_G(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_SKIP_G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_SKIP_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_SKIP_G]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_SKIP_G]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_SKIP_G(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_SKIP_G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_SKIP_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_SKIP_G]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_SKIP_G]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_SKIP_G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_SKIP_G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_SKIP_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_SKIP_G]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_SKIP_G]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_SKIP_G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_SKIP_G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_SKIP_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_SKIP_G]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_SKIP_G]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_SKIP_G(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_SKIP_G,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_SKIP_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_SKIP_G]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_SKIP_G]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_SKIP_G(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_SKIP_G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_SKIP_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_SKIP_G]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_USE_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_USE_CL_DMA_W(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_USE_CL_DMA_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_USE_CL_DMA_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_USE_CL_DMA_W]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_USE_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_USE_CL_DMA_W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_USE_CL_DMA_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_USE_CL_DMA_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_USE_CL_DMA_W]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_USE_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_USE_CL_DMA_W(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_USE_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_USE_CL_DMA_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_USE_CL_DMA_W]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_USE_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_USE_CL_DMA_W(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_USE_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_USE_CL_DMA_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_USE_CL_DMA_W]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_USE_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_USE_CL_DMA_W(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_USE_CL_DMA_W,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_USE_CL_DMA_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_USE_CL_DMA_W]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_USE_CL_DMA_W]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_USE_CL_DMA_W(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_USE_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_USE_CL_DMA_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_USE_CL_DMA_W]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_USE_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_USE_DMA_PR_W(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_USE_DMA_PR_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_USE_DMA_PR_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_USE_DMA_PR_W]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_USE_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_USE_DMA_PR_W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_USE_DMA_PR_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_USE_DMA_PR_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_USE_DMA_PR_W]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_USE_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_USE_DMA_PR_W(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_USE_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_USE_DMA_PR_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_USE_DMA_PR_W]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_USE_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_USE_DMA_PR_W(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_USE_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_USE_DMA_PR_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_USE_DMA_PR_W]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_USE_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_USE_DMA_PR_W(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_USE_DMA_PR_W,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_USE_DMA_PR_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_USE_DMA_PR_W]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_USE_DMA_PR_W]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_USE_DMA_PR_W(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_USE_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_USE_DMA_PR_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_USE_DMA_PR_W]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_INC_PRI_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_INC_PRI_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_INC_PRI_MASK,
           CS_SM1_MCP_MISC_CONFIG0_INC_PRI_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_INC_PRI_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_INC_PRI_MASK]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_INC_PRI_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_INC_PRI_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_INC_PRI_MASK,
           CS_SM1_MCP_MISC_CONFIG0_INC_PRI_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_INC_PRI_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_INC_PRI_MASK]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_INC_PRI_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_INC_PRI_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_INC_PRI_MASK,
           CS_SM1_MCP_MISC_CONFIG0_INC_PRI_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_INC_PRI_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_INC_PRI_MASK]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_MACH_CORRENAB]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_MACH_CORRENAB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_MACH_CORRENAB,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MACH_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_MACH_CORRENAB]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_MACH_CORRENAB]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_MACH_CORRENAB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_MACH_CORRENAB,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MACH_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_MACH_CORRENAB]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_MACH_CORRENAB]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_MACH_CORRENAB(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_MACH_CORRENAB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MACH_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_MACH_CORRENAB]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_MACH_CORRENAB]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_MACH_CORRENAB(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_MACH_CORRENAB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MACH_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_MACH_CORRENAB]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_MACH_CORRENAB]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_MACH_CORRENAB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_MACH_CORRENAB,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MACH_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_MACH_CORRENAB]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_MACH_CORRENAB]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_MACH_CORRENAB(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_MACH_CORRENAB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MACH_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_MACH_CORRENAB]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_RXO_CORRENAB]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_RXO_CORRENAB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_RXO_CORRENAB,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_RXO_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_RXO_CORRENAB]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_RXO_CORRENAB]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_RXO_CORRENAB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_RXO_CORRENAB,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_RXO_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_RXO_CORRENAB]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_RXO_CORRENAB]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_RXO_CORRENAB(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_RXO_CORRENAB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_RXO_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_RXO_CORRENAB]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_RXO_CORRENAB]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_RXO_CORRENAB(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_RXO_CORRENAB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_RXO_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_RXO_CORRENAB]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_RXO_CORRENAB]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_RXO_CORRENAB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_RXO_CORRENAB,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_RXO_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_RXO_CORRENAB]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_RXO_CORRENAB]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_RXO_CORRENAB(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_RXO_CORRENAB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_RXO_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_RXO_CORRENAB]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_RSI_CORRENAB]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_RSI_CORRENAB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_RSI_CORRENAB,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_RSI_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_RSI_CORRENAB]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_RSI_CORRENAB]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_RSI_CORRENAB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_RSI_CORRENAB,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_RSI_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_RSI_CORRENAB]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_RSI_CORRENAB]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_RSI_CORRENAB(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_RSI_CORRENAB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_RSI_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_RSI_CORRENAB]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_RSI_CORRENAB]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_RSI_CORRENAB(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_RSI_CORRENAB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_RSI_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_RSI_CORRENAB]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_RSI_CORRENAB]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_RSI_CORRENAB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_RSI_CORRENAB,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_RSI_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_RSI_CORRENAB]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_RSI_CORRENAB]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_RSI_CORRENAB(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_RSI_CORRENAB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_RSI_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_RSI_CORRENAB]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_PBUS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_ENABLE_PBUS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_ENABLE_PBUS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_ENABLE_PBUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_PBUS]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_PBUS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_ENABLE_PBUS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_ENABLE_PBUS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_ENABLE_PBUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_PBUS]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_PBUS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_ENABLE_PBUS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_ENABLE_PBUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_ENABLE_PBUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_PBUS]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_PBUS]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_ENABLE_PBUS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_ENABLE_PBUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_ENABLE_PBUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_PBUS]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_PBUS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_ENABLE_PBUS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_ENABLE_PBUS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_ENABLE_PBUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_PBUS]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_PBUS]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_ENABLE_PBUS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_ENABLE_PBUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_ENABLE_PBUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_PBUS]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_INJECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_DISABLE_INJECT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_DISABLE_INJECT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_DISABLE_INJECT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_INJECT]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_INJECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_DISABLE_INJECT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_DISABLE_INJECT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_DISABLE_INJECT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_INJECT]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_INJECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_DISABLE_INJECT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_DISABLE_INJECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_DISABLE_INJECT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_INJECT]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_INJECT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_DISABLE_INJECT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_DISABLE_INJECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_DISABLE_INJECT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_INJECT]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_INJECT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_DISABLE_INJECT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_DISABLE_INJECT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_DISABLE_INJECT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_INJECT]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_INJECT]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_DISABLE_INJECT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_DISABLE_INJECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_DISABLE_INJECT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_DISABLE_INJECT]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_DCACHE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_DCACHE_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_DCACHE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_DCACHE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_DCACHE_MODE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_DCACHE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_DCACHE_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_DCACHE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_DCACHE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_DCACHE_MODE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_DCACHE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_DCACHE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_DCACHE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_DCACHE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_DCACHE_MODE]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_DCACHE_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_DCACHE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_DCACHE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_DCACHE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_DCACHE_MODE]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_DCACHE_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_DCACHE_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_DCACHE_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_DCACHE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_DCACHE_MODE]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_DCACHE_MODE]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_DCACHE_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_DCACHE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_DCACHE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_DCACHE_MODE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_0_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_0_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_0_RESERVED1,
           CS_SM1_MCP_MISC_CONFIG0_0_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_0_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_0_RESERVED1]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_0_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_0_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_0_RESERVED1,
           CS_SM1_MCP_MISC_CONFIG0_0_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_0_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_0_RESERVED1]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_0_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_0_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_0_RESERVED1,
           CS_SM1_MCP_MISC_CONFIG0_0_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_0_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_0_RESERVED1]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_CP_ME]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_ENABLE_CP_ME(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_ENABLE_CP_ME,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_ENABLE_CP_ME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_CP_ME]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_CP_ME]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_ENABLE_CP_ME(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_ENABLE_CP_ME,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_ENABLE_CP_ME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_CP_ME]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_CP_ME]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_ENABLE_CP_ME(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_ENABLE_CP_ME>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_ENABLE_CP_ME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_CP_ME]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_CP_ME]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_ENABLE_CP_ME(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_ENABLE_CP_ME>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_ENABLE_CP_ME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_CP_ME]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_CP_ME]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_ENABLE_CP_ME(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_ENABLE_CP_ME,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_ENABLE_CP_ME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_CP_ME]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_CP_ME]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_ENABLE_CP_ME(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_ENABLE_CP_ME>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_ENABLE_CP_ME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_ENABLE_CP_ME]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_0_RESERVED0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_0_RESERVED0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_0_RESERVED0,
           CS_SM1_MCP_MISC_CONFIG0_0_RESERVED0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_0_RESERVED0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_0_RESERVED0]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_0_RESERVED0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_0_RESERVED0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_0_RESERVED0,
           CS_SM1_MCP_MISC_CONFIG0_0_RESERVED0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_0_RESERVED0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_0_RESERVED0]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_0_RESERVED0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_0_RESERVED0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_0_RESERVED0,
           CS_SM1_MCP_MISC_CONFIG0_0_RESERVED0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_0_RESERVED0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_0_RESERVED0]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_SM1_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE]

//>> CLEAR_[CS_SM1_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE]

//>> GET_[CS_SM1_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE]
static inline bool GET_CS_SM1_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE]

//>> PREP_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5;
#endif
    return fapi2::getScom(i_target, CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5]

//>> PUT_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return fapi2::putScom(i_target, CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5]


//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_TAG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_TAG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_TAG,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_TAG]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_TAG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_TAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_TAG,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_TAG]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_TAG]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_TAG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_TAG,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_TAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_TAG]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_WREND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_WREND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_WREND,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_WREND]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_WREND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_WREND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_WREND,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_WREND]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_WREND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_WREND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_WREND,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_WREND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC5_WREND]

//>> PREP_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_SNP_MISC_TOPOLOGY_TABLE3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_TOPOLOGY_TABLE3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3]

//>> GET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_TOPOLOGY_TABLE3;
#endif
    return fapi2::getScom(i_target, CS_SM1_SNP_MISC_TOPOLOGY_TABLE3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3]

//>> PUT_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_SNP_MISC_TOPOLOGY_TABLE3(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return fapi2::putScom(i_target, CS_SM1_SNP_MISC_TOPOLOGY_TABLE3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3]


//>> SET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31]

//>> SET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31]

//>> GET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31]

//>> SET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY24]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY24(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY24,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY24_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY24 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY24]

//>> SET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY24]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY24(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY24,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY24_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY24 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY24]

//>> GET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY24]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY24(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY24,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY24_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY24 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY24]

//>> SET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY25]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY25(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY25,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY25_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY25 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY25]

//>> SET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY25]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY25(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY25,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY25_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY25 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY25]

//>> GET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY25]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY25(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY25,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY25_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY25 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY25]

//>> SET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY26]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY26(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY26,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY26_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY26 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY26]

//>> SET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY26]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY26(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY26,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY26_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY26 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY26]

//>> GET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY26]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY26(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY26,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY26_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY26 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY26]

//>> SET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY27]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY27(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY27,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY27_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY27 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY27]

//>> SET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY27]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY27(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY27,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY27_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY27 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY27]

//>> GET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY27]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY27(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY27,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY27_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY27 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY27]

//>> SET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY28]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY28(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY28,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY28_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY28 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY28]

//>> SET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY28]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY28(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY28,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY28_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY28 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY28]

//>> GET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY28]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY28(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY28,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY28_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY28 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY28]

//>> SET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY29]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY29(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY29,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY29_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY29 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY29]

//>> SET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY29]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY29(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY29,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY29_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY29 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY29]

//>> GET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY29]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY29(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY29,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY29_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY29 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY29]

//>> SET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY30]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY30(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY30,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY30_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY30 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY30]

//>> SET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY30]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY30(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY30,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY30_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY30 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY30]

//>> GET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY30]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY30(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY30,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY30_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY30 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY30]

//>> SET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY31]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY31(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY31,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY31_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY31 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY31]

//>> SET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY31]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY31(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY31,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY31_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY31 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY31]

//>> GET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY31]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY31(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY31,
           CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY31_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY31 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_TOPOLOGY_TABLE3_TRY31]

//>> PREP_[CS_SM2_MCP_MISC_CERR_MASK1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_MCP_MISC_CERR_MASK1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_CERR_MASK1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_MCP_MISC_CERR_MASK1]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_MCP_MISC_CERR_MASK1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_CERR_MASK1;
#endif
    return fapi2::getScom(i_target, CS_SM2_MCP_MISC_CERR_MASK1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1]

//>> PUT_[CS_SM2_MCP_MISC_CERR_MASK1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_MCP_MISC_CERR_MASK1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return fapi2::putScom(i_target, CS_SM2_MCP_MISC_CERR_MASK1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_MCP_MISC_CERR_MASK1]


//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_NLGX_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_NLGX_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_NLGX_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_NLGX_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_NLGX_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK1_NLGX_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_0]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK1_NLGX_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK1_NLGX_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK1_NLGX_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK1_NLGX_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_0]
static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK1_NLGX_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK1_NLGX_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_NLGX_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_NLGX_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_NLGX_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_NLGX_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_NLGX_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK1_NLGX_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_1]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK1_NLGX_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK1_NLGX_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK1_NLGX_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK1_NLGX_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_1]
static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK1_NLGX_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK1_NLGX_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_NLGX_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_NLGX_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_NLGX_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_NLGX_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_NLGX_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK1_NLGX_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_2]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK1_NLGX_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK1_NLGX_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK1_NLGX_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK1_NLGX_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_2]
static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK1_NLGX_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK1_NLGX_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_NLGX_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_NLGX_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_NLGX_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_NLGX_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_NLGX_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK1_NLGX_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_3]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK1_NLGX_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK1_NLGX_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK1_NLGX_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK1_NLGX_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_3]
static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK1_NLGX_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK1_NLGX_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_NLGX_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_FWD_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_FWD_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_FWD_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_FWD_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_FWD_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK1_FWD_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_0]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK1_FWD_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK1_FWD_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK1_FWD_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK1_FWD_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_0]
static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK1_FWD_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK1_FWD_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_FWD_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_FWD_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_FWD_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_FWD_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_FWD_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK1_FWD_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_1]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK1_FWD_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK1_FWD_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK1_FWD_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK1_FWD_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_1]
static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK1_FWD_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK1_FWD_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_FWD_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_FWD_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_FWD_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_FWD_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_FWD_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK1_FWD_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_2]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK1_FWD_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK1_FWD_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK1_FWD_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK1_FWD_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_2]
static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK1_FWD_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK1_FWD_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_FWD_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_FWD_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_FWD_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_FWD_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_FWD_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK1_FWD_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_3]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK1_FWD_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK1_FWD_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK1_FWD_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK1_FWD_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_3]
static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK1_FWD_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK1_FWD_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_FWD_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_AUE_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_AUE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_AUE_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_AUE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_AUE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK1_AUE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_0]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK1_AUE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK1_AUE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK1_AUE_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK1_AUE_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_0]
static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK1_AUE_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK1_AUE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_AUE_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_AUE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_AUE_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_AUE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_AUE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK1_AUE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_1]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK1_AUE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK1_AUE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK1_AUE_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK1_AUE_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_1]
static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK1_AUE_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK1_AUE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_AUE_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_AUE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_AUE_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_AUE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_AUE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK1_AUE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_2]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK1_AUE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK1_AUE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK1_AUE_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK1_AUE_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_2]
static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK1_AUE_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK1_AUE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_AUE_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_AUE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_AUE_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_AUE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_AUE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK1_AUE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_3]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK1_AUE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK1_AUE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK1_AUE_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK1_AUE_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_3]
static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK1_AUE_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK1_AUE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_AUE_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_AUE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_4]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_AUE_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_AUE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_4]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_AUE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK1_AUE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_4]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK1_AUE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK1_AUE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_4]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK1_AUE_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK1_AUE_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_4]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_4]
static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK1_AUE_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK1_AUE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_4]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_AUE_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_AUE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_5]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_AUE_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_AUE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_5]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_AUE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK1_AUE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_5]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK1_AUE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK1_AUE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_5]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK1_AUE_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK1_AUE_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_5]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_5]
static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK1_AUE_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK1_AUE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_5]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_AUE_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_AUE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_6]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_AUE_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_AUE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_6]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_AUE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK1_AUE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_6]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK1_AUE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK1_AUE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_6]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK1_AUE_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK1_AUE_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_6]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_6]
static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK1_AUE_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK1_AUE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_6]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_AUE_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_AUE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_7]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_AUE_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_AUE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_7]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_AUE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK1_AUE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_7]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK1_AUE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK1_AUE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_7]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK1_AUE_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK1_AUE_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_7]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_7]
static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK1_AUE_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK1_AUE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_AUE_7]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_PBF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_PBF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK1_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_0]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK1_PBF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK1_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK1_PBF_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_0]
static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK1_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_PBF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_PBF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK1_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_1]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK1_PBF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK1_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK1_PBF_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_1]
static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK1_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_PBF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_PBF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK1_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_2]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK1_PBF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK1_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK1_PBF_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_2]
static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK1_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_PBF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_PBF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK1_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_3]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK1_PBF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK1_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK1_PBF_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_3]
static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK1_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_PBF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_4]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_PBF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_4]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK1_PBF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_4]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK1_PBF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK1_PBF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_4]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK1_PBF_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_4]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_4]
static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK1_PBF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_4]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_PBF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_5]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_PBF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_5]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK1_PBF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_5]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK1_PBF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK1_PBF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_5]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK1_PBF_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_5]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_5]
static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK1_PBF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_5]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_PBF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_6]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_PBF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_6]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK1_PBF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_6]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK1_PBF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK1_PBF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_6]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK1_PBF_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_6]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_6]
static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK1_PBF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_6]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_PBF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_7]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_PBF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_7]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK1_PBF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_7]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK1_PBF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK1_PBF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_7]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK1_PBF_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_7]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_7]
static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK1_PBF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_7]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_PBF_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_8]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_PBF_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_8]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK1_PBF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_8]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK1_PBF_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK1_PBF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_8]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK1_PBF_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_8]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_8]
static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK1_PBF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_8]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_PBF_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_9]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_PBF_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_9]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK1_PBF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_9]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK1_PBF_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK1_PBF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_9]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK1_PBF_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_9]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_9]
static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK1_PBF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_9]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_PBF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_10]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_PBF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_10]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK1_PBF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_10]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK1_PBF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK1_PBF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_10]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK1_PBF_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_10]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_10]
static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK1_PBF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_10]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_PBF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_11]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_PBF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_11]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK1_PBF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_11]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK1_PBF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK1_PBF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_11]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK1_PBF_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_11]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_11]
static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK1_PBF_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK1_PBF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_PBF_11]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_LDA_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_LDA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_LDA_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_LDA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_LDA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK1_LDA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_0]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK1_LDA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK1_LDA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK1_LDA_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK1_LDA_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_0]
static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK1_LDA_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK1_LDA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_LDA_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_LDA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_LDA_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_LDA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_LDA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK1_LDA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_1]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK1_LDA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK1_LDA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK1_LDA_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK1_LDA_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_1]
static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK1_LDA_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK1_LDA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_LDA_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_LDA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_LDA_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_LDA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_LDA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK1_LDA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_2]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK1_LDA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK1_LDA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK1_LDA_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK1_LDA_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_2]
static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK1_LDA_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK1_LDA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_LDA_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_LDA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_LDA_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_LDA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_LDA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK1_LDA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_3]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK1_LDA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK1_LDA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK1_LDA_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK1_LDA_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_3]
static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK1_LDA_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK1_LDA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_LDA_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_STA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_STA_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_STA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_STA_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_STA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_STA_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_STA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_STA_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_STA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_STA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK1_STA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_STA_0]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_STA_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK1_STA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK1_STA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_STA_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_STA_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK1_STA_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK1_STA_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_STA_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_STA_0]
static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK1_STA_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK1_STA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_STA_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_STA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_STA_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_STA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_STA_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_STA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_STA_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_STA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_STA_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_STA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_STA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK1_STA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_STA_1]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_STA_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK1_STA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK1_STA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_STA_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_STA_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK1_STA_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK1_STA_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_STA_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_STA_1]
static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK1_STA_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK1_STA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_STA_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_STA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_STA_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_STA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_STA_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_STA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_STA_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_STA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_STA_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_STA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_STA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK1_STA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_STA_2]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_STA_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK1_STA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK1_STA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_STA_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_STA_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK1_STA_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK1_STA_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_STA_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_STA_2]
static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK1_STA_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK1_STA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_STA_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_STA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_STA_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_STA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_STA_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_STA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_STA_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MASK1_STA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_STA_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_MASK1_STA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MASK1_STA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_MASK1_STA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MASK1_STA_3]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_STA_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_MASK1_STA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_MASK1_STA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_MASK1_STA_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_STA_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MASK1_STA_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MASK1_STA_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_STA_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_MASK1_STA_3]
static inline bool GET_CS_SM2_MCP_MISC_CERR_MASK1_STA_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_MASK1_STA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MASK1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MASK1_STA_3]

//>> PREP_[CS_SM2_MCP_MISC_CERR_MESSAGE4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_MCP_MISC_CERR_MESSAGE4(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_CERR_MESSAGE4;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_MCP_MISC_CERR_MESSAGE4]

//>> GET_[CS_SM2_MCP_MISC_CERR_MESSAGE4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_MCP_MISC_CERR_MESSAGE4(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_CERR_MESSAGE4;
#endif
    return fapi2::getScom(i_target, CS_SM2_MCP_MISC_CERR_MESSAGE4, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MESSAGE4]

//>> PUT_[CS_SM2_MCP_MISC_CERR_MESSAGE4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_MCP_MISC_CERR_MESSAGE4(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MESSAGE4));
#endif
    return fapi2::putScom(i_target, CS_SM2_MCP_MISC_CERR_MESSAGE4, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_MCP_MISC_CERR_MESSAGE4]


//>> SET_[CS_SM2_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MESSAGE4));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4,
           CS_SM2_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4]

//>> SET_[CS_SM2_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MESSAGE4));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4,
           CS_SM2_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4]

//>> GET_[CS_SM2_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MESSAGE4));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4,
           CS_SM2_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4]

//>> PREP_[CS_SM2_SNP_MISC_CERR_HOLD0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_SNP_MISC_CERR_HOLD0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_CERR_HOLD0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_SNP_MISC_CERR_HOLD0]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_SNP_MISC_CERR_HOLD0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_CERR_HOLD0;
#endif
    return fapi2::getScom(i_target, CS_SM2_SNP_MISC_CERR_HOLD0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0]

//>> PUT_[CS_SM2_SNP_MISC_CERR_HOLD0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_SNP_MISC_CERR_HOLD0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return fapi2::putScom(i_target, CS_SM2_SNP_MISC_CERR_HOLD0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_SNP_MISC_CERR_HOLD0]


//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_0]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_0]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_0]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_0]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_0]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_0]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_0]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_1]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_1]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_1]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_1]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_1]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_1]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_1]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_2]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_2]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_2]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_2]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_2]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_2]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_2]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_3]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_3]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_3]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_3]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_3]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_3]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_3]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_4]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_4]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_4]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_4]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_4]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_4]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_4]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_5]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_5]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_5]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_5]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_5]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_5]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_5]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_6]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_6]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_6]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_6]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_6]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_6]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_6]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_7]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_7]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_7]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_7]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_7]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_7]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_NCF_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_NCF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NCF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NCF_7]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_0]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_0]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_0]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_0]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_0]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_0]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_0]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_1]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_1]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_1]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_1]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_1]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_1]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_1]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_2]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_2]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_2]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_2]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_2]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_2]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_2]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_3]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_3]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_3]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_3]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_3]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_3]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_3]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_4]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_4]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_4]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_4]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_4]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_4]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_4]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_5]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_5]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_5]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_5]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_5]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_5]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_5]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_6]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_6]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_6]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_6]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_6]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_6]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_6]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_7]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_7]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_7]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_7]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_7]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_7]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBR_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBR_7]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_0]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_0]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_0]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_0]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_0]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_0]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_0]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_1]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_1]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_1]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_1]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_1]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_1]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_1]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_2]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_2]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_2]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_2]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_2]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_2]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_2]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_3]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_3]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_3]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_3]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_3]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_3]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_3]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_4]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_4]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_4]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_4]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_4]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_4]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_4]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_5]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_5]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_5]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_5]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_5]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_5]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_5]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_6]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_6]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_6]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_6]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_6]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_6]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_6]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_7]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_7]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_7]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_7]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_7]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_7]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBP_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBP_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBP_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBP_7]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_0]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_0]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_0]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_0]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_0]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_0]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_0]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_1]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_1]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_1]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_1]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_1]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_1]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_1]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_2]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_2]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_2]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_2]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_2]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_2]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_2]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_3]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_3]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_3]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_3]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_3]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_3]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_3]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_4]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_4]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_4]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_4]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_4]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_4]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_4]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_5]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_5]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_5]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_5]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_5]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_5]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_5]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_6]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_6]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_6]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_6]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_6]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_6]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_6]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_7]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_7]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_7]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_7]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_7]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_7]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_7]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_8]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_8]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_8]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_8]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_8]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_8]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_8]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_9]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_9]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_9]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_9]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_9]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_9]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_9]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_10]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_10]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_10]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_10]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_10]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_10]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_10]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_11]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_11]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_11]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_11]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_11]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_11]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBC_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBC_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBC_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBC_11]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_0]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_0]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_0]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_0]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_0]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_0]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_0]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_1]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_1]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_1]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_1]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_1]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_1]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_1]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_2]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_2]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_2]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_2]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_2]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_2]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_2]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_3]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_3]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_3]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_3]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_3]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_3]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_3]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_4]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_4]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_4]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_4]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_4]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_4]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_4]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_5]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_5]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_5]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_5]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_5]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_5]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_5]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_6]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_6]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_6]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_6]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_6]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_6]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_6]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_7]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_7]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_7]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_7]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_7]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_7]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_7]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_8]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_8]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_8]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_8]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_8]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_8]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_8]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_9]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_9]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_9]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_9]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_9]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_9]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_9]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_10]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_10]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_10]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_10]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_10]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_10]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_10]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_11]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_11]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_11]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_11]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_11]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_11]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_11]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_12]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_12]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_12]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_12]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_12]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_12]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_12]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_13]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_13]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_13]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_13]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_13]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_13]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_13]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_13]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_13]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_14]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_14]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_14]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_14]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_14]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_14]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_14]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_14]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_14]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_15]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_15]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_15]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_15]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_15]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_15]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_15]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_15]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_15]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_16]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_16]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_16]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_16]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_16]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_16]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_16]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_16]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_16]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_17]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_17]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_17]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_17]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_17]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_17]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_17]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_17]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_17]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_18]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_18]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_18]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_18]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_18]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_18]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_18]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_18]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_18]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_19]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_19]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_19]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_19]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_19]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_19]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_19]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_19]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_19]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_20(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_20]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_20(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_20]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_20]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_20]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_20]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_20]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_20(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_20,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_20]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_20]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_20(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_20]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_21(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_21]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_21(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_21]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_21]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_21]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_21]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_21]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_21(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_21,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_21]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_21]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_21(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_21]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_22(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_22]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_22(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_22]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_22]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_22]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_22]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_22]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_22(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_22,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_22]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_22]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_22(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_22]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_23]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_23]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_23]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_23]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_23]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_23]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_23,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_23]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_23]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_NLG_23(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_NLG_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_NLG_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_NLG_23]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBF_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_0]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBF_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_0]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_0]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_PBF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_0]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBF_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBF_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_0]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_0]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBF_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_0]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBF_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_1]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBF_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_1]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_1]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_PBF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_1]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBF_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBF_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_1]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_1]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBF_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_1]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBF_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_2]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBF_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_2]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_2]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_PBF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_2]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBF_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBF_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_2]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_2]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBF_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_2]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBF_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_3]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBF_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_3]

//>> SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_HOLD0_PBF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_3]

//>> CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CERR_HOLD0_PBF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_3]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBF_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_HOLD0_PBF_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_3]

//>> GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_3]
static inline bool GET_CS_SM2_SNP_MISC_CERR_HOLD0_PBF_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CERR_HOLD0_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_HOLD0_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_HOLD0_PBF_3]

//>> PREP_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5;
#endif
    return fapi2::getScom(i_target, CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5]

//>> PUT_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return fapi2::putScom(i_target, CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5]


//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_TAG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_TAG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_TAG,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_TAG]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_TAG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_TAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_TAG,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_TAG]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_TAG]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_TAG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_TAG,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_TAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_TAG]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_WREND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_WREND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_WREND,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_WREND]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_WREND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_WREND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_WREND,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_WREND]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_WREND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_WREND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_WREND,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_WREND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC5_WREND]

//>> PREP_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_SNP_MISC_PERF_MATCH_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_PERF_MATCH_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG]

//>> GET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_SNP_MISC_PERF_MATCH_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_PERF_MATCH_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM3_SNP_MISC_PERF_MATCH_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG]

//>> PUT_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_SNP_MISC_PERF_MATCH_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM3_SNP_MISC_PERF_MATCH_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG]


//>> SET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS,
           CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS]

//>> SET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS,
           CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS]

//>> GET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS,
           CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS]

//>> SET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_TTYPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_TTYPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_TTYPE,
           CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_TTYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_TTYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_TTYPE]

//>> SET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_TTYPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_TTYPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_TTYPE,
           CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_TTYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_TTYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_TTYPE]

//>> GET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_TTYPE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_TTYPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_TTYPE,
           CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_TTYPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_TTYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_TTYPE]

//>> SET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_TSIZE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_TSIZE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_TSIZE,
           CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_TSIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_TSIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_TSIZE]

//>> SET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_TSIZE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_TSIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_TSIZE,
           CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_TSIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_TSIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_TSIZE]

//>> GET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_TSIZE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_TSIZE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_TSIZE,
           CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_TSIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_TSIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_TSIZE]

//>> SET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_NVBE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_NVBE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_NVBE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_NVBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_NVBE]

//>> SET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_NVBE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_NVBE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_NVBE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_NVBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_NVBE]

//>> SET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_NVBE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_NVBE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_NVBE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_NVBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_NVBE]

//>> CLEAR_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_NVBE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_NVBE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_NVBE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_NVBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_NVBE]

//>> GET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_NVBE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_NVBE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_NVBE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_NVBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_NVBE]

//>> GET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_NVBE]
static inline bool GET_CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_NVBE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_NVBE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_NVBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_NVBE]

//>> SET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_UT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_UT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_UT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_UT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_UT]

//>> SET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_UT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_UT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_UT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_UT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_UT]

//>> SET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_UT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_UT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_UT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_UT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_UT]

//>> CLEAR_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_UT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_UT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_UT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_UT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_UT]

//>> GET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_UT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_UT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_UT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_UT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_UT]

//>> GET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_UT]
static inline bool GET_CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_UT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_UT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_UT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_UT]

//>> SET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ATYPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ATYPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ATYPE,
           CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ATYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ATYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ATYPE]

//>> SET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ATYPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ATYPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ATYPE,
           CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ATYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ATYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ATYPE]

//>> GET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ATYPE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ATYPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ATYPE,
           CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ATYPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ATYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ATYPE]

//>> SET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ALLOC]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ALLOC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ALLOC,
           CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ALLOC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ALLOC]

//>> SET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ALLOC]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ALLOC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ALLOC,
           CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ALLOC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ALLOC]

//>> GET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ALLOC]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ALLOC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ALLOC,
           CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ALLOC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_PERF_MATCH_CONFIG_ALLOC]

//>> PREP_[FIR_REG_0_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_FIR_REG_0_RW(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = FIR_REG_0_RW;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[FIR_REG_0_RW]

//>> GET_[FIR_REG_0_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_FIR_REG_0_RW(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = FIR_REG_0_RW;
#endif
    return fapi2::getScom(i_target, FIR_REG_0_RW, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[FIR_REG_0_RW]

//>> PUT_[FIR_REG_0_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_FIR_REG_0_RW(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return fapi2::putScom(i_target, FIR_REG_0_RW, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[FIR_REG_0_RW]

//>> PREP_[FIR_REG_0_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_FIR_REG_0_WO_AND(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = FIR_REG_0_WO_AND;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[FIR_REG_0_WO_AND]

//>> GET_[FIR_REG_0_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_FIR_REG_0_WO_AND(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = FIR_REG_0_WO_AND;
#endif
    return fapi2::getScom(i_target, FIR_REG_0_WO_AND, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[FIR_REG_0_WO_AND]

//>> PUT_[FIR_REG_0_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_FIR_REG_0_WO_AND(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return fapi2::putScom(i_target, FIR_REG_0_WO_AND, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[FIR_REG_0_WO_AND]

//>> PREP_[FIR_REG_0_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_FIR_REG_0_WO_OR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = FIR_REG_0_WO_OR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[FIR_REG_0_WO_OR]

//>> GET_[FIR_REG_0_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_FIR_REG_0_WO_OR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = FIR_REG_0_WO_OR;
#endif
    return fapi2::getScom(i_target, FIR_REG_0_WO_OR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[FIR_REG_0_WO_OR]

//>> PUT_[FIR_REG_0_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_FIR_REG_0_WO_OR(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return fapi2::putScom(i_target, FIR_REG_0_WO_OR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[FIR_REG_0_WO_OR]


//>> SET_[FIR_REG_0_NTL_ARRAY_CE]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_NTL_ARRAY_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_NTL_ARRAY_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_NTL_ARRAY_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_NTL_ARRAY_CE]

//>> SET_[FIR_REG_0_NTL_ARRAY_CE]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_NTL_ARRAY_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_NTL_ARRAY_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_NTL_ARRAY_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_NTL_ARRAY_CE]

//>> SET_[FIR_REG_0_NTL_ARRAY_CE]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_NTL_ARRAY_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_NTL_ARRAY_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_NTL_ARRAY_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_NTL_ARRAY_CE]

//>> CLEAR_[FIR_REG_0_NTL_ARRAY_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_NTL_ARRAY_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_NTL_ARRAY_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_NTL_ARRAY_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_NTL_ARRAY_CE]

//>> GET_[FIR_REG_0_NTL_ARRAY_CE]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_NTL_ARRAY_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_NTL_ARRAY_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_NTL_ARRAY_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_NTL_ARRAY_CE]

//>> GET_[FIR_REG_0_NTL_ARRAY_CE]
static inline bool GET_FIR_REG_0_NTL_ARRAY_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_NTL_ARRAY_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_NTL_ARRAY_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_NTL_ARRAY_CE]

//>> SET_[FIR_REG_0_NTL_ARRAY_HDR_UE]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_NTL_ARRAY_HDR_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_NTL_ARRAY_HDR_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_NTL_ARRAY_HDR_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_NTL_ARRAY_HDR_UE]

//>> SET_[FIR_REG_0_NTL_ARRAY_HDR_UE]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_NTL_ARRAY_HDR_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_NTL_ARRAY_HDR_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_NTL_ARRAY_HDR_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_NTL_ARRAY_HDR_UE]

//>> SET_[FIR_REG_0_NTL_ARRAY_HDR_UE]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_NTL_ARRAY_HDR_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_NTL_ARRAY_HDR_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_NTL_ARRAY_HDR_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_NTL_ARRAY_HDR_UE]

//>> CLEAR_[FIR_REG_0_NTL_ARRAY_HDR_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_NTL_ARRAY_HDR_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_NTL_ARRAY_HDR_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_NTL_ARRAY_HDR_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_NTL_ARRAY_HDR_UE]

//>> GET_[FIR_REG_0_NTL_ARRAY_HDR_UE]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_NTL_ARRAY_HDR_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_NTL_ARRAY_HDR_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_NTL_ARRAY_HDR_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_NTL_ARRAY_HDR_UE]

//>> GET_[FIR_REG_0_NTL_ARRAY_HDR_UE]
static inline bool GET_FIR_REG_0_NTL_ARRAY_HDR_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_NTL_ARRAY_HDR_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_NTL_ARRAY_HDR_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_NTL_ARRAY_HDR_UE]

//>> SET_[FIR_REG_0_NTL_ARRAY_DATA_UE]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_NTL_ARRAY_DATA_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_NTL_ARRAY_DATA_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_NTL_ARRAY_DATA_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_NTL_ARRAY_DATA_UE]

//>> SET_[FIR_REG_0_NTL_ARRAY_DATA_UE]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_NTL_ARRAY_DATA_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_NTL_ARRAY_DATA_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_NTL_ARRAY_DATA_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_NTL_ARRAY_DATA_UE]

//>> SET_[FIR_REG_0_NTL_ARRAY_DATA_UE]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_NTL_ARRAY_DATA_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_NTL_ARRAY_DATA_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_NTL_ARRAY_DATA_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_NTL_ARRAY_DATA_UE]

//>> CLEAR_[FIR_REG_0_NTL_ARRAY_DATA_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_NTL_ARRAY_DATA_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_NTL_ARRAY_DATA_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_NTL_ARRAY_DATA_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_NTL_ARRAY_DATA_UE]

//>> GET_[FIR_REG_0_NTL_ARRAY_DATA_UE]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_NTL_ARRAY_DATA_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_NTL_ARRAY_DATA_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_NTL_ARRAY_DATA_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_NTL_ARRAY_DATA_UE]

//>> GET_[FIR_REG_0_NTL_ARRAY_DATA_UE]
static inline bool GET_FIR_REG_0_NTL_ARRAY_DATA_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_NTL_ARRAY_DATA_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_NTL_ARRAY_DATA_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_NTL_ARRAY_DATA_UE]

//>> SET_[FIR_REG_0_NTL_NVL_FLIT_PERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_NTL_NVL_FLIT_PERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_NTL_NVL_FLIT_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_NTL_NVL_FLIT_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_NTL_NVL_FLIT_PERR]

//>> SET_[FIR_REG_0_NTL_NVL_FLIT_PERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_NTL_NVL_FLIT_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_NTL_NVL_FLIT_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_NTL_NVL_FLIT_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_NTL_NVL_FLIT_PERR]

//>> SET_[FIR_REG_0_NTL_NVL_FLIT_PERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_NTL_NVL_FLIT_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_NTL_NVL_FLIT_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_NTL_NVL_FLIT_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_NTL_NVL_FLIT_PERR]

//>> CLEAR_[FIR_REG_0_NTL_NVL_FLIT_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_NTL_NVL_FLIT_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_NTL_NVL_FLIT_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_NTL_NVL_FLIT_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_NTL_NVL_FLIT_PERR]

//>> GET_[FIR_REG_0_NTL_NVL_FLIT_PERR]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_NTL_NVL_FLIT_PERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_NTL_NVL_FLIT_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_NTL_NVL_FLIT_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_NTL_NVL_FLIT_PERR]

//>> GET_[FIR_REG_0_NTL_NVL_FLIT_PERR]
static inline bool GET_FIR_REG_0_NTL_NVL_FLIT_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_NTL_NVL_FLIT_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_NTL_NVL_FLIT_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_NTL_NVL_FLIT_PERR]

//>> SET_[FIR_REG_0_NTL_NVL_DATA_PERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_NTL_NVL_DATA_PERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_NTL_NVL_DATA_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_NTL_NVL_DATA_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_NTL_NVL_DATA_PERR]

//>> SET_[FIR_REG_0_NTL_NVL_DATA_PERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_NTL_NVL_DATA_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_NTL_NVL_DATA_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_NTL_NVL_DATA_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_NTL_NVL_DATA_PERR]

//>> SET_[FIR_REG_0_NTL_NVL_DATA_PERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_NTL_NVL_DATA_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_NTL_NVL_DATA_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_NTL_NVL_DATA_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_NTL_NVL_DATA_PERR]

//>> CLEAR_[FIR_REG_0_NTL_NVL_DATA_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_NTL_NVL_DATA_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_NTL_NVL_DATA_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_NTL_NVL_DATA_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_NTL_NVL_DATA_PERR]

//>> GET_[FIR_REG_0_NTL_NVL_DATA_PERR]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_NTL_NVL_DATA_PERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_NTL_NVL_DATA_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_NTL_NVL_DATA_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_NTL_NVL_DATA_PERR]

//>> GET_[FIR_REG_0_NTL_NVL_DATA_PERR]
static inline bool GET_FIR_REG_0_NTL_NVL_DATA_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_NTL_NVL_DATA_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_NTL_NVL_DATA_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_NTL_NVL_DATA_PERR]

//>> SET_[FIR_REG_0_NTL_NVL_PKT_MALFOR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_NTL_NVL_PKT_MALFOR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_NTL_NVL_PKT_MALFOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_NTL_NVL_PKT_MALFOR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_NTL_NVL_PKT_MALFOR]

//>> SET_[FIR_REG_0_NTL_NVL_PKT_MALFOR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_NTL_NVL_PKT_MALFOR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_NTL_NVL_PKT_MALFOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_NTL_NVL_PKT_MALFOR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_NTL_NVL_PKT_MALFOR]

//>> SET_[FIR_REG_0_NTL_NVL_PKT_MALFOR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_NTL_NVL_PKT_MALFOR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_NTL_NVL_PKT_MALFOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_NTL_NVL_PKT_MALFOR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_NTL_NVL_PKT_MALFOR]

//>> CLEAR_[FIR_REG_0_NTL_NVL_PKT_MALFOR]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_NTL_NVL_PKT_MALFOR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_NTL_NVL_PKT_MALFOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_NTL_NVL_PKT_MALFOR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_NTL_NVL_PKT_MALFOR]

//>> GET_[FIR_REG_0_NTL_NVL_PKT_MALFOR]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_NTL_NVL_PKT_MALFOR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_NTL_NVL_PKT_MALFOR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_NTL_NVL_PKT_MALFOR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_NTL_NVL_PKT_MALFOR]

//>> GET_[FIR_REG_0_NTL_NVL_PKT_MALFOR]
static inline bool GET_FIR_REG_0_NTL_NVL_PKT_MALFOR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_NTL_NVL_PKT_MALFOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_NTL_NVL_PKT_MALFOR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_NTL_NVL_PKT_MALFOR]

//>> SET_[FIR_REG_0_NTL_NVL_PKT_UNSUPPORTED]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_NTL_NVL_PKT_UNSUPPORTED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_NTL_NVL_PKT_UNSUPPORTED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_NTL_NVL_PKT_UNSUPPORTED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_NTL_NVL_PKT_UNSUPPORTED]

//>> SET_[FIR_REG_0_NTL_NVL_PKT_UNSUPPORTED]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_NTL_NVL_PKT_UNSUPPORTED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_NTL_NVL_PKT_UNSUPPORTED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_NTL_NVL_PKT_UNSUPPORTED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_NTL_NVL_PKT_UNSUPPORTED]

//>> SET_[FIR_REG_0_NTL_NVL_PKT_UNSUPPORTED]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_NTL_NVL_PKT_UNSUPPORTED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_NTL_NVL_PKT_UNSUPPORTED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_NTL_NVL_PKT_UNSUPPORTED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_NTL_NVL_PKT_UNSUPPORTED]

//>> CLEAR_[FIR_REG_0_NTL_NVL_PKT_UNSUPPORTED]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_NTL_NVL_PKT_UNSUPPORTED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_NTL_NVL_PKT_UNSUPPORTED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_NTL_NVL_PKT_UNSUPPORTED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_NTL_NVL_PKT_UNSUPPORTED]

//>> GET_[FIR_REG_0_NTL_NVL_PKT_UNSUPPORTED]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_NTL_NVL_PKT_UNSUPPORTED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_NTL_NVL_PKT_UNSUPPORTED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_NTL_NVL_PKT_UNSUPPORTED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_NTL_NVL_PKT_UNSUPPORTED]

//>> GET_[FIR_REG_0_NTL_NVL_PKT_UNSUPPORTED]
static inline bool GET_FIR_REG_0_NTL_NVL_PKT_UNSUPPORTED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_NTL_NVL_PKT_UNSUPPORTED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_NTL_NVL_PKT_UNSUPPORTED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_NTL_NVL_PKT_UNSUPPORTED]

//>> SET_[FIR_REG_0_NTL_NVL_CONFIG_ERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_NTL_NVL_CONFIG_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_NTL_NVL_CONFIG_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_NTL_NVL_CONFIG_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_NTL_NVL_CONFIG_ERR]

//>> SET_[FIR_REG_0_NTL_NVL_CONFIG_ERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_NTL_NVL_CONFIG_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_NTL_NVL_CONFIG_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_NTL_NVL_CONFIG_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_NTL_NVL_CONFIG_ERR]

//>> SET_[FIR_REG_0_NTL_NVL_CONFIG_ERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_NTL_NVL_CONFIG_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_NTL_NVL_CONFIG_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_NTL_NVL_CONFIG_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_NTL_NVL_CONFIG_ERR]

//>> CLEAR_[FIR_REG_0_NTL_NVL_CONFIG_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_NTL_NVL_CONFIG_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_NTL_NVL_CONFIG_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_NTL_NVL_CONFIG_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_NTL_NVL_CONFIG_ERR]

//>> GET_[FIR_REG_0_NTL_NVL_CONFIG_ERR]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_NTL_NVL_CONFIG_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_NTL_NVL_CONFIG_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_NTL_NVL_CONFIG_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_NTL_NVL_CONFIG_ERR]

//>> GET_[FIR_REG_0_NTL_NVL_CONFIG_ERR]
static inline bool GET_FIR_REG_0_NTL_NVL_CONFIG_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_NTL_NVL_CONFIG_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_NTL_NVL_CONFIG_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_NTL_NVL_CONFIG_ERR]

//>> SET_[FIR_REG_0_NTL_NVL_CRC_ERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_NTL_NVL_CRC_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_NTL_NVL_CRC_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_NTL_NVL_CRC_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_NTL_NVL_CRC_ERR]

//>> SET_[FIR_REG_0_NTL_NVL_CRC_ERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_NTL_NVL_CRC_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_NTL_NVL_CRC_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_NTL_NVL_CRC_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_NTL_NVL_CRC_ERR]

//>> SET_[FIR_REG_0_NTL_NVL_CRC_ERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_NTL_NVL_CRC_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_NTL_NVL_CRC_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_NTL_NVL_CRC_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_NTL_NVL_CRC_ERR]

//>> CLEAR_[FIR_REG_0_NTL_NVL_CRC_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_NTL_NVL_CRC_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_NTL_NVL_CRC_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_NTL_NVL_CRC_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_NTL_NVL_CRC_ERR]

//>> GET_[FIR_REG_0_NTL_NVL_CRC_ERR]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_NTL_NVL_CRC_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_NTL_NVL_CRC_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_NTL_NVL_CRC_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_NTL_NVL_CRC_ERR]

//>> GET_[FIR_REG_0_NTL_NVL_CRC_ERR]
static inline bool GET_FIR_REG_0_NTL_NVL_CRC_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_NTL_NVL_CRC_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_NTL_NVL_CRC_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_NTL_NVL_CRC_ERR]

//>> SET_[FIR_REG_0_NTL_PRI_ERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_NTL_PRI_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_NTL_PRI_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_NTL_PRI_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_NTL_PRI_ERR]

//>> SET_[FIR_REG_0_NTL_PRI_ERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_NTL_PRI_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_NTL_PRI_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_NTL_PRI_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_NTL_PRI_ERR]

//>> SET_[FIR_REG_0_NTL_PRI_ERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_NTL_PRI_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_NTL_PRI_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_NTL_PRI_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_NTL_PRI_ERR]

//>> CLEAR_[FIR_REG_0_NTL_PRI_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_NTL_PRI_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_NTL_PRI_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_NTL_PRI_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_NTL_PRI_ERR]

//>> GET_[FIR_REG_0_NTL_PRI_ERR]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_NTL_PRI_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_NTL_PRI_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_NTL_PRI_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_NTL_PRI_ERR]

//>> GET_[FIR_REG_0_NTL_PRI_ERR]
static inline bool GET_FIR_REG_0_NTL_PRI_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_NTL_PRI_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_NTL_PRI_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_NTL_PRI_ERR]

//>> SET_[FIR_REG_0_NTL_LOGIC_ERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_NTL_LOGIC_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_NTL_LOGIC_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_NTL_LOGIC_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_NTL_LOGIC_ERR]

//>> SET_[FIR_REG_0_NTL_LOGIC_ERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_NTL_LOGIC_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_NTL_LOGIC_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_NTL_LOGIC_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_NTL_LOGIC_ERR]

//>> SET_[FIR_REG_0_NTL_LOGIC_ERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_NTL_LOGIC_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_NTL_LOGIC_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_NTL_LOGIC_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_NTL_LOGIC_ERR]

//>> CLEAR_[FIR_REG_0_NTL_LOGIC_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_NTL_LOGIC_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_NTL_LOGIC_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_NTL_LOGIC_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_NTL_LOGIC_ERR]

//>> GET_[FIR_REG_0_NTL_LOGIC_ERR]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_NTL_LOGIC_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_NTL_LOGIC_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_NTL_LOGIC_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_NTL_LOGIC_ERR]

//>> GET_[FIR_REG_0_NTL_LOGIC_ERR]
static inline bool GET_FIR_REG_0_NTL_LOGIC_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_NTL_LOGIC_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_NTL_LOGIC_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_NTL_LOGIC_ERR]

//>> SET_[FIR_REG_0_NTL_LMD_POISON]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_NTL_LMD_POISON(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_NTL_LMD_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_NTL_LMD_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_NTL_LMD_POISON]

//>> SET_[FIR_REG_0_NTL_LMD_POISON]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_NTL_LMD_POISON(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_NTL_LMD_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_NTL_LMD_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_NTL_LMD_POISON]

//>> SET_[FIR_REG_0_NTL_LMD_POISON]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_NTL_LMD_POISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_NTL_LMD_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_NTL_LMD_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_NTL_LMD_POISON]

//>> CLEAR_[FIR_REG_0_NTL_LMD_POISON]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_NTL_LMD_POISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_NTL_LMD_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_NTL_LMD_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_NTL_LMD_POISON]

//>> GET_[FIR_REG_0_NTL_LMD_POISON]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_NTL_LMD_POISON(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_NTL_LMD_POISON,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_NTL_LMD_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_NTL_LMD_POISON]

//>> GET_[FIR_REG_0_NTL_LMD_POISON]
static inline bool GET_FIR_REG_0_NTL_LMD_POISON(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_NTL_LMD_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_NTL_LMD_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_NTL_LMD_POISON]

//>> SET_[FIR_REG_0_NTL_ARRAY_DATA_SUE]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_NTL_ARRAY_DATA_SUE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_NTL_ARRAY_DATA_SUE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_NTL_ARRAY_DATA_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_NTL_ARRAY_DATA_SUE]

//>> SET_[FIR_REG_0_NTL_ARRAY_DATA_SUE]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_NTL_ARRAY_DATA_SUE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_NTL_ARRAY_DATA_SUE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_NTL_ARRAY_DATA_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_NTL_ARRAY_DATA_SUE]

//>> SET_[FIR_REG_0_NTL_ARRAY_DATA_SUE]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_NTL_ARRAY_DATA_SUE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_NTL_ARRAY_DATA_SUE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_NTL_ARRAY_DATA_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_NTL_ARRAY_DATA_SUE]

//>> CLEAR_[FIR_REG_0_NTL_ARRAY_DATA_SUE]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_NTL_ARRAY_DATA_SUE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_NTL_ARRAY_DATA_SUE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_NTL_ARRAY_DATA_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_NTL_ARRAY_DATA_SUE]

//>> GET_[FIR_REG_0_NTL_ARRAY_DATA_SUE]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_NTL_ARRAY_DATA_SUE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_NTL_ARRAY_DATA_SUE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_NTL_ARRAY_DATA_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_NTL_ARRAY_DATA_SUE]

//>> GET_[FIR_REG_0_NTL_ARRAY_DATA_SUE]
static inline bool GET_FIR_REG_0_NTL_ARRAY_DATA_SUE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_NTL_ARRAY_DATA_SUE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_NTL_ARRAY_DATA_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_NTL_ARRAY_DATA_SUE]

//>> SET_[FIR_REG_0_CTL_ARRAY_CE]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_CTL_ARRAY_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_CTL_ARRAY_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_CTL_ARRAY_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_CTL_ARRAY_CE]

//>> SET_[FIR_REG_0_CTL_ARRAY_CE]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_CTL_ARRAY_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_CTL_ARRAY_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_CTL_ARRAY_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_CTL_ARRAY_CE]

//>> SET_[FIR_REG_0_CTL_ARRAY_CE]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_CTL_ARRAY_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_CTL_ARRAY_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_CTL_ARRAY_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_CTL_ARRAY_CE]

//>> CLEAR_[FIR_REG_0_CTL_ARRAY_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_CTL_ARRAY_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_CTL_ARRAY_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_CTL_ARRAY_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_CTL_ARRAY_CE]

//>> GET_[FIR_REG_0_CTL_ARRAY_CE]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_CTL_ARRAY_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_CTL_ARRAY_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_CTL_ARRAY_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_CTL_ARRAY_CE]

//>> GET_[FIR_REG_0_CTL_ARRAY_CE]
static inline bool GET_FIR_REG_0_CTL_ARRAY_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_CTL_ARRAY_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_CTL_ARRAY_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_CTL_ARRAY_CE]

//>> SET_[FIR_REG_0_CTL_PBUS_RECOV_ERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_CTL_PBUS_RECOV_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_CTL_PBUS_RECOV_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_CTL_PBUS_RECOV_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_CTL_PBUS_RECOV_ERR]

//>> SET_[FIR_REG_0_CTL_PBUS_RECOV_ERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_CTL_PBUS_RECOV_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_CTL_PBUS_RECOV_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_CTL_PBUS_RECOV_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_CTL_PBUS_RECOV_ERR]

//>> SET_[FIR_REG_0_CTL_PBUS_RECOV_ERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_CTL_PBUS_RECOV_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_CTL_PBUS_RECOV_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_CTL_PBUS_RECOV_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_CTL_PBUS_RECOV_ERR]

//>> CLEAR_[FIR_REG_0_CTL_PBUS_RECOV_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_CTL_PBUS_RECOV_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_CTL_PBUS_RECOV_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_CTL_PBUS_RECOV_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_CTL_PBUS_RECOV_ERR]

//>> GET_[FIR_REG_0_CTL_PBUS_RECOV_ERR]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_CTL_PBUS_RECOV_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_CTL_PBUS_RECOV_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_CTL_PBUS_RECOV_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_CTL_PBUS_RECOV_ERR]

//>> GET_[FIR_REG_0_CTL_PBUS_RECOV_ERR]
static inline bool GET_FIR_REG_0_CTL_PBUS_RECOV_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_CTL_PBUS_RECOV_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_CTL_PBUS_RECOV_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_CTL_PBUS_RECOV_ERR]

//>> SET_[FIR_REG_0_CTL_REG_RING_ERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_CTL_REG_RING_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_CTL_REG_RING_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_CTL_REG_RING_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_CTL_REG_RING_ERR]

//>> SET_[FIR_REG_0_CTL_REG_RING_ERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_CTL_REG_RING_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_CTL_REG_RING_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_CTL_REG_RING_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_CTL_REG_RING_ERR]

//>> SET_[FIR_REG_0_CTL_REG_RING_ERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_CTL_REG_RING_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_CTL_REG_RING_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_CTL_REG_RING_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_CTL_REG_RING_ERR]

//>> CLEAR_[FIR_REG_0_CTL_REG_RING_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_CTL_REG_RING_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_CTL_REG_RING_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_CTL_REG_RING_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_CTL_REG_RING_ERR]

//>> GET_[FIR_REG_0_CTL_REG_RING_ERR]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_CTL_REG_RING_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_CTL_REG_RING_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_CTL_REG_RING_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_CTL_REG_RING_ERR]

//>> GET_[FIR_REG_0_CTL_REG_RING_ERR]
static inline bool GET_FIR_REG_0_CTL_REG_RING_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_CTL_REG_RING_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_CTL_REG_RING_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_CTL_REG_RING_ERR]

//>> SET_[FIR_REG_0_CTL_MMIO_ST_DATA_UE]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_CTL_MMIO_ST_DATA_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_CTL_MMIO_ST_DATA_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_CTL_MMIO_ST_DATA_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_CTL_MMIO_ST_DATA_UE]

//>> SET_[FIR_REG_0_CTL_MMIO_ST_DATA_UE]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_CTL_MMIO_ST_DATA_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_CTL_MMIO_ST_DATA_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_CTL_MMIO_ST_DATA_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_CTL_MMIO_ST_DATA_UE]

//>> SET_[FIR_REG_0_CTL_MMIO_ST_DATA_UE]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_CTL_MMIO_ST_DATA_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_CTL_MMIO_ST_DATA_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_CTL_MMIO_ST_DATA_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_CTL_MMIO_ST_DATA_UE]

//>> CLEAR_[FIR_REG_0_CTL_MMIO_ST_DATA_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_CTL_MMIO_ST_DATA_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_CTL_MMIO_ST_DATA_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_CTL_MMIO_ST_DATA_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_CTL_MMIO_ST_DATA_UE]

//>> GET_[FIR_REG_0_CTL_MMIO_ST_DATA_UE]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_CTL_MMIO_ST_DATA_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_CTL_MMIO_ST_DATA_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_CTL_MMIO_ST_DATA_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_CTL_MMIO_ST_DATA_UE]

//>> GET_[FIR_REG_0_CTL_MMIO_ST_DATA_UE]
static inline bool GET_FIR_REG_0_CTL_MMIO_ST_DATA_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_CTL_MMIO_ST_DATA_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_CTL_MMIO_ST_DATA_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_CTL_MMIO_ST_DATA_UE]

//>> SET_[FIR_REG_0_CTL_PEF]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_CTL_PEF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_CTL_PEF,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_CTL_PEF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_CTL_PEF]

//>> SET_[FIR_REG_0_CTL_PEF]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_CTL_PEF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_CTL_PEF,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_CTL_PEF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_CTL_PEF]

//>> SET_[FIR_REG_0_CTL_PEF]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_CTL_PEF(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_CTL_PEF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_CTL_PEF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_CTL_PEF]

//>> CLEAR_[FIR_REG_0_CTL_PEF]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_CTL_PEF(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_CTL_PEF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_CTL_PEF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_CTL_PEF]

//>> GET_[FIR_REG_0_CTL_PEF]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_CTL_PEF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_CTL_PEF,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_CTL_PEF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_CTL_PEF]

//>> GET_[FIR_REG_0_CTL_PEF]
static inline bool GET_FIR_REG_0_CTL_PEF(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_CTL_PEF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_CTL_PEF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_CTL_PEF]

//>> SET_[FIR_REG_0_CTL_NVL_CFG_ERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_CTL_NVL_CFG_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_CTL_NVL_CFG_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_CTL_NVL_CFG_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_CTL_NVL_CFG_ERR]

//>> SET_[FIR_REG_0_CTL_NVL_CFG_ERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_CTL_NVL_CFG_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_CTL_NVL_CFG_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_CTL_NVL_CFG_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_CTL_NVL_CFG_ERR]

//>> SET_[FIR_REG_0_CTL_NVL_CFG_ERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_CTL_NVL_CFG_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_CTL_NVL_CFG_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_CTL_NVL_CFG_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_CTL_NVL_CFG_ERR]

//>> CLEAR_[FIR_REG_0_CTL_NVL_CFG_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_CTL_NVL_CFG_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_CTL_NVL_CFG_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_CTL_NVL_CFG_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_CTL_NVL_CFG_ERR]

//>> GET_[FIR_REG_0_CTL_NVL_CFG_ERR]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_CTL_NVL_CFG_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_CTL_NVL_CFG_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_CTL_NVL_CFG_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_CTL_NVL_CFG_ERR]

//>> GET_[FIR_REG_0_CTL_NVL_CFG_ERR]
static inline bool GET_FIR_REG_0_CTL_NVL_CFG_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_CTL_NVL_CFG_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_CTL_NVL_CFG_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_CTL_NVL_CFG_ERR]

//>> SET_[FIR_REG_0_CTL_NVL_FATAL_ERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_CTL_NVL_FATAL_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_CTL_NVL_FATAL_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_CTL_NVL_FATAL_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_CTL_NVL_FATAL_ERR]

//>> SET_[FIR_REG_0_CTL_NVL_FATAL_ERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_CTL_NVL_FATAL_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_CTL_NVL_FATAL_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_CTL_NVL_FATAL_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_CTL_NVL_FATAL_ERR]

//>> SET_[FIR_REG_0_CTL_NVL_FATAL_ERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_CTL_NVL_FATAL_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_CTL_NVL_FATAL_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_CTL_NVL_FATAL_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_CTL_NVL_FATAL_ERR]

//>> CLEAR_[FIR_REG_0_CTL_NVL_FATAL_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_CTL_NVL_FATAL_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_CTL_NVL_FATAL_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_CTL_NVL_FATAL_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_CTL_NVL_FATAL_ERR]

//>> GET_[FIR_REG_0_CTL_NVL_FATAL_ERR]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_CTL_NVL_FATAL_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_CTL_NVL_FATAL_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_CTL_NVL_FATAL_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_CTL_NVL_FATAL_ERR]

//>> GET_[FIR_REG_0_CTL_NVL_FATAL_ERR]
static inline bool GET_FIR_REG_0_CTL_NVL_FATAL_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_CTL_NVL_FATAL_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_CTL_NVL_FATAL_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_CTL_NVL_FATAL_ERR]

//>> SET_[FIR_REG_0_RESERVED_1]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_RESERVED_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_RESERVED_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_RESERVED_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_RESERVED_1]

//>> SET_[FIR_REG_0_RESERVED_1]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_RESERVED_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_RESERVED_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_RESERVED_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_RESERVED_1]

//>> SET_[FIR_REG_0_RESERVED_1]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_RESERVED_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_RESERVED_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_RESERVED_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_RESERVED_1]

//>> CLEAR_[FIR_REG_0_RESERVED_1]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_RESERVED_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_RESERVED_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_RESERVED_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_RESERVED_1]

//>> GET_[FIR_REG_0_RESERVED_1]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_RESERVED_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_RESERVED_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_RESERVED_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_RESERVED_1]

//>> GET_[FIR_REG_0_RESERVED_1]
static inline bool GET_FIR_REG_0_RESERVED_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_RESERVED_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_RESERVED_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_RESERVED_1]

//>> SET_[FIR_REG_0_CTL_ARRAY_UE]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_CTL_ARRAY_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_CTL_ARRAY_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_CTL_ARRAY_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_CTL_ARRAY_UE]

//>> SET_[FIR_REG_0_CTL_ARRAY_UE]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_CTL_ARRAY_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_CTL_ARRAY_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_CTL_ARRAY_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_CTL_ARRAY_UE]

//>> SET_[FIR_REG_0_CTL_ARRAY_UE]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_CTL_ARRAY_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_CTL_ARRAY_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_CTL_ARRAY_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_CTL_ARRAY_UE]

//>> CLEAR_[FIR_REG_0_CTL_ARRAY_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_CTL_ARRAY_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_CTL_ARRAY_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_CTL_ARRAY_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_CTL_ARRAY_UE]

//>> GET_[FIR_REG_0_CTL_ARRAY_UE]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_CTL_ARRAY_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_CTL_ARRAY_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_CTL_ARRAY_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_CTL_ARRAY_UE]

//>> GET_[FIR_REG_0_CTL_ARRAY_UE]
static inline bool GET_FIR_REG_0_CTL_ARRAY_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_CTL_ARRAY_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_CTL_ARRAY_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_CTL_ARRAY_UE]

//>> SET_[FIR_REG_0_CTL_PBUS_PERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_CTL_PBUS_PERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_CTL_PBUS_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_CTL_PBUS_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_CTL_PBUS_PERR]

//>> SET_[FIR_REG_0_CTL_PBUS_PERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_CTL_PBUS_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_CTL_PBUS_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_CTL_PBUS_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_CTL_PBUS_PERR]

//>> SET_[FIR_REG_0_CTL_PBUS_PERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_CTL_PBUS_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_CTL_PBUS_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_CTL_PBUS_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_CTL_PBUS_PERR]

//>> CLEAR_[FIR_REG_0_CTL_PBUS_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_CTL_PBUS_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_CTL_PBUS_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_CTL_PBUS_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_CTL_PBUS_PERR]

//>> GET_[FIR_REG_0_CTL_PBUS_PERR]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_CTL_PBUS_PERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_CTL_PBUS_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_CTL_PBUS_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_CTL_PBUS_PERR]

//>> GET_[FIR_REG_0_CTL_PBUS_PERR]
static inline bool GET_FIR_REG_0_CTL_PBUS_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_CTL_PBUS_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_CTL_PBUS_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_CTL_PBUS_PERR]

//>> SET_[FIR_REG_0_CTL_PBUS_FATAL_ERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_CTL_PBUS_FATAL_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_CTL_PBUS_FATAL_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_CTL_PBUS_FATAL_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_CTL_PBUS_FATAL_ERR]

//>> SET_[FIR_REG_0_CTL_PBUS_FATAL_ERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_CTL_PBUS_FATAL_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_CTL_PBUS_FATAL_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_CTL_PBUS_FATAL_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_CTL_PBUS_FATAL_ERR]

//>> SET_[FIR_REG_0_CTL_PBUS_FATAL_ERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_CTL_PBUS_FATAL_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_CTL_PBUS_FATAL_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_CTL_PBUS_FATAL_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_CTL_PBUS_FATAL_ERR]

//>> CLEAR_[FIR_REG_0_CTL_PBUS_FATAL_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_CTL_PBUS_FATAL_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_CTL_PBUS_FATAL_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_CTL_PBUS_FATAL_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_CTL_PBUS_FATAL_ERR]

//>> GET_[FIR_REG_0_CTL_PBUS_FATAL_ERR]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_CTL_PBUS_FATAL_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_CTL_PBUS_FATAL_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_CTL_PBUS_FATAL_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_CTL_PBUS_FATAL_ERR]

//>> GET_[FIR_REG_0_CTL_PBUS_FATAL_ERR]
static inline bool GET_FIR_REG_0_CTL_PBUS_FATAL_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_CTL_PBUS_FATAL_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_CTL_PBUS_FATAL_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_CTL_PBUS_FATAL_ERR]

//>> SET_[FIR_REG_0_CTL_PBUS_CONFIG_ERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_CTL_PBUS_CONFIG_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_CTL_PBUS_CONFIG_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_CTL_PBUS_CONFIG_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_CTL_PBUS_CONFIG_ERR]

//>> SET_[FIR_REG_0_CTL_PBUS_CONFIG_ERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_CTL_PBUS_CONFIG_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_CTL_PBUS_CONFIG_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_CTL_PBUS_CONFIG_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_CTL_PBUS_CONFIG_ERR]

//>> SET_[FIR_REG_0_CTL_PBUS_CONFIG_ERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_CTL_PBUS_CONFIG_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_CTL_PBUS_CONFIG_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_CTL_PBUS_CONFIG_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_CTL_PBUS_CONFIG_ERR]

//>> CLEAR_[FIR_REG_0_CTL_PBUS_CONFIG_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_CTL_PBUS_CONFIG_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_CTL_PBUS_CONFIG_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_CTL_PBUS_CONFIG_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_CTL_PBUS_CONFIG_ERR]

//>> GET_[FIR_REG_0_CTL_PBUS_CONFIG_ERR]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_CTL_PBUS_CONFIG_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_CTL_PBUS_CONFIG_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_CTL_PBUS_CONFIG_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_CTL_PBUS_CONFIG_ERR]

//>> GET_[FIR_REG_0_CTL_PBUS_CONFIG_ERR]
static inline bool GET_FIR_REG_0_CTL_PBUS_CONFIG_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_CTL_PBUS_CONFIG_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_CTL_PBUS_CONFIG_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_CTL_PBUS_CONFIG_ERR]

//>> SET_[FIR_REG_0_CTL_FWD_PROGRESS_ERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_CTL_FWD_PROGRESS_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_CTL_FWD_PROGRESS_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_CTL_FWD_PROGRESS_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_CTL_FWD_PROGRESS_ERR]

//>> SET_[FIR_REG_0_CTL_FWD_PROGRESS_ERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_CTL_FWD_PROGRESS_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_CTL_FWD_PROGRESS_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_CTL_FWD_PROGRESS_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_CTL_FWD_PROGRESS_ERR]

//>> SET_[FIR_REG_0_CTL_FWD_PROGRESS_ERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_CTL_FWD_PROGRESS_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_CTL_FWD_PROGRESS_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_CTL_FWD_PROGRESS_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_CTL_FWD_PROGRESS_ERR]

//>> CLEAR_[FIR_REG_0_CTL_FWD_PROGRESS_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_CTL_FWD_PROGRESS_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_CTL_FWD_PROGRESS_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_CTL_FWD_PROGRESS_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_CTL_FWD_PROGRESS_ERR]

//>> GET_[FIR_REG_0_CTL_FWD_PROGRESS_ERR]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_CTL_FWD_PROGRESS_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_CTL_FWD_PROGRESS_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_CTL_FWD_PROGRESS_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_CTL_FWD_PROGRESS_ERR]

//>> GET_[FIR_REG_0_CTL_FWD_PROGRESS_ERR]
static inline bool GET_FIR_REG_0_CTL_FWD_PROGRESS_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_CTL_FWD_PROGRESS_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_CTL_FWD_PROGRESS_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_CTL_FWD_PROGRESS_ERR]

//>> SET_[FIR_REG_0_CTL_LOGIC_ERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_CTL_LOGIC_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_CTL_LOGIC_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_CTL_LOGIC_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_CTL_LOGIC_ERR]

//>> SET_[FIR_REG_0_CTL_LOGIC_ERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_CTL_LOGIC_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_CTL_LOGIC_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_CTL_LOGIC_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_CTL_LOGIC_ERR]

//>> SET_[FIR_REG_0_CTL_LOGIC_ERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_CTL_LOGIC_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_CTL_LOGIC_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_CTL_LOGIC_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_CTL_LOGIC_ERR]

//>> CLEAR_[FIR_REG_0_CTL_LOGIC_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_CTL_LOGIC_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_CTL_LOGIC_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_CTL_LOGIC_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_CTL_LOGIC_ERR]

//>> GET_[FIR_REG_0_CTL_LOGIC_ERR]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_CTL_LOGIC_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_CTL_LOGIC_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_CTL_LOGIC_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_CTL_LOGIC_ERR]

//>> GET_[FIR_REG_0_CTL_LOGIC_ERR]
static inline bool GET_FIR_REG_0_CTL_LOGIC_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_CTL_LOGIC_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_CTL_LOGIC_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_CTL_LOGIC_ERR]

//>> SET_[FIR_REG_0_CTL_RSVD_14]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_CTL_RSVD_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_CTL_RSVD_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_CTL_RSVD_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_CTL_RSVD_14]

//>> SET_[FIR_REG_0_CTL_RSVD_14]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_CTL_RSVD_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_CTL_RSVD_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_CTL_RSVD_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_CTL_RSVD_14]

//>> SET_[FIR_REG_0_CTL_RSVD_14]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_CTL_RSVD_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_CTL_RSVD_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_CTL_RSVD_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_CTL_RSVD_14]

//>> CLEAR_[FIR_REG_0_CTL_RSVD_14]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_CTL_RSVD_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_CTL_RSVD_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_CTL_RSVD_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_CTL_RSVD_14]

//>> GET_[FIR_REG_0_CTL_RSVD_14]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_CTL_RSVD_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_CTL_RSVD_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_CTL_RSVD_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_CTL_RSVD_14]

//>> GET_[FIR_REG_0_CTL_RSVD_14]
static inline bool GET_FIR_REG_0_CTL_RSVD_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_CTL_RSVD_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_CTL_RSVD_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_CTL_RSVD_14]

//>> SET_[FIR_REG_0_CTL_RSVD_15]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_CTL_RSVD_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_CTL_RSVD_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_CTL_RSVD_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_CTL_RSVD_15]

//>> SET_[FIR_REG_0_CTL_RSVD_15]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_CTL_RSVD_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_CTL_RSVD_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_CTL_RSVD_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_CTL_RSVD_15]

//>> SET_[FIR_REG_0_CTL_RSVD_15]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_CTL_RSVD_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_CTL_RSVD_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_CTL_RSVD_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_CTL_RSVD_15]

//>> CLEAR_[FIR_REG_0_CTL_RSVD_15]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_CTL_RSVD_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_CTL_RSVD_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_CTL_RSVD_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_CTL_RSVD_15]

//>> GET_[FIR_REG_0_CTL_RSVD_15]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_CTL_RSVD_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_CTL_RSVD_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_CTL_RSVD_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_CTL_RSVD_15]

//>> GET_[FIR_REG_0_CTL_RSVD_15]
static inline bool GET_FIR_REG_0_CTL_RSVD_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_CTL_RSVD_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_CTL_RSVD_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_CTL_RSVD_15]

//>> SET_[FIR_REG_0_DAT_DATA_BE_UE]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_DAT_DATA_BE_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_DAT_DATA_BE_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_DAT_DATA_BE_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_DAT_DATA_BE_UE]

//>> SET_[FIR_REG_0_DAT_DATA_BE_UE]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_DAT_DATA_BE_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_DAT_DATA_BE_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_DAT_DATA_BE_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_DAT_DATA_BE_UE]

//>> SET_[FIR_REG_0_DAT_DATA_BE_UE]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_DAT_DATA_BE_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_DAT_DATA_BE_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_DAT_DATA_BE_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_DAT_DATA_BE_UE]

//>> CLEAR_[FIR_REG_0_DAT_DATA_BE_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_DAT_DATA_BE_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_DAT_DATA_BE_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_DAT_DATA_BE_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_DAT_DATA_BE_UE]

//>> GET_[FIR_REG_0_DAT_DATA_BE_UE]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_DAT_DATA_BE_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_DAT_DATA_BE_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_DAT_DATA_BE_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_DAT_DATA_BE_UE]

//>> GET_[FIR_REG_0_DAT_DATA_BE_UE]
static inline bool GET_FIR_REG_0_DAT_DATA_BE_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_DAT_DATA_BE_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_DAT_DATA_BE_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_DAT_DATA_BE_UE]

//>> SET_[FIR_REG_0_DAT_DATA_BE_CE]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_DAT_DATA_BE_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_DAT_DATA_BE_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_DAT_DATA_BE_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_DAT_DATA_BE_CE]

//>> SET_[FIR_REG_0_DAT_DATA_BE_CE]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_DAT_DATA_BE_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_DAT_DATA_BE_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_DAT_DATA_BE_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_DAT_DATA_BE_CE]

//>> SET_[FIR_REG_0_DAT_DATA_BE_CE]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_DAT_DATA_BE_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_DAT_DATA_BE_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_DAT_DATA_BE_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_DAT_DATA_BE_CE]

//>> CLEAR_[FIR_REG_0_DAT_DATA_BE_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_DAT_DATA_BE_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_DAT_DATA_BE_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_DAT_DATA_BE_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_DAT_DATA_BE_CE]

//>> GET_[FIR_REG_0_DAT_DATA_BE_CE]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_DAT_DATA_BE_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_DAT_DATA_BE_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_DAT_DATA_BE_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_DAT_DATA_BE_CE]

//>> GET_[FIR_REG_0_DAT_DATA_BE_CE]
static inline bool GET_FIR_REG_0_DAT_DATA_BE_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_DAT_DATA_BE_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_DAT_DATA_BE_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_DAT_DATA_BE_CE]

//>> SET_[FIR_REG_0_DAT_DATA_BE_PERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_DAT_DATA_BE_PERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_DAT_DATA_BE_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_DAT_DATA_BE_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_DAT_DATA_BE_PERR]

//>> SET_[FIR_REG_0_DAT_DATA_BE_PERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_DAT_DATA_BE_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_DAT_DATA_BE_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_DAT_DATA_BE_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_DAT_DATA_BE_PERR]

//>> SET_[FIR_REG_0_DAT_DATA_BE_PERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_DAT_DATA_BE_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_DAT_DATA_BE_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_DAT_DATA_BE_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_DAT_DATA_BE_PERR]

//>> CLEAR_[FIR_REG_0_DAT_DATA_BE_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_DAT_DATA_BE_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_DAT_DATA_BE_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_DAT_DATA_BE_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_DAT_DATA_BE_PERR]

//>> GET_[FIR_REG_0_DAT_DATA_BE_PERR]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_DAT_DATA_BE_PERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_DAT_DATA_BE_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_DAT_DATA_BE_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_DAT_DATA_BE_PERR]

//>> GET_[FIR_REG_0_DAT_DATA_BE_PERR]
static inline bool GET_FIR_REG_0_DAT_DATA_BE_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_DAT_DATA_BE_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_DAT_DATA_BE_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_DAT_DATA_BE_PERR]

//>> SET_[FIR_REG_0_DAT_CREG_PERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_DAT_CREG_PERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_DAT_CREG_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_DAT_CREG_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_DAT_CREG_PERR]

//>> SET_[FIR_REG_0_DAT_CREG_PERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_DAT_CREG_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_DAT_CREG_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_DAT_CREG_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_DAT_CREG_PERR]

//>> SET_[FIR_REG_0_DAT_CREG_PERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_DAT_CREG_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_DAT_CREG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_DAT_CREG_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_DAT_CREG_PERR]

//>> CLEAR_[FIR_REG_0_DAT_CREG_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_DAT_CREG_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_DAT_CREG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_DAT_CREG_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_DAT_CREG_PERR]

//>> GET_[FIR_REG_0_DAT_CREG_PERR]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_DAT_CREG_PERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_DAT_CREG_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_DAT_CREG_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_DAT_CREG_PERR]

//>> GET_[FIR_REG_0_DAT_CREG_PERR]
static inline bool GET_FIR_REG_0_DAT_CREG_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_DAT_CREG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_DAT_CREG_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_DAT_CREG_PERR]

//>> SET_[FIR_REG_0_DAT_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_DAT_RTAG_PERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_DAT_RTAG_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_DAT_RTAG_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_DAT_RTAG_PERR]

//>> SET_[FIR_REG_0_DAT_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_DAT_RTAG_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_DAT_RTAG_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_DAT_RTAG_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_DAT_RTAG_PERR]

//>> SET_[FIR_REG_0_DAT_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_DAT_RTAG_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_DAT_RTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_DAT_RTAG_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_DAT_RTAG_PERR]

//>> CLEAR_[FIR_REG_0_DAT_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_DAT_RTAG_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_DAT_RTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_DAT_RTAG_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_DAT_RTAG_PERR]

//>> GET_[FIR_REG_0_DAT_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_DAT_RTAG_PERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_DAT_RTAG_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_DAT_RTAG_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_DAT_RTAG_PERR]

//>> GET_[FIR_REG_0_DAT_RTAG_PERR]
static inline bool GET_FIR_REG_0_DAT_RTAG_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_DAT_RTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_DAT_RTAG_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_DAT_RTAG_PERR]

//>> SET_[FIR_REG_0_DAT_STATE_PERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_DAT_STATE_PERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_DAT_STATE_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_DAT_STATE_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_DAT_STATE_PERR]

//>> SET_[FIR_REG_0_DAT_STATE_PERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_DAT_STATE_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_DAT_STATE_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_DAT_STATE_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_DAT_STATE_PERR]

//>> SET_[FIR_REG_0_DAT_STATE_PERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_DAT_STATE_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_DAT_STATE_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_DAT_STATE_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_DAT_STATE_PERR]

//>> CLEAR_[FIR_REG_0_DAT_STATE_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_DAT_STATE_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_DAT_STATE_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_DAT_STATE_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_DAT_STATE_PERR]

//>> GET_[FIR_REG_0_DAT_STATE_PERR]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_DAT_STATE_PERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_DAT_STATE_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_DAT_STATE_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_DAT_STATE_PERR]

//>> GET_[FIR_REG_0_DAT_STATE_PERR]
static inline bool GET_FIR_REG_0_DAT_STATE_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_DAT_STATE_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_DAT_STATE_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_DAT_STATE_PERR]

//>> SET_[FIR_REG_0_DAT_LOGIC_ERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_DAT_LOGIC_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_DAT_LOGIC_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_DAT_LOGIC_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_DAT_LOGIC_ERR]

//>> SET_[FIR_REG_0_DAT_LOGIC_ERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_DAT_LOGIC_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_DAT_LOGIC_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_DAT_LOGIC_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_DAT_LOGIC_ERR]

//>> SET_[FIR_REG_0_DAT_LOGIC_ERR]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_DAT_LOGIC_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_DAT_LOGIC_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_DAT_LOGIC_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_DAT_LOGIC_ERR]

//>> CLEAR_[FIR_REG_0_DAT_LOGIC_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_DAT_LOGIC_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_DAT_LOGIC_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_DAT_LOGIC_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_DAT_LOGIC_ERR]

//>> GET_[FIR_REG_0_DAT_LOGIC_ERR]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_DAT_LOGIC_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_DAT_LOGIC_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_DAT_LOGIC_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_DAT_LOGIC_ERR]

//>> GET_[FIR_REG_0_DAT_LOGIC_ERR]
static inline bool GET_FIR_REG_0_DAT_LOGIC_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_DAT_LOGIC_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_DAT_LOGIC_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_DAT_LOGIC_ERR]

//>> SET_[FIR_REG_0_DAT_DATA_BE_SUE]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_DAT_DATA_BE_SUE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_DAT_DATA_BE_SUE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_DAT_DATA_BE_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_DAT_DATA_BE_SUE]

//>> SET_[FIR_REG_0_DAT_DATA_BE_SUE]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_DAT_DATA_BE_SUE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_DAT_DATA_BE_SUE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_DAT_DATA_BE_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_DAT_DATA_BE_SUE]

//>> SET_[FIR_REG_0_DAT_DATA_BE_SUE]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_DAT_DATA_BE_SUE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_DAT_DATA_BE_SUE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_DAT_DATA_BE_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_DAT_DATA_BE_SUE]

//>> CLEAR_[FIR_REG_0_DAT_DATA_BE_SUE]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_DAT_DATA_BE_SUE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_DAT_DATA_BE_SUE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_DAT_DATA_BE_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_DAT_DATA_BE_SUE]

//>> GET_[FIR_REG_0_DAT_DATA_BE_SUE]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_DAT_DATA_BE_SUE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_DAT_DATA_BE_SUE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_DAT_DATA_BE_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_DAT_DATA_BE_SUE]

//>> GET_[FIR_REG_0_DAT_DATA_BE_SUE]
static inline bool GET_FIR_REG_0_DAT_DATA_BE_SUE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_DAT_DATA_BE_SUE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_DAT_DATA_BE_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_DAT_DATA_BE_SUE]

//>> SET_[FIR_REG_0_DAT_PBRX_SUE]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_DAT_PBRX_SUE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_DAT_PBRX_SUE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_DAT_PBRX_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_DAT_PBRX_SUE]

//>> SET_[FIR_REG_0_DAT_PBRX_SUE]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_DAT_PBRX_SUE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_DAT_PBRX_SUE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_DAT_PBRX_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_DAT_PBRX_SUE]

//>> SET_[FIR_REG_0_DAT_PBRX_SUE]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_DAT_PBRX_SUE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_DAT_PBRX_SUE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_DAT_PBRX_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_DAT_PBRX_SUE]

//>> CLEAR_[FIR_REG_0_DAT_PBRX_SUE]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_DAT_PBRX_SUE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_DAT_PBRX_SUE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_DAT_PBRX_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_DAT_PBRX_SUE]

//>> GET_[FIR_REG_0_DAT_PBRX_SUE]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_DAT_PBRX_SUE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_DAT_PBRX_SUE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_DAT_PBRX_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_DAT_PBRX_SUE]

//>> GET_[FIR_REG_0_DAT_PBRX_SUE]
static inline bool GET_FIR_REG_0_DAT_PBRX_SUE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_DAT_PBRX_SUE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_DAT_PBRX_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_DAT_PBRX_SUE]

//>> SET_[FIR_REG_0_DAT_RSVD_9]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_DAT_RSVD_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_DAT_RSVD_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_DAT_RSVD_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_DAT_RSVD_9]

//>> SET_[FIR_REG_0_DAT_RSVD_9]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_DAT_RSVD_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_DAT_RSVD_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_DAT_RSVD_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_DAT_RSVD_9]

//>> SET_[FIR_REG_0_DAT_RSVD_9]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_DAT_RSVD_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_DAT_RSVD_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_DAT_RSVD_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_DAT_RSVD_9]

//>> CLEAR_[FIR_REG_0_DAT_RSVD_9]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_DAT_RSVD_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_DAT_RSVD_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_DAT_RSVD_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_DAT_RSVD_9]

//>> GET_[FIR_REG_0_DAT_RSVD_9]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_DAT_RSVD_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_DAT_RSVD_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_DAT_RSVD_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_DAT_RSVD_9]

//>> GET_[FIR_REG_0_DAT_RSVD_9]
static inline bool GET_FIR_REG_0_DAT_RSVD_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_DAT_RSVD_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_DAT_RSVD_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_DAT_RSVD_9]

//>> SET_[FIR_REG_0_DAT_RSVD_10]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_DAT_RSVD_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_DAT_RSVD_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_DAT_RSVD_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_DAT_RSVD_10]

//>> SET_[FIR_REG_0_DAT_RSVD_10]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_DAT_RSVD_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_DAT_RSVD_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_DAT_RSVD_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_DAT_RSVD_10]

//>> SET_[FIR_REG_0_DAT_RSVD_10]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_DAT_RSVD_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_DAT_RSVD_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_DAT_RSVD_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_DAT_RSVD_10]

//>> CLEAR_[FIR_REG_0_DAT_RSVD_10]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_DAT_RSVD_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_DAT_RSVD_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_DAT_RSVD_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_DAT_RSVD_10]

//>> GET_[FIR_REG_0_DAT_RSVD_10]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_DAT_RSVD_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_DAT_RSVD_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_DAT_RSVD_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_DAT_RSVD_10]

//>> GET_[FIR_REG_0_DAT_RSVD_10]
static inline bool GET_FIR_REG_0_DAT_RSVD_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_DAT_RSVD_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_DAT_RSVD_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_DAT_RSVD_10]

//>> SET_[FIR_REG_0_XTS_INT]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_INT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_XTS_INT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_XTS_INT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_INT]

//>> SET_[FIR_REG_0_XTS_INT]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_INT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_XTS_INT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_XTS_INT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_INT]

//>> SET_[FIR_REG_0_XTS_INT]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_INT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_XTS_INT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_XTS_INT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_INT]

//>> CLEAR_[FIR_REG_0_XTS_INT]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_XTS_INT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_XTS_INT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_XTS_INT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_XTS_INT]

//>> GET_[FIR_REG_0_XTS_INT]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_XTS_INT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_XTS_INT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_XTS_INT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_XTS_INT]

//>> GET_[FIR_REG_0_XTS_INT]
static inline bool GET_FIR_REG_0_XTS_INT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_XTS_INT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_XTS_INT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_XTS_INT]

//>> SET_[FIR_REG_0_XTS_SRAM_CE]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_SRAM_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_XTS_SRAM_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_XTS_SRAM_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_SRAM_CE]

//>> SET_[FIR_REG_0_XTS_SRAM_CE]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_SRAM_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_XTS_SRAM_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_XTS_SRAM_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_SRAM_CE]

//>> SET_[FIR_REG_0_XTS_SRAM_CE]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_SRAM_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_XTS_SRAM_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_XTS_SRAM_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_SRAM_CE]

//>> CLEAR_[FIR_REG_0_XTS_SRAM_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_XTS_SRAM_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_XTS_SRAM_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_XTS_SRAM_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_XTS_SRAM_CE]

//>> GET_[FIR_REG_0_XTS_SRAM_CE]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_XTS_SRAM_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_XTS_SRAM_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_XTS_SRAM_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_XTS_SRAM_CE]

//>> GET_[FIR_REG_0_XTS_SRAM_CE]
static inline bool GET_FIR_REG_0_XTS_SRAM_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_XTS_SRAM_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_XTS_SRAM_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_XTS_SRAM_CE]

//>> SET_[FIR_REG_0_XTS_SRAM_UE]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_SRAM_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_XTS_SRAM_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_XTS_SRAM_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_SRAM_UE]

//>> SET_[FIR_REG_0_XTS_SRAM_UE]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_SRAM_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_XTS_SRAM_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_XTS_SRAM_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_SRAM_UE]

//>> SET_[FIR_REG_0_XTS_SRAM_UE]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_SRAM_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_XTS_SRAM_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_XTS_SRAM_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_SRAM_UE]

//>> CLEAR_[FIR_REG_0_XTS_SRAM_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_XTS_SRAM_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_XTS_SRAM_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_XTS_SRAM_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_XTS_SRAM_UE]

//>> GET_[FIR_REG_0_XTS_SRAM_UE]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_XTS_SRAM_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_XTS_SRAM_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_XTS_SRAM_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_XTS_SRAM_UE]

//>> GET_[FIR_REG_0_XTS_SRAM_UE]
static inline bool GET_FIR_REG_0_XTS_SRAM_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_XTS_SRAM_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_XTS_SRAM_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_XTS_SRAM_UE]

//>> SET_[FIR_REG_0_XTS_PROTOCOL_CE]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_PROTOCOL_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_XTS_PROTOCOL_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_XTS_PROTOCOL_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_PROTOCOL_CE]

//>> SET_[FIR_REG_0_XTS_PROTOCOL_CE]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_PROTOCOL_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_XTS_PROTOCOL_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_XTS_PROTOCOL_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_PROTOCOL_CE]

//>> SET_[FIR_REG_0_XTS_PROTOCOL_CE]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_PROTOCOL_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_XTS_PROTOCOL_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_XTS_PROTOCOL_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_PROTOCOL_CE]

//>> CLEAR_[FIR_REG_0_XTS_PROTOCOL_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_XTS_PROTOCOL_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_XTS_PROTOCOL_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_XTS_PROTOCOL_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_XTS_PROTOCOL_CE]

//>> GET_[FIR_REG_0_XTS_PROTOCOL_CE]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_XTS_PROTOCOL_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_XTS_PROTOCOL_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_XTS_PROTOCOL_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_XTS_PROTOCOL_CE]

//>> GET_[FIR_REG_0_XTS_PROTOCOL_CE]
static inline bool GET_FIR_REG_0_XTS_PROTOCOL_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_XTS_PROTOCOL_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_XTS_PROTOCOL_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_XTS_PROTOCOL_CE]

//>> SET_[FIR_REG_0_XTS_PROTOCOL_UE]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_PROTOCOL_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_XTS_PROTOCOL_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_XTS_PROTOCOL_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_PROTOCOL_UE]

//>> SET_[FIR_REG_0_XTS_PROTOCOL_UE]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_PROTOCOL_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_XTS_PROTOCOL_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_XTS_PROTOCOL_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_PROTOCOL_UE]

//>> SET_[FIR_REG_0_XTS_PROTOCOL_UE]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_PROTOCOL_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_XTS_PROTOCOL_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_XTS_PROTOCOL_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_PROTOCOL_UE]

//>> CLEAR_[FIR_REG_0_XTS_PROTOCOL_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_XTS_PROTOCOL_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_XTS_PROTOCOL_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_XTS_PROTOCOL_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_XTS_PROTOCOL_UE]

//>> GET_[FIR_REG_0_XTS_PROTOCOL_UE]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_XTS_PROTOCOL_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_XTS_PROTOCOL_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_XTS_PROTOCOL_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_XTS_PROTOCOL_UE]

//>> GET_[FIR_REG_0_XTS_PROTOCOL_UE]
static inline bool GET_FIR_REG_0_XTS_PROTOCOL_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_XTS_PROTOCOL_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_XTS_PROTOCOL_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_XTS_PROTOCOL_UE]

//>> SET_[FIR_REG_0_XTS_PBUS_PROTOCOL]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_PBUS_PROTOCOL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_XTS_PBUS_PROTOCOL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_XTS_PBUS_PROTOCOL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_PBUS_PROTOCOL]

//>> SET_[FIR_REG_0_XTS_PBUS_PROTOCOL]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_PBUS_PROTOCOL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_XTS_PBUS_PROTOCOL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_XTS_PBUS_PROTOCOL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_PBUS_PROTOCOL]

//>> SET_[FIR_REG_0_XTS_PBUS_PROTOCOL]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_PBUS_PROTOCOL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_XTS_PBUS_PROTOCOL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_XTS_PBUS_PROTOCOL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_PBUS_PROTOCOL]

//>> CLEAR_[FIR_REG_0_XTS_PBUS_PROTOCOL]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_XTS_PBUS_PROTOCOL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_XTS_PBUS_PROTOCOL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_XTS_PBUS_PROTOCOL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_XTS_PBUS_PROTOCOL]

//>> GET_[FIR_REG_0_XTS_PBUS_PROTOCOL]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_XTS_PBUS_PROTOCOL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_XTS_PBUS_PROTOCOL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_XTS_PBUS_PROTOCOL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_XTS_PBUS_PROTOCOL]

//>> GET_[FIR_REG_0_XTS_PBUS_PROTOCOL]
static inline bool GET_FIR_REG_0_XTS_PBUS_PROTOCOL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_XTS_PBUS_PROTOCOL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_XTS_PBUS_PROTOCOL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_XTS_PBUS_PROTOCOL]

//>> SET_[FIR_REG_0_XTS_RSVD_6]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_RSVD_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_XTS_RSVD_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_RSVD_6]

//>> SET_[FIR_REG_0_XTS_RSVD_6]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_RSVD_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_XTS_RSVD_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_RSVD_6]

//>> SET_[FIR_REG_0_XTS_RSVD_6]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_RSVD_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_XTS_RSVD_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_RSVD_6]

//>> CLEAR_[FIR_REG_0_XTS_RSVD_6]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_XTS_RSVD_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_XTS_RSVD_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_XTS_RSVD_6]

//>> GET_[FIR_REG_0_XTS_RSVD_6]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_XTS_RSVD_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_XTS_RSVD_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_XTS_RSVD_6]

//>> GET_[FIR_REG_0_XTS_RSVD_6]
static inline bool GET_FIR_REG_0_XTS_RSVD_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_XTS_RSVD_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_XTS_RSVD_6]

//>> SET_[FIR_REG_0_XTS_EARLY_HANG_WARN]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_EARLY_HANG_WARN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_XTS_EARLY_HANG_WARN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_XTS_EARLY_HANG_WARN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_EARLY_HANG_WARN]

//>> SET_[FIR_REG_0_XTS_EARLY_HANG_WARN]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_EARLY_HANG_WARN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_XTS_EARLY_HANG_WARN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_XTS_EARLY_HANG_WARN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_EARLY_HANG_WARN]

//>> SET_[FIR_REG_0_XTS_EARLY_HANG_WARN]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_EARLY_HANG_WARN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_XTS_EARLY_HANG_WARN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_XTS_EARLY_HANG_WARN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_EARLY_HANG_WARN]

//>> CLEAR_[FIR_REG_0_XTS_EARLY_HANG_WARN]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_XTS_EARLY_HANG_WARN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_XTS_EARLY_HANG_WARN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_XTS_EARLY_HANG_WARN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_XTS_EARLY_HANG_WARN]

//>> GET_[FIR_REG_0_XTS_EARLY_HANG_WARN]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_XTS_EARLY_HANG_WARN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_XTS_EARLY_HANG_WARN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_XTS_EARLY_HANG_WARN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_XTS_EARLY_HANG_WARN]

//>> GET_[FIR_REG_0_XTS_EARLY_HANG_WARN]
static inline bool GET_FIR_REG_0_XTS_EARLY_HANG_WARN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_XTS_EARLY_HANG_WARN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_XTS_EARLY_HANG_WARN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_XTS_EARLY_HANG_WARN]

//>> SET_[FIR_REG_0_XTS_RSVD_8]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_RSVD_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_XTS_RSVD_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_RSVD_8]

//>> SET_[FIR_REG_0_XTS_RSVD_8]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_RSVD_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_XTS_RSVD_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_RSVD_8]

//>> SET_[FIR_REG_0_XTS_RSVD_8]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_RSVD_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_XTS_RSVD_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_RSVD_8]

//>> CLEAR_[FIR_REG_0_XTS_RSVD_8]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_XTS_RSVD_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_XTS_RSVD_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_XTS_RSVD_8]

//>> GET_[FIR_REG_0_XTS_RSVD_8]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_XTS_RSVD_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_XTS_RSVD_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_XTS_RSVD_8]

//>> GET_[FIR_REG_0_XTS_RSVD_8]
static inline bool GET_FIR_REG_0_XTS_RSVD_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_XTS_RSVD_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_XTS_RSVD_8]

//>> SET_[FIR_REG_0_XTS_RSVD_9]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_RSVD_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_XTS_RSVD_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_RSVD_9]

//>> SET_[FIR_REG_0_XTS_RSVD_9]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_RSVD_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_XTS_RSVD_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_RSVD_9]

//>> SET_[FIR_REG_0_XTS_RSVD_9]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_RSVD_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_XTS_RSVD_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_RSVD_9]

//>> CLEAR_[FIR_REG_0_XTS_RSVD_9]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_XTS_RSVD_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_XTS_RSVD_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_XTS_RSVD_9]

//>> GET_[FIR_REG_0_XTS_RSVD_9]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_XTS_RSVD_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_XTS_RSVD_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_XTS_RSVD_9]

//>> GET_[FIR_REG_0_XTS_RSVD_9]
static inline bool GET_FIR_REG_0_XTS_RSVD_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_XTS_RSVD_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_XTS_RSVD_9]

//>> SET_[FIR_REG_0_XTS_RSVD_10]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_RSVD_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_XTS_RSVD_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_RSVD_10]

//>> SET_[FIR_REG_0_XTS_RSVD_10]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_RSVD_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_XTS_RSVD_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_RSVD_10]

//>> SET_[FIR_REG_0_XTS_RSVD_10]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_RSVD_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_XTS_RSVD_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_RSVD_10]

//>> CLEAR_[FIR_REG_0_XTS_RSVD_10]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_XTS_RSVD_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_XTS_RSVD_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_XTS_RSVD_10]

//>> GET_[FIR_REG_0_XTS_RSVD_10]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_XTS_RSVD_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_XTS_RSVD_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_XTS_RSVD_10]

//>> GET_[FIR_REG_0_XTS_RSVD_10]
static inline bool GET_FIR_REG_0_XTS_RSVD_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_XTS_RSVD_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_XTS_RSVD_10]

//>> SET_[FIR_REG_0_XTS_RSVD_11]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_RSVD_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_XTS_RSVD_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_RSVD_11]

//>> SET_[FIR_REG_0_XTS_RSVD_11]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_RSVD_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_XTS_RSVD_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_RSVD_11]

//>> SET_[FIR_REG_0_XTS_RSVD_11]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_RSVD_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_XTS_RSVD_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_RSVD_11]

//>> CLEAR_[FIR_REG_0_XTS_RSVD_11]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_XTS_RSVD_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_XTS_RSVD_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_XTS_RSVD_11]

//>> GET_[FIR_REG_0_XTS_RSVD_11]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_XTS_RSVD_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_XTS_RSVD_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_XTS_RSVD_11]

//>> GET_[FIR_REG_0_XTS_RSVD_11]
static inline bool GET_FIR_REG_0_XTS_RSVD_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_XTS_RSVD_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_XTS_RSVD_11]

//>> SET_[FIR_REG_0_XTS_RSVD_12]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_RSVD_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_XTS_RSVD_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_RSVD_12]

//>> SET_[FIR_REG_0_XTS_RSVD_12]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_RSVD_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_XTS_RSVD_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_RSVD_12]

//>> SET_[FIR_REG_0_XTS_RSVD_12]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_RSVD_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_XTS_RSVD_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_RSVD_12]

//>> CLEAR_[FIR_REG_0_XTS_RSVD_12]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_XTS_RSVD_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_XTS_RSVD_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_XTS_RSVD_12]

//>> GET_[FIR_REG_0_XTS_RSVD_12]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_XTS_RSVD_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_XTS_RSVD_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_XTS_RSVD_12]

//>> GET_[FIR_REG_0_XTS_RSVD_12]
static inline bool GET_FIR_REG_0_XTS_RSVD_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_XTS_RSVD_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_XTS_RSVD_12]

//>> SET_[FIR_REG_0_XTS_RSVD_13]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_RSVD_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_XTS_RSVD_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_RSVD_13]

//>> SET_[FIR_REG_0_XTS_RSVD_13]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_RSVD_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_XTS_RSVD_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_RSVD_13]

//>> SET_[FIR_REG_0_XTS_RSVD_13]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_RSVD_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_XTS_RSVD_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_RSVD_13]

//>> CLEAR_[FIR_REG_0_XTS_RSVD_13]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_XTS_RSVD_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_XTS_RSVD_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_XTS_RSVD_13]

//>> GET_[FIR_REG_0_XTS_RSVD_13]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_XTS_RSVD_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_XTS_RSVD_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_XTS_RSVD_13]

//>> GET_[FIR_REG_0_XTS_RSVD_13]
static inline bool GET_FIR_REG_0_XTS_RSVD_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_XTS_RSVD_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_XTS_RSVD_13]

//>> SET_[FIR_REG_0_XTS_RSVD_14]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_RSVD_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_XTS_RSVD_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_RSVD_14]

//>> SET_[FIR_REG_0_XTS_RSVD_14]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_RSVD_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_XTS_RSVD_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_RSVD_14]

//>> SET_[FIR_REG_0_XTS_RSVD_14]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_RSVD_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_XTS_RSVD_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_RSVD_14]

//>> CLEAR_[FIR_REG_0_XTS_RSVD_14]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_XTS_RSVD_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_XTS_RSVD_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_XTS_RSVD_14]

//>> GET_[FIR_REG_0_XTS_RSVD_14]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_XTS_RSVD_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_XTS_RSVD_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_XTS_RSVD_14]

//>> GET_[FIR_REG_0_XTS_RSVD_14]
static inline bool GET_FIR_REG_0_XTS_RSVD_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_XTS_RSVD_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_XTS_RSVD_14]

//>> SET_[FIR_REG_0_XTS_RSVD_15]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_RSVD_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_XTS_RSVD_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_RSVD_15]

//>> SET_[FIR_REG_0_XTS_RSVD_15]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_RSVD_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_XTS_RSVD_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_RSVD_15]

//>> SET_[FIR_REG_0_XTS_RSVD_15]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_RSVD_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_XTS_RSVD_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_RSVD_15]

//>> CLEAR_[FIR_REG_0_XTS_RSVD_15]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_XTS_RSVD_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_XTS_RSVD_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_XTS_RSVD_15]

//>> GET_[FIR_REG_0_XTS_RSVD_15]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_XTS_RSVD_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_XTS_RSVD_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_XTS_RSVD_15]

//>> GET_[FIR_REG_0_XTS_RSVD_15]
static inline bool GET_FIR_REG_0_XTS_RSVD_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_XTS_RSVD_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_XTS_RSVD_15]

//>> SET_[FIR_REG_0_XTS_RSVD_16]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_RSVD_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_XTS_RSVD_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_RSVD_16]

//>> SET_[FIR_REG_0_XTS_RSVD_16]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_RSVD_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_XTS_RSVD_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_RSVD_16]

//>> SET_[FIR_REG_0_XTS_RSVD_16]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_RSVD_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_XTS_RSVD_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_RSVD_16]

//>> CLEAR_[FIR_REG_0_XTS_RSVD_16]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_XTS_RSVD_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_XTS_RSVD_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_XTS_RSVD_16]

//>> GET_[FIR_REG_0_XTS_RSVD_16]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_XTS_RSVD_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_XTS_RSVD_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_XTS_RSVD_16]

//>> GET_[FIR_REG_0_XTS_RSVD_16]
static inline bool GET_FIR_REG_0_XTS_RSVD_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_XTS_RSVD_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_XTS_RSVD_16]

//>> SET_[FIR_REG_0_XTS_RSVD_17]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_RSVD_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_XTS_RSVD_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_RSVD_17]

//>> SET_[FIR_REG_0_XTS_RSVD_17]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_RSVD_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_XTS_RSVD_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_RSVD_17]

//>> SET_[FIR_REG_0_XTS_RSVD_17]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_RSVD_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_XTS_RSVD_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_RSVD_17]

//>> CLEAR_[FIR_REG_0_XTS_RSVD_17]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_XTS_RSVD_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_XTS_RSVD_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_XTS_RSVD_17]

//>> GET_[FIR_REG_0_XTS_RSVD_17]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_XTS_RSVD_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_XTS_RSVD_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_XTS_RSVD_17]

//>> GET_[FIR_REG_0_XTS_RSVD_17]
static inline bool GET_FIR_REG_0_XTS_RSVD_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_XTS_RSVD_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_XTS_RSVD_17]

//>> SET_[FIR_REG_0_XTS_RSVD_18]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_RSVD_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_XTS_RSVD_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_RSVD_18]

//>> SET_[FIR_REG_0_XTS_RSVD_18]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_RSVD_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_XTS_RSVD_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_RSVD_18]

//>> SET_[FIR_REG_0_XTS_RSVD_18]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_XTS_RSVD_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_XTS_RSVD_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_XTS_RSVD_18]

//>> CLEAR_[FIR_REG_0_XTS_RSVD_18]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_XTS_RSVD_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_XTS_RSVD_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_XTS_RSVD_18]

//>> GET_[FIR_REG_0_XTS_RSVD_18]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_XTS_RSVD_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_XTS_RSVD_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_XTS_RSVD_18]

//>> GET_[FIR_REG_0_XTS_RSVD_18]
static inline bool GET_FIR_REG_0_XTS_RSVD_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_XTS_RSVD_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_XTS_RSVD_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_XTS_RSVD_18]

//>> SET_[FIR_REG_0_AME_RSVD_INT]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_AME_RSVD_INT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_AME_RSVD_INT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_AME_RSVD_INT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_AME_RSVD_INT]

//>> SET_[FIR_REG_0_AME_RSVD_INT]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_AME_RSVD_INT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_AME_RSVD_INT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_AME_RSVD_INT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_AME_RSVD_INT]

//>> SET_[FIR_REG_0_AME_RSVD_INT]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_AME_RSVD_INT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_AME_RSVD_INT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_AME_RSVD_INT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_AME_RSVD_INT]

//>> CLEAR_[FIR_REG_0_AME_RSVD_INT]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_AME_RSVD_INT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_AME_RSVD_INT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_AME_RSVD_INT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_AME_RSVD_INT]

//>> GET_[FIR_REG_0_AME_RSVD_INT]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_AME_RSVD_INT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_AME_RSVD_INT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_AME_RSVD_INT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_AME_RSVD_INT]

//>> GET_[FIR_REG_0_AME_RSVD_INT]
static inline bool GET_FIR_REG_0_AME_RSVD_INT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_AME_RSVD_INT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_AME_RSVD_INT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_AME_RSVD_INT]

//>> SET_[FIR_REG_0_AME_RSVD_0]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_AME_RSVD_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_AME_RSVD_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_AME_RSVD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_AME_RSVD_0]

//>> SET_[FIR_REG_0_AME_RSVD_0]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_AME_RSVD_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_AME_RSVD_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_AME_RSVD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_AME_RSVD_0]

//>> SET_[FIR_REG_0_AME_RSVD_0]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_AME_RSVD_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_AME_RSVD_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_AME_RSVD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_AME_RSVD_0]

//>> CLEAR_[FIR_REG_0_AME_RSVD_0]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_AME_RSVD_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_AME_RSVD_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_AME_RSVD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_AME_RSVD_0]

//>> GET_[FIR_REG_0_AME_RSVD_0]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_AME_RSVD_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_AME_RSVD_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_AME_RSVD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_AME_RSVD_0]

//>> GET_[FIR_REG_0_AME_RSVD_0]
static inline bool GET_FIR_REG_0_AME_RSVD_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_AME_RSVD_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_AME_RSVD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_AME_RSVD_0]

//>> SET_[FIR_REG_0_AME_RSVD_1]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_AME_RSVD_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_AME_RSVD_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_AME_RSVD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_AME_RSVD_1]

//>> SET_[FIR_REG_0_AME_RSVD_1]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_AME_RSVD_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_AME_RSVD_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_AME_RSVD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_AME_RSVD_1]

//>> SET_[FIR_REG_0_AME_RSVD_1]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_AME_RSVD_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_AME_RSVD_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_AME_RSVD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_AME_RSVD_1]

//>> CLEAR_[FIR_REG_0_AME_RSVD_1]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_AME_RSVD_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_AME_RSVD_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_AME_RSVD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_AME_RSVD_1]

//>> GET_[FIR_REG_0_AME_RSVD_1]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_AME_RSVD_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_AME_RSVD_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_AME_RSVD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_AME_RSVD_1]

//>> GET_[FIR_REG_0_AME_RSVD_1]
static inline bool GET_FIR_REG_0_AME_RSVD_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_AME_RSVD_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_AME_RSVD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_AME_RSVD_1]

//>> SET_[FIR_REG_0_FIR0_RSVD_62]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_FIR0_RSVD_62(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_FIR0_RSVD_62,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_FIR0_RSVD_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_FIR0_RSVD_62]

//>> SET_[FIR_REG_0_FIR0_RSVD_62]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_FIR0_RSVD_62(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_FIR0_RSVD_62,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_FIR0_RSVD_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_FIR0_RSVD_62]

//>> SET_[FIR_REG_0_FIR0_RSVD_62]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_FIR0_RSVD_62(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_FIR0_RSVD_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_FIR0_RSVD_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_FIR0_RSVD_62]

//>> CLEAR_[FIR_REG_0_FIR0_RSVD_62]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_FIR0_RSVD_62(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_FIR0_RSVD_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_FIR0_RSVD_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_FIR0_RSVD_62]

//>> GET_[FIR_REG_0_FIR0_RSVD_62]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_FIR0_RSVD_62(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_FIR0_RSVD_62,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_FIR0_RSVD_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_FIR0_RSVD_62]

//>> GET_[FIR_REG_0_FIR0_RSVD_62]
static inline bool GET_FIR_REG_0_FIR0_RSVD_62(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_FIR0_RSVD_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_FIR0_RSVD_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_FIR0_RSVD_62]

//>> SET_[FIR_REG_0_FIR0_RSVD_63]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_FIR0_RSVD_63(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_FIR0_RSVD_63,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_REG_0_FIR0_RSVD_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_FIR0_RSVD_63]

//>> SET_[FIR_REG_0_FIR0_RSVD_63]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_FIR0_RSVD_63(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.insertFromRight<FIR_REG_0_FIR0_RSVD_63,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_REG_0_FIR0_RSVD_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_FIR0_RSVD_63]

//>> SET_[FIR_REG_0_FIR0_RSVD_63]
static inline fapi2::buffer<uint64_t>& SET_FIR_REG_0_FIR0_RSVD_63(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.setBit<FIR_REG_0_FIR0_RSVD_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access FIR_REG_0_FIR0_RSVD_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_REG_0_FIR0_RSVD_63]

//>> CLEAR_[FIR_REG_0_FIR0_RSVD_63]
static inline fapi2::buffer<uint64_t>& CLEAR_FIR_REG_0_FIR0_RSVD_63(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return o_data.clearBit<FIR_REG_0_FIR0_RSVD_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access FIR_REG_0_FIR0_RSVD_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[FIR_REG_0_FIR0_RSVD_63]

//>> GET_[FIR_REG_0_FIR0_RSVD_63]
static inline fapi2::buffer<uint64_t>& GET_FIR_REG_0_FIR0_RSVD_63(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.extractToRight<FIR_REG_0_FIR0_RSVD_63,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_REG_0_FIR0_RSVD_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_FIR0_RSVD_63]

//>> GET_[FIR_REG_0_FIR0_RSVD_63]
static inline bool GET_FIR_REG_0_FIR0_RSVD_63(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_REG_0_RW, FIR_REG_0_WO_AND, FIR_REG_0_WO_OR));
#endif
    return i_data.getBit<FIR_REG_0_FIR0_RSVD_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access FIR_REG_0_FIR0_RSVD_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_REG_0_FIR0_RSVD_63]

//>> PREP_[MISC_REGS_BDF2PE_2_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_BDF2PE_2_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_BDF2PE_2_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_BDF2PE_2_CONFIG]

//>> GET_[MISC_REGS_BDF2PE_2_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_BDF2PE_2_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_BDF2PE_2_CONFIG;
#endif
    return fapi2::getScom(i_target, MISC_REGS_BDF2PE_2_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_2_CONFIG]

//>> PUT_[MISC_REGS_BDF2PE_2_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_BDF2PE_2_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_2_CONFIG));
#endif
    return fapi2::putScom(i_target, MISC_REGS_BDF2PE_2_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_BDF2PE_2_CONFIG]


//>> SET_[MISC_REGS_BDF2PE_2_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_2_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_2_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_2_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_BDF2PE_2_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_2_CONFIG_ENABLE]

//>> SET_[MISC_REGS_BDF2PE_2_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_2_CONFIG_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_2_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_2_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_BDF2PE_2_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_2_CONFIG_ENABLE]

//>> SET_[MISC_REGS_BDF2PE_2_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_2_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_2_CONFIG));
#endif
    return o_data.setBit<MISC_REGS_BDF2PE_2_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_BDF2PE_2_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_2_CONFIG_ENABLE]

//>> CLEAR_[MISC_REGS_BDF2PE_2_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_BDF2PE_2_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_2_CONFIG));
#endif
    return o_data.clearBit<MISC_REGS_BDF2PE_2_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_BDF2PE_2_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_BDF2PE_2_CONFIG_ENABLE]

//>> GET_[MISC_REGS_BDF2PE_2_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_2_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_2_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_2_CONFIG_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_BDF2PE_2_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_2_CONFIG_ENABLE]

//>> GET_[MISC_REGS_BDF2PE_2_CONFIG_ENABLE]
static inline bool GET_MISC_REGS_BDF2PE_2_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_2_CONFIG));
#endif
    return i_data.getBit<MISC_REGS_BDF2PE_2_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_BDF2PE_2_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_2_CONFIG_ENABLE]

//>> SET_[MISC_REGS_BDF2PE_2_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_2_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_2_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_2_CONFIG_RESERVED,
           MISC_REGS_BDF2PE_2_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_BDF2PE_2_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_2_CONFIG_RESERVED]

//>> SET_[MISC_REGS_BDF2PE_2_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_2_CONFIG_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_2_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_2_CONFIG_RESERVED,
           MISC_REGS_BDF2PE_2_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_BDF2PE_2_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_2_CONFIG_RESERVED]

//>> GET_[MISC_REGS_BDF2PE_2_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_2_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_2_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_2_CONFIG_RESERVED,
           MISC_REGS_BDF2PE_2_CONFIG_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_BDF2PE_2_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_2_CONFIG_RESERVED]

//>> SET_[MISC_REGS_BDF2PE_2_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_2_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_2_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_2_CONFIG_PE,
           MISC_REGS_BDF2PE_2_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_BDF2PE_2_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_2_CONFIG_PE]

//>> SET_[MISC_REGS_BDF2PE_2_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_2_CONFIG_PE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_2_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_2_CONFIG_PE,
           MISC_REGS_BDF2PE_2_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_BDF2PE_2_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_2_CONFIG_PE]

//>> GET_[MISC_REGS_BDF2PE_2_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_2_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_2_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_2_CONFIG_PE,
           MISC_REGS_BDF2PE_2_CONFIG_PE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_BDF2PE_2_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_2_CONFIG_PE]

//>> SET_[MISC_REGS_BDF2PE_2_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_2_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_2_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_2_CONFIG_BDF,
           MISC_REGS_BDF2PE_2_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_BDF2PE_2_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_2_CONFIG_BDF]

//>> SET_[MISC_REGS_BDF2PE_2_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_2_CONFIG_BDF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_2_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_2_CONFIG_BDF,
           MISC_REGS_BDF2PE_2_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_BDF2PE_2_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_2_CONFIG_BDF]

//>> GET_[MISC_REGS_BDF2PE_2_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_2_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_2_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_2_CONFIG_BDF,
           MISC_REGS_BDF2PE_2_CONFIG_BDF_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_BDF2PE_2_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_2_CONFIG_BDF]

//>> PREP_[MISC_REGS_DA_ADDR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_DA_ADDR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_DA_ADDR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_DA_ADDR]

//>> GET_[MISC_REGS_DA_ADDR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_DA_ADDR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_DA_ADDR;
#endif
    return fapi2::getScom(i_target, MISC_REGS_DA_ADDR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_DA_ADDR]

//>> PUT_[MISC_REGS_DA_ADDR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_DA_ADDR(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_DA_ADDR));
#endif
    return fapi2::putScom(i_target, MISC_REGS_DA_ADDR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_DA_ADDR]


//>> SET_[MISC_REGS_DA_ADDR_ADDR]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DA_ADDR_ADDR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DA_ADDR));
#endif
    return o_data.insertFromRight<MISC_REGS_DA_ADDR_ADDR,
           MISC_REGS_DA_ADDR_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_DA_ADDR_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DA_ADDR_ADDR]

//>> SET_[MISC_REGS_DA_ADDR_ADDR]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DA_ADDR_ADDR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DA_ADDR));
#endif
    return o_data.insertFromRight<MISC_REGS_DA_ADDR_ADDR,
           MISC_REGS_DA_ADDR_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_DA_ADDR_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DA_ADDR_ADDR]

//>> GET_[MISC_REGS_DA_ADDR_ADDR]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_DA_ADDR_ADDR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DA_ADDR));
#endif
    return i_data.extractToRight<MISC_REGS_DA_ADDR_ADDR,
           MISC_REGS_DA_ADDR_ADDR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_DA_ADDR_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_DA_ADDR_ADDR]

//>> SET_[MISC_REGS_DA_ADDR_LEN]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DA_ADDR_LEN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DA_ADDR));
#endif
    return o_data.insertFromRight<MISC_REGS_DA_ADDR_LEN,
           MISC_REGS_DA_ADDR_LEN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_DA_ADDR_LEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DA_ADDR_LEN]

//>> SET_[MISC_REGS_DA_ADDR_LEN]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DA_ADDR_LEN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DA_ADDR));
#endif
    return o_data.insertFromRight<MISC_REGS_DA_ADDR_LEN,
           MISC_REGS_DA_ADDR_LEN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_DA_ADDR_LEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DA_ADDR_LEN]

//>> GET_[MISC_REGS_DA_ADDR_LEN]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_DA_ADDR_LEN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DA_ADDR));
#endif
    return i_data.extractToRight<MISC_REGS_DA_ADDR_LEN,
           MISC_REGS_DA_ADDR_LEN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_DA_ADDR_LEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_DA_ADDR_LEN]

//>> SET_[MISC_REGS_DA_ADDR_RSVD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DA_ADDR_RSVD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DA_ADDR));
#endif
    return o_data.insertFromRight<MISC_REGS_DA_ADDR_RSVD,
           MISC_REGS_DA_ADDR_RSVD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_DA_ADDR_RSVD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DA_ADDR_RSVD]

//>> SET_[MISC_REGS_DA_ADDR_RSVD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DA_ADDR_RSVD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DA_ADDR));
#endif
    return o_data.insertFromRight<MISC_REGS_DA_ADDR_RSVD,
           MISC_REGS_DA_ADDR_RSVD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_DA_ADDR_RSVD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DA_ADDR_RSVD]

//>> GET_[MISC_REGS_DA_ADDR_RSVD]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_DA_ADDR_RSVD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DA_ADDR));
#endif
    return i_data.extractToRight<MISC_REGS_DA_ADDR_RSVD,
           MISC_REGS_DA_ADDR_RSVD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_DA_ADDR_RSVD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_DA_ADDR_RSVD]

//>> PREP_[MISC_REGS_INT_LOG_0_PE14]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_INT_LOG_0_PE14(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_0_PE14;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_INT_LOG_0_PE14]

//>> GET_[MISC_REGS_INT_LOG_0_PE14]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_INT_LOG_0_PE14(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_0_PE14;
#endif
    return fapi2::getScom(i_target, MISC_REGS_INT_LOG_0_PE14, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE14]

//>> PUT_[MISC_REGS_INT_LOG_0_PE14]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_INT_LOG_0_PE14(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE14));
#endif
    return fapi2::putScom(i_target, MISC_REGS_INT_LOG_0_PE14, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_INT_LOG_0_PE14]


//>> SET_[MISC_REGS_INT_LOG_0_PE14_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE14_VLD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE14));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE14_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE14_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE14_VLD]

//>> SET_[MISC_REGS_INT_LOG_0_PE14_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE14_VLD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE14));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE14_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE14_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE14_VLD]

//>> SET_[MISC_REGS_INT_LOG_0_PE14_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE14_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE14));
#endif
    return o_data.setBit<MISC_REGS_INT_LOG_0_PE14_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE14_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE14_VLD]

//>> CLEAR_[MISC_REGS_INT_LOG_0_PE14_VLD]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_INT_LOG_0_PE14_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE14));
#endif
    return o_data.clearBit<MISC_REGS_INT_LOG_0_PE14_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE14_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_INT_LOG_0_PE14_VLD]

//>> GET_[MISC_REGS_INT_LOG_0_PE14_VLD]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_0_PE14_VLD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE14));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_0_PE14_VLD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE14_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE14_VLD]

//>> GET_[MISC_REGS_INT_LOG_0_PE14_VLD]
static inline bool GET_MISC_REGS_INT_LOG_0_PE14_VLD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE14));
#endif
    return i_data.getBit<MISC_REGS_INT_LOG_0_PE14_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE14_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE14_VLD]

//>> SET_[MISC_REGS_INT_LOG_0_PE14_LVL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE14_LVL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE14));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE14_LVL,
           MISC_REGS_INT_LOG_0_PE14_LVL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE14_LVL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE14_LVL]

//>> SET_[MISC_REGS_INT_LOG_0_PE14_LVL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE14_LVL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE14));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE14_LVL,
           MISC_REGS_INT_LOG_0_PE14_LVL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE14_LVL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE14_LVL]

//>> GET_[MISC_REGS_INT_LOG_0_PE14_LVL]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_0_PE14_LVL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE14));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_0_PE14_LVL,
           MISC_REGS_INT_LOG_0_PE14_LVL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE14_LVL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE14_LVL]

//>> SET_[MISC_REGS_INT_LOG_0_PE14_RSVD0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE14_RSVD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE14));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE14_RSVD0,
           MISC_REGS_INT_LOG_0_PE14_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE14_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE14_RSVD0]

//>> SET_[MISC_REGS_INT_LOG_0_PE14_RSVD0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE14_RSVD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE14));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE14_RSVD0,
           MISC_REGS_INT_LOG_0_PE14_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE14_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE14_RSVD0]

//>> GET_[MISC_REGS_INT_LOG_0_PE14_RSVD0]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_0_PE14_RSVD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE14));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_0_PE14_RSVD0,
           MISC_REGS_INT_LOG_0_PE14_RSVD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE14_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE14_RSVD0]

//>> PREP_[MISC_REGS_INT_LOG_0_PE6]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_INT_LOG_0_PE6(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_0_PE6;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_INT_LOG_0_PE6]

//>> GET_[MISC_REGS_INT_LOG_0_PE6]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_INT_LOG_0_PE6(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_0_PE6;
#endif
    return fapi2::getScom(i_target, MISC_REGS_INT_LOG_0_PE6, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE6]

//>> PUT_[MISC_REGS_INT_LOG_0_PE6]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_INT_LOG_0_PE6(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE6));
#endif
    return fapi2::putScom(i_target, MISC_REGS_INT_LOG_0_PE6, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_INT_LOG_0_PE6]


//>> SET_[MISC_REGS_INT_LOG_0_PE6_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE6_VLD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE6));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE6_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE6_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE6_VLD]

//>> SET_[MISC_REGS_INT_LOG_0_PE6_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE6_VLD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE6));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE6_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE6_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE6_VLD]

//>> SET_[MISC_REGS_INT_LOG_0_PE6_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE6_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE6));
#endif
    return o_data.setBit<MISC_REGS_INT_LOG_0_PE6_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE6_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE6_VLD]

//>> CLEAR_[MISC_REGS_INT_LOG_0_PE6_VLD]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_INT_LOG_0_PE6_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE6));
#endif
    return o_data.clearBit<MISC_REGS_INT_LOG_0_PE6_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE6_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_INT_LOG_0_PE6_VLD]

//>> GET_[MISC_REGS_INT_LOG_0_PE6_VLD]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_0_PE6_VLD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE6));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_0_PE6_VLD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE6_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE6_VLD]

//>> GET_[MISC_REGS_INT_LOG_0_PE6_VLD]
static inline bool GET_MISC_REGS_INT_LOG_0_PE6_VLD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE6));
#endif
    return i_data.getBit<MISC_REGS_INT_LOG_0_PE6_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE6_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE6_VLD]

//>> SET_[MISC_REGS_INT_LOG_0_PE6_LVL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE6_LVL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE6));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE6_LVL,
           MISC_REGS_INT_LOG_0_PE6_LVL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE6_LVL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE6_LVL]

//>> SET_[MISC_REGS_INT_LOG_0_PE6_LVL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE6_LVL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE6));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE6_LVL,
           MISC_REGS_INT_LOG_0_PE6_LVL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE6_LVL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE6_LVL]

//>> GET_[MISC_REGS_INT_LOG_0_PE6_LVL]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_0_PE6_LVL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE6));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_0_PE6_LVL,
           MISC_REGS_INT_LOG_0_PE6_LVL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE6_LVL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE6_LVL]

//>> SET_[MISC_REGS_INT_LOG_0_PE6_RSVD0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE6_RSVD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE6));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE6_RSVD0,
           MISC_REGS_INT_LOG_0_PE6_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE6_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE6_RSVD0]

//>> SET_[MISC_REGS_INT_LOG_0_PE6_RSVD0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE6_RSVD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE6));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE6_RSVD0,
           MISC_REGS_INT_LOG_0_PE6_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE6_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE6_RSVD0]

//>> GET_[MISC_REGS_INT_LOG_0_PE6_RSVD0]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_0_PE6_RSVD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE6));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_0_PE6_RSVD0,
           MISC_REGS_INT_LOG_0_PE6_RSVD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE6_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE6_RSVD0]

//>> PREP_[MISC_REGS_INT_LOG_1_PE12]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_INT_LOG_1_PE12(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_1_PE12;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_INT_LOG_1_PE12]

//>> GET_[MISC_REGS_INT_LOG_1_PE12]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_INT_LOG_1_PE12(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_1_PE12;
#endif
    return fapi2::getScom(i_target, MISC_REGS_INT_LOG_1_PE12, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE12]

//>> PUT_[MISC_REGS_INT_LOG_1_PE12]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_INT_LOG_1_PE12(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE12));
#endif
    return fapi2::putScom(i_target, MISC_REGS_INT_LOG_1_PE12, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_INT_LOG_1_PE12]


//>> SET_[MISC_REGS_INT_LOG_1_PE12_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE12_VLD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE12));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE12_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE12_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE12_VLD]

//>> SET_[MISC_REGS_INT_LOG_1_PE12_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE12_VLD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE12));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE12_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE12_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE12_VLD]

//>> SET_[MISC_REGS_INT_LOG_1_PE12_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE12_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE12));
#endif
    return o_data.setBit<MISC_REGS_INT_LOG_1_PE12_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE12_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE12_VLD]

//>> CLEAR_[MISC_REGS_INT_LOG_1_PE12_VLD]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_INT_LOG_1_PE12_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE12));
#endif
    return o_data.clearBit<MISC_REGS_INT_LOG_1_PE12_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE12_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_INT_LOG_1_PE12_VLD]

//>> GET_[MISC_REGS_INT_LOG_1_PE12_VLD]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE12_VLD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE12));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE12_VLD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE12_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE12_VLD]

//>> GET_[MISC_REGS_INT_LOG_1_PE12_VLD]
static inline bool GET_MISC_REGS_INT_LOG_1_PE12_VLD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE12));
#endif
    return i_data.getBit<MISC_REGS_INT_LOG_1_PE12_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE12_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE12_VLD]

//>> SET_[MISC_REGS_INT_LOG_1_PE12_DETAIL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE12_DETAIL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE12));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE12_DETAIL,
           MISC_REGS_INT_LOG_1_PE12_DETAIL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE12_DETAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE12_DETAIL]

//>> SET_[MISC_REGS_INT_LOG_1_PE12_DETAIL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE12_DETAIL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE12));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE12_DETAIL,
           MISC_REGS_INT_LOG_1_PE12_DETAIL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE12_DETAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE12_DETAIL]

//>> GET_[MISC_REGS_INT_LOG_1_PE12_DETAIL]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE12_DETAIL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE12));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE12_DETAIL,
           MISC_REGS_INT_LOG_1_PE12_DETAIL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE12_DETAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE12_DETAIL]

//>> SET_[MISC_REGS_INT_LOG_1_PE12_CQ]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE12_CQ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE12));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE12_CQ,
           MISC_REGS_INT_LOG_1_PE12_CQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE12_CQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE12_CQ]

//>> SET_[MISC_REGS_INT_LOG_1_PE12_CQ]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE12_CQ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE12));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE12_CQ,
           MISC_REGS_INT_LOG_1_PE12_CQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE12_CQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE12_CQ]

//>> GET_[MISC_REGS_INT_LOG_1_PE12_CQ]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE12_CQ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE12));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE12_CQ,
           MISC_REGS_INT_LOG_1_PE12_CQ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE12_CQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE12_CQ]

//>> SET_[MISC_REGS_INT_LOG_1_PE12_RSVD0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE12_RSVD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE12));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE12_RSVD0,
           MISC_REGS_INT_LOG_1_PE12_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE12_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE12_RSVD0]

//>> SET_[MISC_REGS_INT_LOG_1_PE12_RSVD0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE12_RSVD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE12));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE12_RSVD0,
           MISC_REGS_INT_LOG_1_PE12_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE12_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE12_RSVD0]

//>> GET_[MISC_REGS_INT_LOG_1_PE12_RSVD0]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE12_RSVD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE12));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE12_RSVD0,
           MISC_REGS_INT_LOG_1_PE12_RSVD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE12_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE12_RSVD0]

//>> PREP_[MISC_REGS_INT_LOG_1_PE6]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_INT_LOG_1_PE6(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_1_PE6;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_INT_LOG_1_PE6]

//>> GET_[MISC_REGS_INT_LOG_1_PE6]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_INT_LOG_1_PE6(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_1_PE6;
#endif
    return fapi2::getScom(i_target, MISC_REGS_INT_LOG_1_PE6, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE6]

//>> PUT_[MISC_REGS_INT_LOG_1_PE6]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_INT_LOG_1_PE6(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE6));
#endif
    return fapi2::putScom(i_target, MISC_REGS_INT_LOG_1_PE6, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_INT_LOG_1_PE6]


//>> SET_[MISC_REGS_INT_LOG_1_PE6_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE6_VLD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE6));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE6_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE6_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE6_VLD]

//>> SET_[MISC_REGS_INT_LOG_1_PE6_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE6_VLD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE6));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE6_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE6_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE6_VLD]

//>> SET_[MISC_REGS_INT_LOG_1_PE6_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE6_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE6));
#endif
    return o_data.setBit<MISC_REGS_INT_LOG_1_PE6_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE6_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE6_VLD]

//>> CLEAR_[MISC_REGS_INT_LOG_1_PE6_VLD]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_INT_LOG_1_PE6_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE6));
#endif
    return o_data.clearBit<MISC_REGS_INT_LOG_1_PE6_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE6_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_INT_LOG_1_PE6_VLD]

//>> GET_[MISC_REGS_INT_LOG_1_PE6_VLD]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE6_VLD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE6));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE6_VLD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE6_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE6_VLD]

//>> GET_[MISC_REGS_INT_LOG_1_PE6_VLD]
static inline bool GET_MISC_REGS_INT_LOG_1_PE6_VLD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE6));
#endif
    return i_data.getBit<MISC_REGS_INT_LOG_1_PE6_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE6_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE6_VLD]

//>> SET_[MISC_REGS_INT_LOG_1_PE6_DETAIL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE6_DETAIL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE6));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE6_DETAIL,
           MISC_REGS_INT_LOG_1_PE6_DETAIL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE6_DETAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE6_DETAIL]

//>> SET_[MISC_REGS_INT_LOG_1_PE6_DETAIL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE6_DETAIL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE6));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE6_DETAIL,
           MISC_REGS_INT_LOG_1_PE6_DETAIL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE6_DETAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE6_DETAIL]

//>> GET_[MISC_REGS_INT_LOG_1_PE6_DETAIL]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE6_DETAIL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE6));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE6_DETAIL,
           MISC_REGS_INT_LOG_1_PE6_DETAIL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE6_DETAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE6_DETAIL]

//>> SET_[MISC_REGS_INT_LOG_1_PE6_CQ]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE6_CQ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE6));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE6_CQ,
           MISC_REGS_INT_LOG_1_PE6_CQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE6_CQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE6_CQ]

//>> SET_[MISC_REGS_INT_LOG_1_PE6_CQ]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE6_CQ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE6));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE6_CQ,
           MISC_REGS_INT_LOG_1_PE6_CQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE6_CQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE6_CQ]

//>> GET_[MISC_REGS_INT_LOG_1_PE6_CQ]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE6_CQ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE6));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE6_CQ,
           MISC_REGS_INT_LOG_1_PE6_CQ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE6_CQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE6_CQ]

//>> SET_[MISC_REGS_INT_LOG_1_PE6_RSVD0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE6_RSVD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE6));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE6_RSVD0,
           MISC_REGS_INT_LOG_1_PE6_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE6_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE6_RSVD0]

//>> SET_[MISC_REGS_INT_LOG_1_PE6_RSVD0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE6_RSVD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE6));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE6_RSVD0,
           MISC_REGS_INT_LOG_1_PE6_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE6_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE6_RSVD0]

//>> GET_[MISC_REGS_INT_LOG_1_PE6_RSVD0]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE6_RSVD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE6));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE6_RSVD0,
           MISC_REGS_INT_LOG_1_PE6_RSVD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE6_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE6_RSVD0]

//>> PREP_[MISC_REGS_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_CONFIG]

//>> GET_[MISC_REGS_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_CONFIG;
#endif
    return fapi2::getScom(i_target, MISC_REGS_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_CONFIG]

//>> PUT_[MISC_REGS_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_CONFIG(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return fapi2::putScom(i_target, MISC_REGS_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_CONFIG]


//>> SET_[MISC_REGS_CONFIG_CONFIG_SYNC_WAIT]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_CONFIG_CONFIG_SYNC_WAIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_CONFIG_CONFIG_SYNC_WAIT,
           MISC_REGS_CONFIG_CONFIG_SYNC_WAIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_CONFIG_CONFIG_SYNC_WAIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_CONFIG_CONFIG_SYNC_WAIT]

//>> SET_[MISC_REGS_CONFIG_CONFIG_SYNC_WAIT]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_CONFIG_CONFIG_SYNC_WAIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_CONFIG_CONFIG_SYNC_WAIT,
           MISC_REGS_CONFIG_CONFIG_SYNC_WAIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_CONFIG_CONFIG_SYNC_WAIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_CONFIG_CONFIG_SYNC_WAIT]

//>> GET_[MISC_REGS_CONFIG_CONFIG_SYNC_WAIT]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_CONFIG_CONFIG_SYNC_WAIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_CONFIG_CONFIG_SYNC_WAIT,
           MISC_REGS_CONFIG_CONFIG_SYNC_WAIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_CONFIG_CONFIG_SYNC_WAIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_CONFIG_CONFIG_SYNC_WAIT]

//>> SET_[MISC_REGS_CONFIG_PERF_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_CONFIG_PERF_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_CONFIG_PERF_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_CONFIG_PERF_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_CONFIG_PERF_CONFIG_ENABLE]

//>> SET_[MISC_REGS_CONFIG_PERF_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_CONFIG_PERF_CONFIG_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_CONFIG_PERF_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_CONFIG_PERF_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_CONFIG_PERF_CONFIG_ENABLE]

//>> SET_[MISC_REGS_CONFIG_PERF_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_CONFIG_PERF_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return o_data.setBit<MISC_REGS_CONFIG_PERF_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_CONFIG_PERF_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_CONFIG_PERF_CONFIG_ENABLE]

//>> CLEAR_[MISC_REGS_CONFIG_PERF_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_CONFIG_PERF_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return o_data.clearBit<MISC_REGS_CONFIG_PERF_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_CONFIG_PERF_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_CONFIG_PERF_CONFIG_ENABLE]

//>> GET_[MISC_REGS_CONFIG_PERF_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_CONFIG_PERF_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_CONFIG_PERF_CONFIG_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_CONFIG_PERF_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_CONFIG_PERF_CONFIG_ENABLE]

//>> GET_[MISC_REGS_CONFIG_PERF_CONFIG_ENABLE]
static inline bool GET_MISC_REGS_CONFIG_PERF_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return i_data.getBit<MISC_REGS_CONFIG_PERF_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_CONFIG_PERF_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_CONFIG_PERF_CONFIG_ENABLE]

//>> SET_[MISC_REGS_CONFIG_PERF_CONFIG_PE_MASK]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_CONFIG_PERF_CONFIG_PE_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_CONFIG_PERF_CONFIG_PE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_CONFIG_PERF_CONFIG_PE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_CONFIG_PERF_CONFIG_PE_MASK]

//>> SET_[MISC_REGS_CONFIG_PERF_CONFIG_PE_MASK]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_CONFIG_PERF_CONFIG_PE_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_CONFIG_PERF_CONFIG_PE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_CONFIG_PERF_CONFIG_PE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_CONFIG_PERF_CONFIG_PE_MASK]

//>> SET_[MISC_REGS_CONFIG_PERF_CONFIG_PE_MASK]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_CONFIG_PERF_CONFIG_PE_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return o_data.setBit<MISC_REGS_CONFIG_PERF_CONFIG_PE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_CONFIG_PERF_CONFIG_PE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_CONFIG_PERF_CONFIG_PE_MASK]

//>> CLEAR_[MISC_REGS_CONFIG_PERF_CONFIG_PE_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_CONFIG_PERF_CONFIG_PE_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return o_data.clearBit<MISC_REGS_CONFIG_PERF_CONFIG_PE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_CONFIG_PERF_CONFIG_PE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_CONFIG_PERF_CONFIG_PE_MASK]

//>> GET_[MISC_REGS_CONFIG_PERF_CONFIG_PE_MASK]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_CONFIG_PERF_CONFIG_PE_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_CONFIG_PERF_CONFIG_PE_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_CONFIG_PERF_CONFIG_PE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_CONFIG_PERF_CONFIG_PE_MASK]

//>> GET_[MISC_REGS_CONFIG_PERF_CONFIG_PE_MASK]
static inline bool GET_MISC_REGS_CONFIG_PERF_CONFIG_PE_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return i_data.getBit<MISC_REGS_CONFIG_PERF_CONFIG_PE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_CONFIG_PERF_CONFIG_PE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_CONFIG_PERF_CONFIG_PE_MASK]

//>> SET_[MISC_REGS_CONFIG_PERF_CONFIG_PE_MATCH]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_CONFIG_PERF_CONFIG_PE_MATCH(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_CONFIG_PERF_CONFIG_PE_MATCH,
           MISC_REGS_CONFIG_PERF_CONFIG_PE_MATCH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_CONFIG_PERF_CONFIG_PE_MATCH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_CONFIG_PERF_CONFIG_PE_MATCH]

//>> SET_[MISC_REGS_CONFIG_PERF_CONFIG_PE_MATCH]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_CONFIG_PERF_CONFIG_PE_MATCH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_CONFIG_PERF_CONFIG_PE_MATCH,
           MISC_REGS_CONFIG_PERF_CONFIG_PE_MATCH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_CONFIG_PERF_CONFIG_PE_MATCH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_CONFIG_PERF_CONFIG_PE_MATCH]

//>> GET_[MISC_REGS_CONFIG_PERF_CONFIG_PE_MATCH]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_CONFIG_PERF_CONFIG_PE_MATCH(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_CONFIG_PERF_CONFIG_PE_MATCH,
           MISC_REGS_CONFIG_PERF_CONFIG_PE_MATCH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_CONFIG_PERF_CONFIG_PE_MATCH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_CONFIG_PERF_CONFIG_PE_MATCH]

//>> SET_[MISC_REGS_CONFIG_IPI_PS]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_CONFIG_IPI_PS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_CONFIG_IPI_PS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_CONFIG_IPI_PS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_CONFIG_IPI_PS]

//>> SET_[MISC_REGS_CONFIG_IPI_PS]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_CONFIG_IPI_PS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_CONFIG_IPI_PS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_CONFIG_IPI_PS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_CONFIG_IPI_PS]

//>> SET_[MISC_REGS_CONFIG_IPI_PS]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_CONFIG_IPI_PS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return o_data.setBit<MISC_REGS_CONFIG_IPI_PS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_CONFIG_IPI_PS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_CONFIG_IPI_PS]

//>> CLEAR_[MISC_REGS_CONFIG_IPI_PS]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_CONFIG_IPI_PS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return o_data.clearBit<MISC_REGS_CONFIG_IPI_PS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_CONFIG_IPI_PS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_CONFIG_IPI_PS]

//>> GET_[MISC_REGS_CONFIG_IPI_PS]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_CONFIG_IPI_PS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_CONFIG_IPI_PS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_CONFIG_IPI_PS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_CONFIG_IPI_PS]

//>> GET_[MISC_REGS_CONFIG_IPI_PS]
static inline bool GET_MISC_REGS_CONFIG_IPI_PS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return i_data.getBit<MISC_REGS_CONFIG_IPI_PS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_CONFIG_IPI_PS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_CONFIG_IPI_PS]

//>> SET_[MISC_REGS_CONFIG_IPI_OS]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_CONFIG_IPI_OS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_CONFIG_IPI_OS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_CONFIG_IPI_OS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_CONFIG_IPI_OS]

//>> SET_[MISC_REGS_CONFIG_IPI_OS]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_CONFIG_IPI_OS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_CONFIG_IPI_OS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_CONFIG_IPI_OS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_CONFIG_IPI_OS]

//>> SET_[MISC_REGS_CONFIG_IPI_OS]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_CONFIG_IPI_OS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return o_data.setBit<MISC_REGS_CONFIG_IPI_OS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_CONFIG_IPI_OS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_CONFIG_IPI_OS]

//>> CLEAR_[MISC_REGS_CONFIG_IPI_OS]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_CONFIG_IPI_OS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return o_data.clearBit<MISC_REGS_CONFIG_IPI_OS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_CONFIG_IPI_OS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_CONFIG_IPI_OS]

//>> GET_[MISC_REGS_CONFIG_IPI_OS]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_CONFIG_IPI_OS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_CONFIG_IPI_OS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_CONFIG_IPI_OS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_CONFIG_IPI_OS]

//>> GET_[MISC_REGS_CONFIG_IPI_OS]
static inline bool GET_MISC_REGS_CONFIG_IPI_OS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return i_data.getBit<MISC_REGS_CONFIG_IPI_OS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_CONFIG_IPI_OS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_CONFIG_IPI_OS]

//>> SET_[MISC_REGS_CONFIG_OC_ATS_SYNC_START]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_CONFIG_OC_ATS_SYNC_START(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_CONFIG_OC_ATS_SYNC_START,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_CONFIG_OC_ATS_SYNC_START chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_CONFIG_OC_ATS_SYNC_START]

//>> SET_[MISC_REGS_CONFIG_OC_ATS_SYNC_START]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_CONFIG_OC_ATS_SYNC_START(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_CONFIG_OC_ATS_SYNC_START,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_CONFIG_OC_ATS_SYNC_START chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_CONFIG_OC_ATS_SYNC_START]

//>> SET_[MISC_REGS_CONFIG_OC_ATS_SYNC_START]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_CONFIG_OC_ATS_SYNC_START(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return o_data.setBit<MISC_REGS_CONFIG_OC_ATS_SYNC_START>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_CONFIG_OC_ATS_SYNC_START chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_CONFIG_OC_ATS_SYNC_START]

//>> CLEAR_[MISC_REGS_CONFIG_OC_ATS_SYNC_START]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_CONFIG_OC_ATS_SYNC_START(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return o_data.clearBit<MISC_REGS_CONFIG_OC_ATS_SYNC_START>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_CONFIG_OC_ATS_SYNC_START chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_CONFIG_OC_ATS_SYNC_START]

//>> GET_[MISC_REGS_CONFIG_OC_ATS_SYNC_START]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_CONFIG_OC_ATS_SYNC_START(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_CONFIG_OC_ATS_SYNC_START,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_CONFIG_OC_ATS_SYNC_START chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_CONFIG_OC_ATS_SYNC_START]

//>> GET_[MISC_REGS_CONFIG_OC_ATS_SYNC_START]
static inline bool GET_MISC_REGS_CONFIG_OC_ATS_SYNC_START(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return i_data.getBit<MISC_REGS_CONFIG_OC_ATS_SYNC_START>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_CONFIG_OC_ATS_SYNC_START chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_CONFIG_OC_ATS_SYNC_START]

//>> SET_[MISC_REGS_CONFIG_CQ_RESP_VALID_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_CONFIG_CQ_RESP_VALID_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_CONFIG_CQ_RESP_VALID_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_CONFIG_CQ_RESP_VALID_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_CONFIG_CQ_RESP_VALID_ENABLE]

//>> SET_[MISC_REGS_CONFIG_CQ_RESP_VALID_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_CONFIG_CQ_RESP_VALID_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_CONFIG_CQ_RESP_VALID_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_CONFIG_CQ_RESP_VALID_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_CONFIG_CQ_RESP_VALID_ENABLE]

//>> SET_[MISC_REGS_CONFIG_CQ_RESP_VALID_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_CONFIG_CQ_RESP_VALID_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return o_data.setBit<MISC_REGS_CONFIG_CQ_RESP_VALID_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_CONFIG_CQ_RESP_VALID_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_CONFIG_CQ_RESP_VALID_ENABLE]

//>> CLEAR_[MISC_REGS_CONFIG_CQ_RESP_VALID_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_CONFIG_CQ_RESP_VALID_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return o_data.clearBit<MISC_REGS_CONFIG_CQ_RESP_VALID_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_CONFIG_CQ_RESP_VALID_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_CONFIG_CQ_RESP_VALID_ENABLE]

//>> GET_[MISC_REGS_CONFIG_CQ_RESP_VALID_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_CONFIG_CQ_RESP_VALID_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_CONFIG_CQ_RESP_VALID_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_CONFIG_CQ_RESP_VALID_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_CONFIG_CQ_RESP_VALID_ENABLE]

//>> GET_[MISC_REGS_CONFIG_CQ_RESP_VALID_ENABLE]
static inline bool GET_MISC_REGS_CONFIG_CQ_RESP_VALID_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return i_data.getBit<MISC_REGS_CONFIG_CQ_RESP_VALID_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_CONFIG_CQ_RESP_VALID_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_CONFIG_CQ_RESP_VALID_ENABLE]

//>> SET_[MISC_REGS_CONFIG_NV_MODE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_CONFIG_NV_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_CONFIG_NV_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_CONFIG_NV_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_CONFIG_NV_MODE]

//>> SET_[MISC_REGS_CONFIG_NV_MODE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_CONFIG_NV_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_CONFIG_NV_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_CONFIG_NV_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_CONFIG_NV_MODE]

//>> SET_[MISC_REGS_CONFIG_NV_MODE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_CONFIG_NV_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return o_data.setBit<MISC_REGS_CONFIG_NV_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_CONFIG_NV_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_CONFIG_NV_MODE]

//>> CLEAR_[MISC_REGS_CONFIG_NV_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_CONFIG_NV_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return o_data.clearBit<MISC_REGS_CONFIG_NV_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_CONFIG_NV_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_CONFIG_NV_MODE]

//>> GET_[MISC_REGS_CONFIG_NV_MODE]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_CONFIG_NV_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_CONFIG_NV_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_CONFIG_NV_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_CONFIG_NV_MODE]

//>> GET_[MISC_REGS_CONFIG_NV_MODE]
static inline bool GET_MISC_REGS_CONFIG_NV_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return i_data.getBit<MISC_REGS_CONFIG_NV_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_CONFIG_NV_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_CONFIG_NV_MODE]

//>> SET_[MISC_REGS_CONFIG_OC_MODE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_CONFIG_OC_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_CONFIG_OC_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_CONFIG_OC_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_CONFIG_OC_MODE]

//>> SET_[MISC_REGS_CONFIG_OC_MODE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_CONFIG_OC_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_CONFIG_OC_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_CONFIG_OC_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_CONFIG_OC_MODE]

//>> SET_[MISC_REGS_CONFIG_OC_MODE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_CONFIG_OC_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return o_data.setBit<MISC_REGS_CONFIG_OC_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_CONFIG_OC_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_CONFIG_OC_MODE]

//>> CLEAR_[MISC_REGS_CONFIG_OC_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_CONFIG_OC_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return o_data.clearBit<MISC_REGS_CONFIG_OC_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_CONFIG_OC_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_CONFIG_OC_MODE]

//>> GET_[MISC_REGS_CONFIG_OC_MODE]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_CONFIG_OC_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_CONFIG_OC_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_CONFIG_OC_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_CONFIG_OC_MODE]

//>> GET_[MISC_REGS_CONFIG_OC_MODE]
static inline bool GET_MISC_REGS_CONFIG_OC_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return i_data.getBit<MISC_REGS_CONFIG_OC_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_CONFIG_OC_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_CONFIG_OC_MODE]

//>> SET_[MISC_REGS_CONFIG_AME_MODE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_CONFIG_AME_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_CONFIG_AME_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_CONFIG_AME_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_CONFIG_AME_MODE]

//>> SET_[MISC_REGS_CONFIG_AME_MODE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_CONFIG_AME_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_CONFIG_AME_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_CONFIG_AME_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_CONFIG_AME_MODE]

//>> SET_[MISC_REGS_CONFIG_AME_MODE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_CONFIG_AME_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return o_data.setBit<MISC_REGS_CONFIG_AME_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_CONFIG_AME_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_CONFIG_AME_MODE]

//>> CLEAR_[MISC_REGS_CONFIG_AME_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_CONFIG_AME_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return o_data.clearBit<MISC_REGS_CONFIG_AME_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_CONFIG_AME_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_CONFIG_AME_MODE]

//>> GET_[MISC_REGS_CONFIG_AME_MODE]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_CONFIG_AME_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_CONFIG_AME_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_CONFIG_AME_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_CONFIG_AME_MODE]

//>> GET_[MISC_REGS_CONFIG_AME_MODE]
static inline bool GET_MISC_REGS_CONFIG_AME_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return i_data.getBit<MISC_REGS_CONFIG_AME_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_CONFIG_AME_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_CONFIG_AME_MODE]

//>> SET_[MISC_REGS_CONFIG_CONFIG_MISC_RSVD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_CONFIG_CONFIG_MISC_RSVD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_CONFIG_CONFIG_MISC_RSVD,
           MISC_REGS_CONFIG_CONFIG_MISC_RSVD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_CONFIG_CONFIG_MISC_RSVD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_CONFIG_CONFIG_MISC_RSVD]

//>> SET_[MISC_REGS_CONFIG_CONFIG_MISC_RSVD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_CONFIG_CONFIG_MISC_RSVD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_CONFIG_CONFIG_MISC_RSVD,
           MISC_REGS_CONFIG_CONFIG_MISC_RSVD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_CONFIG_CONFIG_MISC_RSVD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_CONFIG_CONFIG_MISC_RSVD]

//>> GET_[MISC_REGS_CONFIG_CONFIG_MISC_RSVD]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_CONFIG_CONFIG_MISC_RSVD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_CONFIG_CONFIG_MISC_RSVD,
           MISC_REGS_CONFIG_CONFIG_MISC_RSVD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_CONFIG_CONFIG_MISC_RSVD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_CONFIG_CONFIG_MISC_RSVD]

//>> PREP_[MISC_REGS_PESTB_ADDR_PE13]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_PESTB_ADDR_PE13(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_ADDR_PE13;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_PESTB_ADDR_PE13]

//>> GET_[MISC_REGS_PESTB_ADDR_PE13]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_PESTB_ADDR_PE13(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_ADDR_PE13;
#endif
    return fapi2::getScom(i_target, MISC_REGS_PESTB_ADDR_PE13, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_PESTB_ADDR_PE13]

//>> PUT_[MISC_REGS_PESTB_ADDR_PE13]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_PESTB_ADDR_PE13(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE13));
#endif
    return fapi2::putScom(i_target, MISC_REGS_PESTB_ADDR_PE13, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_PESTB_ADDR_PE13]


//>> SET_[MISC_REGS_PESTB_ADDR_PE13_DMA_STOPPED_STATE_ADDR_PE13]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_ADDR_PE13_DMA_STOPPED_STATE_ADDR_PE13(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE13));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_ADDR_PE13_DMA_STOPPED_STATE_ADDR_PE13,
           MISC_REGS_PESTB_ADDR_PE13_DMA_STOPPED_STATE_ADDR_PE13_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_PESTB_ADDR_PE13_DMA_STOPPED_STATE_ADDR_PE13 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_ADDR_PE13_DMA_STOPPED_STATE_ADDR_PE13]

//>> SET_[MISC_REGS_PESTB_ADDR_PE13_DMA_STOPPED_STATE_ADDR_PE13]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_ADDR_PE13_DMA_STOPPED_STATE_ADDR_PE13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE13));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_ADDR_PE13_DMA_STOPPED_STATE_ADDR_PE13,
           MISC_REGS_PESTB_ADDR_PE13_DMA_STOPPED_STATE_ADDR_PE13_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_PESTB_ADDR_PE13_DMA_STOPPED_STATE_ADDR_PE13 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_ADDR_PE13_DMA_STOPPED_STATE_ADDR_PE13]

//>> GET_[MISC_REGS_PESTB_ADDR_PE13_DMA_STOPPED_STATE_ADDR_PE13]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_PESTB_ADDR_PE13_DMA_STOPPED_STATE_ADDR_PE13(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE13));
#endif
    return i_data.extractToRight<MISC_REGS_PESTB_ADDR_PE13_DMA_STOPPED_STATE_ADDR_PE13,
           MISC_REGS_PESTB_ADDR_PE13_DMA_STOPPED_STATE_ADDR_PE13_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_PESTB_ADDR_PE13_DMA_STOPPED_STATE_ADDR_PE13 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_PESTB_ADDR_PE13_DMA_STOPPED_STATE_ADDR_PE13]

//>> PREP_[MISC_REGS_PESTB_ADDR_PE6]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_PESTB_ADDR_PE6(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_ADDR_PE6;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_PESTB_ADDR_PE6]

//>> GET_[MISC_REGS_PESTB_ADDR_PE6]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_PESTB_ADDR_PE6(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_ADDR_PE6;
#endif
    return fapi2::getScom(i_target, MISC_REGS_PESTB_ADDR_PE6, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_PESTB_ADDR_PE6]

//>> PUT_[MISC_REGS_PESTB_ADDR_PE6]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_PESTB_ADDR_PE6(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE6));
#endif
    return fapi2::putScom(i_target, MISC_REGS_PESTB_ADDR_PE6, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_PESTB_ADDR_PE6]


//>> SET_[MISC_REGS_PESTB_ADDR_PE6_DMA_STOPPED_STATE_ADDR_PE6]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_ADDR_PE6_DMA_STOPPED_STATE_ADDR_PE6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE6));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_ADDR_PE6_DMA_STOPPED_STATE_ADDR_PE6,
           MISC_REGS_PESTB_ADDR_PE6_DMA_STOPPED_STATE_ADDR_PE6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_PESTB_ADDR_PE6_DMA_STOPPED_STATE_ADDR_PE6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_ADDR_PE6_DMA_STOPPED_STATE_ADDR_PE6]

//>> SET_[MISC_REGS_PESTB_ADDR_PE6_DMA_STOPPED_STATE_ADDR_PE6]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_ADDR_PE6_DMA_STOPPED_STATE_ADDR_PE6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE6));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_ADDR_PE6_DMA_STOPPED_STATE_ADDR_PE6,
           MISC_REGS_PESTB_ADDR_PE6_DMA_STOPPED_STATE_ADDR_PE6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_PESTB_ADDR_PE6_DMA_STOPPED_STATE_ADDR_PE6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_ADDR_PE6_DMA_STOPPED_STATE_ADDR_PE6]

//>> GET_[MISC_REGS_PESTB_ADDR_PE6_DMA_STOPPED_STATE_ADDR_PE6]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_PESTB_ADDR_PE6_DMA_STOPPED_STATE_ADDR_PE6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE6));
#endif
    return i_data.extractToRight<MISC_REGS_PESTB_ADDR_PE6_DMA_STOPPED_STATE_ADDR_PE6,
           MISC_REGS_PESTB_ADDR_PE6_DMA_STOPPED_STATE_ADDR_PE6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_PESTB_ADDR_PE6_DMA_STOPPED_STATE_ADDR_PE6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_PESTB_ADDR_PE6_DMA_STOPPED_STATE_ADDR_PE6]

//>> PREP_[MISC_REGS_PESTB_DATA_PE13]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_PESTB_DATA_PE13(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_DATA_PE13;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_PESTB_DATA_PE13]

//>> GET_[MISC_REGS_PESTB_DATA_PE13]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_PESTB_DATA_PE13(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_DATA_PE13;
#endif
    return fapi2::getScom(i_target, MISC_REGS_PESTB_DATA_PE13, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_PESTB_DATA_PE13]

//>> PUT_[MISC_REGS_PESTB_DATA_PE13]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_PESTB_DATA_PE13(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE13));
#endif
    return fapi2::putScom(i_target, MISC_REGS_PESTB_DATA_PE13, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_PESTB_DATA_PE13]


//>> SET_[MISC_REGS_PESTB_DATA_PE13_DMA_STOPPED_STATE_PE13]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_DATA_PE13_DMA_STOPPED_STATE_PE13(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE13));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_DATA_PE13_DMA_STOPPED_STATE_PE13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE13_DMA_STOPPED_STATE_PE13 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_DATA_PE13_DMA_STOPPED_STATE_PE13]

//>> SET_[MISC_REGS_PESTB_DATA_PE13_DMA_STOPPED_STATE_PE13]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_DATA_PE13_DMA_STOPPED_STATE_PE13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE13));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_DATA_PE13_DMA_STOPPED_STATE_PE13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE13_DMA_STOPPED_STATE_PE13 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_DATA_PE13_DMA_STOPPED_STATE_PE13]

//>> SET_[MISC_REGS_PESTB_DATA_PE13_DMA_STOPPED_STATE_PE13]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_DATA_PE13_DMA_STOPPED_STATE_PE13(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE13));
#endif
    return o_data.setBit<MISC_REGS_PESTB_DATA_PE13_DMA_STOPPED_STATE_PE13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE13_DMA_STOPPED_STATE_PE13 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_DATA_PE13_DMA_STOPPED_STATE_PE13]

//>> CLEAR_[MISC_REGS_PESTB_DATA_PE13_DMA_STOPPED_STATE_PE13]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_PESTB_DATA_PE13_DMA_STOPPED_STATE_PE13(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE13));
#endif
    return o_data.clearBit<MISC_REGS_PESTB_DATA_PE13_DMA_STOPPED_STATE_PE13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE13_DMA_STOPPED_STATE_PE13 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_PESTB_DATA_PE13_DMA_STOPPED_STATE_PE13]

//>> GET_[MISC_REGS_PESTB_DATA_PE13_DMA_STOPPED_STATE_PE13]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_PESTB_DATA_PE13_DMA_STOPPED_STATE_PE13(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE13));
#endif
    return i_data.extractToRight<MISC_REGS_PESTB_DATA_PE13_DMA_STOPPED_STATE_PE13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE13_DMA_STOPPED_STATE_PE13 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_PESTB_DATA_PE13_DMA_STOPPED_STATE_PE13]

//>> GET_[MISC_REGS_PESTB_DATA_PE13_DMA_STOPPED_STATE_PE13]
static inline bool GET_MISC_REGS_PESTB_DATA_PE13_DMA_STOPPED_STATE_PE13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE13));
#endif
    return i_data.getBit<MISC_REGS_PESTB_DATA_PE13_DMA_STOPPED_STATE_PE13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE13_DMA_STOPPED_STATE_PE13 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_PESTB_DATA_PE13_DMA_STOPPED_STATE_PE13]

//>> PREP_[MISC_REGS_PESTB_DATA_PE5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_PESTB_DATA_PE5(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_DATA_PE5;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_PESTB_DATA_PE5]

//>> GET_[MISC_REGS_PESTB_DATA_PE5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_PESTB_DATA_PE5(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_DATA_PE5;
#endif
    return fapi2::getScom(i_target, MISC_REGS_PESTB_DATA_PE5, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_PESTB_DATA_PE5]

//>> PUT_[MISC_REGS_PESTB_DATA_PE5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_PESTB_DATA_PE5(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE5));
#endif
    return fapi2::putScom(i_target, MISC_REGS_PESTB_DATA_PE5, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_PESTB_DATA_PE5]


//>> SET_[MISC_REGS_PESTB_DATA_PE5_DMA_STOPPED_STATE_PE5]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_DATA_PE5_DMA_STOPPED_STATE_PE5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE5));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_DATA_PE5_DMA_STOPPED_STATE_PE5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE5_DMA_STOPPED_STATE_PE5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_DATA_PE5_DMA_STOPPED_STATE_PE5]

//>> SET_[MISC_REGS_PESTB_DATA_PE5_DMA_STOPPED_STATE_PE5]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_DATA_PE5_DMA_STOPPED_STATE_PE5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE5));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_DATA_PE5_DMA_STOPPED_STATE_PE5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE5_DMA_STOPPED_STATE_PE5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_DATA_PE5_DMA_STOPPED_STATE_PE5]

//>> SET_[MISC_REGS_PESTB_DATA_PE5_DMA_STOPPED_STATE_PE5]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_DATA_PE5_DMA_STOPPED_STATE_PE5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE5));
#endif
    return o_data.setBit<MISC_REGS_PESTB_DATA_PE5_DMA_STOPPED_STATE_PE5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE5_DMA_STOPPED_STATE_PE5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_DATA_PE5_DMA_STOPPED_STATE_PE5]

//>> CLEAR_[MISC_REGS_PESTB_DATA_PE5_DMA_STOPPED_STATE_PE5]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_PESTB_DATA_PE5_DMA_STOPPED_STATE_PE5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE5));
#endif
    return o_data.clearBit<MISC_REGS_PESTB_DATA_PE5_DMA_STOPPED_STATE_PE5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE5_DMA_STOPPED_STATE_PE5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_PESTB_DATA_PE5_DMA_STOPPED_STATE_PE5]

//>> GET_[MISC_REGS_PESTB_DATA_PE5_DMA_STOPPED_STATE_PE5]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_PESTB_DATA_PE5_DMA_STOPPED_STATE_PE5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE5));
#endif
    return i_data.extractToRight<MISC_REGS_PESTB_DATA_PE5_DMA_STOPPED_STATE_PE5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE5_DMA_STOPPED_STATE_PE5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_PESTB_DATA_PE5_DMA_STOPPED_STATE_PE5]

//>> GET_[MISC_REGS_PESTB_DATA_PE5_DMA_STOPPED_STATE_PE5]
static inline bool GET_MISC_REGS_PESTB_DATA_PE5_DMA_STOPPED_STATE_PE5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE5));
#endif
    return i_data.getBit<MISC_REGS_PESTB_DATA_PE5_DMA_STOPPED_STATE_PE5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE5_DMA_STOPPED_STATE_PE5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_PESTB_DATA_PE5_DMA_STOPPED_STATE_PE5]

//>> PREP_[OTL0_MISC_CHKSW0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL0_MISC_CHKSW0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_CHKSW0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL0_MISC_CHKSW0]

//>> GET_[OTL0_MISC_CHKSW0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL0_MISC_CHKSW0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_CHKSW0;
#endif
    return fapi2::getScom(i_target, OTL0_MISC_CHKSW0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL0_MISC_CHKSW0]

//>> PUT_[OTL0_MISC_CHKSW0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL0_MISC_CHKSW0(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return fapi2::putScom(i_target, OTL0_MISC_CHKSW0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL0_MISC_CHKSW0]


//>> SET_[OTL0_MISC_CHKSW0_INHIBIT_EN]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CHKSW0_INHIBIT_EN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CHKSW0_INHIBIT_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CHKSW0_INHIBIT_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CHKSW0_INHIBIT_EN]

//>> SET_[OTL0_MISC_CHKSW0_INHIBIT_EN]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CHKSW0_INHIBIT_EN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CHKSW0_INHIBIT_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CHKSW0_INHIBIT_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CHKSW0_INHIBIT_EN]

//>> SET_[OTL0_MISC_CHKSW0_INHIBIT_EN]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CHKSW0_INHIBIT_EN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return o_data.setBit<OTL0_MISC_CHKSW0_INHIBIT_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_CHKSW0_INHIBIT_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CHKSW0_INHIBIT_EN]

//>> CLEAR_[OTL0_MISC_CHKSW0_INHIBIT_EN]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_CHKSW0_INHIBIT_EN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return o_data.clearBit<OTL0_MISC_CHKSW0_INHIBIT_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_CHKSW0_INHIBIT_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_CHKSW0_INHIBIT_EN]

//>> GET_[OTL0_MISC_CHKSW0_INHIBIT_EN]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CHKSW0_INHIBIT_EN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return i_data.extractToRight<OTL0_MISC_CHKSW0_INHIBIT_EN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CHKSW0_INHIBIT_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CHKSW0_INHIBIT_EN]

//>> GET_[OTL0_MISC_CHKSW0_INHIBIT_EN]
static inline bool GET_OTL0_MISC_CHKSW0_INHIBIT_EN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return i_data.getBit<OTL0_MISC_CHKSW0_INHIBIT_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_CHKSW0_INHIBIT_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CHKSW0_INHIBIT_EN]

//>> SET_[OTL0_MISC_CHKSW0_INHIBIT_PACE_ENABLE_CMD]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CHKSW0_INHIBIT_PACE_ENABLE_CMD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CHKSW0_INHIBIT_PACE_ENABLE_CMD,
           OTL0_MISC_CHKSW0_INHIBIT_PACE_ENABLE_CMD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CHKSW0_INHIBIT_PACE_ENABLE_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CHKSW0_INHIBIT_PACE_ENABLE_CMD]

//>> SET_[OTL0_MISC_CHKSW0_INHIBIT_PACE_ENABLE_CMD]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CHKSW0_INHIBIT_PACE_ENABLE_CMD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CHKSW0_INHIBIT_PACE_ENABLE_CMD,
           OTL0_MISC_CHKSW0_INHIBIT_PACE_ENABLE_CMD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CHKSW0_INHIBIT_PACE_ENABLE_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CHKSW0_INHIBIT_PACE_ENABLE_CMD]

//>> GET_[OTL0_MISC_CHKSW0_INHIBIT_PACE_ENABLE_CMD]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CHKSW0_INHIBIT_PACE_ENABLE_CMD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return i_data.extractToRight<OTL0_MISC_CHKSW0_INHIBIT_PACE_ENABLE_CMD,
           OTL0_MISC_CHKSW0_INHIBIT_PACE_ENABLE_CMD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CHKSW0_INHIBIT_PACE_ENABLE_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CHKSW0_INHIBIT_PACE_ENABLE_CMD]

//>> SET_[OTL0_MISC_CHKSW0_INHIBIT_PACE_DISABLE_CMD]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CHKSW0_INHIBIT_PACE_DISABLE_CMD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CHKSW0_INHIBIT_PACE_DISABLE_CMD,
           OTL0_MISC_CHKSW0_INHIBIT_PACE_DISABLE_CMD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CHKSW0_INHIBIT_PACE_DISABLE_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CHKSW0_INHIBIT_PACE_DISABLE_CMD]

//>> SET_[OTL0_MISC_CHKSW0_INHIBIT_PACE_DISABLE_CMD]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CHKSW0_INHIBIT_PACE_DISABLE_CMD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CHKSW0_INHIBIT_PACE_DISABLE_CMD,
           OTL0_MISC_CHKSW0_INHIBIT_PACE_DISABLE_CMD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CHKSW0_INHIBIT_PACE_DISABLE_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CHKSW0_INHIBIT_PACE_DISABLE_CMD]

//>> GET_[OTL0_MISC_CHKSW0_INHIBIT_PACE_DISABLE_CMD]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CHKSW0_INHIBIT_PACE_DISABLE_CMD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return i_data.extractToRight<OTL0_MISC_CHKSW0_INHIBIT_PACE_DISABLE_CMD,
           OTL0_MISC_CHKSW0_INHIBIT_PACE_DISABLE_CMD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CHKSW0_INHIBIT_PACE_DISABLE_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CHKSW0_INHIBIT_PACE_DISABLE_CMD]

//>> SET_[OTL0_MISC_CHKSW0_INHIBIT_PACE_ENABLE_RESP]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CHKSW0_INHIBIT_PACE_ENABLE_RESP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CHKSW0_INHIBIT_PACE_ENABLE_RESP,
           OTL0_MISC_CHKSW0_INHIBIT_PACE_ENABLE_RESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CHKSW0_INHIBIT_PACE_ENABLE_RESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CHKSW0_INHIBIT_PACE_ENABLE_RESP]

//>> SET_[OTL0_MISC_CHKSW0_INHIBIT_PACE_ENABLE_RESP]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CHKSW0_INHIBIT_PACE_ENABLE_RESP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CHKSW0_INHIBIT_PACE_ENABLE_RESP,
           OTL0_MISC_CHKSW0_INHIBIT_PACE_ENABLE_RESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CHKSW0_INHIBIT_PACE_ENABLE_RESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CHKSW0_INHIBIT_PACE_ENABLE_RESP]

//>> GET_[OTL0_MISC_CHKSW0_INHIBIT_PACE_ENABLE_RESP]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CHKSW0_INHIBIT_PACE_ENABLE_RESP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return i_data.extractToRight<OTL0_MISC_CHKSW0_INHIBIT_PACE_ENABLE_RESP,
           OTL0_MISC_CHKSW0_INHIBIT_PACE_ENABLE_RESP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CHKSW0_INHIBIT_PACE_ENABLE_RESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CHKSW0_INHIBIT_PACE_ENABLE_RESP]

//>> SET_[OTL0_MISC_CHKSW0_INHIBIT_PACE_DISABLE_RESP]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CHKSW0_INHIBIT_PACE_DISABLE_RESP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CHKSW0_INHIBIT_PACE_DISABLE_RESP,
           OTL0_MISC_CHKSW0_INHIBIT_PACE_DISABLE_RESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CHKSW0_INHIBIT_PACE_DISABLE_RESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CHKSW0_INHIBIT_PACE_DISABLE_RESP]

//>> SET_[OTL0_MISC_CHKSW0_INHIBIT_PACE_DISABLE_RESP]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CHKSW0_INHIBIT_PACE_DISABLE_RESP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CHKSW0_INHIBIT_PACE_DISABLE_RESP,
           OTL0_MISC_CHKSW0_INHIBIT_PACE_DISABLE_RESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CHKSW0_INHIBIT_PACE_DISABLE_RESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CHKSW0_INHIBIT_PACE_DISABLE_RESP]

//>> GET_[OTL0_MISC_CHKSW0_INHIBIT_PACE_DISABLE_RESP]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CHKSW0_INHIBIT_PACE_DISABLE_RESP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return i_data.extractToRight<OTL0_MISC_CHKSW0_INHIBIT_PACE_DISABLE_RESP,
           OTL0_MISC_CHKSW0_INHIBIT_PACE_DISABLE_RESP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CHKSW0_INHIBIT_PACE_DISABLE_RESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CHKSW0_INHIBIT_PACE_DISABLE_RESP]

//>> SET_[OTL0_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS]

//>> SET_[OTL0_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS]

//>> SET_[OTL0_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return o_data.setBit<OTL0_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS]

//>> CLEAR_[OTL0_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return o_data.clearBit<OTL0_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS]

//>> GET_[OTL0_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return i_data.extractToRight<OTL0_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS]

//>> GET_[OTL0_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS]
static inline bool GET_OTL0_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return i_data.getBit<OTL0_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CHKSW0_OTL_RXO_SNGLTHRD_XSL_OPS]

//>> SET_[OTL0_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ]

//>> SET_[OTL0_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ]

//>> SET_[OTL0_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return o_data.setBit<OTL0_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ]

//>> CLEAR_[OTL0_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return o_data.clearBit<OTL0_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ]

//>> GET_[OTL0_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return i_data.extractToRight<OTL0_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ]

//>> GET_[OTL0_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ]
static inline bool GET_OTL0_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return i_data.getBit<OTL0_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CHKSW0_OTL_RXO_DIS_EARLY_READ]

//>> SET_[OTL0_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE]

//>> SET_[OTL0_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE]

//>> SET_[OTL0_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return o_data.setBit<OTL0_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE]

//>> CLEAR_[OTL0_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return o_data.clearBit<OTL0_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE]

//>> GET_[OTL0_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return i_data.extractToRight<OTL0_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE]

//>> GET_[OTL0_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE]
static inline bool GET_OTL0_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return i_data.getBit<OTL0_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CHKSW0_OTL_RXO_HW407209_DISABLE]

//>> SET_[OTL0_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE]

//>> SET_[OTL0_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE]

//>> SET_[OTL0_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return o_data.setBit<OTL0_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE]

//>> CLEAR_[OTL0_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return o_data.clearBit<OTL0_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE]

//>> GET_[OTL0_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return i_data.extractToRight<OTL0_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE]

//>> GET_[OTL0_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE]
static inline bool GET_OTL0_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return i_data.getBit<OTL0_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CHKSW0_OTL_RXO_HW407443_DISABLE]

//>> SET_[OTL0_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL]

//>> SET_[OTL0_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL]

//>> SET_[OTL0_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return o_data.setBit<OTL0_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL]

//>> CLEAR_[OTL0_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return o_data.clearBit<OTL0_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL]

//>> GET_[OTL0_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return i_data.extractToRight<OTL0_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL]

//>> GET_[OTL0_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL]
static inline bool GET_OTL0_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return i_data.getBit<OTL0_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CHKSW0_OTL_RXO_CONVERT_DOTN_TO_NORMAL]

//>> SET_[OTL0_MISC_CHKSW0_OTL_CHKSW00]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CHKSW0_OTL_CHKSW00(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CHKSW0_OTL_CHKSW00,
           OTL0_MISC_CHKSW0_OTL_CHKSW00_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CHKSW0_OTL_CHKSW00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CHKSW0_OTL_CHKSW00]

//>> SET_[OTL0_MISC_CHKSW0_OTL_CHKSW00]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CHKSW0_OTL_CHKSW00(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CHKSW0_OTL_CHKSW00,
           OTL0_MISC_CHKSW0_OTL_CHKSW00_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CHKSW0_OTL_CHKSW00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CHKSW0_OTL_CHKSW00]

//>> GET_[OTL0_MISC_CHKSW0_OTL_CHKSW00]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CHKSW0_OTL_CHKSW00(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return i_data.extractToRight<OTL0_MISC_CHKSW0_OTL_CHKSW00,
           OTL0_MISC_CHKSW0_OTL_CHKSW00_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CHKSW0_OTL_CHKSW00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CHKSW0_OTL_CHKSW00]

//>> SET_[OTL0_MISC_CHKSW0_OTL_CHKSW01]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CHKSW0_OTL_CHKSW01(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CHKSW0_OTL_CHKSW01,
           OTL0_MISC_CHKSW0_OTL_CHKSW01_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CHKSW0_OTL_CHKSW01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CHKSW0_OTL_CHKSW01]

//>> SET_[OTL0_MISC_CHKSW0_OTL_CHKSW01]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CHKSW0_OTL_CHKSW01(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CHKSW0_OTL_CHKSW01,
           OTL0_MISC_CHKSW0_OTL_CHKSW01_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CHKSW0_OTL_CHKSW01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CHKSW0_OTL_CHKSW01]

//>> GET_[OTL0_MISC_CHKSW0_OTL_CHKSW01]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CHKSW0_OTL_CHKSW01(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CHKSW0));
#endif
    return i_data.extractToRight<OTL0_MISC_CHKSW0_OTL_CHKSW01,
           OTL0_MISC_CHKSW0_OTL_CHKSW01_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CHKSW0_OTL_CHKSW01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CHKSW0_OTL_CHKSW01]

//>> PREP_[OTL0_MISC_CONFIG_TX2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL0_MISC_CONFIG_TX2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_CONFIG_TX2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL0_MISC_CONFIG_TX2]

//>> GET_[OTL0_MISC_CONFIG_TX2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL0_MISC_CONFIG_TX2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_CONFIG_TX2;
#endif
    return fapi2::getScom(i_target, OTL0_MISC_CONFIG_TX2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_TX2]

//>> PUT_[OTL0_MISC_CONFIG_TX2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL0_MISC_CONFIG_TX2(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TX2));
#endif
    return fapi2::putScom(i_target, OTL0_MISC_CONFIG_TX2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL0_MISC_CONFIG_TX2]


//>> SET_[OTL0_MISC_CONFIG_TX2_TX_SEND_EN]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_TX2_TX_SEND_EN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TX2));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_TX2_TX_SEND_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG_TX2_TX_SEND_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_TX2_TX_SEND_EN]

//>> SET_[OTL0_MISC_CONFIG_TX2_TX_SEND_EN]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_TX2_TX_SEND_EN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TX2));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_TX2_TX_SEND_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG_TX2_TX_SEND_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_TX2_TX_SEND_EN]

//>> SET_[OTL0_MISC_CONFIG_TX2_TX_SEND_EN]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_TX2_TX_SEND_EN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TX2));
#endif
    return o_data.setBit<OTL0_MISC_CONFIG_TX2_TX_SEND_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_CONFIG_TX2_TX_SEND_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_TX2_TX_SEND_EN]

//>> CLEAR_[OTL0_MISC_CONFIG_TX2_TX_SEND_EN]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_CONFIG_TX2_TX_SEND_EN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TX2));
#endif
    return o_data.clearBit<OTL0_MISC_CONFIG_TX2_TX_SEND_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_CONFIG_TX2_TX_SEND_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_CONFIG_TX2_TX_SEND_EN]

//>> GET_[OTL0_MISC_CONFIG_TX2_TX_SEND_EN]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG_TX2_TX_SEND_EN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TX2));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG_TX2_TX_SEND_EN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG_TX2_TX_SEND_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_TX2_TX_SEND_EN]

//>> GET_[OTL0_MISC_CONFIG_TX2_TX_SEND_EN]
static inline bool GET_OTL0_MISC_CONFIG_TX2_TX_SEND_EN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TX2));
#endif
    return i_data.getBit<OTL0_MISC_CONFIG_TX2_TX_SEND_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_CONFIG_TX2_TX_SEND_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_TX2_TX_SEND_EN]

//>> SET_[OTL0_MISC_CONFIG_TX2_TX_SPARE4]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_TX2_TX_SPARE4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TX2));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_TX2_TX_SPARE4,
           OTL0_MISC_CONFIG_TX2_TX_SPARE4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG_TX2_TX_SPARE4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_TX2_TX_SPARE4]

//>> SET_[OTL0_MISC_CONFIG_TX2_TX_SPARE4]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_TX2_TX_SPARE4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TX2));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_TX2_TX_SPARE4,
           OTL0_MISC_CONFIG_TX2_TX_SPARE4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG_TX2_TX_SPARE4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_TX2_TX_SPARE4]

//>> GET_[OTL0_MISC_CONFIG_TX2_TX_SPARE4]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG_TX2_TX_SPARE4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TX2));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG_TX2_TX_SPARE4,
           OTL0_MISC_CONFIG_TX2_TX_SPARE4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG_TX2_TX_SPARE4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_TX2_TX_SPARE4]

//>> SET_[OTL0_MISC_CONFIG_TX2_VC1_THRESH1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_TX2_VC1_THRESH1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TX2));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_TX2_VC1_THRESH1,
           OTL0_MISC_CONFIG_TX2_VC1_THRESH1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG_TX2_VC1_THRESH1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_TX2_VC1_THRESH1]

//>> SET_[OTL0_MISC_CONFIG_TX2_VC1_THRESH1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_TX2_VC1_THRESH1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TX2));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_TX2_VC1_THRESH1,
           OTL0_MISC_CONFIG_TX2_VC1_THRESH1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG_TX2_VC1_THRESH1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_TX2_VC1_THRESH1]

//>> GET_[OTL0_MISC_CONFIG_TX2_VC1_THRESH1]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG_TX2_VC1_THRESH1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TX2));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG_TX2_VC1_THRESH1,
           OTL0_MISC_CONFIG_TX2_VC1_THRESH1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG_TX2_VC1_THRESH1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_TX2_VC1_THRESH1]

//>> SET_[OTL0_MISC_CONFIG_TX2_VC2_THRESH1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_TX2_VC2_THRESH1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TX2));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_TX2_VC2_THRESH1,
           OTL0_MISC_CONFIG_TX2_VC2_THRESH1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG_TX2_VC2_THRESH1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_TX2_VC2_THRESH1]

//>> SET_[OTL0_MISC_CONFIG_TX2_VC2_THRESH1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_TX2_VC2_THRESH1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TX2));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_TX2_VC2_THRESH1,
           OTL0_MISC_CONFIG_TX2_VC2_THRESH1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG_TX2_VC2_THRESH1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_TX2_VC2_THRESH1]

//>> GET_[OTL0_MISC_CONFIG_TX2_VC2_THRESH1]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG_TX2_VC2_THRESH1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TX2));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG_TX2_VC2_THRESH1,
           OTL0_MISC_CONFIG_TX2_VC2_THRESH1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG_TX2_VC2_THRESH1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_TX2_VC2_THRESH1]

//>> SET_[OTL0_MISC_CONFIG_TX2_VC3_THRESH1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_TX2_VC3_THRESH1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TX2));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_TX2_VC3_THRESH1,
           OTL0_MISC_CONFIG_TX2_VC3_THRESH1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG_TX2_VC3_THRESH1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_TX2_VC3_THRESH1]

//>> SET_[OTL0_MISC_CONFIG_TX2_VC3_THRESH1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_TX2_VC3_THRESH1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TX2));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_TX2_VC3_THRESH1,
           OTL0_MISC_CONFIG_TX2_VC3_THRESH1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG_TX2_VC3_THRESH1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_TX2_VC3_THRESH1]

//>> GET_[OTL0_MISC_CONFIG_TX2_VC3_THRESH1]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG_TX2_VC3_THRESH1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TX2));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG_TX2_VC3_THRESH1,
           OTL0_MISC_CONFIG_TX2_VC3_THRESH1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG_TX2_VC3_THRESH1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_TX2_VC3_THRESH1]

//>> SET_[OTL0_MISC_CONFIG_TX2_VC1_THRESH2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_TX2_VC1_THRESH2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TX2));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_TX2_VC1_THRESH2,
           OTL0_MISC_CONFIG_TX2_VC1_THRESH2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG_TX2_VC1_THRESH2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_TX2_VC1_THRESH2]

//>> SET_[OTL0_MISC_CONFIG_TX2_VC1_THRESH2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_TX2_VC1_THRESH2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TX2));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_TX2_VC1_THRESH2,
           OTL0_MISC_CONFIG_TX2_VC1_THRESH2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG_TX2_VC1_THRESH2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_TX2_VC1_THRESH2]

//>> GET_[OTL0_MISC_CONFIG_TX2_VC1_THRESH2]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG_TX2_VC1_THRESH2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TX2));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG_TX2_VC1_THRESH2,
           OTL0_MISC_CONFIG_TX2_VC1_THRESH2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG_TX2_VC1_THRESH2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_TX2_VC1_THRESH2]

//>> SET_[OTL0_MISC_CONFIG_TX2_VC2_THRESH2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_TX2_VC2_THRESH2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TX2));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_TX2_VC2_THRESH2,
           OTL0_MISC_CONFIG_TX2_VC2_THRESH2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG_TX2_VC2_THRESH2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_TX2_VC2_THRESH2]

//>> SET_[OTL0_MISC_CONFIG_TX2_VC2_THRESH2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_TX2_VC2_THRESH2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TX2));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_TX2_VC2_THRESH2,
           OTL0_MISC_CONFIG_TX2_VC2_THRESH2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG_TX2_VC2_THRESH2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_TX2_VC2_THRESH2]

//>> GET_[OTL0_MISC_CONFIG_TX2_VC2_THRESH2]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG_TX2_VC2_THRESH2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TX2));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG_TX2_VC2_THRESH2,
           OTL0_MISC_CONFIG_TX2_VC2_THRESH2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG_TX2_VC2_THRESH2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_TX2_VC2_THRESH2]

//>> SET_[OTL0_MISC_CONFIG_TX2_VC3_THRESH2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_TX2_VC3_THRESH2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TX2));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_TX2_VC3_THRESH2,
           OTL0_MISC_CONFIG_TX2_VC3_THRESH2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG_TX2_VC3_THRESH2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_TX2_VC3_THRESH2]

//>> SET_[OTL0_MISC_CONFIG_TX2_VC3_THRESH2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_TX2_VC3_THRESH2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TX2));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_TX2_VC3_THRESH2,
           OTL0_MISC_CONFIG_TX2_VC3_THRESH2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG_TX2_VC3_THRESH2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_TX2_VC3_THRESH2]

//>> GET_[OTL0_MISC_CONFIG_TX2_VC3_THRESH2]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG_TX2_VC3_THRESH2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TX2));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG_TX2_VC3_THRESH2,
           OTL0_MISC_CONFIG_TX2_VC3_THRESH2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG_TX2_VC3_THRESH2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_TX2_VC3_THRESH2]

//>> PREP_[OTL1_MISC_PSL_DAR_AN]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL1_MISC_PSL_DAR_AN(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_PSL_DAR_AN;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL1_MISC_PSL_DAR_AN]

//>> GET_[OTL1_MISC_PSL_DAR_AN]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL1_MISC_PSL_DAR_AN(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_PSL_DAR_AN;
#endif
    return fapi2::getScom(i_target, OTL1_MISC_PSL_DAR_AN, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL1_MISC_PSL_DAR_AN]

//>> PUT_[OTL1_MISC_PSL_DAR_AN]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL1_MISC_PSL_DAR_AN(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_DAR_AN));
#endif
    return fapi2::putScom(i_target, OTL1_MISC_PSL_DAR_AN, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL1_MISC_PSL_DAR_AN]


//>> SET_[OTL1_MISC_PSL_DAR_AN_CO_EA]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PSL_DAR_AN_CO_EA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_DAR_AN));
#endif
    return o_data.insertFromRight<OTL1_MISC_PSL_DAR_AN_CO_EA,
           OTL1_MISC_PSL_DAR_AN_CO_EA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_PSL_DAR_AN_CO_EA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PSL_DAR_AN_CO_EA]

//>> SET_[OTL1_MISC_PSL_DAR_AN_CO_EA]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PSL_DAR_AN_CO_EA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_DAR_AN));
#endif
    return o_data.insertFromRight<OTL1_MISC_PSL_DAR_AN_CO_EA,
           OTL1_MISC_PSL_DAR_AN_CO_EA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_PSL_DAR_AN_CO_EA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PSL_DAR_AN_CO_EA]

//>> GET_[OTL1_MISC_PSL_DAR_AN_CO_EA]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PSL_DAR_AN_CO_EA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_DAR_AN));
#endif
    return i_data.extractToRight<OTL1_MISC_PSL_DAR_AN_CO_EA,
           OTL1_MISC_PSL_DAR_AN_CO_EA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_PSL_DAR_AN_CO_EA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PSL_DAR_AN_CO_EA]

//>> PREP_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL;
#endif
    return fapi2::getScom(i_target, XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL]

//>> PUT_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL));
#endif
    return fapi2::putScom(i_target, XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL]


//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL_CNT_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL_CNT_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL_CNT_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL_CNT_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL_CNT_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL_CNT_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL_CNT_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL_CNT_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL_CNT_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL_CNT_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL_CNT_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL_CNT_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL_CNT_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL_CNT_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL_CNT_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL_CNT_DIAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL_CNT_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL_CNT_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL_TO_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL_TO_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL_TO_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL_TO_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL_TO_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL_TO_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL_TO_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL_TO_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL_TO_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL_TO_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL_TO_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL_TO_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL_TO_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL_TO_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL_TO_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL_TO_DIAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL_TO_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_EPOCH_CTL_TO_DIAL]

//>> PREP_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1;
#endif
    return fapi2::getScom(i_target, XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1]

//>> PUT_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1));
#endif
    return fapi2::putScom(i_target, XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1]


//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CC_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CC_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CC_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CC_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CC_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CC_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CC_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CC_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CC_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CC_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CC_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CC_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1));
#endif
    return o_data.setBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CC_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CC_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CC_DIAL]

//>> CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CC_DIAL]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CC_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1));
#endif
    return o_data.clearBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CC_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CC_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CC_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CC_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CC_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CC_DIAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CC_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CC_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CC_DIAL]
static inline bool GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CC_DIAL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1));
#endif
    return i_data.getBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CC_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CC_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CC_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CS_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CS_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CS_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CS_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CS_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CS_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CS_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CS_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CS_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CS_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CS_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CS_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CS_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CS_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CS_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CS_DIAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CS_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_CS_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DAT_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DAT_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DAT_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DAT_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DAT_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DAT_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DAT_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DAT_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DAT_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DAT_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DAT_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DAT_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DAT_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DAT_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DAT_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DAT_DIAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DAT_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DAT_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AC_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AC_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AC_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AC_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AC_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AC_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AC_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AC_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AC_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AC_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AC_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AC_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1));
#endif
    return o_data.setBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AC_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AC_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AC_DIAL]

//>> CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AC_DIAL]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AC_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1));
#endif
    return o_data.clearBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AC_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AC_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AC_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AC_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AC_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AC_DIAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AC_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AC_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AC_DIAL]
static inline bool GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AC_DIAL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1));
#endif
    return i_data.getBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AC_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AC_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AC_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AS_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AS_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AS_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AS_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AS_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AS_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AS_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AS_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AS_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AS_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AS_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AS_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AS_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AS_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AS_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AS_DIAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AS_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_AS_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DABDF_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DABDF_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DABDF_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DABDF_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DABDF_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DABDF_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DABDF_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DABDF_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DABDF_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DABDF_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DABDF_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DABDF_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DABDF_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DABDF_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DABDF_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DABDF_DIAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DABDF_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DABDF_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DAPASID_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DAPASID_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DAPASID_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DAPASID_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DAPASID_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DAPASID_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DAPASID_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DAPASID_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DAPASID_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DAPASID_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DAPASID_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DAPASID_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DAPASID_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DAPASID_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DAPASID_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DAPASID_DIAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DAPASID_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CNTL1_DAPASID_DIAL]

//>> PREP_[XSL_MAIN_WRAP_CFG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_XSL_MAIN_WRAP_CFG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_WRAP_CFG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[XSL_MAIN_WRAP_CFG]

//>> GET_[XSL_MAIN_WRAP_CFG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_XSL_MAIN_WRAP_CFG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_WRAP_CFG;
#endif
    return fapi2::getScom(i_target, XSL_MAIN_WRAP_CFG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[XSL_MAIN_WRAP_CFG]

//>> PUT_[XSL_MAIN_WRAP_CFG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_XSL_MAIN_WRAP_CFG(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_CFG));
#endif
    return fapi2::putScom(i_target, XSL_MAIN_WRAP_CFG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[XSL_MAIN_WRAP_CFG]


//>> SET_[XSL_MAIN_WRAP_CFG_XSLO_CLOCK_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_CFG_XSLO_CLOCK_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_CFG));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_CFG_XSLO_CLOCK_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_CFG_XSLO_CLOCK_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_CFG_XSLO_CLOCK_ENABLE]

//>> SET_[XSL_MAIN_WRAP_CFG_XSLO_CLOCK_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_CFG_XSLO_CLOCK_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_CFG));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_CFG_XSLO_CLOCK_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_CFG_XSLO_CLOCK_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_CFG_XSLO_CLOCK_ENABLE]

//>> SET_[XSL_MAIN_WRAP_CFG_XSLO_CLOCK_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_CFG_XSLO_CLOCK_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_CFG));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_CFG_XSLO_CLOCK_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_CFG_XSLO_CLOCK_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_CFG_XSLO_CLOCK_ENABLE]

//>> CLEAR_[XSL_MAIN_WRAP_CFG_XSLO_CLOCK_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_CFG_XSLO_CLOCK_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_CFG));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_CFG_XSLO_CLOCK_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_CFG_XSLO_CLOCK_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_CFG_XSLO_CLOCK_ENABLE]

//>> GET_[XSL_MAIN_WRAP_CFG_XSLO_CLOCK_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_CFG_XSLO_CLOCK_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_CFG));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_CFG_XSLO_CLOCK_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_CFG_XSLO_CLOCK_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_CFG_XSLO_CLOCK_ENABLE]

//>> GET_[XSL_MAIN_WRAP_CFG_XSLO_CLOCK_ENABLE]
static inline bool GET_XSL_MAIN_WRAP_CFG_XSLO_CLOCK_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_CFG));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_CFG_XSLO_CLOCK_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_CFG_XSLO_CLOCK_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_CFG_XSLO_CLOCK_ENABLE]

//>> SET_[XSL_MAIN_WRAP_CFG_XSLO_BLOCK_MEMHIT]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_CFG_XSLO_BLOCK_MEMHIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_CFG));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_CFG_XSLO_BLOCK_MEMHIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_CFG_XSLO_BLOCK_MEMHIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_CFG_XSLO_BLOCK_MEMHIT]

//>> SET_[XSL_MAIN_WRAP_CFG_XSLO_BLOCK_MEMHIT]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_CFG_XSLO_BLOCK_MEMHIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_CFG));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_CFG_XSLO_BLOCK_MEMHIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_CFG_XSLO_BLOCK_MEMHIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_CFG_XSLO_BLOCK_MEMHIT]

//>> SET_[XSL_MAIN_WRAP_CFG_XSLO_BLOCK_MEMHIT]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_CFG_XSLO_BLOCK_MEMHIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_CFG));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_CFG_XSLO_BLOCK_MEMHIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_CFG_XSLO_BLOCK_MEMHIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_CFG_XSLO_BLOCK_MEMHIT]

//>> CLEAR_[XSL_MAIN_WRAP_CFG_XSLO_BLOCK_MEMHIT]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_CFG_XSLO_BLOCK_MEMHIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_CFG));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_CFG_XSLO_BLOCK_MEMHIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_CFG_XSLO_BLOCK_MEMHIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_CFG_XSLO_BLOCK_MEMHIT]

//>> GET_[XSL_MAIN_WRAP_CFG_XSLO_BLOCK_MEMHIT]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_CFG_XSLO_BLOCK_MEMHIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_CFG));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_CFG_XSLO_BLOCK_MEMHIT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_CFG_XSLO_BLOCK_MEMHIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_CFG_XSLO_BLOCK_MEMHIT]

//>> GET_[XSL_MAIN_WRAP_CFG_XSLO_BLOCK_MEMHIT]
static inline bool GET_XSL_MAIN_WRAP_CFG_XSLO_BLOCK_MEMHIT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_CFG));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_CFG_XSLO_BLOCK_MEMHIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_CFG_XSLO_BLOCK_MEMHIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_CFG_XSLO_BLOCK_MEMHIT]

//>> SET_[XSL_MAIN_WRAP_CFG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_CFG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_CFG));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_CFG_RESERVED,
           XSL_MAIN_WRAP_CFG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_CFG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_CFG_RESERVED]

//>> SET_[XSL_MAIN_WRAP_CFG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_CFG_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_CFG));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_CFG_RESERVED,
           XSL_MAIN_WRAP_CFG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_CFG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_CFG_RESERVED]

//>> GET_[XSL_MAIN_WRAP_CFG_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_CFG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_CFG));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_CFG_RESERVED,
           XSL_MAIN_WRAP_CFG_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_CFG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_CFG_RESERVED]

//>> SET_[XSL_MAIN_WRAP_CFG_XSLO_OTL_REQ_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_CFG_XSLO_OTL_REQ_LIMIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_CFG));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_CFG_XSLO_OTL_REQ_LIMIT,
           XSL_MAIN_WRAP_CFG_XSLO_OTL_REQ_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_CFG_XSLO_OTL_REQ_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_CFG_XSLO_OTL_REQ_LIMIT]

//>> SET_[XSL_MAIN_WRAP_CFG_XSLO_OTL_REQ_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_CFG_XSLO_OTL_REQ_LIMIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_CFG));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_CFG_XSLO_OTL_REQ_LIMIT,
           XSL_MAIN_WRAP_CFG_XSLO_OTL_REQ_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_CFG_XSLO_OTL_REQ_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_CFG_XSLO_OTL_REQ_LIMIT]

//>> GET_[XSL_MAIN_WRAP_CFG_XSLO_OTL_REQ_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_CFG_XSLO_OTL_REQ_LIMIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_CFG));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_CFG_XSLO_OTL_REQ_LIMIT,
           XSL_MAIN_WRAP_CFG_XSLO_OTL_REQ_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_CFG_XSLO_OTL_REQ_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_CFG_XSLO_OTL_REQ_LIMIT]


//>>THE END<<

#ifndef __PPE_HCODE__
}
}

#endif
#endif
