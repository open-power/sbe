/* IBM_PROLOG_BEGIN_TAG                                                   */
/* This is an automatically generated prolog.                             */
/*                                                                        */
/* $Source: src/import/chips/p10/common/include/pau/reg00004.H $          */
/*                                                                        */
/* OpenPOWER sbe Project                                                  */
/*                                                                        */
/* Contributors Listed Below - COPYRIGHT 2019,2020                        */
/* [+] International Business Machines Corp.                              */
/*                                                                        */
/*                                                                        */
/* Licensed under the Apache License, Version 2.0 (the "License");        */
/* you may not use this file except in compliance with the License.       */
/* You may obtain a copy of the License at                                */
/*                                                                        */
/*     http://www.apache.org/licenses/LICENSE-2.0                         */
/*                                                                        */
/* Unless required by applicable law or agreed to in writing, software    */
/* distributed under the License is distributed on an "AS IS" BASIS,      */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        */
/* implied. See the License for the specific language governing           */
/* permissions and limitations under the License.                         */
/*                                                                        */
/* IBM_PROLOG_END_TAG                                                     */
#include "fapi2.H"

#ifndef __PAU_REG00004_H_
#define __PAU_REG00004_H_

namespace scomt
{
namespace pau
{


template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AME_AME0_MISC_INHIBIT_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME0_MISC_INHIBIT_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AME_AME0_MISC_INHIBIT_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME0_MISC_INHIBIT_CONFIG;
#endif
    return fapi2::getScom(i_target, AME_AME0_MISC_INHIBIT_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AME_AME0_MISC_INHIBIT_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return fapi2::putScom(i_target, AME_AME0_MISC_INHIBIT_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_INHIBIT_CONFIG_LFREQ0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_INHIBIT_CONFIG_LFREQ0,
           AME_AME0_MISC_INHIBIT_CONFIG_LFREQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_LFREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_INHIBIT_CONFIG_LFREQ0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_INHIBIT_CONFIG_LFREQ0,
           AME_AME0_MISC_INHIBIT_CONFIG_LFREQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_LFREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_INHIBIT_CONFIG_LFREQ0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_AME0_MISC_INHIBIT_CONFIG_LFREQ0,
           AME_AME0_MISC_INHIBIT_CONFIG_LFREQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_LFREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_INHIBIT_CONFIG_RESERVED0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_INHIBIT_CONFIG_RESERVED0,
           AME_AME0_MISC_INHIBIT_CONFIG_RESERVED0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_RESERVED0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_INHIBIT_CONFIG_RESERVED0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_INHIBIT_CONFIG_RESERVED0,
           AME_AME0_MISC_INHIBIT_CONFIG_RESERVED0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_RESERVED0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_INHIBIT_CONFIG_RESERVED0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_AME0_MISC_INHIBIT_CONFIG_RESERVED0,
           AME_AME0_MISC_INHIBIT_CONFIG_RESERVED0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_RESERVED0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_INHIBIT_CONFIG_TFREQ0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_INHIBIT_CONFIG_TFREQ0,
           AME_AME0_MISC_INHIBIT_CONFIG_TFREQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_TFREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_INHIBIT_CONFIG_TFREQ0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_INHIBIT_CONFIG_TFREQ0,
           AME_AME0_MISC_INHIBIT_CONFIG_TFREQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_TFREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_INHIBIT_CONFIG_TFREQ0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_AME0_MISC_INHIBIT_CONFIG_TFREQ0,
           AME_AME0_MISC_INHIBIT_CONFIG_TFREQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_TFREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_INHIBIT_CONFIG_PFREQ0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_INHIBIT_CONFIG_PFREQ0,
           AME_AME0_MISC_INHIBIT_CONFIG_PFREQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_PFREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_INHIBIT_CONFIG_PFREQ0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_INHIBIT_CONFIG_PFREQ0,
           AME_AME0_MISC_INHIBIT_CONFIG_PFREQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_PFREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_INHIBIT_CONFIG_PFREQ0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_AME0_MISC_INHIBIT_CONFIG_PFREQ0,
           AME_AME0_MISC_INHIBIT_CONFIG_PFREQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_PFREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_INHIBIT_CONFIG_BLOCKY0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_INHIBIT_CONFIG_BLOCKY0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_INHIBIT_CONFIG_BLOCKY0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_INHIBIT_CONFIG_BLOCKY0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_INHIBIT_CONFIG_BLOCKY0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<AME_AME0_MISC_INHIBIT_CONFIG_BLOCKY0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME0_MISC_INHIBIT_CONFIG_BLOCKY0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<AME_AME0_MISC_INHIBIT_CONFIG_BLOCKY0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_INHIBIT_CONFIG_BLOCKY0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_AME0_MISC_INHIBIT_CONFIG_BLOCKY0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_AME_AME0_MISC_INHIBIT_CONFIG_BLOCKY0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<AME_AME0_MISC_INHIBIT_CONFIG_BLOCKY0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_INHIBIT_CONFIG_ONESHOT0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_INHIBIT_CONFIG_ONESHOT0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_INHIBIT_CONFIG_ONESHOT0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_INHIBIT_CONFIG_ONESHOT0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_INHIBIT_CONFIG_ONESHOT0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<AME_AME0_MISC_INHIBIT_CONFIG_ONESHOT0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME0_MISC_INHIBIT_CONFIG_ONESHOT0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<AME_AME0_MISC_INHIBIT_CONFIG_ONESHOT0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_INHIBIT_CONFIG_ONESHOT0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_AME0_MISC_INHIBIT_CONFIG_ONESHOT0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_AME_AME0_MISC_INHIBIT_CONFIG_ONESHOT0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<AME_AME0_MISC_INHIBIT_CONFIG_ONESHOT0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_INHIBIT_CONFIG_DEST0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_INHIBIT_CONFIG_DEST0,
           AME_AME0_MISC_INHIBIT_CONFIG_DEST0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_DEST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_INHIBIT_CONFIG_DEST0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_INHIBIT_CONFIG_DEST0,
           AME_AME0_MISC_INHIBIT_CONFIG_DEST0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_DEST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_INHIBIT_CONFIG_DEST0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_AME0_MISC_INHIBIT_CONFIG_DEST0,
           AME_AME0_MISC_INHIBIT_CONFIG_DEST0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_DEST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_INHIBIT_CONFIG_LFREQ1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_INHIBIT_CONFIG_LFREQ1,
           AME_AME0_MISC_INHIBIT_CONFIG_LFREQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_LFREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_INHIBIT_CONFIG_LFREQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_INHIBIT_CONFIG_LFREQ1,
           AME_AME0_MISC_INHIBIT_CONFIG_LFREQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_LFREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_INHIBIT_CONFIG_LFREQ1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_AME0_MISC_INHIBIT_CONFIG_LFREQ1,
           AME_AME0_MISC_INHIBIT_CONFIG_LFREQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_LFREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_INHIBIT_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_INHIBIT_CONFIG_RESERVED1,
           AME_AME0_MISC_INHIBIT_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_INHIBIT_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_INHIBIT_CONFIG_RESERVED1,
           AME_AME0_MISC_INHIBIT_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_INHIBIT_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_AME0_MISC_INHIBIT_CONFIG_RESERVED1,
           AME_AME0_MISC_INHIBIT_CONFIG_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_INHIBIT_CONFIG_TFREQ1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_INHIBIT_CONFIG_TFREQ1,
           AME_AME0_MISC_INHIBIT_CONFIG_TFREQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_TFREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_INHIBIT_CONFIG_TFREQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_INHIBIT_CONFIG_TFREQ1,
           AME_AME0_MISC_INHIBIT_CONFIG_TFREQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_TFREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_INHIBIT_CONFIG_TFREQ1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_AME0_MISC_INHIBIT_CONFIG_TFREQ1,
           AME_AME0_MISC_INHIBIT_CONFIG_TFREQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_TFREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_INHIBIT_CONFIG_PFREQ1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_INHIBIT_CONFIG_PFREQ1,
           AME_AME0_MISC_INHIBIT_CONFIG_PFREQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_PFREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_INHIBIT_CONFIG_PFREQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_INHIBIT_CONFIG_PFREQ1,
           AME_AME0_MISC_INHIBIT_CONFIG_PFREQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_PFREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_INHIBIT_CONFIG_PFREQ1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_AME0_MISC_INHIBIT_CONFIG_PFREQ1,
           AME_AME0_MISC_INHIBIT_CONFIG_PFREQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_PFREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_INHIBIT_CONFIG_BLOCKY1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_INHIBIT_CONFIG_BLOCKY1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_INHIBIT_CONFIG_BLOCKY1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_INHIBIT_CONFIG_BLOCKY1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_INHIBIT_CONFIG_BLOCKY1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<AME_AME0_MISC_INHIBIT_CONFIG_BLOCKY1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME0_MISC_INHIBIT_CONFIG_BLOCKY1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<AME_AME0_MISC_INHIBIT_CONFIG_BLOCKY1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_INHIBIT_CONFIG_BLOCKY1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_AME0_MISC_INHIBIT_CONFIG_BLOCKY1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_AME_AME0_MISC_INHIBIT_CONFIG_BLOCKY1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<AME_AME0_MISC_INHIBIT_CONFIG_BLOCKY1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_INHIBIT_CONFIG_ONESHOT1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_INHIBIT_CONFIG_ONESHOT1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_INHIBIT_CONFIG_ONESHOT1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_INHIBIT_CONFIG_ONESHOT1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_INHIBIT_CONFIG_ONESHOT1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<AME_AME0_MISC_INHIBIT_CONFIG_ONESHOT1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME0_MISC_INHIBIT_CONFIG_ONESHOT1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<AME_AME0_MISC_INHIBIT_CONFIG_ONESHOT1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_INHIBIT_CONFIG_ONESHOT1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_AME0_MISC_INHIBIT_CONFIG_ONESHOT1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_AME_AME0_MISC_INHIBIT_CONFIG_ONESHOT1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<AME_AME0_MISC_INHIBIT_CONFIG_ONESHOT1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_INHIBIT_CONFIG_DEST1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_INHIBIT_CONFIG_DEST1,
           AME_AME0_MISC_INHIBIT_CONFIG_DEST1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_DEST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_INHIBIT_CONFIG_DEST1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_INHIBIT_CONFIG_DEST1,
           AME_AME0_MISC_INHIBIT_CONFIG_DEST1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_DEST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_INHIBIT_CONFIG_DEST1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_AME0_MISC_INHIBIT_CONFIG_DEST1,
           AME_AME0_MISC_INHIBIT_CONFIG_DEST1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME0_MISC_INHIBIT_CONFIG_DEST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AME_AME2_MISC_PMU_CONFIG2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME2_MISC_PMU_CONFIG2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AME_AME2_MISC_PMU_CONFIG2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME2_MISC_PMU_CONFIG2;
#endif
    return fapi2::getScom(i_target, AME_AME2_MISC_PMU_CONFIG2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AME_AME2_MISC_PMU_CONFIG2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_PMU_CONFIG2));
#endif
    return fapi2::putScom(i_target, AME_AME2_MISC_PMU_CONFIG2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_PMU_CONFIG2_PE_TYPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_PMU_CONFIG2));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_PMU_CONFIG2_PE_TYPE,
           AME_AME2_MISC_PMU_CONFIG2_PE_TYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_PMU_CONFIG2_PE_TYPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_PMU_CONFIG2_PE_TYPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_PMU_CONFIG2));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_PMU_CONFIG2_PE_TYPE,
           AME_AME2_MISC_PMU_CONFIG2_PE_TYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_PMU_CONFIG2_PE_TYPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_PMU_CONFIG2_PE_TYPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_PMU_CONFIG2));
#endif
    return i_data.extractToRight<AME_AME2_MISC_PMU_CONFIG2_PE_TYPE,
           AME_AME2_MISC_PMU_CONFIG2_PE_TYPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_PMU_CONFIG2_PE_TYPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_PMU_CONFIG2_INST_CAT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_PMU_CONFIG2));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_PMU_CONFIG2_INST_CAT,
           AME_AME2_MISC_PMU_CONFIG2_INST_CAT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_PMU_CONFIG2_INST_CAT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_PMU_CONFIG2_INST_CAT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_PMU_CONFIG2));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_PMU_CONFIG2_INST_CAT,
           AME_AME2_MISC_PMU_CONFIG2_INST_CAT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_PMU_CONFIG2_INST_CAT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_PMU_CONFIG2_INST_CAT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_PMU_CONFIG2));
#endif
    return i_data.extractToRight<AME_AME2_MISC_PMU_CONFIG2_INST_CAT,
           AME_AME2_MISC_PMU_CONFIG2_INST_CAT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_PMU_CONFIG2_INST_CAT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_PMU_CONFIG2_PC0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_PMU_CONFIG2));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_PMU_CONFIG2_PC0,
           AME_AME2_MISC_PMU_CONFIG2_PC0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_PMU_CONFIG2_PC0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_PMU_CONFIG2_PC0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_PMU_CONFIG2));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_PMU_CONFIG2_PC0,
           AME_AME2_MISC_PMU_CONFIG2_PC0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_PMU_CONFIG2_PC0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_PMU_CONFIG2_PC0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_PMU_CONFIG2));
#endif
    return i_data.extractToRight<AME_AME2_MISC_PMU_CONFIG2_PC0,
           AME_AME2_MISC_PMU_CONFIG2_PC0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_PMU_CONFIG2_PC0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_PMU_CONFIG2_PC1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_PMU_CONFIG2));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_PMU_CONFIG2_PC1,
           AME_AME2_MISC_PMU_CONFIG2_PC1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_PMU_CONFIG2_PC1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_PMU_CONFIG2_PC1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_PMU_CONFIG2));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_PMU_CONFIG2_PC1,
           AME_AME2_MISC_PMU_CONFIG2_PC1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_PMU_CONFIG2_PC1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_PMU_CONFIG2_PC1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_PMU_CONFIG2));
#endif
    return i_data.extractToRight<AME_AME2_MISC_PMU_CONFIG2_PC1,
           AME_AME2_MISC_PMU_CONFIG2_PC1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_PMU_CONFIG2_PC1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_PMU_CONFIG2_PCR_S(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_PMU_CONFIG2));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_PMU_CONFIG2_PCR_S,
           AME_AME2_MISC_PMU_CONFIG2_PCR_S_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_PMU_CONFIG2_PCR_S chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_PMU_CONFIG2_PCR_S(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_PMU_CONFIG2));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_PMU_CONFIG2_PCR_S,
           AME_AME2_MISC_PMU_CONFIG2_PCR_S_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_PMU_CONFIG2_PCR_S chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_PMU_CONFIG2_PCR_S(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_PMU_CONFIG2));
#endif
    return i_data.extractToRight<AME_AME2_MISC_PMU_CONFIG2_PCR_S,
           AME_AME2_MISC_PMU_CONFIG2_PCR_S_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_PMU_CONFIG2_PCR_S chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_PMU_CONFIG2_PCR_E(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_PMU_CONFIG2));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_PMU_CONFIG2_PCR_E,
           AME_AME2_MISC_PMU_CONFIG2_PCR_E_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_PMU_CONFIG2_PCR_E chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_PMU_CONFIG2_PCR_E(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_PMU_CONFIG2));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_PMU_CONFIG2_PCR_E,
           AME_AME2_MISC_PMU_CONFIG2_PCR_E_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_PMU_CONFIG2_PCR_E chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_PMU_CONFIG2_PCR_E(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_PMU_CONFIG2));
#endif
    return i_data.extractToRight<AME_AME2_MISC_PMU_CONFIG2_PCR_E,
           AME_AME2_MISC_PMU_CONFIG2_PCR_E_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access AME_AME2_MISC_PMU_CONFIG2_PCR_E chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_BDF2PE_10_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_BDF2PE_10_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_BDF2PE_10_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_BDF2PE_10_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_BDF2PE_10_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_BDF2PE_10_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_10_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_BDF2PE_10_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_10_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_10_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_10_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_BDF2PE_10_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_10_CONFIG_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_10_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_10_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_BDF2PE_10_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_10_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_10_CONFIG));
#endif
    return o_data.setBit<CS_CTL_MISC_BDF2PE_10_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_BDF2PE_10_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_BDF2PE_10_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_10_CONFIG));
#endif
    return o_data.clearBit<CS_CTL_MISC_BDF2PE_10_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_BDF2PE_10_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_10_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_10_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_10_CONFIG_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_BDF2PE_10_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_BDF2PE_10_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_10_CONFIG));
#endif
    return i_data.getBit<CS_CTL_MISC_BDF2PE_10_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_BDF2PE_10_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_10_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_10_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_10_CONFIG_RESERVED,
           CS_CTL_MISC_BDF2PE_10_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_BDF2PE_10_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_10_CONFIG_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_10_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_10_CONFIG_RESERVED,
           CS_CTL_MISC_BDF2PE_10_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_BDF2PE_10_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_10_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_10_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_10_CONFIG_RESERVED,
           CS_CTL_MISC_BDF2PE_10_CONFIG_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_BDF2PE_10_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_10_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_10_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_10_CONFIG_PE,
           CS_CTL_MISC_BDF2PE_10_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_BDF2PE_10_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_10_CONFIG_PE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_10_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_10_CONFIG_PE,
           CS_CTL_MISC_BDF2PE_10_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_BDF2PE_10_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_10_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_10_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_10_CONFIG_PE,
           CS_CTL_MISC_BDF2PE_10_CONFIG_PE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_BDF2PE_10_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_10_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_10_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_10_CONFIG_BDF,
           CS_CTL_MISC_BDF2PE_10_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_BDF2PE_10_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_10_CONFIG_BDF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_10_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_10_CONFIG_BDF,
           CS_CTL_MISC_BDF2PE_10_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_BDF2PE_10_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_10_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_10_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_10_CONFIG_BDF,
           CS_CTL_MISC_BDF2PE_10_CONFIG_BDF_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_BDF2PE_10_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_CERR_MESSAGE0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_CERR_MESSAGE0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_CERR_MESSAGE0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_CERR_MESSAGE0;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_CERR_MESSAGE0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_CERR_MESSAGE0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MESSAGE0));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_CERR_MESSAGE0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MESSAGE0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0,
           CS_CTL_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MESSAGE0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0,
           CS_CTL_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MESSAGE0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0,
           CS_CTL_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_CONFIG0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_CONFIG0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_CONFIG0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_CONFIG0;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_CONFIG0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_CONFIG0(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_CONFIG0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG0_RESERVED0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG0_RESERVED0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG0_RESERVED0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG0_RESERVED0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG0_RESERVED0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG0_RESERVED0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG0_RESERVED0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG0_RESERVED0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG0_RESERVED0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG0_RESERVED0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG0_RESERVED0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG0_RESERVED0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG0_RESERVED0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG0_RESERVED0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG0_RESERVED0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG0_RESERVED0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG0_RESERVED0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG0_RESERVED0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG0_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG0_RESERVED1,
           CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG0_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG0_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG0_RESERVED1,
           CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG0_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG0_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG0_RESERVED1,
           CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG0_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ADR_BAR_MODE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ADR_BAR_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ADR_BAR_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ADR_BAR_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ADR_BAR_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ADR_BAR_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ADR_BAR_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ADR_BAR_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ADR_BAR_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ADR_BAR_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ADR_BAR_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ADR_BAR_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ADR_BAR_MODE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ADR_BAR_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ADR_BAR_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ADR_BAR_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ADR_BAR_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ADR_BAR_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_GEN_HEAD_DELAY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_GEN_HEAD_DELAY,
           CS_CTL_MISC_CONFIG0_ONFIG_GEN_HEAD_DELAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_GEN_HEAD_DELAY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_GEN_HEAD_DELAY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_GEN_HEAD_DELAY,
           CS_CTL_MISC_CONFIG0_ONFIG_GEN_HEAD_DELAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_GEN_HEAD_DELAY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_ONFIG_GEN_HEAD_DELAY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_ONFIG_GEN_HEAD_DELAY,
           CS_CTL_MISC_CONFIG0_ONFIG_GEN_HEAD_DELAY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_GEN_HEAD_DELAY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_GEN_HEAD_DELAY(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_GEN_HEAD_DELAY,
           CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_GEN_HEAD_DELAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_GEN_HEAD_DELAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_GEN_HEAD_DELAY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_GEN_HEAD_DELAY,
           CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_GEN_HEAD_DELAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_GEN_HEAD_DELAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_GEN_HEAD_DELAY(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_GEN_HEAD_DELAY,
           CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_GEN_HEAD_DELAY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_GEN_HEAD_DELAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIV2_COUNT_AT_EXP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIV2_COUNT_AT_EXP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIV2_COUNT_AT_EXP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIV2_COUNT_AT_EXP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIV2_COUNT_AT_EXP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIV2_COUNT_AT_EXP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIV2_COUNT_AT_EXP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIV2_COUNT_AT_EXP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIV2_COUNT_AT_EXP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIV2_COUNT_AT_EXP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIV2_COUNT_AT_EXP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIV2_COUNT_AT_EXP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIV2_COUNT_AT_EXP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIV2_COUNT_AT_EXP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIV2_COUNT_AT_EXP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIV2_COUNT_AT_EXP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIV2_COUNT_AT_EXP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIV2_COUNT_AT_EXP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIV2_COUNT_AT_EXP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIV2_COUNT_AT_EXP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIV2_COUNT_AT_EXP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIV2_COUNT_AT_EXP(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIV2_COUNT_AT_EXP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIV2_COUNT_AT_EXP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIV2_COUNT_AT_EXP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIV2_COUNT_AT_EXP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIV2_COUNT_AT_EXP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIV2_COUNT_AT_EXP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIV2_COUNT_AT_EXP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIV2_COUNT_AT_EXP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIV2_COUNT_AT_EXP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIV2_COUNT_AT_EXP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIV2_COUNT_AT_EXP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIV2_COUNT_AT_EXP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIV2_COUNT_AT_EXP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIV2_COUNT_AT_EXP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIV2_COUNT_AT_EXP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIV2_COUNT_AT_EXP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIV2_COUNT_AT_EXP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIV2_COUNT_AT_EXP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIV2_COUNT_AT_EXP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIV2_COUNT_AT_EXP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIV2_COUNT_AT_EXP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIV2_COUNT_AT_EXP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIV2_COUNT_AT_EXP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIV2_COUNT_AT_EXP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIV2_COUNT_AT_EXP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIV2_COUNT_AT_EXP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIV2_COUNT_AT_EXP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIV2_COUNT_AT_EXP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIV2_COUNT_AT_EXP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIV2_COUNT_AT_EXP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIV2_COUNT_AT_EXP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIV2_COUNT_AT_EXP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIV2_COUNT_AT_EXP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIV2_COUNT_AT_EXP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIV2_COUNT_AT_EXP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIV2_COUNT_AT_EXP(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIV2_COUNT_AT_EXP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIV2_COUNT_AT_EXP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIV2_COUNT_AT_EXP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIV2_COUNT_AT_EXP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIV2_COUNT_AT_EXP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIV2_COUNT_AT_EXP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIV2_COUNT_AT_EXP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIV2_COUNT_AT_EXP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIV2_COUNT_AT_EXP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIV2_COUNT_AT_EXP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIV2_COUNT_AT_EXP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIV2_COUNT_AT_EXP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIV2_COUNT_AT_EXP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIV2_COUNT_AT_EXP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIS_DYN_ADJ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIS_DYN_ADJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIS_DYN_ADJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIS_DYN_ADJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIS_DYN_ADJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIS_DYN_ADJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIS_DYN_ADJ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIS_DYN_ADJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIS_DYN_ADJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIS_DYN_ADJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIS_DYN_ADJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIS_DYN_ADJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIS_DYN_ADJ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIS_DYN_ADJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIS_DYN_ADJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIS_DYN_ADJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIS_DYN_ADJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIS_DYN_ADJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIS_DYN_ADJ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIS_DYN_ADJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIS_DYN_ADJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIS_DYN_ADJ(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIS_DYN_ADJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIS_DYN_ADJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIS_DYN_ADJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIS_DYN_ADJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIS_DYN_ADJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIS_DYN_ADJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIS_DYN_ADJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIS_DYN_ADJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIS_DYN_ADJ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIS_DYN_ADJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIS_DYN_ADJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIS_DYN_ADJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIS_DYN_ADJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIS_DYN_ADJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIS_DYN_ADJ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIS_DYN_ADJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIS_DYN_ADJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIS_DYN_ADJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIS_DYN_ADJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIS_DYN_ADJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIS_DYN_ADJ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIS_DYN_ADJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIS_DYN_ADJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIS_DYN_ADJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIS_DYN_ADJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIS_DYN_ADJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIS_DYN_ADJ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIS_DYN_ADJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIS_DYN_ADJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIS_DYN_ADJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIS_DYN_ADJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIS_DYN_ADJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIS_DYN_ADJ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIS_DYN_ADJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIS_DYN_ADJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIS_DYN_ADJ(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIS_DYN_ADJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIS_DYN_ADJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIS_DYN_ADJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIS_DYN_ADJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIS_DYN_ADJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIS_DYN_ADJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIS_DYN_ADJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIS_DYN_ADJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIS_DYN_ADJ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIS_DYN_ADJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIS_DYN_ADJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIS_DYN_ADJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIS_DYN_ADJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIS_DYN_ADJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIS_DYN_LVL_ADJ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIS_DYN_LVL_ADJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIS_DYN_LVL_ADJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIS_DYN_LVL_ADJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIS_DYN_LVL_ADJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIS_DYN_LVL_ADJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIS_DYN_LVL_ADJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIS_DYN_LVL_ADJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIS_DYN_LVL_ADJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIS_DYN_LVL_ADJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIS_DYN_LVL_ADJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIS_DYN_LVL_ADJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIS_DYN_LVL_ADJ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIS_DYN_LVL_ADJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIS_DYN_LVL_ADJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIS_DYN_LVL_ADJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIS_DYN_LVL_ADJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_DIS_DYN_LVL_ADJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIS_DYN_LVL_ADJ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIS_DYN_LVL_ADJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIS_DYN_LVL_ADJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIS_DYN_LVL_ADJ(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIS_DYN_LVL_ADJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIS_DYN_LVL_ADJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIS_DYN_LVL_ADJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIS_DYN_LVL_ADJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIS_DYN_LVL_ADJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIS_DYN_LVL_ADJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIS_DYN_LVL_ADJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIS_DYN_LVL_ADJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIS_DYN_LVL_ADJ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIS_DYN_LVL_ADJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIS_DYN_LVL_ADJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIS_DYN_LVL_ADJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIS_DYN_LVL_ADJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_DIS_DYN_LVL_ADJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIS_DYN_LVL_ADJ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIS_DYN_LVL_ADJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIS_DYN_LVL_ADJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIS_DYN_LVL_ADJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIS_DYN_LVL_ADJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIS_DYN_LVL_ADJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIS_DYN_LVL_ADJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIS_DYN_LVL_ADJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIS_DYN_LVL_ADJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIS_DYN_LVL_ADJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIS_DYN_LVL_ADJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIS_DYN_LVL_ADJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIS_DYN_LVL_ADJ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIS_DYN_LVL_ADJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIS_DYN_LVL_ADJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIS_DYN_LVL_ADJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIS_DYN_LVL_ADJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_DIS_DYN_LVL_ADJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIS_DYN_LVL_ADJ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIS_DYN_LVL_ADJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIS_DYN_LVL_ADJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIS_DYN_LVL_ADJ(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIS_DYN_LVL_ADJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIS_DYN_LVL_ADJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIS_DYN_LVL_ADJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIS_DYN_LVL_ADJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIS_DYN_LVL_ADJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIS_DYN_LVL_ADJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIS_DYN_LVL_ADJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIS_DYN_LVL_ADJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIS_DYN_LVL_ADJ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIS_DYN_LVL_ADJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIS_DYN_LVL_ADJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIS_DYN_LVL_ADJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIS_DYN_LVL_ADJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_DIS_DYN_LVL_ADJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_THRESH1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_THRESH1,
           CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_THRESH1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_THRESH1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_THRESH1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_THRESH1,
           CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_THRESH1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_THRESH1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_THRESH1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_THRESH1,
           CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_THRESH1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_THRESH1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_THRESH1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_THRESH1,
           CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_THRESH1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_THRESH1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_THRESH1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_THRESH1,
           CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_THRESH1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_THRESH1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_THRESH1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_THRESH1,
           CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_THRESH1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_THRESH1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_THRESH2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_THRESH2,
           CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_THRESH2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_THRESH2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_THRESH2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_THRESH2,
           CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_THRESH2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_THRESH2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_THRESH2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_THRESH2,
           CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_THRESH2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_THRESH2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_THRESH2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_THRESH2,
           CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_THRESH2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_THRESH2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_THRESH2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_THRESH2,
           CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_THRESH2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_THRESH2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_THRESH2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_THRESH2,
           CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_THRESH2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_THRESH2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_THRESH1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_THRESH1,
           CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_THRESH1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_THRESH1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_THRESH1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_THRESH1,
           CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_THRESH1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_THRESH1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_THRESH1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_THRESH1,
           CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_THRESH1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_THRESH1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_THRESH1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_THRESH1,
           CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_THRESH1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_THRESH1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_THRESH1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_THRESH1,
           CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_THRESH1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_THRESH1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_THRESH1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_THRESH1,
           CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_THRESH1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_THRESH1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_THRESH2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_THRESH2,
           CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_THRESH2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_THRESH2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_THRESH2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_THRESH2,
           CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_THRESH2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_THRESH2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_THRESH2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_THRESH2,
           CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_THRESH2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_THRESH2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_THRESH2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_THRESH2,
           CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_THRESH2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_THRESH2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_THRESH2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_THRESH2,
           CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_THRESH2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_THRESH2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_THRESH2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_THRESH2,
           CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_THRESH2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_THRESH2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_MAX_LEVEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_MAX_LEVEL,
           CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_MAX_LEVEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_MAX_LEVEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_MAX_LEVEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_MAX_LEVEL,
           CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_MAX_LEVEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_MAX_LEVEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_MAX_LEVEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_MAX_LEVEL,
           CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_MAX_LEVEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBGP_MAX_LEVEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_MAX_LEVEL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_MAX_LEVEL,
           CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_MAX_LEVEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_MAX_LEVEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_MAX_LEVEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_MAX_LEVEL,
           CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_MAX_LEVEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_MAX_LEVEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_MAX_LEVEL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_MAX_LEVEL,
           CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_MAX_LEVEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBGP_MAX_LEVEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_MAX_LEVEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_MAX_LEVEL,
           CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_MAX_LEVEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_MAX_LEVEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_MAX_LEVEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_MAX_LEVEL,
           CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_MAX_LEVEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_MAX_LEVEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_MAX_LEVEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_MAX_LEVEL,
           CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_MAX_LEVEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_MRBSP_MAX_LEVEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_MAX_LEVEL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_MAX_LEVEL,
           CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_MAX_LEVEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_MAX_LEVEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_MAX_LEVEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_MAX_LEVEL,
           CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_MAX_LEVEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_MAX_LEVEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_MAX_LEVEL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_MAX_LEVEL,
           CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_MAX_LEVEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_MRBSP_MAX_LEVEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_BRAZOS_MODE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_BRAZOS_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_BRAZOS_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_BRAZOS_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_BRAZOS_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_BRAZOS_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_BRAZOS_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_BRAZOS_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_BRAZOS_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_BRAZOS_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_BRAZOS_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_BRAZOS_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_BRAZOS_MODE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_BRAZOS_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_BRAZOS_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_BRAZOS_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_BRAZOS_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_BRAZOS_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_DISABLE_PBM_ECC_COR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_DISABLE_PBM_ECC_COR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_DISABLE_PBM_ECC_COR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_DISABLE_PBM_ECC_COR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_DISABLE_PBM_ECC_COR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_DISABLE_PBM_ECC_COR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_DISABLE_PBM_ECC_COR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG0_ONFIG_DISABLE_PBM_ECC_COR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_DISABLE_PBM_ECC_COR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG0_ONFIG_DISABLE_PBM_ECC_COR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG0_ONFIG_DISABLE_PBM_ECC_COR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_DISABLE_PBM_ECC_COR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_ONFIG_DISABLE_PBM_ECC_COR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_ONFIG_DISABLE_PBM_ECC_COR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_DISABLE_PBM_ECC_COR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_CONFIG0_ONFIG_DISABLE_PBM_ECC_COR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG0_ONFIG_DISABLE_PBM_ECC_COR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_DISABLE_PBM_ECC_COR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_DISABLE_PBM_ECC_COR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_DISABLE_PBM_ECC_COR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_DISABLE_PBM_ECC_COR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_DISABLE_PBM_ECC_COR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_DISABLE_PBM_ECC_COR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_DISABLE_PBM_ECC_COR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_DISABLE_PBM_ECC_COR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_DISABLE_PBM_ECC_COR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_DISABLE_PBM_ECC_COR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_DISABLE_PBM_ECC_COR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_DISABLE_PBM_ECC_COR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_DISABLE_PBM_ECC_COR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_DISABLE_PBM_ECC_COR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_DISABLE_PBM_ECC_COR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_DISABLE_PBM_ECC_COR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_DISABLE_PBM_ECC_COR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_DISABLE_PBM_ECC_COR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_DISABLE_PBM_ECC_COR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_LAB_RANDOMIZE_PE_01(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_LAB_RANDOMIZE_PE_01,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_LAB_RANDOMIZE_PE_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_LAB_RANDOMIZE_PE_01(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_LAB_RANDOMIZE_PE_01,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_LAB_RANDOMIZE_PE_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_LAB_RANDOMIZE_PE_01(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG0_ONFIG_LAB_RANDOMIZE_PE_01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_LAB_RANDOMIZE_PE_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG0_ONFIG_LAB_RANDOMIZE_PE_01(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG0_ONFIG_LAB_RANDOMIZE_PE_01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_LAB_RANDOMIZE_PE_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_ONFIG_LAB_RANDOMIZE_PE_01(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_ONFIG_LAB_RANDOMIZE_PE_01,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_LAB_RANDOMIZE_PE_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_CONFIG0_ONFIG_LAB_RANDOMIZE_PE_01(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG0_ONFIG_LAB_RANDOMIZE_PE_01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_LAB_RANDOMIZE_PE_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_LAB_RANDOMIZE_PE_01(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_LAB_RANDOMIZE_PE_01,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_LAB_RANDOMIZE_PE_01 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_LAB_RANDOMIZE_PE_01(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_LAB_RANDOMIZE_PE_01,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_LAB_RANDOMIZE_PE_01 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_LAB_RANDOMIZE_PE_01(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_LAB_RANDOMIZE_PE_01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_LAB_RANDOMIZE_PE_01 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_LAB_RANDOMIZE_PE_01(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_LAB_RANDOMIZE_PE_01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_LAB_RANDOMIZE_PE_01 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_LAB_RANDOMIZE_PE_01(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_LAB_RANDOMIZE_PE_01,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_LAB_RANDOMIZE_PE_01 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_LAB_RANDOMIZE_PE_01(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_LAB_RANDOMIZE_PE_01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_LAB_RANDOMIZE_PE_01 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_LAB_RANDOMIZE_PE_23(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_LAB_RANDOMIZE_PE_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_LAB_RANDOMIZE_PE_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_LAB_RANDOMIZE_PE_23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_LAB_RANDOMIZE_PE_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_LAB_RANDOMIZE_PE_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_LAB_RANDOMIZE_PE_23(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG0_ONFIG_LAB_RANDOMIZE_PE_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_LAB_RANDOMIZE_PE_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG0_ONFIG_LAB_RANDOMIZE_PE_23(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG0_ONFIG_LAB_RANDOMIZE_PE_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_LAB_RANDOMIZE_PE_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_ONFIG_LAB_RANDOMIZE_PE_23(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_ONFIG_LAB_RANDOMIZE_PE_23,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_LAB_RANDOMIZE_PE_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_CONFIG0_ONFIG_LAB_RANDOMIZE_PE_23(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG0_ONFIG_LAB_RANDOMIZE_PE_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_LAB_RANDOMIZE_PE_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_LAB_RANDOMIZE_PE_23(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_LAB_RANDOMIZE_PE_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_LAB_RANDOMIZE_PE_23 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_LAB_RANDOMIZE_PE_23(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_LAB_RANDOMIZE_PE_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_LAB_RANDOMIZE_PE_23 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_LAB_RANDOMIZE_PE_23(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_LAB_RANDOMIZE_PE_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_LAB_RANDOMIZE_PE_23 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_LAB_RANDOMIZE_PE_23(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_LAB_RANDOMIZE_PE_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_LAB_RANDOMIZE_PE_23 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_LAB_RANDOMIZE_PE_23(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_LAB_RANDOMIZE_PE_23,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_LAB_RANDOMIZE_PE_23 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_LAB_RANDOMIZE_PE_23(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_LAB_RANDOMIZE_PE_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_LAB_RANDOMIZE_PE_23 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_OTL0_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_OTL0_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_OTL0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_OTL0_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_OTL0_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_OTL0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_OTL0_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG0_ONFIG_OTL0_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_OTL0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG0_ONFIG_OTL0_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG0_ONFIG_OTL0_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_OTL0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_ONFIG_OTL0_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_ONFIG_OTL0_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_OTL0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_CONFIG0_ONFIG_OTL0_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG0_ONFIG_OTL0_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_OTL0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL0_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL0_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL0_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL0_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL0_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL0_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL0_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL0_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL0_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL0_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL0_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL0_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL0_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL0_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL0_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL0_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL0_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL0_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_OTL1_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_OTL1_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_OTL1_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_OTL1_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_OTL1_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_OTL1_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_OTL1_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG0_ONFIG_OTL1_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_OTL1_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG0_ONFIG_OTL1_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG0_ONFIG_OTL1_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_OTL1_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_ONFIG_OTL1_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_ONFIG_OTL1_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_OTL1_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_CONFIG0_ONFIG_OTL1_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG0_ONFIG_OTL1_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_OTL1_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL1_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL1_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL1_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL1_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL1_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL1_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL1_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL1_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL1_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL1_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL1_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL1_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL1_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL1_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL1_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL1_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL1_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL1_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_OTL2_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_OTL2_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_OTL2_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_OTL2_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_OTL2_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_OTL2_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_OTL2_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG0_ONFIG_OTL2_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_OTL2_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG0_ONFIG_OTL2_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG0_ONFIG_OTL2_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_OTL2_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_ONFIG_OTL2_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_ONFIG_OTL2_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_OTL2_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_CONFIG0_ONFIG_OTL2_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG0_ONFIG_OTL2_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_OTL2_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL2_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL2_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL2_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL2_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL2_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL2_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL2_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL2_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL2_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL2_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL2_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL2_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL2_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL2_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL2_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL2_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL2_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL2_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_OTL3_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_OTL3_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_OTL3_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_OTL3_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_OTL3_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_OTL3_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_OTL3_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG0_ONFIG_OTL3_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_OTL3_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG0_ONFIG_OTL3_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG0_ONFIG_OTL3_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_OTL3_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_ONFIG_OTL3_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_ONFIG_OTL3_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_OTL3_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_CONFIG0_ONFIG_OTL3_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG0_ONFIG_OTL3_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_OTL3_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL3_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL3_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL3_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL3_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL3_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL3_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL3_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL3_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL3_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL3_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL3_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL3_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL3_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL3_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL3_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL3_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL3_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL3_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_OTL4_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_OTL4_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_OTL4_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_OTL4_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_OTL4_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_OTL4_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_OTL4_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG0_ONFIG_OTL4_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_OTL4_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG0_ONFIG_OTL4_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG0_ONFIG_OTL4_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_OTL4_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_ONFIG_OTL4_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_ONFIG_OTL4_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_OTL4_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_CONFIG0_ONFIG_OTL4_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG0_ONFIG_OTL4_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_OTL4_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL4_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL4_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL4_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL4_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL4_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL4_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL4_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL4_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL4_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL4_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL4_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL4_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL4_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL4_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL4_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL4_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL4_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_OTL4_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_DISABLE_2CREDS_TO_OTL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_DISABLE_2CREDS_TO_OTL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_DISABLE_2CREDS_TO_OTL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_DISABLE_2CREDS_TO_OTL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_DISABLE_2CREDS_TO_OTL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_DISABLE_2CREDS_TO_OTL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_DISABLE_2CREDS_TO_OTL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG0_ONFIG_DISABLE_2CREDS_TO_OTL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_DISABLE_2CREDS_TO_OTL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG0_ONFIG_DISABLE_2CREDS_TO_OTL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG0_ONFIG_DISABLE_2CREDS_TO_OTL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_DISABLE_2CREDS_TO_OTL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_ONFIG_DISABLE_2CREDS_TO_OTL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_ONFIG_DISABLE_2CREDS_TO_OTL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_DISABLE_2CREDS_TO_OTL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_CONFIG0_ONFIG_DISABLE_2CREDS_TO_OTL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG0_ONFIG_DISABLE_2CREDS_TO_OTL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_DISABLE_2CREDS_TO_OTL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_DISABLE_2CREDS_TO_OTL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_DISABLE_2CREDS_TO_OTL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_DISABLE_2CREDS_TO_OTL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_DISABLE_2CREDS_TO_OTL(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_DISABLE_2CREDS_TO_OTL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_DISABLE_2CREDS_TO_OTL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_DISABLE_2CREDS_TO_OTL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_DISABLE_2CREDS_TO_OTL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_DISABLE_2CREDS_TO_OTL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_DISABLE_2CREDS_TO_OTL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_DISABLE_2CREDS_TO_OTL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_DISABLE_2CREDS_TO_OTL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_DISABLE_2CREDS_TO_OTL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_DISABLE_2CREDS_TO_OTL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_DISABLE_2CREDS_TO_OTL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_DISABLE_2CREDS_TO_OTL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_DISABLE_2CREDS_TO_OTL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_DISABLE_2CREDS_TO_OTL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_RESTRICT_RSPIN_CREDIT_TO1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_RESTRICT_RSPIN_CREDIT_TO1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_RESTRICT_RSPIN_CREDIT_TO1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_RESTRICT_RSPIN_CREDIT_TO1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_RESTRICT_RSPIN_CREDIT_TO1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_RESTRICT_RSPIN_CREDIT_TO1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_RESTRICT_RSPIN_CREDIT_TO1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG0_ONFIG_RESTRICT_RSPIN_CREDIT_TO1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_RESTRICT_RSPIN_CREDIT_TO1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG0_ONFIG_RESTRICT_RSPIN_CREDIT_TO1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG0_ONFIG_RESTRICT_RSPIN_CREDIT_TO1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_RESTRICT_RSPIN_CREDIT_TO1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_ONFIG_RESTRICT_RSPIN_CREDIT_TO1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_ONFIG_RESTRICT_RSPIN_CREDIT_TO1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_RESTRICT_RSPIN_CREDIT_TO1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_CONFIG0_ONFIG_RESTRICT_RSPIN_CREDIT_TO1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG0_ONFIG_RESTRICT_RSPIN_CREDIT_TO1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_RESTRICT_RSPIN_CREDIT_TO1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_RESTRICT_RSPIN_CREDIT_TO1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_RESTRICT_RSPIN_CREDIT_TO1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_RESTRICT_RSPIN_CREDIT_TO1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_RESTRICT_RSPIN_CREDIT_TO1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_RESTRICT_RSPIN_CREDIT_TO1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_RESTRICT_RSPIN_CREDIT_TO1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_RESTRICT_RSPIN_CREDIT_TO1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_RESTRICT_RSPIN_CREDIT_TO1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_RESTRICT_RSPIN_CREDIT_TO1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_RESTRICT_RSPIN_CREDIT_TO1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_RESTRICT_RSPIN_CREDIT_TO1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_RESTRICT_RSPIN_CREDIT_TO1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_RESTRICT_RSPIN_CREDIT_TO1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_RESTRICT_RSPIN_CREDIT_TO1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_RESTRICT_RSPIN_CREDIT_TO1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_RESTRICT_RSPIN_CREDIT_TO1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_RESTRICT_RSPIN_CREDIT_TO1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_RESTRICT_RSPIN_CREDIT_TO1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_XSL_QUICK_FENCE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_XSL_QUICK_FENCE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_XSL_QUICK_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_XSL_QUICK_FENCE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_XSL_QUICK_FENCE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_XSL_QUICK_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_XSL_QUICK_FENCE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_XSL_QUICK_FENCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_XSL_QUICK_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_XSL_QUICK_FENCE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_XSL_QUICK_FENCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_XSL_QUICK_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_XSL_QUICK_FENCE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_XSL_QUICK_FENCE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_XSL_QUICK_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_XSL_QUICK_FENCE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_XSL_QUICK_FENCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_XSL_QUICK_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_XSL_QUICK_FENCE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_XSL_QUICK_FENCE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_XSL_QUICK_FENCE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_XSL_QUICK_FENCE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_XSL_QUICK_FENCE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_XSL_QUICK_FENCE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_XSL_QUICK_FENCE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_XSL_QUICK_FENCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_XSL_QUICK_FENCE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_XSL_QUICK_FENCE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_XSL_QUICK_FENCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_XSL_QUICK_FENCE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_XSL_QUICK_FENCE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_XSL_QUICK_FENCE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_XSL_QUICK_FENCE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_XSL_QUICK_FENCE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_XSL_QUICK_FENCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_XSL_QUICK_FENCE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_NCF_QUICK_FENCE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_NCF_QUICK_FENCE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_NCF_QUICK_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_NCF_QUICK_FENCE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_NCF_QUICK_FENCE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_NCF_QUICK_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_NCF_QUICK_FENCE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_NCF_QUICK_FENCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_NCF_QUICK_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_NCF_QUICK_FENCE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_NCF_QUICK_FENCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_NCF_QUICK_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_NCF_QUICK_FENCE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_NCF_QUICK_FENCE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_NCF_QUICK_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_NCF_QUICK_FENCE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_NCF_QUICK_FENCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_NCF_QUICK_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_NCF_QUICK_FENCE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_NCF_QUICK_FENCE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_NCF_QUICK_FENCE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_NCF_QUICK_FENCE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_NCF_QUICK_FENCE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_NCF_QUICK_FENCE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_NCF_QUICK_FENCE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_NCF_QUICK_FENCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_NCF_QUICK_FENCE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_NCF_QUICK_FENCE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_NCF_QUICK_FENCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_NCF_QUICK_FENCE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_NCF_QUICK_FENCE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_NCF_QUICK_FENCE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_NCF_QUICK_FENCE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_NCF_QUICK_FENCE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_NCF_QUICK_FENCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_NCF_QUICK_FENCE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_NVF_QUICK_FENCE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_NVF_QUICK_FENCE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_NVF_QUICK_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_NVF_QUICK_FENCE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_NVF_QUICK_FENCE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_NVF_QUICK_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_NVF_QUICK_FENCE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_NVF_QUICK_FENCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_NVF_QUICK_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_NVF_QUICK_FENCE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_NVF_QUICK_FENCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_NVF_QUICK_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_NVF_QUICK_FENCE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_NVF_QUICK_FENCE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_NVF_QUICK_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_NVF_QUICK_FENCE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_NVF_QUICK_FENCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_ENABLE_NVF_QUICK_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_NVF_QUICK_FENCE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_NVF_QUICK_FENCE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_NVF_QUICK_FENCE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_NVF_QUICK_FENCE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_NVF_QUICK_FENCE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_NVF_QUICK_FENCE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_NVF_QUICK_FENCE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_NVF_QUICK_FENCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_NVF_QUICK_FENCE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_NVF_QUICK_FENCE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_NVF_QUICK_FENCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_NVF_QUICK_FENCE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_NVF_QUICK_FENCE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_NVF_QUICK_FENCE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_NVF_QUICK_FENCE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_NVF_QUICK_FENCE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_NVF_QUICK_FENCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_ENABLE_NVF_QUICK_FENCE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_RANDOMIZE_INT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_RANDOMIZE_INT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_RANDOMIZE_INT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_RANDOMIZE_INT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_ONFIG_RANDOMIZE_INT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_RANDOMIZE_INT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_ONFIG_RANDOMIZE_INT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG0_ONFIG_RANDOMIZE_INT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_RANDOMIZE_INT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG0_ONFIG_RANDOMIZE_INT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG0_ONFIG_RANDOMIZE_INT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_RANDOMIZE_INT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_ONFIG_RANDOMIZE_INT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_ONFIG_RANDOMIZE_INT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_RANDOMIZE_INT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_CONFIG0_ONFIG_RANDOMIZE_INT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG0_ONFIG_RANDOMIZE_INT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_ONFIG_RANDOMIZE_INT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_RANDOMIZE_INT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_RANDOMIZE_INT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_RANDOMIZE_INT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_RANDOMIZE_INT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_RANDOMIZE_INT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_RANDOMIZE_INT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_RANDOMIZE_INT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_RANDOMIZE_INT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_RANDOMIZE_INT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_RANDOMIZE_INT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_RANDOMIZE_INT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_RANDOMIZE_INT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_RANDOMIZE_INT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_RANDOMIZE_INT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_RANDOMIZE_INT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_RANDOMIZE_INT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_RANDOMIZE_INT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_RANDOMIZE_INT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_NVLINK_P9P9_MODE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_NVLINK_P9P9_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_NVLINK_P9P9_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_NVLINK_P9P9_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_NVLINK_P9P9_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_NVLINK_P9P9_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_NVLINK_P9P9_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_NVLINK_P9P9_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_NVLINK_P9P9_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_NVLINK_P9P9_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_NVLINK_P9P9_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_NVLINK_P9P9_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_NVLINK_P9P9_MODE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_NVLINK_P9P9_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_NVLINK_P9P9_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_NVLINK_P9P9_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_NVLINK_P9P9_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_CONFIG0_S_CTL_MISC_CONFIG_NVLINK_P9P9_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_FENCE_CONTROL1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_FENCE_CONTROL1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_FENCE_CONTROL1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_FENCE_CONTROL1;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_FENCE_CONTROL1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_FENCE_CONTROL1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_FENCE_CONTROL1));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_FENCE_CONTROL1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_FENCE_CONTROL1_1_REQUEST_FENCE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_FENCE_CONTROL1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_FENCE_CONTROL1_1_REQUEST_FENCE,
           CS_CTL_MISC_FENCE_CONTROL1_1_REQUEST_FENCE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_FENCE_CONTROL1_1_REQUEST_FENCE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_FENCE_CONTROL1_1_REQUEST_FENCE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_FENCE_CONTROL1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_FENCE_CONTROL1_1_REQUEST_FENCE,
           CS_CTL_MISC_FENCE_CONTROL1_1_REQUEST_FENCE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_FENCE_CONTROL1_1_REQUEST_FENCE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_FENCE_CONTROL1_1_REQUEST_FENCE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_FENCE_CONTROL1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_FENCE_CONTROL1_1_REQUEST_FENCE,
           CS_CTL_MISC_FENCE_CONTROL1_1_REQUEST_FENCE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_FENCE_CONTROL1_1_REQUEST_FENCE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_FENCE_CONTROL1__CONTROL1_RESERVED(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_FENCE_CONTROL1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_FENCE_CONTROL1__CONTROL1_RESERVED,
           CS_CTL_MISC_FENCE_CONTROL1__CONTROL1_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_FENCE_CONTROL1__CONTROL1_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_FENCE_CONTROL1__CONTROL1_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_FENCE_CONTROL1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_FENCE_CONTROL1__CONTROL1_RESERVED,
           CS_CTL_MISC_FENCE_CONTROL1__CONTROL1_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_FENCE_CONTROL1__CONTROL1_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_FENCE_CONTROL1__CONTROL1_RESERVED(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_FENCE_CONTROL1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_FENCE_CONTROL1__CONTROL1_RESERVED,
           CS_CTL_MISC_FENCE_CONTROL1__CONTROL1_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_FENCE_CONTROL1__CONTROL1_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_LPCTH_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_LPCTH_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_LPCTH_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_LPCTH_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_LPCTH_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_LPCTH_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_LPCTH_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_LPCTH_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_BUSY_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_LPCTH_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_BUSY_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_BUSY_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_BUSY_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_LPCTH_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_BUSY_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_BUSY_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_BUSY_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_LPCTH_CONFIG));
#endif
    return o_data.setBit<CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_BUSY_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_BUSY_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_BUSY_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_LPCTH_CONFIG));
#endif
    return o_data.clearBit<CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_BUSY_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_BUSY_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_BUSY_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_LPCTH_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_BUSY_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_BUSY_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_BUSY_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_LPCTH_CONFIG));
#endif
    return i_data.getBit<CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_BUSY_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_BUSY_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_BUSY_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_LPCTH_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_BUSY_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_BUSY_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_BUSY_ENABLE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_LPCTH_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_BUSY_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_BUSY_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_BUSY_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_LPCTH_CONFIG));
#endif
    return o_data.setBit<CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_BUSY_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_BUSY_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_BUSY_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_LPCTH_CONFIG));
#endif
    return o_data.clearBit<CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_BUSY_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_BUSY_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_BUSY_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_LPCTH_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_BUSY_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_BUSY_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_BUSY_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_LPCTH_CONFIG));
#endif
    return i_data.getBit<CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_BUSY_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_BUSY_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_WINDOW_SELECT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_LPCTH_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_WINDOW_SELECT,
           CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_WINDOW_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_WINDOW_SELECT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_WINDOW_SELECT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_LPCTH_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_WINDOW_SELECT,
           CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_WINDOW_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_WINDOW_SELECT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_WINDOW_SELECT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_LPCTH_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_WINDOW_SELECT,
           CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_WINDOW_SELECT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_WINDOW_SELECT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_WINDOW_SELECT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_LPCTH_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_WINDOW_SELECT,
           CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_WINDOW_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_WINDOW_SELECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_WINDOW_SELECT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_LPCTH_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_WINDOW_SELECT,
           CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_WINDOW_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_WINDOW_SELECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_WINDOW_SELECT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_LPCTH_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_WINDOW_SELECT,
           CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_WINDOW_SELECT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_WINDOW_SELECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_THRESH_0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_LPCTH_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_THRESH_0,
           CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_THRESH_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_THRESH_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_THRESH_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_LPCTH_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_THRESH_0,
           CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_THRESH_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_THRESH_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_THRESH_0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_LPCTH_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_THRESH_0,
           CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_THRESH_0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_THRESH_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_THRESH_0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_LPCTH_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_THRESH_0,
           CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_THRESH_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_THRESH_0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_THRESH_0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_LPCTH_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_THRESH_0,
           CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_THRESH_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_THRESH_0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_THRESH_0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_LPCTH_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_THRESH_0,
           CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_THRESH_0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_THRESH_0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_THRESH_1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_LPCTH_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_THRESH_1,
           CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_THRESH_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_THRESH_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_THRESH_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_LPCTH_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_THRESH_1,
           CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_THRESH_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_THRESH_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_THRESH_1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_LPCTH_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_THRESH_1,
           CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_THRESH_1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_THRESH_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_THRESH_1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_LPCTH_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_THRESH_1,
           CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_THRESH_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_THRESH_1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_THRESH_1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_LPCTH_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_THRESH_1,
           CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_THRESH_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_THRESH_1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_THRESH_1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_LPCTH_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_THRESH_1,
           CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_THRESH_1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_THRESH_1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_THRESH_2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_LPCTH_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_THRESH_2,
           CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_THRESH_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_THRESH_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_THRESH_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_LPCTH_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_THRESH_2,
           CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_THRESH_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_THRESH_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_THRESH_2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_LPCTH_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_THRESH_2,
           CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_THRESH_2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_LPCTH_CONFIG_ONFIG_LPCTH_THRESH_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_THRESH_2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_LPCTH_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_THRESH_2,
           CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_THRESH_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_THRESH_2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_THRESH_2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_LPCTH_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_THRESH_2,
           CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_THRESH_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_THRESH_2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_THRESH_2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_LPCTH_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_THRESH_2,
           CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_THRESH_2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_THRESH_2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_LPCTH_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_RESERVED1,
           CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_RESERVED1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_LPCTH_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_RESERVED1,
           CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_LPCTH_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_RESERVED1,
           CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_LPCTH_CONFIG_S_CTL_MISC_CONFIG_LPCTH_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_PERF_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_PERF_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_PERF_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_PERF_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_PERF_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_PERF_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_PERF_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_CONFIG_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.setBit<CS_CTL_MISC_PERF_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_PERF_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.clearBit<CS_CTL_MISC_PERF_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_PERF_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_PERF_CONFIG_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_PERF_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return i_data.getBit<CS_CTL_MISC_PERF_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_CONFIG_RESETMODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_CONFIG_RESETMODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_RESETMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_CONFIG_RESETMODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_CONFIG_RESETMODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_RESETMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_CONFIG_RESETMODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.setBit<CS_CTL_MISC_PERF_CONFIG_RESETMODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_RESETMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_PERF_CONFIG_RESETMODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.clearBit<CS_CTL_MISC_PERF_CONFIG_RESETMODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_RESETMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_PERF_CONFIG_RESETMODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_PERF_CONFIG_RESETMODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_RESETMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_PERF_CONFIG_RESETMODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return i_data.getBit<CS_CTL_MISC_PERF_CONFIG_RESETMODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_RESETMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_CONFIG_FREEZEMODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_CONFIG_FREEZEMODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_FREEZEMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_CONFIG_FREEZEMODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_CONFIG_FREEZEMODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_FREEZEMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_CONFIG_FREEZEMODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.setBit<CS_CTL_MISC_PERF_CONFIG_FREEZEMODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_FREEZEMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_PERF_CONFIG_FREEZEMODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.clearBit<CS_CTL_MISC_PERF_CONFIG_FREEZEMODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_FREEZEMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_PERF_CONFIG_FREEZEMODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_PERF_CONFIG_FREEZEMODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_FREEZEMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_PERF_CONFIG_FREEZEMODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return i_data.getBit<CS_CTL_MISC_PERF_CONFIG_FREEZEMODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_FREEZEMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_CONFIG_DISABLE_PMISC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_CONFIG_DISABLE_PMISC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_DISABLE_PMISC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_CONFIG_DISABLE_PMISC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_CONFIG_DISABLE_PMISC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_DISABLE_PMISC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_CONFIG_DISABLE_PMISC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.setBit<CS_CTL_MISC_PERF_CONFIG_DISABLE_PMISC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_DISABLE_PMISC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_PERF_CONFIG_DISABLE_PMISC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.clearBit<CS_CTL_MISC_PERF_CONFIG_DISABLE_PMISC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_DISABLE_PMISC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_PERF_CONFIG_DISABLE_PMISC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_PERF_CONFIG_DISABLE_PMISC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_DISABLE_PMISC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_PERF_CONFIG_DISABLE_PMISC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return i_data.getBit<CS_CTL_MISC_PERF_CONFIG_DISABLE_PMISC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_DISABLE_PMISC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_CONFIG_PMISC_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_CONFIG_PMISC_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_PMISC_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_CONFIG_PMISC_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_CONFIG_PMISC_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_PMISC_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_CONFIG_PMISC_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.setBit<CS_CTL_MISC_PERF_CONFIG_PMISC_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_PMISC_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_PERF_CONFIG_PMISC_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.clearBit<CS_CTL_MISC_PERF_CONFIG_PMISC_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_PMISC_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_PERF_CONFIG_PMISC_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_PERF_CONFIG_PMISC_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_PMISC_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_PERF_CONFIG_PMISC_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return i_data.getBit<CS_CTL_MISC_PERF_CONFIG_PMISC_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_PMISC_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_CONFIG_CASCADE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_CONFIG_CASCADE,
           CS_CTL_MISC_PERF_CONFIG_CASCADE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_CASCADE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_CONFIG_CASCADE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_CONFIG_CASCADE,
           CS_CTL_MISC_PERF_CONFIG_CASCADE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_CASCADE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_PERF_CONFIG_CASCADE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_PERF_CONFIG_CASCADE,
           CS_CTL_MISC_PERF_CONFIG_CASCADE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_CASCADE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_CONFIG_PRESCALE_C0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_CONFIG_PRESCALE_C0,
           CS_CTL_MISC_PERF_CONFIG_PRESCALE_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_PRESCALE_C0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_CONFIG_PRESCALE_C0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_CONFIG_PRESCALE_C0,
           CS_CTL_MISC_PERF_CONFIG_PRESCALE_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_PRESCALE_C0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_PERF_CONFIG_PRESCALE_C0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_PERF_CONFIG_PRESCALE_C0,
           CS_CTL_MISC_PERF_CONFIG_PRESCALE_C0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_PRESCALE_C0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_CONFIG_PRESCALE_C1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_CONFIG_PRESCALE_C1,
           CS_CTL_MISC_PERF_CONFIG_PRESCALE_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_PRESCALE_C1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_CONFIG_PRESCALE_C1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_CONFIG_PRESCALE_C1,
           CS_CTL_MISC_PERF_CONFIG_PRESCALE_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_PRESCALE_C1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_PERF_CONFIG_PRESCALE_C1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_PERF_CONFIG_PRESCALE_C1,
           CS_CTL_MISC_PERF_CONFIG_PRESCALE_C1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_PRESCALE_C1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_CONFIG_PRESCALE_C2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_CONFIG_PRESCALE_C2,
           CS_CTL_MISC_PERF_CONFIG_PRESCALE_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_PRESCALE_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_CONFIG_PRESCALE_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_CONFIG_PRESCALE_C2,
           CS_CTL_MISC_PERF_CONFIG_PRESCALE_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_PRESCALE_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_PERF_CONFIG_PRESCALE_C2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_PERF_CONFIG_PRESCALE_C2,
           CS_CTL_MISC_PERF_CONFIG_PRESCALE_C2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_PRESCALE_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_CONFIG_PRESCALE_C3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_CONFIG_PRESCALE_C3,
           CS_CTL_MISC_PERF_CONFIG_PRESCALE_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_PRESCALE_C3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_CONFIG_PRESCALE_C3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_CONFIG_PRESCALE_C3,
           CS_CTL_MISC_PERF_CONFIG_PRESCALE_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_PRESCALE_C3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_PERF_CONFIG_PRESCALE_C3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_PERF_CONFIG_PRESCALE_C3,
           CS_CTL_MISC_PERF_CONFIG_PRESCALE_C3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_PRESCALE_C3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_CONFIG_EVENT0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_CONFIG_EVENT0,
           CS_CTL_MISC_PERF_CONFIG_EVENT0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_EVENT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_CONFIG_EVENT0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_CONFIG_EVENT0,
           CS_CTL_MISC_PERF_CONFIG_EVENT0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_EVENT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_PERF_CONFIG_EVENT0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_PERF_CONFIG_EVENT0,
           CS_CTL_MISC_PERF_CONFIG_EVENT0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_EVENT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_CONFIG_EVENT1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_CONFIG_EVENT1,
           CS_CTL_MISC_PERF_CONFIG_EVENT1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_EVENT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_CONFIG_EVENT1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_CONFIG_EVENT1,
           CS_CTL_MISC_PERF_CONFIG_EVENT1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_EVENT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_PERF_CONFIG_EVENT1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_PERF_CONFIG_EVENT1,
           CS_CTL_MISC_PERF_CONFIG_EVENT1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_EVENT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_CONFIG_EVENT2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_CONFIG_EVENT2,
           CS_CTL_MISC_PERF_CONFIG_EVENT2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_EVENT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_CONFIG_EVENT2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_CONFIG_EVENT2,
           CS_CTL_MISC_PERF_CONFIG_EVENT2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_EVENT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_PERF_CONFIG_EVENT2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_PERF_CONFIG_EVENT2,
           CS_CTL_MISC_PERF_CONFIG_EVENT2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_EVENT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_CONFIG_EVENT3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_CONFIG_EVENT3,
           CS_CTL_MISC_PERF_CONFIG_EVENT3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_EVENT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_CONFIG_EVENT3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_CONFIG_EVENT3,
           CS_CTL_MISC_PERF_CONFIG_EVENT3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_EVENT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_PERF_CONFIG_EVENT3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_PERF_CONFIG_EVENT3,
           CS_CTL_MISC_PERF_CONFIG_EVENT3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_EVENT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_CONFIG_LATSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_CONFIG_LATSTART,
           CS_CTL_MISC_PERF_CONFIG_LATSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_LATSTART chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_CONFIG_LATSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_CONFIG_LATSTART,
           CS_CTL_MISC_PERF_CONFIG_LATSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_LATSTART chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_PERF_CONFIG_LATSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_PERF_CONFIG_LATSTART,
           CS_CTL_MISC_PERF_CONFIG_LATSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_LATSTART chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_CONFIG_LATCANCEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_CONFIG_LATCANCEL,
           CS_CTL_MISC_PERF_CONFIG_LATCANCEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_LATCANCEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_CONFIG_LATCANCEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_CONFIG_LATCANCEL,
           CS_CTL_MISC_PERF_CONFIG_LATCANCEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_LATCANCEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_PERF_CONFIG_LATCANCEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_PERF_CONFIG_LATCANCEL,
           CS_CTL_MISC_PERF_CONFIG_LATCANCEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_LATCANCEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_CONFIG_LATFINISH(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_CONFIG_LATFINISH,
           CS_CTL_MISC_PERF_CONFIG_LATFINISH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_LATFINISH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_CONFIG_LATFINISH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_CONFIG_LATFINISH,
           CS_CTL_MISC_PERF_CONFIG_LATFINISH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_LATFINISH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_PERF_CONFIG_LATFINISH(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_PERF_CONFIG_LATFINISH,
           CS_CTL_MISC_PERF_CONFIG_LATFINISH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_LATFINISH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_CONFIG_LATFILTER(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_CONFIG_LATFILTER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_LATFILTER chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_CONFIG_LATFILTER(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_CONFIG_LATFILTER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_LATFILTER chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_CONFIG_LATFILTER(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.setBit<CS_CTL_MISC_PERF_CONFIG_LATFILTER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_LATFILTER chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_PERF_CONFIG_LATFILTER(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return o_data.clearBit<CS_CTL_MISC_PERF_CONFIG_LATFILTER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_LATFILTER chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_PERF_CONFIG_LATFILTER(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_PERF_CONFIG_LATFILTER,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_LATFILTER chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_CTL_MISC_PERF_CONFIG_LATFILTER(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_CONFIG));
#endif
    return i_data.getBit<CS_CTL_MISC_PERF_CONFIG_LATFILTER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_CTL_MISC_PERF_CONFIG_LATFILTER chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_DIR_MISC_PERF_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_DIR_MISC_PERF_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_DIR_MISC_PERF_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_DIR_MISC_PERF_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM0_DIR_MISC_PERF_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_DIR_MISC_PERF_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_PERF_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM0_DIR_MISC_PERF_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_PERF_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_PERF_CONFIG_RESERVED1,
           CS_SM0_DIR_MISC_PERF_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_DIR_MISC_PERF_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_PERF_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_PERF_CONFIG_RESERVED1,
           CS_SM0_DIR_MISC_PERF_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_DIR_MISC_PERF_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_DIR_MISC_PERF_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_DIR_MISC_PERF_CONFIG_RESERVED1,
           CS_SM0_DIR_MISC_PERF_CONFIG_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_DIR_MISC_PERF_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_PERF_CONFIG_EVENT0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_PERF_CONFIG_EVENT0,
           CS_SM0_DIR_MISC_PERF_CONFIG_EVENT0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_DIR_MISC_PERF_CONFIG_EVENT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_PERF_CONFIG_EVENT0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_PERF_CONFIG_EVENT0,
           CS_SM0_DIR_MISC_PERF_CONFIG_EVENT0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_DIR_MISC_PERF_CONFIG_EVENT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_DIR_MISC_PERF_CONFIG_EVENT0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_DIR_MISC_PERF_CONFIG_EVENT0,
           CS_SM0_DIR_MISC_PERF_CONFIG_EVENT0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_DIR_MISC_PERF_CONFIG_EVENT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_PERF_CONFIG_EVENT1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_PERF_CONFIG_EVENT1,
           CS_SM0_DIR_MISC_PERF_CONFIG_EVENT1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_DIR_MISC_PERF_CONFIG_EVENT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_PERF_CONFIG_EVENT1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_PERF_CONFIG_EVENT1,
           CS_SM0_DIR_MISC_PERF_CONFIG_EVENT1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_DIR_MISC_PERF_CONFIG_EVENT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_DIR_MISC_PERF_CONFIG_EVENT1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_DIR_MISC_PERF_CONFIG_EVENT1,
           CS_SM0_DIR_MISC_PERF_CONFIG_EVENT1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_DIR_MISC_PERF_CONFIG_EVENT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_PERF_CONFIG_EVENT2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_PERF_CONFIG_EVENT2,
           CS_SM0_DIR_MISC_PERF_CONFIG_EVENT2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_DIR_MISC_PERF_CONFIG_EVENT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_PERF_CONFIG_EVENT2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_PERF_CONFIG_EVENT2,
           CS_SM0_DIR_MISC_PERF_CONFIG_EVENT2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_DIR_MISC_PERF_CONFIG_EVENT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_DIR_MISC_PERF_CONFIG_EVENT2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_DIR_MISC_PERF_CONFIG_EVENT2,
           CS_SM0_DIR_MISC_PERF_CONFIG_EVENT2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_DIR_MISC_PERF_CONFIG_EVENT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_PERF_CONFIG_EVENT3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_PERF_CONFIG_EVENT3,
           CS_SM0_DIR_MISC_PERF_CONFIG_EVENT3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_DIR_MISC_PERF_CONFIG_EVENT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_PERF_CONFIG_EVENT3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_PERF_CONFIG_EVENT3,
           CS_SM0_DIR_MISC_PERF_CONFIG_EVENT3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_DIR_MISC_PERF_CONFIG_EVENT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_DIR_MISC_PERF_CONFIG_EVENT3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_DIR_MISC_PERF_CONFIG_EVENT3,
           CS_SM0_DIR_MISC_PERF_CONFIG_EVENT3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_DIR_MISC_PERF_CONFIG_EVENT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_PERF_CONFIG_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_PERF_CONFIG_RESERVED2,
           CS_SM0_DIR_MISC_PERF_CONFIG_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_DIR_MISC_PERF_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_PERF_CONFIG_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_PERF_CONFIG_RESERVED2,
           CS_SM0_DIR_MISC_PERF_CONFIG_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_DIR_MISC_PERF_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_DIR_MISC_PERF_CONFIG_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_DIR_MISC_PERF_CONFIG_RESERVED2,
           CS_SM0_DIR_MISC_PERF_CONFIG_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_DIR_MISC_PERF_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_PERF_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_DIR_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_PERF_CONFIG_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_PERF_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_DIR_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.setBit<CS_SM0_DIR_MISC_PERF_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_DIR_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_DIR_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.clearBit<CS_SM0_DIR_MISC_PERF_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_DIR_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_DIR_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_DIR_MISC_PERF_CONFIG_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_DIR_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_DIR_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_PERF_CONFIG));
#endif
    return i_data.getBit<CS_SM0_DIR_MISC_PERF_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_DIR_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_MCP_MISC_CERR_MASK0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_CERR_MASK0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_MCP_MISC_CERR_MASK0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_CERR_MASK0;
#endif
    return fapi2::getScom(i_target, CS_SM0_MCP_MISC_CERR_MASK0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_MCP_MISC_CERR_MASK0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return fapi2::putScom(i_target, CS_SM0_MCP_MISC_CERR_MASK0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_NVF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_NVF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_NVF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_NVF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_NVF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_NVF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_NVF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_NVF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_NVF_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_NVF_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_NVF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_NVF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_NVF_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_NVF_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_NVF_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_NVF_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_NVF_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_NVF_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_NVF_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_NVF_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_NVF_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_NVF_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_NVF_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_ASBE_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_ASBE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_PBR_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_PBR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_PBR_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_PBR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_PBR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_PBR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_PBR_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_PBR_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_PBR_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_PBR_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_PBR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_PBR_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_PBR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_PBR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_PBR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_PBR_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_PBR_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_PBR_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_PBR_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_PBR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_PBR_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_PBR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_PBR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_PBR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_PBR_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_PBR_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_PBR_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_PBR_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_PBR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_PBR_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_PBR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_PBR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_PBR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_PBR_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_PBR_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_PBR_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_REG_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_REG_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_REG_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_REG_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_REG_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_REG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_REG_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_REG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_REG_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_REG_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_REG_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_REG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_REG_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_REG_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_REG_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_REG_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_REG_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_REG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_REG_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_REG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_REG_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_REG_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_REG_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_REG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_REG_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_REG_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_REG_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_REG_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_REG_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_REG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_REG_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_REG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_REG_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_REG_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_REG_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_REG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_REG_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_REG_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_REG_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_REG_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_REG_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_REG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_REG_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_REG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_REG_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_REG_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_REG_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_REG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_OCR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_OCR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_OCR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_OCR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_OCR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_OCR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_OCR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_OCR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_OCR_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_OCR_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_OCR_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_OCR_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_OCR_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_OCR_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_OCR_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK0_OCR_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK0_OCR_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK0_OCR_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK0_OCR_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_MCP_MISC_CERR_MASK0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2;
#endif
    return fapi2::getScom(i_target, CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return fapi2::putScom(i_target, CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_TAG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_TAG,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_TAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_TAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_TAG,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_TAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_TAG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_TAG,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_TAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_TAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_WREND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_WREND,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_WREND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_WREND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_WREND,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_WREND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_WREND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_WREND,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_WREND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC2_WREND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_SNP_MISC_TOPOLOGY_TABLE1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_TOPOLOGY_TABLE1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_TOPOLOGY_TABLE1;
#endif
    return fapi2::getScom(i_target, CS_SM0_SNP_MISC_TOPOLOGY_TABLE1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_SNP_MISC_TOPOLOGY_TABLE1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return fapi2::putScom(i_target, CS_SM0_SNP_MISC_TOPOLOGY_TABLE1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY8,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY8,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY8,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY8_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY9,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY9,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY9,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY10,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY10,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY10,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY11,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY11_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY11,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY11_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY11,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY11_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY12,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY12_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY12,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY12_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY12,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY12_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY13,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY13_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY13,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY13_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY13,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY13_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY14,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY14_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY14,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY14_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY14,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY14_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY15,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY15_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY15,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY15_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY15,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY15_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE1_TRY15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_DIR_MISC_PERF_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_DIR_MISC_PERF_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_DIR_MISC_PERF_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_DIR_MISC_PERF_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM1_DIR_MISC_PERF_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_DIR_MISC_PERF_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_PERF_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM1_DIR_MISC_PERF_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_PERF_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_PERF_CONFIG_RESERVED1,
           CS_SM1_DIR_MISC_PERF_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_DIR_MISC_PERF_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_PERF_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_PERF_CONFIG_RESERVED1,
           CS_SM1_DIR_MISC_PERF_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_DIR_MISC_PERF_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_DIR_MISC_PERF_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_DIR_MISC_PERF_CONFIG_RESERVED1,
           CS_SM1_DIR_MISC_PERF_CONFIG_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_DIR_MISC_PERF_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_PERF_CONFIG_EVENT0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_PERF_CONFIG_EVENT0,
           CS_SM1_DIR_MISC_PERF_CONFIG_EVENT0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_DIR_MISC_PERF_CONFIG_EVENT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_PERF_CONFIG_EVENT0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_PERF_CONFIG_EVENT0,
           CS_SM1_DIR_MISC_PERF_CONFIG_EVENT0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_DIR_MISC_PERF_CONFIG_EVENT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_DIR_MISC_PERF_CONFIG_EVENT0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_DIR_MISC_PERF_CONFIG_EVENT0,
           CS_SM1_DIR_MISC_PERF_CONFIG_EVENT0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_DIR_MISC_PERF_CONFIG_EVENT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_PERF_CONFIG_EVENT1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_PERF_CONFIG_EVENT1,
           CS_SM1_DIR_MISC_PERF_CONFIG_EVENT1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_DIR_MISC_PERF_CONFIG_EVENT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_PERF_CONFIG_EVENT1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_PERF_CONFIG_EVENT1,
           CS_SM1_DIR_MISC_PERF_CONFIG_EVENT1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_DIR_MISC_PERF_CONFIG_EVENT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_DIR_MISC_PERF_CONFIG_EVENT1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_DIR_MISC_PERF_CONFIG_EVENT1,
           CS_SM1_DIR_MISC_PERF_CONFIG_EVENT1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_DIR_MISC_PERF_CONFIG_EVENT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_PERF_CONFIG_EVENT2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_PERF_CONFIG_EVENT2,
           CS_SM1_DIR_MISC_PERF_CONFIG_EVENT2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_DIR_MISC_PERF_CONFIG_EVENT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_PERF_CONFIG_EVENT2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_PERF_CONFIG_EVENT2,
           CS_SM1_DIR_MISC_PERF_CONFIG_EVENT2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_DIR_MISC_PERF_CONFIG_EVENT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_DIR_MISC_PERF_CONFIG_EVENT2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_DIR_MISC_PERF_CONFIG_EVENT2,
           CS_SM1_DIR_MISC_PERF_CONFIG_EVENT2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_DIR_MISC_PERF_CONFIG_EVENT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_PERF_CONFIG_EVENT3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_PERF_CONFIG_EVENT3,
           CS_SM1_DIR_MISC_PERF_CONFIG_EVENT3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_DIR_MISC_PERF_CONFIG_EVENT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_PERF_CONFIG_EVENT3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_PERF_CONFIG_EVENT3,
           CS_SM1_DIR_MISC_PERF_CONFIG_EVENT3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_DIR_MISC_PERF_CONFIG_EVENT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_DIR_MISC_PERF_CONFIG_EVENT3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_DIR_MISC_PERF_CONFIG_EVENT3,
           CS_SM1_DIR_MISC_PERF_CONFIG_EVENT3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_DIR_MISC_PERF_CONFIG_EVENT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_PERF_CONFIG_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_PERF_CONFIG_RESERVED2,
           CS_SM1_DIR_MISC_PERF_CONFIG_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_DIR_MISC_PERF_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_PERF_CONFIG_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_PERF_CONFIG_RESERVED2,
           CS_SM1_DIR_MISC_PERF_CONFIG_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_DIR_MISC_PERF_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_DIR_MISC_PERF_CONFIG_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_DIR_MISC_PERF_CONFIG_RESERVED2,
           CS_SM1_DIR_MISC_PERF_CONFIG_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_DIR_MISC_PERF_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_PERF_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_DIR_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_PERF_CONFIG_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_PERF_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_DIR_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.setBit<CS_SM1_DIR_MISC_PERF_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_DIR_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_DIR_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.clearBit<CS_SM1_DIR_MISC_PERF_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_DIR_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_DIR_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_DIR_MISC_PERF_CONFIG_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_DIR_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_DIR_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_PERF_CONFIG));
#endif
    return i_data.getBit<CS_SM1_DIR_MISC_PERF_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_DIR_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_MCP_MISC_CERR_MESSAGE3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_CERR_MESSAGE3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_MCP_MISC_CERR_MESSAGE3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_CERR_MESSAGE3;
#endif
    return fapi2::getScom(i_target, CS_SM1_MCP_MISC_CERR_MESSAGE3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_MCP_MISC_CERR_MESSAGE3(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MESSAGE3));
#endif
    return fapi2::putScom(i_target, CS_SM1_MCP_MISC_CERR_MESSAGE3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MESSAGE3));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3,
           CS_SM1_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MESSAGE3));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3,
           CS_SM1_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MESSAGE3));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3,
           CS_SM1_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_MCP_MISC_XTIMER2_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_XTIMER2_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_MCP_MISC_XTIMER2_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_XTIMER2_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM1_MCP_MISC_XTIMER2_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_MCP_MISC_XTIMER2_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_XTIMER2_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM1_MCP_MISC_XTIMER2_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_XTIMER2_CONFIG_2_TICK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_XTIMER2_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_XTIMER2_CONFIG_2_TICK,
           CS_SM1_MCP_MISC_XTIMER2_CONFIG_2_TICK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_XTIMER2_CONFIG_2_TICK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_XTIMER2_CONFIG_2_TICK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_XTIMER2_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_XTIMER2_CONFIG_2_TICK,
           CS_SM1_MCP_MISC_XTIMER2_CONFIG_2_TICK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_XTIMER2_CONFIG_2_TICK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_XTIMER2_CONFIG_2_TICK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_XTIMER2_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_XTIMER2_CONFIG_2_TICK,
           CS_SM1_MCP_MISC_XTIMER2_CONFIG_2_TICK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_XTIMER2_CONFIG_2_TICK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_XTIMER2_CONFIG_3_TICK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_XTIMER2_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_XTIMER2_CONFIG_3_TICK,
           CS_SM1_MCP_MISC_XTIMER2_CONFIG_3_TICK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_XTIMER2_CONFIG_3_TICK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_XTIMER2_CONFIG_3_TICK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_XTIMER2_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_XTIMER2_CONFIG_3_TICK,
           CS_SM1_MCP_MISC_XTIMER2_CONFIG_3_TICK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_XTIMER2_CONFIG_3_TICK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_XTIMER2_CONFIG_3_TICK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_XTIMER2_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_XTIMER2_CONFIG_3_TICK,
           CS_SM1_MCP_MISC_XTIMER2_CONFIG_3_TICK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_MCP_MISC_XTIMER2_CONFIG_3_TICK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1;
#endif
    return fapi2::getScom(i_target, CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return fapi2::putScom(i_target, CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_SNP_MISC_DEBUG0_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_DEBUG0_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_SNP_MISC_DEBUG0_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_DEBUG0_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM1_SNP_MISC_DEBUG0_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_SNP_MISC_DEBUG0_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG0_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM1_SNP_MISC_DEBUG0_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD0,
           CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD0,
           CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD0,
           CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD1,
           CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD1,
           CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD1,
           CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD2,
           CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD2,
           CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD2,
           CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD3,
           CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD3,
           CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD3,
           CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD4,
           CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD4,
           CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD4,
           CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD5,
           CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD5,
           CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD5,
           CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD6,
           CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD6,
           CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD6,
           CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD7,
           CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD7,
           CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD7,
           CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD8,
           CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD8,
           CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD8,
           CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD8_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD9,
           CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD9,
           CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD9,
           CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD10,
           CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD10,
           CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD10,
           CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_DEBUG0_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG0_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG0_CONFIG_RESERVED1,
           CS_SM1_SNP_MISC_DEBUG0_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_DEBUG0_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG0_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG0_CONFIG_RESERVED1,
           CS_SM1_SNP_MISC_DEBUG0_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_DEBUG0_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_DEBUG0_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_DEBUG0_CONFIG_RESERVED1,
           CS_SM1_SNP_MISC_DEBUG0_CONFIG_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_DEBUG0_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG0_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG0_CONFIG_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_DEBUG0_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_DEBUG0_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_DEBUG0_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_DEBUG0_CONFIG_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_DEBUG0_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_SNP_MISC_NDT0_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_NDT0_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_SNP_MISC_NDT0_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_NDT0_BAR;
#endif
    return fapi2::getScom(i_target, CS_SM1_SNP_MISC_NDT0_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_SNP_MISC_NDT0_BAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT0_BAR));
#endif
    return fapi2::putScom(i_target, CS_SM1_SNP_MISC_NDT0_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT0_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT0_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT0_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT0_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT0_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT0_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT0_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT0_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT0_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT0_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT0_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT0_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT0_BAR_NDT0_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT0_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT0_BAR_NDT0_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT0_BAR_NDT0_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT0_BAR_NDT0_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT0_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT0_BAR_NDT0_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT0_BAR_NDT0_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT0_BAR_NDT0_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT0_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_NDT0_BAR_NDT0_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT0_BAR_NDT0_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_NDT0_BAR_NDT0_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT0_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_NDT0_BAR_NDT0_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT0_BAR_NDT0_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_NDT0_BAR_NDT0_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT0_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_NDT0_BAR_NDT0_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT0_BAR_NDT0_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_NDT0_BAR_NDT0_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT0_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_NDT0_BAR_NDT0_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT0_BAR_NDT0_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ADDR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT0_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ADDR,
           CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ADDR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT0_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ADDR,
           CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ADDR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT0_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ADDR,
           CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ADDR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT0_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT0_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT0_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT0_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT0_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT0_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT0_BAR_NDT0_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT0_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT0_BAR_NDT0_RESERVED2,
           CS_SM1_SNP_MISC_NDT0_BAR_NDT0_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT0_BAR_NDT0_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT0_BAR_NDT0_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT0_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT0_BAR_NDT0_RESERVED2,
           CS_SM1_SNP_MISC_NDT0_BAR_NDT0_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT0_BAR_NDT0_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_NDT0_BAR_NDT0_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT0_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_NDT0_BAR_NDT0_RESERVED2,
           CS_SM1_SNP_MISC_NDT0_BAR_NDT0_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT0_BAR_NDT0_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SIZE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT0_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SIZE,
           CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT0_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SIZE,
           CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SIZE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT0_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SIZE,
           CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_SNP_MISC_NDT1_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_NDT1_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_SNP_MISC_NDT1_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_NDT1_BAR;
#endif
    return fapi2::getScom(i_target, CS_SM1_SNP_MISC_NDT1_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_SNP_MISC_NDT1_BAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT1_BAR));
#endif
    return fapi2::putScom(i_target, CS_SM1_SNP_MISC_NDT1_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT1_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT1_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT1_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT1_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT1_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT1_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT1_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT1_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT1_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT1_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT1_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT1_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT1_BAR_NDT1_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT1_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT1_BAR_NDT1_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT1_BAR_NDT1_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT1_BAR_NDT1_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT1_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT1_BAR_NDT1_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT1_BAR_NDT1_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT1_BAR_NDT1_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT1_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_NDT1_BAR_NDT1_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT1_BAR_NDT1_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_NDT1_BAR_NDT1_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT1_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_NDT1_BAR_NDT1_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT1_BAR_NDT1_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_NDT1_BAR_NDT1_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT1_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_NDT1_BAR_NDT1_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT1_BAR_NDT1_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_NDT1_BAR_NDT1_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT1_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_NDT1_BAR_NDT1_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT1_BAR_NDT1_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ADDR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT1_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ADDR,
           CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ADDR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT1_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ADDR,
           CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ADDR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT1_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ADDR,
           CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ADDR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT1_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT1_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT1_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT1_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT1_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT1_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT1_BAR_NDT1_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT1_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT1_BAR_NDT1_RESERVED2,
           CS_SM1_SNP_MISC_NDT1_BAR_NDT1_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT1_BAR_NDT1_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT1_BAR_NDT1_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT1_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT1_BAR_NDT1_RESERVED2,
           CS_SM1_SNP_MISC_NDT1_BAR_NDT1_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT1_BAR_NDT1_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_NDT1_BAR_NDT1_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT1_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_NDT1_BAR_NDT1_RESERVED2,
           CS_SM1_SNP_MISC_NDT1_BAR_NDT1_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT1_BAR_NDT1_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SIZE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT1_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SIZE,
           CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT1_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SIZE,
           CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SIZE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT1_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SIZE,
           CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_SNP_MISC_NDT2_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_NDT2_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_SNP_MISC_NDT2_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_NDT2_BAR;
#endif
    return fapi2::getScom(i_target, CS_SM1_SNP_MISC_NDT2_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_SNP_MISC_NDT2_BAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT2_BAR));
#endif
    return fapi2::putScom(i_target, CS_SM1_SNP_MISC_NDT2_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT2_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT2_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT2_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT2_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT2_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT2_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT2_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT2_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT2_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT2_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT2_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT2_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT2_BAR_NDT2_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT2_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT2_BAR_NDT2_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT2_BAR_NDT2_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT2_BAR_NDT2_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT2_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT2_BAR_NDT2_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT2_BAR_NDT2_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT2_BAR_NDT2_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT2_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_NDT2_BAR_NDT2_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT2_BAR_NDT2_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_NDT2_BAR_NDT2_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT2_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_NDT2_BAR_NDT2_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT2_BAR_NDT2_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_NDT2_BAR_NDT2_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT2_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_NDT2_BAR_NDT2_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT2_BAR_NDT2_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_NDT2_BAR_NDT2_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT2_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_NDT2_BAR_NDT2_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT2_BAR_NDT2_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ADDR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT2_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ADDR,
           CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ADDR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT2_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ADDR,
           CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ADDR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT2_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ADDR,
           CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ADDR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT2_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT2_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT2_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT2_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT2_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT2_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT2_BAR_NDT2_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT2_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT2_BAR_NDT2_RESERVED2,
           CS_SM1_SNP_MISC_NDT2_BAR_NDT2_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT2_BAR_NDT2_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT2_BAR_NDT2_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT2_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT2_BAR_NDT2_RESERVED2,
           CS_SM1_SNP_MISC_NDT2_BAR_NDT2_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT2_BAR_NDT2_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_NDT2_BAR_NDT2_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT2_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_NDT2_BAR_NDT2_RESERVED2,
           CS_SM1_SNP_MISC_NDT2_BAR_NDT2_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT2_BAR_NDT2_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SIZE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT2_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SIZE,
           CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT2_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SIZE,
           CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SIZE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT2_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SIZE,
           CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_SNP_MISC_NDT3_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_NDT3_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_SNP_MISC_NDT3_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_NDT3_BAR;
#endif
    return fapi2::getScom(i_target, CS_SM1_SNP_MISC_NDT3_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_SNP_MISC_NDT3_BAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT3_BAR));
#endif
    return fapi2::putScom(i_target, CS_SM1_SNP_MISC_NDT3_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT3_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT3_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT3_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT3_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT3_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT3_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT3_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT3_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT3_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT3_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT3_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT3_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT3_BAR_NDT3_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT3_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT3_BAR_NDT3_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT3_BAR_NDT3_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT3_BAR_NDT3_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT3_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT3_BAR_NDT3_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT3_BAR_NDT3_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT3_BAR_NDT3_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT3_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_NDT3_BAR_NDT3_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT3_BAR_NDT3_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_NDT3_BAR_NDT3_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT3_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_NDT3_BAR_NDT3_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT3_BAR_NDT3_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_NDT3_BAR_NDT3_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT3_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_NDT3_BAR_NDT3_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT3_BAR_NDT3_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_NDT3_BAR_NDT3_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT3_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_NDT3_BAR_NDT3_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT3_BAR_NDT3_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ADDR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT3_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ADDR,
           CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ADDR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT3_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ADDR,
           CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ADDR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT3_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ADDR,
           CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ADDR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT3_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT3_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT3_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT3_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT3_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT3_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT3_BAR_NDT3_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT3_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT3_BAR_NDT3_RESERVED2,
           CS_SM1_SNP_MISC_NDT3_BAR_NDT3_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT3_BAR_NDT3_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT3_BAR_NDT3_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT3_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT3_BAR_NDT3_RESERVED2,
           CS_SM1_SNP_MISC_NDT3_BAR_NDT3_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT3_BAR_NDT3_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_NDT3_BAR_NDT3_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT3_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_NDT3_BAR_NDT3_RESERVED2,
           CS_SM1_SNP_MISC_NDT3_BAR_NDT3_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT3_BAR_NDT3_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SIZE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT3_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SIZE,
           CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT3_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SIZE,
           CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SIZE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT3_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SIZE,
           CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_SNP_MISC_NDT4_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_NDT4_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_SNP_MISC_NDT4_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_NDT4_BAR;
#endif
    return fapi2::getScom(i_target, CS_SM1_SNP_MISC_NDT4_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_SNP_MISC_NDT4_BAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT4_BAR));
#endif
    return fapi2::putScom(i_target, CS_SM1_SNP_MISC_NDT4_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT4_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT4_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT4_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT4_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT4_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT4_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT4_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT4_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT4_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT4_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT4_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT4_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT4_BAR_NDT4_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT4_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT4_BAR_NDT4_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT4_BAR_NDT4_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT4_BAR_NDT4_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT4_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT4_BAR_NDT4_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT4_BAR_NDT4_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT4_BAR_NDT4_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT4_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_NDT4_BAR_NDT4_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT4_BAR_NDT4_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_NDT4_BAR_NDT4_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT4_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_NDT4_BAR_NDT4_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT4_BAR_NDT4_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_NDT4_BAR_NDT4_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT4_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_NDT4_BAR_NDT4_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT4_BAR_NDT4_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_NDT4_BAR_NDT4_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT4_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_NDT4_BAR_NDT4_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT4_BAR_NDT4_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ADDR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT4_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ADDR,
           CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ADDR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT4_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ADDR,
           CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ADDR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT4_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ADDR,
           CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ADDR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT4_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT4_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT4_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT4_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT4_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT4_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT4_BAR_NDT4_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT4_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT4_BAR_NDT4_RESERVED2,
           CS_SM1_SNP_MISC_NDT4_BAR_NDT4_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT4_BAR_NDT4_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT4_BAR_NDT4_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT4_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT4_BAR_NDT4_RESERVED2,
           CS_SM1_SNP_MISC_NDT4_BAR_NDT4_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT4_BAR_NDT4_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_NDT4_BAR_NDT4_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT4_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_NDT4_BAR_NDT4_RESERVED2,
           CS_SM1_SNP_MISC_NDT4_BAR_NDT4_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT4_BAR_NDT4_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SIZE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT4_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SIZE,
           CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT4_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SIZE,
           CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SIZE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_NDT4_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SIZE,
           CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM1_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_DIR_MISC_PERF_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_DIR_MISC_PERF_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_DIR_MISC_PERF_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_DIR_MISC_PERF_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM2_DIR_MISC_PERF_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_DIR_MISC_PERF_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_PERF_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM2_DIR_MISC_PERF_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_PERF_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_PERF_CONFIG_RESERVED1,
           CS_SM2_DIR_MISC_PERF_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_PERF_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_PERF_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_PERF_CONFIG_RESERVED1,
           CS_SM2_DIR_MISC_PERF_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_PERF_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_DIR_MISC_PERF_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_DIR_MISC_PERF_CONFIG_RESERVED1,
           CS_SM2_DIR_MISC_PERF_CONFIG_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_PERF_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_PERF_CONFIG_EVENT0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_PERF_CONFIG_EVENT0,
           CS_SM2_DIR_MISC_PERF_CONFIG_EVENT0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_PERF_CONFIG_EVENT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_PERF_CONFIG_EVENT0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_PERF_CONFIG_EVENT0,
           CS_SM2_DIR_MISC_PERF_CONFIG_EVENT0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_PERF_CONFIG_EVENT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_DIR_MISC_PERF_CONFIG_EVENT0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_DIR_MISC_PERF_CONFIG_EVENT0,
           CS_SM2_DIR_MISC_PERF_CONFIG_EVENT0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_PERF_CONFIG_EVENT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_PERF_CONFIG_EVENT1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_PERF_CONFIG_EVENT1,
           CS_SM2_DIR_MISC_PERF_CONFIG_EVENT1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_PERF_CONFIG_EVENT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_PERF_CONFIG_EVENT1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_PERF_CONFIG_EVENT1,
           CS_SM2_DIR_MISC_PERF_CONFIG_EVENT1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_PERF_CONFIG_EVENT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_DIR_MISC_PERF_CONFIG_EVENT1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_DIR_MISC_PERF_CONFIG_EVENT1,
           CS_SM2_DIR_MISC_PERF_CONFIG_EVENT1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_PERF_CONFIG_EVENT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_PERF_CONFIG_EVENT2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_PERF_CONFIG_EVENT2,
           CS_SM2_DIR_MISC_PERF_CONFIG_EVENT2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_PERF_CONFIG_EVENT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_PERF_CONFIG_EVENT2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_PERF_CONFIG_EVENT2,
           CS_SM2_DIR_MISC_PERF_CONFIG_EVENT2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_PERF_CONFIG_EVENT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_DIR_MISC_PERF_CONFIG_EVENT2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_DIR_MISC_PERF_CONFIG_EVENT2,
           CS_SM2_DIR_MISC_PERF_CONFIG_EVENT2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_PERF_CONFIG_EVENT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_PERF_CONFIG_EVENT3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_PERF_CONFIG_EVENT3,
           CS_SM2_DIR_MISC_PERF_CONFIG_EVENT3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_PERF_CONFIG_EVENT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_PERF_CONFIG_EVENT3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_PERF_CONFIG_EVENT3,
           CS_SM2_DIR_MISC_PERF_CONFIG_EVENT3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_PERF_CONFIG_EVENT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_DIR_MISC_PERF_CONFIG_EVENT3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_DIR_MISC_PERF_CONFIG_EVENT3,
           CS_SM2_DIR_MISC_PERF_CONFIG_EVENT3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_PERF_CONFIG_EVENT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_PERF_CONFIG_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_PERF_CONFIG_RESERVED2,
           CS_SM2_DIR_MISC_PERF_CONFIG_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_PERF_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_PERF_CONFIG_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_PERF_CONFIG_RESERVED2,
           CS_SM2_DIR_MISC_PERF_CONFIG_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_PERF_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_DIR_MISC_PERF_CONFIG_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_DIR_MISC_PERF_CONFIG_RESERVED2,
           CS_SM2_DIR_MISC_PERF_CONFIG_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_PERF_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_PERF_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_PERF_CONFIG_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_PERF_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.setBit<CS_SM2_DIR_MISC_PERF_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_DIR_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.clearBit<CS_SM2_DIR_MISC_PERF_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_DIR_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_DIR_MISC_PERF_CONFIG_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_DIR_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_PERF_CONFIG));
#endif
    return i_data.getBit<CS_SM2_DIR_MISC_PERF_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_DIR_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_MCP_MISC_CERR_HOLD2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_CERR_HOLD2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_MCP_MISC_CERR_HOLD2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_CERR_HOLD2;
#endif
    return fapi2::getScom(i_target, CS_SM2_MCP_MISC_CERR_HOLD2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_MCP_MISC_CERR_HOLD2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return fapi2::putScom(i_target, CS_SM2_MCP_MISC_CERR_HOLD2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_20(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_20(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_20(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_20,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_20(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_21(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_21(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_21(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_21,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_21(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_22(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_22(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_22(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_22,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_22(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_23,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_23(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_24(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_24(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_24(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_24,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_24(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_25(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_25(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_25(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_25,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_25(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_26(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_26(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_26(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_26,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_26(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_27(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_27(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_27(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_27,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_27(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_28(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_28(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_28(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_28,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_28(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_29(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_29(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_29(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_29,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_29(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_30(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_30(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_30(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_30,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_30(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_31(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_31(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_31(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_31,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_31(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_32(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_32(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_32(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_32,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_32(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_33(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_33(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_33(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_33,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_33(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_34(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_34(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_34(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_34,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_34(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_35(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_35(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_35(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_35,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_35(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_36(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_36(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_36(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_36,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_36(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_37(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_37(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_37(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_37,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_37(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_38(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_38(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_38(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_38,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_38(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_39(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_39(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_39(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_39,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_39(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_40(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_40(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_40(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_40,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_40(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_41(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_41(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_41(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_41,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_41(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_42(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_42(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_42(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_42,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_42(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_43(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_43(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_43(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_43,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_43(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_44(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_44(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_44(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_44,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_44(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_45(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_45(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_45(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_45,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_45(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_46(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_46(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_46(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_46,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_46(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_47(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_47(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_47(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_47,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_47(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_48(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_48(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_48(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_48,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_48(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_49(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_49(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_49(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_49,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_49(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_50(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_50(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_50(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_50,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_50(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_51(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_51(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_51(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_51,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_51(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_52(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_52(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_52(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_52,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_52(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_53(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_53(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_53(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_53,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_53(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_54(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_54,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_54(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_54,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_54(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_54(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_54(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_54,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_54(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_55(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_55,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_55(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_55,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_55(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_55(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_55(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_55,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_55(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_56(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_56,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_56(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_56,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_56(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_56(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_56(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_56,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_56(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_57(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_57,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_57(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_57,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_57(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_57(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_57(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_57,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_57(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_58(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_58,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_58(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_58,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_58(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_58(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_58(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_58,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_58(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_59(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_59,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_59(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_59,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_59(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_59(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_59(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_59,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_59(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_60(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_60,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_60(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_60,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_60(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_60(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_60(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_60,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_60(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_61(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_61,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_61(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_61,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_61(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_61(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_61(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_61,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_61(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_62(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_62,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_62(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_62,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_62(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_62(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_62(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_62,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_62(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_63(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_63,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_63(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD2_63,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD2_63(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD2_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD2_63(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD2_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD2_63(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD2_63,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD2_63(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD2_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_MCP_MISC_DEBUG4_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_DEBUG4_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_MCP_MISC_DEBUG4_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_DEBUG4_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM2_MCP_MISC_DEBUG4_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_MCP_MISC_DEBUG4_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG4_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM2_MCP_MISC_DEBUG4_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE9,
           CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE9,
           CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG4_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE9,
           CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE10,
           CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE10,
           CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG4_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE10,
           CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE11,
           CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE11_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE11,
           CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE11_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG4_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE11,
           CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE11_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE12,
           CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE12_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE12,
           CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE12_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG4_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE12,
           CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE12_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE13,
           CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE13_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE13,
           CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE13_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG4_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE13,
           CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE13_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE14,
           CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE14_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE14,
           CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE14_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG4_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE14,
           CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE14_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE15,
           CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE15_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE15,
           CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE15_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG4_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE15,
           CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE15_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_DEBUG4_CONFIG_BYTE15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG4_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG4_CONFIG_RESERVED1,
           CS_SM2_MCP_MISC_DEBUG4_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_DEBUG4_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG4_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG4_CONFIG_RESERVED1,
           CS_SM2_MCP_MISC_DEBUG4_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_DEBUG4_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_DEBUG4_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG4_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_DEBUG4_CONFIG_RESERVED1,
           CS_SM2_MCP_MISC_DEBUG4_CONFIG_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_DEBUG4_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_MCP_MISC_XTIMER_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_XTIMER_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_MCP_MISC_XTIMER_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_XTIMER_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM2_MCP_MISC_XTIMER_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_MCP_MISC_XTIMER_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_XTIMER_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM2_MCP_MISC_XTIMER_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1,
           CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1,
           CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_XTIMER_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1,
           CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2,
           CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2,
           CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_XTIMER_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2,
           CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2,
           CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2,
           CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_XTIMER_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2,
           CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2,
           CS_SM2_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2,
           CS_SM2_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_XTIMER_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2,
           CS_SM2_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1,
           CS_SM2_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1,
           CS_SM2_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_XTIMER_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1,
           CS_SM2_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_XTIMER_CONFIG_INH0_TICK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_XTIMER_CONFIG_INH0_TICK,
           CS_SM2_MCP_MISC_XTIMER_CONFIG_INH0_TICK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_XTIMER_CONFIG_INH0_TICK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_XTIMER_CONFIG_INH0_TICK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_XTIMER_CONFIG_INH0_TICK,
           CS_SM2_MCP_MISC_XTIMER_CONFIG_INH0_TICK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_XTIMER_CONFIG_INH0_TICK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_XTIMER_CONFIG_INH0_TICK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_XTIMER_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_XTIMER_CONFIG_INH0_TICK,
           CS_SM2_MCP_MISC_XTIMER_CONFIG_INH0_TICK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_XTIMER_CONFIG_INH0_TICK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_XTIMER_CONFIG_INH1_TICK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_XTIMER_CONFIG_INH1_TICK,
           CS_SM2_MCP_MISC_XTIMER_CONFIG_INH1_TICK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_XTIMER_CONFIG_INH1_TICK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_XTIMER_CONFIG_INH1_TICK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_XTIMER_CONFIG_INH1_TICK,
           CS_SM2_MCP_MISC_XTIMER_CONFIG_INH1_TICK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_XTIMER_CONFIG_INH1_TICK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_XTIMER_CONFIG_INH1_TICK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_XTIMER_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_XTIMER_CONFIG_INH1_TICK,
           CS_SM2_MCP_MISC_XTIMER_CONFIG_INH1_TICK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_XTIMER_CONFIG_INH1_TICK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1,
           CS_SM2_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1,
           CS_SM2_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_XTIMER_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1,
           CS_SM2_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2,
           CS_SM2_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2,
           CS_SM2_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_XTIMER_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2,
           CS_SM2_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1,
           CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1,
           CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_XTIMER_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1,
           CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE,
           CS_SM2_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE,
           CS_SM2_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_XTIMER_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE,
           CS_SM2_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE,
           CS_SM2_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE,
           CS_SM2_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_XTIMER_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE,
           CS_SM2_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_SNP_MISC_CERR_MESSAGE0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_CERR_MESSAGE0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_SNP_MISC_CERR_MESSAGE0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_CERR_MESSAGE0;
#endif
    return fapi2::getScom(i_target, CS_SM2_SNP_MISC_CERR_MESSAGE0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_SNP_MISC_CERR_MESSAGE0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MESSAGE0));
#endif
    return fapi2::putScom(i_target, CS_SM2_SNP_MISC_CERR_MESSAGE0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MESSAGE0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0,
           CS_SM2_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MESSAGE0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0,
           CS_SM2_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MESSAGE0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0,
           CS_SM2_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_SNP_MISC_CONFIG0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_CONFIG0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_SNP_MISC_CONFIG0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_CONFIG0;
#endif
    return fapi2::getScom(i_target, CS_SM2_SNP_MISC_CONFIG0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_SNP_MISC_CONFIG0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return fapi2::putScom(i_target, CS_SM2_SNP_MISC_CONFIG0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__MA_RSNOOP_OPT_DCLAIM(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__MA_RSNOOP_OPT_DCLAIM,
           CS_SM2_SNP_MISC_CONFIG0__MA_RSNOOP_OPT_DCLAIM_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__MA_RSNOOP_OPT_DCLAIM chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__MA_RSNOOP_OPT_DCLAIM(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__MA_RSNOOP_OPT_DCLAIM,
           CS_SM2_SNP_MISC_CONFIG0__MA_RSNOOP_OPT_DCLAIM_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__MA_RSNOOP_OPT_DCLAIM chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0__MA_RSNOOP_OPT_DCLAIM(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0__MA_RSNOOP_OPT_DCLAIM,
           CS_SM2_SNP_MISC_CONFIG0__MA_RSNOOP_OPT_DCLAIM_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__MA_RSNOOP_OPT_DCLAIM chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__ENABLE_PBUS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__ENABLE_PBUS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ENABLE_PBUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__ENABLE_PBUS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__ENABLE_PBUS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ENABLE_PBUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__ENABLE_PBUS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG0__ENABLE_PBUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ENABLE_PBUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG0__ENABLE_PBUS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG0__ENABLE_PBUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ENABLE_PBUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0__ENABLE_PBUS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0__ENABLE_PBUS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ENABLE_PBUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG0__ENABLE_PBUS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG0__ENABLE_PBUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ENABLE_PBUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRAZOS_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__BRAZOS_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRAZOS_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRAZOS_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__BRAZOS_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRAZOS_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRAZOS_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG0__BRAZOS_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRAZOS_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG0__BRAZOS_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG0__BRAZOS_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRAZOS_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0__BRAZOS_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0__BRAZOS_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRAZOS_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG0__BRAZOS_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG0__BRAZOS_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRAZOS_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__PCKT_BLK_PRB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__PCKT_BLK_PRB,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__PCKT_BLK_PRB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__PCKT_BLK_PRB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__PCKT_BLK_PRB,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__PCKT_BLK_PRB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__PCKT_BLK_PRB(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG0__PCKT_BLK_PRB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__PCKT_BLK_PRB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG0__PCKT_BLK_PRB(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG0__PCKT_BLK_PRB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__PCKT_BLK_PRB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0__PCKT_BLK_PRB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0__PCKT_BLK_PRB,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__PCKT_BLK_PRB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG0__PCKT_BLK_PRB(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG0__PCKT_BLK_PRB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__PCKT_BLK_PRB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__ADR_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__ADR_BAR_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ADR_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__ADR_BAR_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__ADR_BAR_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ADR_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__ADR_BAR_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG0__ADR_BAR_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ADR_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG0__ADR_BAR_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG0__ADR_BAR_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ADR_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0__ADR_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0__ADR_BAR_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ADR_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG0__ADR_BAR_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG0__ADR_BAR_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ADR_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__RESTRICT_CHIP_GROUP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__RESTRICT_CHIP_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__RESTRICT_CHIP_GROUP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__RESTRICT_CHIP_GROUP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__RESTRICT_CHIP_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__RESTRICT_CHIP_GROUP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__RESTRICT_CHIP_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG0__RESTRICT_CHIP_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__RESTRICT_CHIP_GROUP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG0__RESTRICT_CHIP_GROUP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG0__RESTRICT_CHIP_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__RESTRICT_CHIP_GROUP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0__RESTRICT_CHIP_GROUP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0__RESTRICT_CHIP_GROUP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__RESTRICT_CHIP_GROUP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG0__RESTRICT_CHIP_GROUP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG0__RESTRICT_CHIP_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__RESTRICT_CHIP_GROUP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED3,
           CS_SM2_SNP_MISC_CONFIG0_0_RESERVED3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED3,
           CS_SM2_SNP_MISC_CONFIG0_0_RESERVED3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED3,
           CS_SM2_SNP_MISC_CONFIG0_0_RESERVED3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__SNP_FIR_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__SNP_FIR_TO_INHIBIT_MASK,
           CS_SM2_SNP_MISC_CONFIG0__SNP_FIR_TO_INHIBIT_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__SNP_FIR_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__SNP_FIR_TO_INHIBIT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__SNP_FIR_TO_INHIBIT_MASK,
           CS_SM2_SNP_MISC_CONFIG0__SNP_FIR_TO_INHIBIT_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__SNP_FIR_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0__SNP_FIR_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0__SNP_FIR_TO_INHIBIT_MASK,
           CS_SM2_SNP_MISC_CONFIG0__SNP_FIR_TO_INHIBIT_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__SNP_FIR_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRK0_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__BRK0_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK0_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRK0_FENCE_TO_INHIBIT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__BRK0_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK0_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRK0_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG0__BRK0_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK0_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG0__BRK0_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG0__BRK0_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK0_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0__BRK0_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0__BRK0_FENCE_TO_INHIBIT_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK0_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG0__BRK0_FENCE_TO_INHIBIT_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG0__BRK0_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK0_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRK1_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__BRK1_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK1_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRK1_FENCE_TO_INHIBIT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__BRK1_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK1_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRK1_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG0__BRK1_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK1_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG0__BRK1_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG0__BRK1_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK1_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0__BRK1_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0__BRK1_FENCE_TO_INHIBIT_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK1_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG0__BRK1_FENCE_TO_INHIBIT_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG0__BRK1_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK1_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRK2_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__BRK2_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK2_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRK2_FENCE_TO_INHIBIT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__BRK2_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK2_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRK2_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG0__BRK2_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK2_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG0__BRK2_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG0__BRK2_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK2_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0__BRK2_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0__BRK2_FENCE_TO_INHIBIT_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK2_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG0__BRK2_FENCE_TO_INHIBIT_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG0__BRK2_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK2_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRK3_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__BRK3_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK3_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRK3_FENCE_TO_INHIBIT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__BRK3_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK3_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRK3_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG0__BRK3_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK3_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG0__BRK3_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG0__BRK3_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK3_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0__BRK3_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0__BRK3_FENCE_TO_INHIBIT_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK3_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG0__BRK3_FENCE_TO_INHIBIT_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG0__BRK3_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK3_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRK4_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__BRK4_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK4_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRK4_FENCE_TO_INHIBIT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__BRK4_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK4_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRK4_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG0__BRK4_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK4_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG0__BRK4_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG0__BRK4_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK4_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0__BRK4_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0__BRK4_FENCE_TO_INHIBIT_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK4_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG0__BRK4_FENCE_TO_INHIBIT_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG0__BRK4_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK4_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__MRBGP_TRACK_ALL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__MRBGP_TRACK_ALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__MRBGP_TRACK_ALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__MRBGP_TRACK_ALL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__MRBGP_TRACK_ALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__MRBGP_TRACK_ALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__MRBGP_TRACK_ALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG0__MRBGP_TRACK_ALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__MRBGP_TRACK_ALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG0__MRBGP_TRACK_ALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG0__MRBGP_TRACK_ALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__MRBGP_TRACK_ALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0__MRBGP_TRACK_ALL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0__MRBGP_TRACK_ALL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__MRBGP_TRACK_ALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG0__MRBGP_TRACK_ALL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG0__MRBGP_TRACK_ALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__MRBGP_TRACK_ALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__MRBSP_TRACK_ALL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__MRBSP_TRACK_ALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__MRBSP_TRACK_ALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__MRBSP_TRACK_ALL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__MRBSP_TRACK_ALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__MRBSP_TRACK_ALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__MRBSP_TRACK_ALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG0__MRBSP_TRACK_ALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__MRBSP_TRACK_ALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG0__MRBSP_TRACK_ALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG0__MRBSP_TRACK_ALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__MRBSP_TRACK_ALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0__MRBSP_TRACK_ALL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0__MRBSP_TRACK_ALL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__MRBSP_TRACK_ALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG0__MRBSP_TRACK_ALL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG0__MRBSP_TRACK_ALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__MRBSP_TRACK_ALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__MRBCP_TRACK_ALL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__MRBCP_TRACK_ALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__MRBCP_TRACK_ALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__MRBCP_TRACK_ALL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__MRBCP_TRACK_ALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__MRBCP_TRACK_ALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__MRBCP_TRACK_ALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG0__MRBCP_TRACK_ALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__MRBCP_TRACK_ALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG0__MRBCP_TRACK_ALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG0__MRBCP_TRACK_ALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__MRBCP_TRACK_ALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0__MRBCP_TRACK_ALL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0__MRBCP_TRACK_ALL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__MRBCP_TRACK_ALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG0__MRBCP_TRACK_ALL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG0__MRBCP_TRACK_ALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__MRBCP_TRACK_ALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__ADDR_EX_MASK_ENA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__ADDR_EX_MASK_ENA,
           CS_SM2_SNP_MISC_CONFIG0__ADDR_EX_MASK_ENA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ADDR_EX_MASK_ENA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__ADDR_EX_MASK_ENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__ADDR_EX_MASK_ENA,
           CS_SM2_SNP_MISC_CONFIG0__ADDR_EX_MASK_ENA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ADDR_EX_MASK_ENA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0__ADDR_EX_MASK_ENA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0__ADDR_EX_MASK_ENA,
           CS_SM2_SNP_MISC_CONFIG0__ADDR_EX_MASK_ENA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ADDR_EX_MASK_ENA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__SINGLE_AFU_DUAL_BRICK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__SINGLE_AFU_DUAL_BRICK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__SINGLE_AFU_DUAL_BRICK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__SINGLE_AFU_DUAL_BRICK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__SINGLE_AFU_DUAL_BRICK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__SINGLE_AFU_DUAL_BRICK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__SINGLE_AFU_DUAL_BRICK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG0__SINGLE_AFU_DUAL_BRICK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__SINGLE_AFU_DUAL_BRICK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG0__SINGLE_AFU_DUAL_BRICK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG0__SINGLE_AFU_DUAL_BRICK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__SINGLE_AFU_DUAL_BRICK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0__SINGLE_AFU_DUAL_BRICK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0__SINGLE_AFU_DUAL_BRICK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__SINGLE_AFU_DUAL_BRICK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG0__SINGLE_AFU_DUAL_BRICK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG0__SINGLE_AFU_DUAL_BRICK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__SINGLE_AFU_DUAL_BRICK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRK0_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__BRK0_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRK0_OCAPI_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__BRK0_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRK0_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG0__BRK0_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG0__BRK0_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG0__BRK0_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0__BRK0_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0__BRK0_OCAPI_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG0__BRK0_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG0__BRK0_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRK1_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__BRK1_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRK1_OCAPI_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__BRK1_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRK1_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG0__BRK1_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG0__BRK1_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG0__BRK1_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0__BRK1_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0__BRK1_OCAPI_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG0__BRK1_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG0__BRK1_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRK2_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__BRK2_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRK2_OCAPI_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__BRK2_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRK2_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG0__BRK2_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG0__BRK2_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG0__BRK2_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0__BRK2_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0__BRK2_OCAPI_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG0__BRK2_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG0__BRK2_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRK3_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__BRK3_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRK3_OCAPI_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__BRK3_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRK3_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG0__BRK3_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG0__BRK3_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG0__BRK3_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0__BRK3_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0__BRK3_OCAPI_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG0__BRK3_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG0__BRK3_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRK4_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__BRK4_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRK4_OCAPI_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__BRK4_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRK4_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG0__BRK4_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG0__BRK4_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG0__BRK4_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0__BRK4_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0__BRK4_OCAPI_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG0__BRK4_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG0__BRK4_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRK0_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__BRK0_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRK0_NVLINK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__BRK0_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRK0_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG0__BRK0_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG0__BRK0_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG0__BRK0_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0__BRK0_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0__BRK0_NVLINK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG0__BRK0_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG0__BRK0_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRK1_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__BRK1_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRK1_NVLINK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__BRK1_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRK1_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG0__BRK1_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG0__BRK1_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG0__BRK1_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0__BRK1_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0__BRK1_NVLINK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG0__BRK1_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG0__BRK1_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRK2_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__BRK2_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRK2_NVLINK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__BRK2_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRK2_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG0__BRK2_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG0__BRK2_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG0__BRK2_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0__BRK2_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0__BRK2_NVLINK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG0__BRK2_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG0__BRK2_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRK3_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__BRK3_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRK3_NVLINK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__BRK3_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRK3_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG0__BRK3_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG0__BRK3_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG0__BRK3_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0__BRK3_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0__BRK3_NVLINK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG0__BRK3_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG0__BRK3_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRK4_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__BRK4_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRK4_NVLINK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__BRK4_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__BRK4_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG0__BRK4_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG0__BRK4_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG0__BRK4_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0__BRK4_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0__BRK4_NVLINK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG0__BRK4_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG0__BRK4_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__ENABLE_BLOCKING_RCMD_DIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__ENABLE_BLOCKING_RCMD_DIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ENABLE_BLOCKING_RCMD_DIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__ENABLE_BLOCKING_RCMD_DIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__ENABLE_BLOCKING_RCMD_DIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ENABLE_BLOCKING_RCMD_DIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__ENABLE_BLOCKING_RCMD_DIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG0__ENABLE_BLOCKING_RCMD_DIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ENABLE_BLOCKING_RCMD_DIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG0__ENABLE_BLOCKING_RCMD_DIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG0__ENABLE_BLOCKING_RCMD_DIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ENABLE_BLOCKING_RCMD_DIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0__ENABLE_BLOCKING_RCMD_DIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0__ENABLE_BLOCKING_RCMD_DIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ENABLE_BLOCKING_RCMD_DIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG0__ENABLE_BLOCKING_RCMD_DIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG0__ENABLE_BLOCKING_RCMD_DIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ENABLE_BLOCKING_RCMD_DIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__DISABLE_DIR_POWERSAVE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__DISABLE_DIR_POWERSAVE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__DISABLE_DIR_POWERSAVE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__DISABLE_DIR_POWERSAVE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__DISABLE_DIR_POWERSAVE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__DISABLE_DIR_POWERSAVE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__DISABLE_DIR_POWERSAVE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG0__DISABLE_DIR_POWERSAVE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__DISABLE_DIR_POWERSAVE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG0__DISABLE_DIR_POWERSAVE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG0__DISABLE_DIR_POWERSAVE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__DISABLE_DIR_POWERSAVE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0__DISABLE_DIR_POWERSAVE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0__DISABLE_DIR_POWERSAVE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__DISABLE_DIR_POWERSAVE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG0__DISABLE_DIR_POWERSAVE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG0__DISABLE_DIR_POWERSAVE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__DISABLE_DIR_POWERSAVE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__DISABLE_PRESP_POWERSAVE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__DISABLE_PRESP_POWERSAVE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__DISABLE_PRESP_POWERSAVE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__DISABLE_PRESP_POWERSAVE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__DISABLE_PRESP_POWERSAVE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__DISABLE_PRESP_POWERSAVE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__DISABLE_PRESP_POWERSAVE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG0__DISABLE_PRESP_POWERSAVE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__DISABLE_PRESP_POWERSAVE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG0__DISABLE_PRESP_POWERSAVE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG0__DISABLE_PRESP_POWERSAVE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__DISABLE_PRESP_POWERSAVE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0__DISABLE_PRESP_POWERSAVE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0__DISABLE_PRESP_POWERSAVE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__DISABLE_PRESP_POWERSAVE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG0__DISABLE_PRESP_POWERSAVE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG0__DISABLE_PRESP_POWERSAVE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__DISABLE_PRESP_POWERSAVE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK0_OCAPI_C2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK0_OCAPI_C2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK0_OCAPI_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK0_OCAPI_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK0_OCAPI_C2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK0_OCAPI_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK0_OCAPI_C2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK0_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK0_OCAPI_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK0_OCAPI_C2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK0_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK0_OCAPI_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK0_OCAPI_C2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK0_OCAPI_C2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK0_OCAPI_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK0_OCAPI_C2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK0_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK0_OCAPI_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK1_OCAPI_C2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK1_OCAPI_C2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK1_OCAPI_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK1_OCAPI_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK1_OCAPI_C2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK1_OCAPI_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK1_OCAPI_C2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK1_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK1_OCAPI_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK1_OCAPI_C2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK1_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK1_OCAPI_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK1_OCAPI_C2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK1_OCAPI_C2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK1_OCAPI_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK1_OCAPI_C2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK1_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK1_OCAPI_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK2_OCAPI_C2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK2_OCAPI_C2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK2_OCAPI_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK2_OCAPI_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK2_OCAPI_C2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK2_OCAPI_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK2_OCAPI_C2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK2_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK2_OCAPI_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK2_OCAPI_C2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK2_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK2_OCAPI_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK2_OCAPI_C2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK2_OCAPI_C2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK2_OCAPI_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK2_OCAPI_C2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK2_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK2_OCAPI_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK3_OCAPI_C2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK3_OCAPI_C2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK3_OCAPI_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK3_OCAPI_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK3_OCAPI_C2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK3_OCAPI_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK3_OCAPI_C2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK3_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK3_OCAPI_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK3_OCAPI_C2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK3_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK3_OCAPI_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK3_OCAPI_C2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK3_OCAPI_C2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK3_OCAPI_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK3_OCAPI_C2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK3_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK3_OCAPI_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK4_OCAPI_C2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK4_OCAPI_C2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK4_OCAPI_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK4_OCAPI_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK4_OCAPI_C2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK4_OCAPI_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK4_OCAPI_C2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK4_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK4_OCAPI_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK4_OCAPI_C2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK4_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK4_OCAPI_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK4_OCAPI_C2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK4_OCAPI_C2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK4_OCAPI_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK4_OCAPI_C2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK4_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__ENABLE_BRK4_OCAPI_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__DISABLE_CAN_BY_CP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__DISABLE_CAN_BY_CP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__DISABLE_CAN_BY_CP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__DISABLE_CAN_BY_CP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__DISABLE_CAN_BY_CP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__DISABLE_CAN_BY_CP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__DISABLE_CAN_BY_CP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG0__DISABLE_CAN_BY_CP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__DISABLE_CAN_BY_CP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG0__DISABLE_CAN_BY_CP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG0__DISABLE_CAN_BY_CP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__DISABLE_CAN_BY_CP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0__DISABLE_CAN_BY_CP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0__DISABLE_CAN_BY_CP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__DISABLE_CAN_BY_CP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG0__DISABLE_CAN_BY_CP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG0__DISABLE_CAN_BY_CP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__DISABLE_CAN_BY_CP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__DISABLE_CAN_BY_PROBE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__DISABLE_CAN_BY_PROBE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__DISABLE_CAN_BY_PROBE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__DISABLE_CAN_BY_PROBE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0__DISABLE_CAN_BY_PROBE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__DISABLE_CAN_BY_PROBE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0__DISABLE_CAN_BY_PROBE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG0__DISABLE_CAN_BY_PROBE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__DISABLE_CAN_BY_PROBE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG0__DISABLE_CAN_BY_PROBE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG0__DISABLE_CAN_BY_PROBE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__DISABLE_CAN_BY_PROBE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0__DISABLE_CAN_BY_PROBE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0__DISABLE_CAN_BY_PROBE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__DISABLE_CAN_BY_PROBE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG0__DISABLE_CAN_BY_PROBE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG0__DISABLE_CAN_BY_PROBE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0__DISABLE_CAN_BY_PROBE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED0,
           CS_SM2_SNP_MISC_CONFIG0_0_RESERVED0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED0,
           CS_SM2_SNP_MISC_CONFIG0_0_RESERVED0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG0_0_RESERVED0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG0_0_RESERVED0,
           CS_SM2_SNP_MISC_CONFIG0_0_RESERVED0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG0_0_RESERVED0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2;
#endif
    return fapi2::getScom(i_target, CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return fapi2::putScom(i_target, CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_TAG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_TAG,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_TAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_TAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_TAG,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_TAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_TAG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_TAG,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_TAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_TAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_WREND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_WREND,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_WREND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_WREND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_WREND,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_WREND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_WREND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_WREND,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_WREND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC2_WREND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_SNP_MISC_LOW_WATER(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_LOW_WATER;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_SNP_MISC_LOW_WATER(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_LOW_WATER;
#endif
    return fapi2::getScom(i_target, CS_SM2_SNP_MISC_LOW_WATER, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_SNP_MISC_LOW_WATER(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return fapi2::putScom(i_target, CS_SM2_SNP_MISC_LOW_WATER, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PWR2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_XATS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_XATS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_XATS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_XATS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_XATS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_XATS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_XATS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_XATS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_XATS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_XATS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_XATS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_XATS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_XATS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_XATS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_XATS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_XATS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_XATS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_XATS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_INTS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_INTS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_INTS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_INTS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_INTS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_INTS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_INTS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_INTS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_INTS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_INTS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_INTS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_INTS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_INTS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_INTS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_INTS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_INTS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_INTS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_INTS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CST4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRB4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PWR0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PWR0,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PWR0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PWR0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PWR0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PWR0,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PWR0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PWR0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PWR0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PWR0,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PWR0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PWR0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PWR1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PWR1,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PWR1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PWR1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PWR1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PWR1,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PWR1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PWR1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PWR1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PWR1,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PWR1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PWR1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PWR2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PWR2,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PWR2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PWR2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PWR2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PWR2,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PWR2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PWR2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PWR2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PWR2,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PWR2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PWR2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_XATS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_XATS,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_XATS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_XATS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_XATS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_XATS,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_XATS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_XATS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_XATS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_XATS,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_XATS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_XATS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_INTS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_INTS,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_INTS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_INTS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_INTS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_INTS,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_INTS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_INTS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_INTS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_INTS,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_INTS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_INTS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ0,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ0,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ0,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST0,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST0,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST0,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB0,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB0,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB0,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ1,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ1,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ1,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST1,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST1,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST1,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB1,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB1,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB1,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ2,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ2,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ2,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST2,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST2,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST2,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB2,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB2,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB2,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ3,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ3,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ3,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST3,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST3,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST3,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB3,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB3,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB3,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ4,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ4,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ4,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_REQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST4,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST4,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST4,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_CST4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB4,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB4,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB4,
           CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM2_SNP_MISC_LOW_WATER_WEIGHT_PRB4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_DIR_MISC_PERF_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_DIR_MISC_PERF_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_DIR_MISC_PERF_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_DIR_MISC_PERF_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM3_DIR_MISC_PERF_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_DIR_MISC_PERF_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_PERF_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM3_DIR_MISC_PERF_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_PERF_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_PERF_CONFIG_RESERVED1,
           CS_SM3_DIR_MISC_PERF_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_DIR_MISC_PERF_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_PERF_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_PERF_CONFIG_RESERVED1,
           CS_SM3_DIR_MISC_PERF_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_DIR_MISC_PERF_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_DIR_MISC_PERF_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_DIR_MISC_PERF_CONFIG_RESERVED1,
           CS_SM3_DIR_MISC_PERF_CONFIG_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_DIR_MISC_PERF_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_PERF_CONFIG_EVENT0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_PERF_CONFIG_EVENT0,
           CS_SM3_DIR_MISC_PERF_CONFIG_EVENT0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_DIR_MISC_PERF_CONFIG_EVENT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_PERF_CONFIG_EVENT0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_PERF_CONFIG_EVENT0,
           CS_SM3_DIR_MISC_PERF_CONFIG_EVENT0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_DIR_MISC_PERF_CONFIG_EVENT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_DIR_MISC_PERF_CONFIG_EVENT0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_DIR_MISC_PERF_CONFIG_EVENT0,
           CS_SM3_DIR_MISC_PERF_CONFIG_EVENT0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_DIR_MISC_PERF_CONFIG_EVENT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_PERF_CONFIG_EVENT1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_PERF_CONFIG_EVENT1,
           CS_SM3_DIR_MISC_PERF_CONFIG_EVENT1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_DIR_MISC_PERF_CONFIG_EVENT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_PERF_CONFIG_EVENT1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_PERF_CONFIG_EVENT1,
           CS_SM3_DIR_MISC_PERF_CONFIG_EVENT1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_DIR_MISC_PERF_CONFIG_EVENT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_DIR_MISC_PERF_CONFIG_EVENT1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_DIR_MISC_PERF_CONFIG_EVENT1,
           CS_SM3_DIR_MISC_PERF_CONFIG_EVENT1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_DIR_MISC_PERF_CONFIG_EVENT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_PERF_CONFIG_EVENT2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_PERF_CONFIG_EVENT2,
           CS_SM3_DIR_MISC_PERF_CONFIG_EVENT2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_DIR_MISC_PERF_CONFIG_EVENT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_PERF_CONFIG_EVENT2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_PERF_CONFIG_EVENT2,
           CS_SM3_DIR_MISC_PERF_CONFIG_EVENT2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_DIR_MISC_PERF_CONFIG_EVENT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_DIR_MISC_PERF_CONFIG_EVENT2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_DIR_MISC_PERF_CONFIG_EVENT2,
           CS_SM3_DIR_MISC_PERF_CONFIG_EVENT2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_DIR_MISC_PERF_CONFIG_EVENT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_PERF_CONFIG_EVENT3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_PERF_CONFIG_EVENT3,
           CS_SM3_DIR_MISC_PERF_CONFIG_EVENT3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_DIR_MISC_PERF_CONFIG_EVENT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_PERF_CONFIG_EVENT3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_PERF_CONFIG_EVENT3,
           CS_SM3_DIR_MISC_PERF_CONFIG_EVENT3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_DIR_MISC_PERF_CONFIG_EVENT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_DIR_MISC_PERF_CONFIG_EVENT3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_DIR_MISC_PERF_CONFIG_EVENT3,
           CS_SM3_DIR_MISC_PERF_CONFIG_EVENT3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_DIR_MISC_PERF_CONFIG_EVENT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_PERF_CONFIG_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_PERF_CONFIG_RESERVED2,
           CS_SM3_DIR_MISC_PERF_CONFIG_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_DIR_MISC_PERF_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_PERF_CONFIG_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_PERF_CONFIG_RESERVED2,
           CS_SM3_DIR_MISC_PERF_CONFIG_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_DIR_MISC_PERF_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_DIR_MISC_PERF_CONFIG_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_DIR_MISC_PERF_CONFIG_RESERVED2,
           CS_SM3_DIR_MISC_PERF_CONFIG_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_DIR_MISC_PERF_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_PERF_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_DIR_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_PERF_CONFIG_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_PERF_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_DIR_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.setBit<CS_SM3_DIR_MISC_PERF_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_DIR_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_DIR_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_PERF_CONFIG));
#endif
    return o_data.clearBit<CS_SM3_DIR_MISC_PERF_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_DIR_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_DIR_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_DIR_MISC_PERF_CONFIG_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_DIR_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_DIR_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_PERF_CONFIG));
#endif
    return i_data.getBit<CS_SM3_DIR_MISC_PERF_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_DIR_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_MCP_MISC_CERR_MESSAGE6(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_CERR_MESSAGE6;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_MCP_MISC_CERR_MESSAGE6(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_CERR_MESSAGE6;
#endif
    return fapi2::getScom(i_target, CS_SM3_MCP_MISC_CERR_MESSAGE6, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_MCP_MISC_CERR_MESSAGE6(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MESSAGE6));
#endif
    return fapi2::putScom(i_target, CS_SM3_MCP_MISC_CERR_MESSAGE6, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MESSAGE6));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6,
           CS_SM3_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MESSAGE6));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6,
           CS_SM3_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MESSAGE6));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6,
           CS_SM3_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_MCP_MISC_EPSILON_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_EPSILON_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_MCP_MISC_EPSILON_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_EPSILON_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM3_MCP_MISC_EPSILON_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_MCP_MISC_EPSILON_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_EPSILON_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM3_MCP_MISC_EPSILON_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_EPSILON_CONFIG_RATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_EPSILON_CONFIG_RATE,
           CS_SM3_MCP_MISC_EPSILON_CONFIG_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_EPSILON_CONFIG_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_EPSILON_CONFIG_RATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_EPSILON_CONFIG_RATE,
           CS_SM3_MCP_MISC_EPSILON_CONFIG_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_EPSILON_CONFIG_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_EPSILON_CONFIG_RATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_EPSILON_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_EPSILON_CONFIG_RATE,
           CS_SM3_MCP_MISC_EPSILON_CONFIG_RATE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_EPSILON_CONFIG_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_EPSILON_CONFIG_W0_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_EPSILON_CONFIG_W0_COUNT,
           CS_SM3_MCP_MISC_EPSILON_CONFIG_W0_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_EPSILON_CONFIG_W0_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_EPSILON_CONFIG_W0_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_EPSILON_CONFIG_W0_COUNT,
           CS_SM3_MCP_MISC_EPSILON_CONFIG_W0_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_EPSILON_CONFIG_W0_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_EPSILON_CONFIG_W0_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_EPSILON_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_EPSILON_CONFIG_W0_COUNT,
           CS_SM3_MCP_MISC_EPSILON_CONFIG_W0_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_EPSILON_CONFIG_W0_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_EPSILON_CONFIG_W1_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_EPSILON_CONFIG_W1_COUNT,
           CS_SM3_MCP_MISC_EPSILON_CONFIG_W1_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_EPSILON_CONFIG_W1_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_EPSILON_CONFIG_W1_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_EPSILON_CONFIG_W1_COUNT,
           CS_SM3_MCP_MISC_EPSILON_CONFIG_W1_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_EPSILON_CONFIG_W1_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_EPSILON_CONFIG_W1_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_EPSILON_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_EPSILON_CONFIG_W1_COUNT,
           CS_SM3_MCP_MISC_EPSILON_CONFIG_W1_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_EPSILON_CONFIG_W1_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_EPSILON_CONFIG_R0_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_EPSILON_CONFIG_R0_COUNT,
           CS_SM3_MCP_MISC_EPSILON_CONFIG_R0_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_EPSILON_CONFIG_R0_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_EPSILON_CONFIG_R0_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_EPSILON_CONFIG_R0_COUNT,
           CS_SM3_MCP_MISC_EPSILON_CONFIG_R0_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_EPSILON_CONFIG_R0_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_EPSILON_CONFIG_R0_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_EPSILON_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_EPSILON_CONFIG_R0_COUNT,
           CS_SM3_MCP_MISC_EPSILON_CONFIG_R0_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_EPSILON_CONFIG_R0_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_EPSILON_CONFIG_R1_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_EPSILON_CONFIG_R1_COUNT,
           CS_SM3_MCP_MISC_EPSILON_CONFIG_R1_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_EPSILON_CONFIG_R1_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_EPSILON_CONFIG_R1_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_EPSILON_CONFIG_R1_COUNT,
           CS_SM3_MCP_MISC_EPSILON_CONFIG_R1_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_EPSILON_CONFIG_R1_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_EPSILON_CONFIG_R1_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_EPSILON_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_EPSILON_CONFIG_R1_COUNT,
           CS_SM3_MCP_MISC_EPSILON_CONFIG_R1_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_EPSILON_CONFIG_R1_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_EPSILON_CONFIG_R2_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_EPSILON_CONFIG_R2_COUNT,
           CS_SM3_MCP_MISC_EPSILON_CONFIG_R2_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_EPSILON_CONFIG_R2_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_EPSILON_CONFIG_R2_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_EPSILON_CONFIG_R2_COUNT,
           CS_SM3_MCP_MISC_EPSILON_CONFIG_R2_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_EPSILON_CONFIG_R2_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_EPSILON_CONFIG_R2_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_EPSILON_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_EPSILON_CONFIG_R2_COUNT,
           CS_SM3_MCP_MISC_EPSILON_CONFIG_R2_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_MCP_MISC_EPSILON_CONFIG_R2_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1;
#endif
    return fapi2::getScom(i_target, CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return fapi2::putScom(i_target, CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_SNP_MISC_GENID_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_GENID_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_SNP_MISC_GENID_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_GENID_BAR;
#endif
    return fapi2::getScom(i_target, CS_SM3_SNP_MISC_GENID_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_SNP_MISC_GENID_BAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GENID_BAR));
#endif
    return fapi2::putScom(i_target, CS_SM3_SNP_MISC_GENID_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GENID_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GENID_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GENID_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GENID_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GENID_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GENID_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GENID_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GENID_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GENID_BAR_GENID_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GENID_BAR_GENID_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_GENID_BAR_GENID_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GENID_BAR_GENID_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GENID_BAR_GENID_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_GENID_BAR_GENID_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GENID_BAR_GENID_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GENID_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GENID_BAR_GENID_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_GENID_BAR_GENID_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GENID_BAR_GENID_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GENID_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GENID_BAR_GENID_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_GENID_BAR_GENID_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GENID_BAR_GENID_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GENID_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GENID_BAR_GENID_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_GENID_BAR_GENID_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_GENID_BAR_GENID_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GENID_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GENID_BAR_GENID_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_GENID_BAR_GENID_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR,
           CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR,
           CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GENID_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR,
           CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GENID_BAR_GENID_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GENID_BAR_GENID_RESERVED2,
           CS_SM3_SNP_MISC_GENID_BAR_GENID_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_GENID_BAR_GENID_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GENID_BAR_GENID_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GENID_BAR_GENID_RESERVED2,
           CS_SM3_SNP_MISC_GENID_BAR_GENID_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_GENID_BAR_GENID_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GENID_BAR_GENID_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GENID_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GENID_BAR_GENID_RESERVED2,
           CS_SM3_SNP_MISC_GENID_BAR_GENID_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_GENID_BAR_GENID_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GENID_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GENID_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GENID_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GENID_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_SNP_MISC_SM_STATUS(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_SM_STATUS;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_SNP_MISC_SM_STATUS(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_SM_STATUS;
#endif
    return fapi2::getScom(i_target, CS_SM3_SNP_MISC_SM_STATUS, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_SNP_MISC_SM_STATUS(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return fapi2::putScom(i_target, CS_SM3_SNP_MISC_SM_STATUS, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_PWR0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SM_STATUS_PWR0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PWR0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_PWR0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SM_STATUS_PWR0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PWR0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_PWR0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_SM_STATUS_PWR0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PWR0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_SM_STATUS_PWR0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_SM_STATUS_PWR0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PWR0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_SM_STATUS_PWR0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_SM_STATUS_PWR0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PWR0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_SM_STATUS_PWR0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_SM_STATUS_PWR0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PWR0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_PWR1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SM_STATUS_PWR1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PWR1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_PWR1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SM_STATUS_PWR1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PWR1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_PWR1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_SM_STATUS_PWR1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PWR1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_SM_STATUS_PWR1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_SM_STATUS_PWR1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PWR1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_SM_STATUS_PWR1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_SM_STATUS_PWR1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PWR1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_SM_STATUS_PWR1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_SM_STATUS_PWR1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PWR1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_PWR2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SM_STATUS_PWR2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PWR2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_PWR2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SM_STATUS_PWR2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PWR2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_PWR2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_SM_STATUS_PWR2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PWR2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_SM_STATUS_PWR2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_SM_STATUS_PWR2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PWR2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_SM_STATUS_PWR2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_SM_STATUS_PWR2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PWR2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_SM_STATUS_PWR2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_SM_STATUS_PWR2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PWR2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_XATS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SM_STATUS_XATS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_XATS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_XATS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SM_STATUS_XATS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_XATS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_XATS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_SM_STATUS_XATS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_XATS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_SM_STATUS_XATS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_SM_STATUS_XATS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_XATS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_SM_STATUS_XATS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_SM_STATUS_XATS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_XATS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_SM_STATUS_XATS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_SM_STATUS_XATS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_XATS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_INTS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SM_STATUS_INTS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_INTS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_INTS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SM_STATUS_INTS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_INTS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_INTS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_SM_STATUS_INTS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_INTS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_SM_STATUS_INTS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_SM_STATUS_INTS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_INTS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_SM_STATUS_INTS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_SM_STATUS_INTS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_INTS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_SM_STATUS_INTS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_SM_STATUS_INTS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_INTS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_CREQ0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SM_STATUS_CREQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_CREQ0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SM_STATUS_CREQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_CREQ0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_SM_STATUS_CREQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_SM_STATUS_CREQ0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_SM_STATUS_CREQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_SM_STATUS_CREQ0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_SM_STATUS_CREQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_SM_STATUS_CREQ0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_SM_STATUS_CREQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_CST0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SM_STATUS_CST0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_CST0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SM_STATUS_CST0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_CST0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_SM_STATUS_CST0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_SM_STATUS_CST0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_SM_STATUS_CST0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_SM_STATUS_CST0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_SM_STATUS_CST0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_SM_STATUS_CST0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_SM_STATUS_CST0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_PRB0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SM_STATUS_PRB0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PRB0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_PRB0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SM_STATUS_PRB0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PRB0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_PRB0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_SM_STATUS_PRB0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PRB0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_SM_STATUS_PRB0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_SM_STATUS_PRB0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PRB0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_SM_STATUS_PRB0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_SM_STATUS_PRB0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PRB0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_SM_STATUS_PRB0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_SM_STATUS_PRB0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PRB0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_CREQ1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SM_STATUS_CREQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_CREQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SM_STATUS_CREQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_CREQ1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_SM_STATUS_CREQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_SM_STATUS_CREQ1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_SM_STATUS_CREQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_SM_STATUS_CREQ1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_SM_STATUS_CREQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_SM_STATUS_CREQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_SM_STATUS_CREQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_CST1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SM_STATUS_CST1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_CST1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SM_STATUS_CST1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_CST1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_SM_STATUS_CST1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_SM_STATUS_CST1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_SM_STATUS_CST1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_SM_STATUS_CST1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_SM_STATUS_CST1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_SM_STATUS_CST1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_SM_STATUS_CST1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_PRB1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SM_STATUS_PRB1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PRB1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_PRB1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SM_STATUS_PRB1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PRB1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_PRB1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_SM_STATUS_PRB1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PRB1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_SM_STATUS_PRB1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_SM_STATUS_PRB1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PRB1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_SM_STATUS_PRB1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_SM_STATUS_PRB1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PRB1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_SM_STATUS_PRB1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_SM_STATUS_PRB1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PRB1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_CREQ2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SM_STATUS_CREQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CREQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_CREQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SM_STATUS_CREQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CREQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_CREQ2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_SM_STATUS_CREQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CREQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_SM_STATUS_CREQ2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_SM_STATUS_CREQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CREQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_SM_STATUS_CREQ2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_SM_STATUS_CREQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CREQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_SM_STATUS_CREQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_SM_STATUS_CREQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CREQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_CST2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SM_STATUS_CST2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CST2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_CST2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SM_STATUS_CST2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CST2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_CST2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_SM_STATUS_CST2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CST2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_SM_STATUS_CST2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_SM_STATUS_CST2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CST2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_SM_STATUS_CST2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_SM_STATUS_CST2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CST2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_SM_STATUS_CST2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_SM_STATUS_CST2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CST2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_PRB2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SM_STATUS_PRB2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PRB2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_PRB2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SM_STATUS_PRB2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PRB2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_PRB2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_SM_STATUS_PRB2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PRB2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_SM_STATUS_PRB2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_SM_STATUS_PRB2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PRB2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_SM_STATUS_PRB2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_SM_STATUS_PRB2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PRB2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_SM_STATUS_PRB2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_SM_STATUS_PRB2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PRB2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_CREQ3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SM_STATUS_CREQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CREQ3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_CREQ3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SM_STATUS_CREQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CREQ3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_CREQ3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_SM_STATUS_CREQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CREQ3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_SM_STATUS_CREQ3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_SM_STATUS_CREQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CREQ3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_SM_STATUS_CREQ3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_SM_STATUS_CREQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CREQ3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_SM_STATUS_CREQ3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_SM_STATUS_CREQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CREQ3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_CST3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SM_STATUS_CST3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CST3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_CST3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SM_STATUS_CST3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CST3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_CST3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_SM_STATUS_CST3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CST3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_SM_STATUS_CST3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_SM_STATUS_CST3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CST3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_SM_STATUS_CST3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_SM_STATUS_CST3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CST3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_SM_STATUS_CST3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_SM_STATUS_CST3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CST3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_PRB3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SM_STATUS_PRB3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PRB3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_PRB3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SM_STATUS_PRB3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PRB3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_PRB3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_SM_STATUS_PRB3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PRB3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_SM_STATUS_PRB3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_SM_STATUS_PRB3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PRB3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_SM_STATUS_PRB3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_SM_STATUS_PRB3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PRB3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_SM_STATUS_PRB3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_SM_STATUS_PRB3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PRB3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_CREQ4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SM_STATUS_CREQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CREQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_CREQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SM_STATUS_CREQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CREQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_CREQ4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_SM_STATUS_CREQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CREQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_SM_STATUS_CREQ4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_SM_STATUS_CREQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CREQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_SM_STATUS_CREQ4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_SM_STATUS_CREQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CREQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_SM_STATUS_CREQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_SM_STATUS_CREQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CREQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_CST4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SM_STATUS_CST4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CST4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_CST4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SM_STATUS_CST4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CST4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_CST4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_SM_STATUS_CST4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CST4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_SM_STATUS_CST4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_SM_STATUS_CST4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CST4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_SM_STATUS_CST4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_SM_STATUS_CST4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CST4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_SM_STATUS_CST4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_SM_STATUS_CST4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CST4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_PRB4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SM_STATUS_PRB4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PRB4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_PRB4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SM_STATUS_PRB4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PRB4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_PRB4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_SM_STATUS_PRB4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PRB4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_SM_STATUS_PRB4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_SM_STATUS_PRB4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PRB4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_SM_STATUS_PRB4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_SM_STATUS_PRB4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PRB4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_SM_STATUS_PRB4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_SM_STATUS_PRB4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_PRB4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_CHGRATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SM_STATUS_CHGRATE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CHGRATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_CHGRATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SM_STATUS_CHGRATE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CHGRATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_CHGRATE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_SM_STATUS_CHGRATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CHGRATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_SM_STATUS_CHGRATE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_SM_STATUS_CHGRATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CHGRATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_SM_STATUS_CHGRATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_SM_STATUS_CHGRATE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CHGRATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_CS_SM3_SNP_MISC_SM_STATUS_CHGRATE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_SM_STATUS_CHGRATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_CHGRATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SM_STATUS_RESERVED1,
           CS_SM3_SNP_MISC_SM_STATUS_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SM_STATUS_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SM_STATUS_RESERVED1,
           CS_SM3_SNP_MISC_SM_STATUS_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_SM_STATUS_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_SM_STATUS_RESERVED1,
           CS_SM3_SNP_MISC_SM_STATUS_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access CS_SM3_SNP_MISC_SM_STATUS_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_DAT_MISC_CONFIG1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = DAT_MISC_CONFIG1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_DAT_MISC_CONFIG1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = DAT_MISC_CONFIG1;
#endif
    return fapi2::getScom(i_target, DAT_MISC_CONFIG1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_DAT_MISC_CONFIG1(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return fapi2::putScom(i_target, DAT_MISC_CONFIG1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_MGR_CREDIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1_1_MGR_CREDIT,
           DAT_MISC_CONFIG1_1_MGR_CREDIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_MGR_CREDIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_MGR_CREDIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1_1_MGR_CREDIT,
           DAT_MISC_CONFIG1_1_MGR_CREDIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_MGR_CREDIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CONFIG1_1_MGR_CREDIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.extractToRight<DAT_MISC_CONFIG1_1_MGR_CREDIT,
           DAT_MISC_CONFIG1_1_MGR_CREDIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_MGR_CREDIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_MRG_PBTX_NBUF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1_1_MRG_PBTX_NBUF,
           DAT_MISC_CONFIG1_1_MRG_PBTX_NBUF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_MRG_PBTX_NBUF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_MRG_PBTX_NBUF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1_1_MRG_PBTX_NBUF,
           DAT_MISC_CONFIG1_1_MRG_PBTX_NBUF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_MRG_PBTX_NBUF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CONFIG1_1_MRG_PBTX_NBUF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.extractToRight<DAT_MISC_CONFIG1_1_MRG_PBTX_NBUF,
           DAT_MISC_CONFIG1_1_MRG_PBTX_NBUF_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_MRG_PBTX_NBUF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_MRG_RDBF_NBUF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1_1_MRG_RDBF_NBUF,
           DAT_MISC_CONFIG1_1_MRG_RDBF_NBUF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_MRG_RDBF_NBUF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_MRG_RDBF_NBUF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1_1_MRG_RDBF_NBUF,
           DAT_MISC_CONFIG1_1_MRG_RDBF_NBUF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_MRG_RDBF_NBUF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CONFIG1_1_MRG_RDBF_NBUF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.extractToRight<DAT_MISC_CONFIG1_1_MRG_RDBF_NBUF,
           DAT_MISC_CONFIG1_1_MRG_RDBF_NBUF_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_MRG_RDBF_NBUF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_MRG_IBWR_NBUF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1_1_MRG_IBWR_NBUF,
           DAT_MISC_CONFIG1_1_MRG_IBWR_NBUF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_MRG_IBWR_NBUF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_MRG_IBWR_NBUF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1_1_MRG_IBWR_NBUF,
           DAT_MISC_CONFIG1_1_MRG_IBWR_NBUF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_MRG_IBWR_NBUF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CONFIG1_1_MRG_IBWR_NBUF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.extractToRight<DAT_MISC_CONFIG1_1_MRG_IBWR_NBUF,
           DAT_MISC_CONFIG1_1_MRG_IBWR_NBUF_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_MRG_IBWR_NBUF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_MRG_IBRD_NBUF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1_1_MRG_IBRD_NBUF,
           DAT_MISC_CONFIG1_1_MRG_IBRD_NBUF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_MRG_IBRD_NBUF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_MRG_IBRD_NBUF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1_1_MRG_IBRD_NBUF,
           DAT_MISC_CONFIG1_1_MRG_IBRD_NBUF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_MRG_IBRD_NBUF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CONFIG1_1_MRG_IBRD_NBUF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.extractToRight<DAT_MISC_CONFIG1_1_MRG_IBRD_NBUF,
           DAT_MISC_CONFIG1_1_MRG_IBRD_NBUF_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_MRG_IBRD_NBUF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_MRG_BBRD_NBUF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1_1_MRG_BBRD_NBUF,
           DAT_MISC_CONFIG1_1_MRG_BBRD_NBUF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_MRG_BBRD_NBUF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_MRG_BBRD_NBUF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1_1_MRG_BBRD_NBUF,
           DAT_MISC_CONFIG1_1_MRG_BBRD_NBUF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_MRG_BBRD_NBUF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CONFIG1_1_MRG_BBRD_NBUF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.extractToRight<DAT_MISC_CONFIG1_1_MRG_BBRD_NBUF,
           DAT_MISC_CONFIG1_1_MRG_BBRD_NBUF_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_MRG_BBRD_NBUF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_MRG_OBRD_NBUF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1_1_MRG_OBRD_NBUF,
           DAT_MISC_CONFIG1_1_MRG_OBRD_NBUF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_MRG_OBRD_NBUF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_MRG_OBRD_NBUF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1_1_MRG_OBRD_NBUF,
           DAT_MISC_CONFIG1_1_MRG_OBRD_NBUF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_MRG_OBRD_NBUF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CONFIG1_1_MRG_OBRD_NBUF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.extractToRight<DAT_MISC_CONFIG1_1_MRG_OBRD_NBUF,
           DAT_MISC_CONFIG1_1_MRG_OBRD_NBUF_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_MRG_OBRD_NBUF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_MRG_CR_DIS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1_1_MRG_CR_DIS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_MRG_CR_DIS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_MRG_CR_DIS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1_1_MRG_CR_DIS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_MRG_CR_DIS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_MRG_CR_DIS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.setBit<DAT_MISC_CONFIG1_1_MRG_CR_DIS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_MRG_CR_DIS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_DAT_MISC_CONFIG1_1_MRG_CR_DIS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.clearBit<DAT_MISC_CONFIG1_1_MRG_CR_DIS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_MRG_CR_DIS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CONFIG1_1_MRG_CR_DIS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.extractToRight<DAT_MISC_CONFIG1_1_MRG_CR_DIS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_MRG_CR_DIS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_DAT_MISC_CONFIG1_1_MRG_CR_DIS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.getBit<DAT_MISC_CONFIG1_1_MRG_CR_DIS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_MRG_CR_DIS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_MRG_CTLW_CR_DIS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1_1_MRG_CTLW_CR_DIS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_MRG_CTLW_CR_DIS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_MRG_CTLW_CR_DIS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1_1_MRG_CTLW_CR_DIS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_MRG_CTLW_CR_DIS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_MRG_CTLW_CR_DIS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.setBit<DAT_MISC_CONFIG1_1_MRG_CTLW_CR_DIS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_MRG_CTLW_CR_DIS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_DAT_MISC_CONFIG1_1_MRG_CTLW_CR_DIS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.clearBit<DAT_MISC_CONFIG1_1_MRG_CTLW_CR_DIS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_MRG_CTLW_CR_DIS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CONFIG1_1_MRG_CTLW_CR_DIS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.extractToRight<DAT_MISC_CONFIG1_1_MRG_CTLW_CR_DIS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_MRG_CTLW_CR_DIS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_DAT_MISC_CONFIG1_1_MRG_CTLW_CR_DIS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.getBit<DAT_MISC_CONFIG1_1_MRG_CTLW_CR_DIS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_MRG_CTLW_CR_DIS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_NTLR_PAUSE_THRESH(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1_1_NTLR_PAUSE_THRESH,
           DAT_MISC_CONFIG1_1_NTLR_PAUSE_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_NTLR_PAUSE_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_NTLR_PAUSE_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1_1_NTLR_PAUSE_THRESH,
           DAT_MISC_CONFIG1_1_NTLR_PAUSE_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_NTLR_PAUSE_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CONFIG1_1_NTLR_PAUSE_THRESH(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.extractToRight<DAT_MISC_CONFIG1_1_NTLR_PAUSE_THRESH,
           DAT_MISC_CONFIG1_1_NTLR_PAUSE_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_NTLR_PAUSE_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_CTLR_HP_THRESH(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1_1_CTLR_HP_THRESH,
           DAT_MISC_CONFIG1_1_CTLR_HP_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_CTLR_HP_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_CTLR_HP_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1_1_CTLR_HP_THRESH,
           DAT_MISC_CONFIG1_1_CTLR_HP_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_CTLR_HP_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CONFIG1_1_CTLR_HP_THRESH(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.extractToRight<DAT_MISC_CONFIG1_1_CTLR_HP_THRESH,
           DAT_MISC_CONFIG1_1_CTLR_HP_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_CTLR_HP_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_NTLW_PAUSE_THRESH(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1_1_NTLW_PAUSE_THRESH,
           DAT_MISC_CONFIG1_1_NTLW_PAUSE_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_NTLW_PAUSE_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_NTLW_PAUSE_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1_1_NTLW_PAUSE_THRESH,
           DAT_MISC_CONFIG1_1_NTLW_PAUSE_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_NTLW_PAUSE_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CONFIG1_1_NTLW_PAUSE_THRESH(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.extractToRight<DAT_MISC_CONFIG1_1_NTLW_PAUSE_THRESH,
           DAT_MISC_CONFIG1_1_NTLW_PAUSE_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_NTLW_PAUSE_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_CTLW_HP_THRESH(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1_1_CTLW_HP_THRESH,
           DAT_MISC_CONFIG1_1_CTLW_HP_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_CTLW_HP_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_CTLW_HP_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1_1_CTLW_HP_THRESH,
           DAT_MISC_CONFIG1_1_CTLW_HP_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_CTLW_HP_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CONFIG1_1_CTLW_HP_THRESH(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.extractToRight<DAT_MISC_CONFIG1_1_CTLW_HP_THRESH,
           DAT_MISC_CONFIG1_1_CTLW_HP_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_CTLW_HP_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_PBTX_REDUCE_RTAG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1_1_PBTX_REDUCE_RTAG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_PBTX_REDUCE_RTAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_PBTX_REDUCE_RTAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1_1_PBTX_REDUCE_RTAG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_PBTX_REDUCE_RTAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_PBTX_REDUCE_RTAG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.setBit<DAT_MISC_CONFIG1_1_PBTX_REDUCE_RTAG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_PBTX_REDUCE_RTAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_DAT_MISC_CONFIG1_1_PBTX_REDUCE_RTAG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.clearBit<DAT_MISC_CONFIG1_1_PBTX_REDUCE_RTAG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_PBTX_REDUCE_RTAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CONFIG1_1_PBTX_REDUCE_RTAG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.extractToRight<DAT_MISC_CONFIG1_1_PBTX_REDUCE_RTAG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_PBTX_REDUCE_RTAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_DAT_MISC_CONFIG1_1_PBTX_REDUCE_RTAG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.getBit<DAT_MISC_CONFIG1_1_PBTX_REDUCE_RTAG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_PBTX_REDUCE_RTAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_PBTX_DELAY_BDONE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1_1_PBTX_DELAY_BDONE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_PBTX_DELAY_BDONE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_PBTX_DELAY_BDONE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1_1_PBTX_DELAY_BDONE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_PBTX_DELAY_BDONE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_PBTX_DELAY_BDONE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.setBit<DAT_MISC_CONFIG1_1_PBTX_DELAY_BDONE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_PBTX_DELAY_BDONE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_DAT_MISC_CONFIG1_1_PBTX_DELAY_BDONE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.clearBit<DAT_MISC_CONFIG1_1_PBTX_DELAY_BDONE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_PBTX_DELAY_BDONE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CONFIG1_1_PBTX_DELAY_BDONE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.extractToRight<DAT_MISC_CONFIG1_1_PBTX_DELAY_BDONE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_PBTX_DELAY_BDONE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_DAT_MISC_CONFIG1_1_PBTX_DELAY_BDONE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.getBit<DAT_MISC_CONFIG1_1_PBTX_DELAY_BDONE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_PBTX_DELAY_BDONE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_PBTX_FLIP_IMIN_BIG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1_1_PBTX_FLIP_IMIN_BIG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_PBTX_FLIP_IMIN_BIG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_PBTX_FLIP_IMIN_BIG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1_1_PBTX_FLIP_IMIN_BIG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_PBTX_FLIP_IMIN_BIG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_PBTX_FLIP_IMIN_BIG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.setBit<DAT_MISC_CONFIG1_1_PBTX_FLIP_IMIN_BIG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_PBTX_FLIP_IMIN_BIG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_DAT_MISC_CONFIG1_1_PBTX_FLIP_IMIN_BIG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.clearBit<DAT_MISC_CONFIG1_1_PBTX_FLIP_IMIN_BIG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_PBTX_FLIP_IMIN_BIG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CONFIG1_1_PBTX_FLIP_IMIN_BIG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.extractToRight<DAT_MISC_CONFIG1_1_PBTX_FLIP_IMIN_BIG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_PBTX_FLIP_IMIN_BIG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_DAT_MISC_CONFIG1_1_PBTX_FLIP_IMIN_BIG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.getBit<DAT_MISC_CONFIG1_1_PBTX_FLIP_IMIN_BIG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_PBTX_FLIP_IMIN_BIG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_PBTX_FLIP_IMIN_LITTLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1_1_PBTX_FLIP_IMIN_LITTLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_PBTX_FLIP_IMIN_LITTLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_PBTX_FLIP_IMIN_LITTLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1_1_PBTX_FLIP_IMIN_LITTLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_PBTX_FLIP_IMIN_LITTLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_PBTX_FLIP_IMIN_LITTLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.setBit<DAT_MISC_CONFIG1_1_PBTX_FLIP_IMIN_LITTLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_PBTX_FLIP_IMIN_LITTLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_DAT_MISC_CONFIG1_1_PBTX_FLIP_IMIN_LITTLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.clearBit<DAT_MISC_CONFIG1_1_PBTX_FLIP_IMIN_LITTLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_PBTX_FLIP_IMIN_LITTLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CONFIG1_1_PBTX_FLIP_IMIN_LITTLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.extractToRight<DAT_MISC_CONFIG1_1_PBTX_FLIP_IMIN_LITTLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_PBTX_FLIP_IMIN_LITTLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_DAT_MISC_CONFIG1_1_PBTX_FLIP_IMIN_LITTLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.getBit<DAT_MISC_CONFIG1_1_PBTX_FLIP_IMIN_LITTLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_PBTX_FLIP_IMIN_LITTLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_ALU_SAFE_LATENCY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1_1_ALU_SAFE_LATENCY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_ALU_SAFE_LATENCY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_ALU_SAFE_LATENCY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1_1_ALU_SAFE_LATENCY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_ALU_SAFE_LATENCY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_ALU_SAFE_LATENCY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.setBit<DAT_MISC_CONFIG1_1_ALU_SAFE_LATENCY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_ALU_SAFE_LATENCY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_DAT_MISC_CONFIG1_1_ALU_SAFE_LATENCY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.clearBit<DAT_MISC_CONFIG1_1_ALU_SAFE_LATENCY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_ALU_SAFE_LATENCY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CONFIG1_1_ALU_SAFE_LATENCY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.extractToRight<DAT_MISC_CONFIG1_1_ALU_SAFE_LATENCY,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_ALU_SAFE_LATENCY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_DAT_MISC_CONFIG1_1_ALU_SAFE_LATENCY(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.getBit<DAT_MISC_CONFIG1_1_ALU_SAFE_LATENCY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_ALU_SAFE_LATENCY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_ALU_FLIP_ENDIAN_BIG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1_1_ALU_FLIP_ENDIAN_BIG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_ALU_FLIP_ENDIAN_BIG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_ALU_FLIP_ENDIAN_BIG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1_1_ALU_FLIP_ENDIAN_BIG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_ALU_FLIP_ENDIAN_BIG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_ALU_FLIP_ENDIAN_BIG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.setBit<DAT_MISC_CONFIG1_1_ALU_FLIP_ENDIAN_BIG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_ALU_FLIP_ENDIAN_BIG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_DAT_MISC_CONFIG1_1_ALU_FLIP_ENDIAN_BIG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.clearBit<DAT_MISC_CONFIG1_1_ALU_FLIP_ENDIAN_BIG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_ALU_FLIP_ENDIAN_BIG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CONFIG1_1_ALU_FLIP_ENDIAN_BIG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.extractToRight<DAT_MISC_CONFIG1_1_ALU_FLIP_ENDIAN_BIG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_ALU_FLIP_ENDIAN_BIG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_DAT_MISC_CONFIG1_1_ALU_FLIP_ENDIAN_BIG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.getBit<DAT_MISC_CONFIG1_1_ALU_FLIP_ENDIAN_BIG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_ALU_FLIP_ENDIAN_BIG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_ALU_FLIP_ENDIAN_LITTLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1_1_ALU_FLIP_ENDIAN_LITTLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_ALU_FLIP_ENDIAN_LITTLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_ALU_FLIP_ENDIAN_LITTLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1_1_ALU_FLIP_ENDIAN_LITTLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_ALU_FLIP_ENDIAN_LITTLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_ALU_FLIP_ENDIAN_LITTLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.setBit<DAT_MISC_CONFIG1_1_ALU_FLIP_ENDIAN_LITTLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_ALU_FLIP_ENDIAN_LITTLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_DAT_MISC_CONFIG1_1_ALU_FLIP_ENDIAN_LITTLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.clearBit<DAT_MISC_CONFIG1_1_ALU_FLIP_ENDIAN_LITTLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_ALU_FLIP_ENDIAN_LITTLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CONFIG1_1_ALU_FLIP_ENDIAN_LITTLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.extractToRight<DAT_MISC_CONFIG1_1_ALU_FLIP_ENDIAN_LITTLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_ALU_FLIP_ENDIAN_LITTLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_DAT_MISC_CONFIG1_1_ALU_FLIP_ENDIAN_LITTLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.getBit<DAT_MISC_CONFIG1_1_ALU_FLIP_ENDIAN_LITTLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_ALU_FLIP_ENDIAN_LITTLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_PBTX_EARLY_AFTAG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1_1_PBTX_EARLY_AFTAG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_PBTX_EARLY_AFTAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_PBTX_EARLY_AFTAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1_1_PBTX_EARLY_AFTAG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_PBTX_EARLY_AFTAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_PBTX_EARLY_AFTAG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.setBit<DAT_MISC_CONFIG1_1_PBTX_EARLY_AFTAG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_PBTX_EARLY_AFTAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_DAT_MISC_CONFIG1_1_PBTX_EARLY_AFTAG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.clearBit<DAT_MISC_CONFIG1_1_PBTX_EARLY_AFTAG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_PBTX_EARLY_AFTAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CONFIG1_1_PBTX_EARLY_AFTAG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.extractToRight<DAT_MISC_CONFIG1_1_PBTX_EARLY_AFTAG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_PBTX_EARLY_AFTAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_DAT_MISC_CONFIG1_1_PBTX_EARLY_AFTAG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.getBit<DAT_MISC_CONFIG1_1_PBTX_EARLY_AFTAG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_PBTX_EARLY_AFTAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1__BRK0_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1__BRK0_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1__BRK0_OCAPI_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1__BRK0_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1__BRK0_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.setBit<DAT_MISC_CONFIG1__BRK0_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_DAT_MISC_CONFIG1__BRK0_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.clearBit<DAT_MISC_CONFIG1__BRK0_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CONFIG1__BRK0_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.extractToRight<DAT_MISC_CONFIG1__BRK0_OCAPI_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_DAT_MISC_CONFIG1__BRK0_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.getBit<DAT_MISC_CONFIG1__BRK0_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1__BRK1_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1__BRK1_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1__BRK1_OCAPI_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1__BRK1_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1__BRK1_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.setBit<DAT_MISC_CONFIG1__BRK1_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_DAT_MISC_CONFIG1__BRK1_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.clearBit<DAT_MISC_CONFIG1__BRK1_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CONFIG1__BRK1_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.extractToRight<DAT_MISC_CONFIG1__BRK1_OCAPI_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_DAT_MISC_CONFIG1__BRK1_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.getBit<DAT_MISC_CONFIG1__BRK1_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1__BRK2_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1__BRK2_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1__BRK2_OCAPI_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1__BRK2_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1__BRK2_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.setBit<DAT_MISC_CONFIG1__BRK2_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_DAT_MISC_CONFIG1__BRK2_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.clearBit<DAT_MISC_CONFIG1__BRK2_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CONFIG1__BRK2_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.extractToRight<DAT_MISC_CONFIG1__BRK2_OCAPI_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_DAT_MISC_CONFIG1__BRK2_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.getBit<DAT_MISC_CONFIG1__BRK2_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1__BRK3_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1__BRK3_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1__BRK3_OCAPI_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1__BRK3_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1__BRK3_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.setBit<DAT_MISC_CONFIG1__BRK3_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_DAT_MISC_CONFIG1__BRK3_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.clearBit<DAT_MISC_CONFIG1__BRK3_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CONFIG1__BRK3_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.extractToRight<DAT_MISC_CONFIG1__BRK3_OCAPI_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_DAT_MISC_CONFIG1__BRK3_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.getBit<DAT_MISC_CONFIG1__BRK3_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1__BRK4_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1__BRK4_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1__BRK4_OCAPI_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1__BRK4_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1__BRK4_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.setBit<DAT_MISC_CONFIG1__BRK4_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_DAT_MISC_CONFIG1__BRK4_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.clearBit<DAT_MISC_CONFIG1__BRK4_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CONFIG1__BRK4_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.extractToRight<DAT_MISC_CONFIG1__BRK4_OCAPI_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_DAT_MISC_CONFIG1__BRK4_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.getBit<DAT_MISC_CONFIG1__BRK4_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1__BRK0_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1__BRK0_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1__BRK0_NVLINK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1__BRK0_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1__BRK0_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.setBit<DAT_MISC_CONFIG1__BRK0_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_DAT_MISC_CONFIG1__BRK0_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.clearBit<DAT_MISC_CONFIG1__BRK0_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CONFIG1__BRK0_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.extractToRight<DAT_MISC_CONFIG1__BRK0_NVLINK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_DAT_MISC_CONFIG1__BRK0_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.getBit<DAT_MISC_CONFIG1__BRK0_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1__BRK1_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1__BRK1_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1__BRK1_NVLINK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1__BRK1_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1__BRK1_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.setBit<DAT_MISC_CONFIG1__BRK1_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_DAT_MISC_CONFIG1__BRK1_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.clearBit<DAT_MISC_CONFIG1__BRK1_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CONFIG1__BRK1_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.extractToRight<DAT_MISC_CONFIG1__BRK1_NVLINK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_DAT_MISC_CONFIG1__BRK1_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.getBit<DAT_MISC_CONFIG1__BRK1_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1__BRK2_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1__BRK2_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1__BRK2_NVLINK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1__BRK2_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1__BRK2_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.setBit<DAT_MISC_CONFIG1__BRK2_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_DAT_MISC_CONFIG1__BRK2_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.clearBit<DAT_MISC_CONFIG1__BRK2_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CONFIG1__BRK2_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.extractToRight<DAT_MISC_CONFIG1__BRK2_NVLINK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_DAT_MISC_CONFIG1__BRK2_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.getBit<DAT_MISC_CONFIG1__BRK2_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1__BRK3_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1__BRK3_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1__BRK3_NVLINK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1__BRK3_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1__BRK3_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.setBit<DAT_MISC_CONFIG1__BRK3_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_DAT_MISC_CONFIG1__BRK3_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.clearBit<DAT_MISC_CONFIG1__BRK3_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CONFIG1__BRK3_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.extractToRight<DAT_MISC_CONFIG1__BRK3_NVLINK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_DAT_MISC_CONFIG1__BRK3_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.getBit<DAT_MISC_CONFIG1__BRK3_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1__BRK4_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1__BRK4_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1__BRK4_NVLINK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1__BRK4_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1__BRK4_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.setBit<DAT_MISC_CONFIG1__BRK4_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_DAT_MISC_CONFIG1__BRK4_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.clearBit<DAT_MISC_CONFIG1__BRK4_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CONFIG1__BRK4_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.extractToRight<DAT_MISC_CONFIG1__BRK4_NVLINK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_DAT_MISC_CONFIG1__BRK4_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.getBit<DAT_MISC_CONFIG1__BRK4_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1__BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_CHKNSW_HW405659(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1_1_CHKNSW_HW405659,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_CHKNSW_HW405659 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_CHKNSW_HW405659(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1_1_CHKNSW_HW405659,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_CHKNSW_HW405659 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_CHKNSW_HW405659(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.setBit<DAT_MISC_CONFIG1_1_CHKNSW_HW405659>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_CHKNSW_HW405659 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_DAT_MISC_CONFIG1_1_CHKNSW_HW405659(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.clearBit<DAT_MISC_CONFIG1_1_CHKNSW_HW405659>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_CHKNSW_HW405659 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CONFIG1_1_CHKNSW_HW405659(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.extractToRight<DAT_MISC_CONFIG1_1_CHKNSW_HW405659,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_CHKNSW_HW405659 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_DAT_MISC_CONFIG1_1_CHKNSW_HW405659(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.getBit<DAT_MISC_CONFIG1_1_CHKNSW_HW405659>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_CHKNSW_HW405659 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1_1_RESERVED1,
           DAT_MISC_CONFIG1_1_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CONFIG1_1_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<DAT_MISC_CONFIG1_1_RESERVED1,
           DAT_MISC_CONFIG1_1_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CONFIG1_1_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CONFIG1));
#endif
    return i_data.extractToRight<DAT_MISC_CONFIG1_1_RESERVED1,
           DAT_MISC_CONFIG1_1_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access DAT_MISC_CONFIG1_1_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_FIR_ACTION1_REG_0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = FIR_ACTION1_REG_0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_FIR_ACTION1_REG_0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = FIR_ACTION1_REG_0;
#endif
    return fapi2::getScom(i_target, FIR_ACTION1_REG_0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_FIR_ACTION1_REG_0(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(FIR_ACTION1_REG_0));
#endif
    return fapi2::putScom(i_target, FIR_ACTION1_REG_0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_FIR_ACTION1_REG_0_FIR_ACTION1_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_ACTION1_REG_0));
#endif
    return o_data.insertFromRight<FIR_ACTION1_REG_0_FIR_ACTION1_0,
           FIR_ACTION1_REG_0_FIR_ACTION1_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_ACTION1_REG_0_FIR_ACTION1_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_ACTION1_REG_0_FIR_ACTION1_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_ACTION1_REG_0));
#endif
    return o_data.insertFromRight<FIR_ACTION1_REG_0_FIR_ACTION1_0,
           FIR_ACTION1_REG_0_FIR_ACTION1_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_ACTION1_REG_0_FIR_ACTION1_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_ACTION1_REG_0_FIR_ACTION1_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_ACTION1_REG_0));
#endif
    return i_data.extractToRight<FIR_ACTION1_REG_0_FIR_ACTION1_0,
           FIR_ACTION1_REG_0_FIR_ACTION1_0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_ACTION1_REG_0_FIR_ACTION1_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_FIR_MASK_REG_0_SCOM(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = FIR_MASK_REG_0_SCOM;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_FIR_MASK_REG_0_SCOM(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = FIR_MASK_REG_0_SCOM;
#endif
    return fapi2::getScom(i_target, FIR_MASK_REG_0_SCOM, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_FIR_MASK_REG_0_SCOM(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(FIR_MASK_REG_0_SCOM, FIR_MASK_REG_0_SCOM1, FIR_MASK_REG_0_SCOM2));
#endif
    return fapi2::putScom(i_target, FIR_MASK_REG_0_SCOM, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_FIR_MASK_REG_0_SCOM1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = FIR_MASK_REG_0_SCOM1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_FIR_MASK_REG_0_SCOM1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = FIR_MASK_REG_0_SCOM1;
#endif
    return fapi2::getScom(i_target, FIR_MASK_REG_0_SCOM1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_FIR_MASK_REG_0_SCOM1(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(FIR_MASK_REG_0_SCOM, FIR_MASK_REG_0_SCOM1, FIR_MASK_REG_0_SCOM2));
#endif
    return fapi2::putScom(i_target, FIR_MASK_REG_0_SCOM1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_FIR_MASK_REG_0_SCOM2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = FIR_MASK_REG_0_SCOM2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_FIR_MASK_REG_0_SCOM2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = FIR_MASK_REG_0_SCOM2;
#endif
    return fapi2::getScom(i_target, FIR_MASK_REG_0_SCOM2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_FIR_MASK_REG_0_SCOM2(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(FIR_MASK_REG_0_SCOM, FIR_MASK_REG_0_SCOM1, FIR_MASK_REG_0_SCOM2));
#endif
    return fapi2::putScom(i_target, FIR_MASK_REG_0_SCOM2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_FIR_MASK_REG_0_FIR_MASK_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_MASK_REG_0_SCOM, FIR_MASK_REG_0_SCOM1, FIR_MASK_REG_0_SCOM2));
#endif
    return o_data.insertFromRight<FIR_MASK_REG_0_FIR_MASK_0,
           FIR_MASK_REG_0_FIR_MASK_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_MASK_REG_0_FIR_MASK_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_FIR_MASK_REG_0_FIR_MASK_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_MASK_REG_0_SCOM, FIR_MASK_REG_0_SCOM1, FIR_MASK_REG_0_SCOM2));
#endif
    return o_data.insertFromRight<FIR_MASK_REG_0_FIR_MASK_0,
           FIR_MASK_REG_0_FIR_MASK_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_MASK_REG_0_FIR_MASK_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_FIR_MASK_REG_0_FIR_MASK_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_MASK_REG_0_SCOM, FIR_MASK_REG_0_SCOM1, FIR_MASK_REG_0_SCOM2));
#endif
    return i_data.extractToRight<FIR_MASK_REG_0_FIR_MASK_0,
           FIR_MASK_REG_0_FIR_MASK_0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access FIR_MASK_REG_0_FIR_MASK_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_FENCE_2_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_FENCE_2_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_FENCE_2_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_FENCE_2_CONFIG;
#endif
    return fapi2::getScom(i_target, MISC_REGS_FENCE_2_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_FENCE_2_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_FENCE_2_CONFIG));
#endif
    return fapi2::putScom(i_target, MISC_REGS_FENCE_2_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_FENCE_2_CONFIG_CONFIG_FENCE_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_FENCE_2_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_FENCE_2_CONFIG_CONFIG_FENCE_2,
           MISC_REGS_FENCE_2_CONFIG_CONFIG_FENCE_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_FENCE_2_CONFIG_CONFIG_FENCE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_FENCE_2_CONFIG_CONFIG_FENCE_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_FENCE_2_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_FENCE_2_CONFIG_CONFIG_FENCE_2,
           MISC_REGS_FENCE_2_CONFIG_CONFIG_FENCE_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_FENCE_2_CONFIG_CONFIG_FENCE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_FENCE_2_CONFIG_CONFIG_FENCE_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_FENCE_2_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_FENCE_2_CONFIG_CONFIG_FENCE_2,
           MISC_REGS_FENCE_2_CONFIG_CONFIG_FENCE_2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_FENCE_2_CONFIG_CONFIG_FENCE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_FREEZE_1_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_FREEZE_1_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_FREEZE_1_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_FREEZE_1_CONFIG;
#endif
    return fapi2::getScom(i_target, MISC_REGS_FREEZE_1_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_FREEZE_1_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_FREEZE_1_CONFIG));
#endif
    return fapi2::putScom(i_target, MISC_REGS_FREEZE_1_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_FREEZE_1_CONFIG_CONFIG_FREEZE_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_FREEZE_1_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_FREEZE_1_CONFIG_CONFIG_FREEZE_1,
           MISC_REGS_FREEZE_1_CONFIG_CONFIG_FREEZE_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_FREEZE_1_CONFIG_CONFIG_FREEZE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_FREEZE_1_CONFIG_CONFIG_FREEZE_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_FREEZE_1_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_FREEZE_1_CONFIG_CONFIG_FREEZE_1,
           MISC_REGS_FREEZE_1_CONFIG_CONFIG_FREEZE_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_FREEZE_1_CONFIG_CONFIG_FREEZE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_FREEZE_1_CONFIG_CONFIG_FREEZE_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_FREEZE_1_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_FREEZE_1_CONFIG_CONFIG_FREEZE_1,
           MISC_REGS_FREEZE_1_CONFIG_CONFIG_FREEZE_1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_FREEZE_1_CONFIG_CONFIG_FREEZE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_PESTB_DATA_PE9(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_DATA_PE9;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_PESTB_DATA_PE9(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_DATA_PE9;
#endif
    return fapi2::getScom(i_target, MISC_REGS_PESTB_DATA_PE9, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_PESTB_DATA_PE9(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE9));
#endif
    return fapi2::putScom(i_target, MISC_REGS_PESTB_DATA_PE9, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_DATA_PE9_DMA_STOPPED_STATE_PE9(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE9));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_DATA_PE9_DMA_STOPPED_STATE_PE9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_PESTB_DATA_PE9_DMA_STOPPED_STATE_PE9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_DATA_PE9_DMA_STOPPED_STATE_PE9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE9));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_DATA_PE9_DMA_STOPPED_STATE_PE9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_PESTB_DATA_PE9_DMA_STOPPED_STATE_PE9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_DATA_PE9_DMA_STOPPED_STATE_PE9(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE9));
#endif
    return o_data.setBit<MISC_REGS_PESTB_DATA_PE9_DMA_STOPPED_STATE_PE9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_PESTB_DATA_PE9_DMA_STOPPED_STATE_PE9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_PESTB_DATA_PE9_DMA_STOPPED_STATE_PE9(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE9));
#endif
    return o_data.clearBit<MISC_REGS_PESTB_DATA_PE9_DMA_STOPPED_STATE_PE9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_PESTB_DATA_PE9_DMA_STOPPED_STATE_PE9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_PESTB_DATA_PE9_DMA_STOPPED_STATE_PE9(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE9));
#endif
    return i_data.extractToRight<MISC_REGS_PESTB_DATA_PE9_DMA_STOPPED_STATE_PE9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_PESTB_DATA_PE9_DMA_STOPPED_STATE_PE9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_MISC_REGS_PESTB_DATA_PE9_DMA_STOPPED_STATE_PE9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE9));
#endif
    return i_data.getBit<MISC_REGS_PESTB_DATA_PE9_DMA_STOPPED_STATE_PE9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MISC_REGS_PESTB_DATA_PE9_DMA_STOPPED_STATE_PE9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NTL0_REGS_CERR_FIRST2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NTL0_REGS_CERR_FIRST2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NTL0_REGS_CERR_FIRST2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NTL0_REGS_CERR_FIRST2;
#endif
    return fapi2::getScom(i_target, NTL0_REGS_CERR_FIRST2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NTL0_REGS_CERR_FIRST2(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return fapi2::putScom(i_target, NTL0_REGS_CERR_FIRST2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_20(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_20(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_20(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_20,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_20(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_21(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_21(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_21(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_21,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_21(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_22(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_22(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_22(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_22,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_22(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_23,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_23(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_24(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_24(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_24(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_24,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_24(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_25(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_25(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_25(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_25,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_25(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_26(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_26(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_26(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_26,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_26(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_27(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_27(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_27(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_27,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_27(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_28(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_28(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_28(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_28,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_28(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_29(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_29(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_29(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_29,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_29(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_30(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_30(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_30(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_30,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_30(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_31(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_31(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_31(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_31,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_31(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_32(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_32(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_32(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_32,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_32(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_33(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_33(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_33(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_33,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_33(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_34(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_34(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_34(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_34,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_34(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_35(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_35(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_35(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_35,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_35(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_36(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_36(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_36(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_36,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_36(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_37(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_37(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_37(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_37,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_37(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_38(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_38(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_38(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_38,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_38(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_39(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_39(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_39(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_39,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_39(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_40(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_40(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_40(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_40,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_40(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_41(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_41(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_41(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_41,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_41(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_42(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_42(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_42(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_42,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_42(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_43(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_43(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_43(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_43,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_43(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_44(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_44(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_44(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_44,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_44(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_45(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_45(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_45(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_45,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_45(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_46(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_46(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_46(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_46,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_46(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_47(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_47(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_47(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_47,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_47(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_48(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_48(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_48(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_48,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_48(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_49(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_49(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_49(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_49,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_49(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_50(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_50(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_50(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_50,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_50(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_51(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_51(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_51(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_51,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_51(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_52(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_52(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_52(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_52,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_52(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_53(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_53(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_53(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_53,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_53(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_54(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_54,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_54(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_54,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_54(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_54(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_54(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_54,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_54(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_55(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_55,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_55(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_55,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_55(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_55(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_55(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_55,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_55(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_56(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_56,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_56(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_56,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_56(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_56(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_56(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_56,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_56(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_57(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_57,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_57(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_57,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_57(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_57(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_57(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_57,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_57(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_58(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_58,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_58(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_58,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_58(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_58(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_58(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_58,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_58(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_59(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_59,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_59(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_59,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_59(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_59(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_59(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_59,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_59(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_60(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_60,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_60(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_60,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_60(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_60(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_60(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_60,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_60(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_61(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_61,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_61(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_61,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_61(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_61(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_61(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_61,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_61(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_62(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_62,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_62(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_62,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_62(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_62(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_62(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_62,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_62(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_63(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_63,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_63(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST2_63,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST2_63(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST2_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST2_63(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST2_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST2_63(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST2_63,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST2_63(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST2_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NTL0_REGS_CERR_FIRST_MASK2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NTL0_REGS_CERR_FIRST_MASK2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NTL0_REGS_CERR_FIRST_MASK2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NTL0_REGS_CERR_FIRST_MASK2;
#endif
    return fapi2::getScom(i_target, NTL0_REGS_CERR_FIRST_MASK2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NTL0_REGS_CERR_FIRST_MASK2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return fapi2::putScom(i_target, NTL0_REGS_CERR_FIRST_MASK2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_20(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_20(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_20(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_20,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_20(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_21(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_21(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_21(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_21,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_21(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_22(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_22(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_22(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_22,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_22(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_23,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_23(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_24(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_24(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_24(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_24,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_24(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_25(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_25(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_25(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_25,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_25(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_26(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_26(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_26(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_26,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_26(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_27(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_27(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_27(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_27,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_27(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_28(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_28(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_28(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_28,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_28(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_29(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_29(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_29(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_29,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_29(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_30(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_30(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_30(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_30,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_30(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_31(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_31(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_31(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_31,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_31(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_32(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_32(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_32(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_32,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_32(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_33(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_33(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_33(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_33,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_33(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_34(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_34(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_34(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_34,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_34(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_35(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_35(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_35(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_35,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_35(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_36(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_36(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_36(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_36,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_36(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_37(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_37(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_37(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_37,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_37(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_38(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_38(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_38(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_38,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_38(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_39(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_39(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_39(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_39,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_39(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_40(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_40(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_40(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_40,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_40(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_41(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_41(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_41(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_41,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_41(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_42(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_42(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_42(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_42,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_42(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_43(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_43(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_43(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_43,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_43(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_44(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_44(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_44(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_44,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_44(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_45(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_45(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_45(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_45,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_45(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_46(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_46(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_46(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_46,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_46(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_47(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_47(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_47(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_47,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_47(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_48(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_48(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_48(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_48,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_48(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_49(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_49(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_49(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_49,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_49(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_50(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_50(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_50(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_50,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_50(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_51(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_51(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_51(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_51,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_51(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_52(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_52(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_52(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_52,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_52(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_53(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_53(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_53(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_53,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_53(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_54(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_54,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_54(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_54,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_54(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_54(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_54(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_54,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_54(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_55(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_55,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_55(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_55,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_55(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_55(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_55(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_55,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_55(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_56(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_56,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_56(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_56,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_56(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_56(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_56(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_56,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_56(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_57(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_57,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_57(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_57,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_57(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_57(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_57(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_57,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_57(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_58(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_58,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_58(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_58,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_58(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_58(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_58(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_58,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_58(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_59(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_59,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_59(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_59,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_59(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_59(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_59(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_59,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_59(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_60(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_60,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_60(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_60,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_60(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_60(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_60(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_60,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_60(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_61(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_61,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_61(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_61,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_61(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_61(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_61(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_61,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_61(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_62(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_62,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_62(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_62,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_62(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_62(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_62(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_62,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_62(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_63(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_63,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_63(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.insertFromRight<NTL0_REGS_CERR_FIRST_MASK2_63,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_CERR_FIRST_MASK2_63(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.setBit<NTL0_REGS_CERR_FIRST_MASK2_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_CERR_FIRST_MASK2_63(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return o_data.clearBit<NTL0_REGS_CERR_FIRST_MASK2_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_CERR_FIRST_MASK2_63(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.extractToRight<NTL0_REGS_CERR_FIRST_MASK2_63,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_CERR_FIRST_MASK2_63(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_CERR_FIRST_MASK2));
#endif
    return i_data.getBit<NTL0_REGS_CERR_FIRST_MASK2_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_CERR_FIRST_MASK2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NTL0_REGS_DEBUG1_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NTL0_REGS_DEBUG1_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NTL0_REGS_DEBUG1_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NTL0_REGS_DEBUG1_CONFIG;
#endif
    return fapi2::getScom(i_target, NTL0_REGS_DEBUG1_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NTL0_REGS_DEBUG1_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NTL0_REGS_DEBUG1_CONFIG));
#endif
    return fapi2::putScom(i_target, NTL0_REGS_DEBUG1_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_DEBUG1_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<NTL0_REGS_DEBUG1_CONFIG_POD0,
           NTL0_REGS_DEBUG1_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_DEBUG1_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_DEBUG1_CONFIG_POD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<NTL0_REGS_DEBUG1_CONFIG_POD0,
           NTL0_REGS_DEBUG1_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_DEBUG1_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_DEBUG1_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<NTL0_REGS_DEBUG1_CONFIG_POD0,
           NTL0_REGS_DEBUG1_CONFIG_POD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_DEBUG1_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_DEBUG1_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<NTL0_REGS_DEBUG1_CONFIG_POD1,
           NTL0_REGS_DEBUG1_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_DEBUG1_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_DEBUG1_CONFIG_POD1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<NTL0_REGS_DEBUG1_CONFIG_POD1,
           NTL0_REGS_DEBUG1_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_DEBUG1_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_DEBUG1_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<NTL0_REGS_DEBUG1_CONFIG_POD1,
           NTL0_REGS_DEBUG1_CONFIG_POD1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_DEBUG1_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_DEBUG1_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<NTL0_REGS_DEBUG1_CONFIG_POD2,
           NTL0_REGS_DEBUG1_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_DEBUG1_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_DEBUG1_CONFIG_POD2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<NTL0_REGS_DEBUG1_CONFIG_POD2,
           NTL0_REGS_DEBUG1_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_DEBUG1_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_DEBUG1_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<NTL0_REGS_DEBUG1_CONFIG_POD2,
           NTL0_REGS_DEBUG1_CONFIG_POD2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_DEBUG1_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_DEBUG1_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<NTL0_REGS_DEBUG1_CONFIG_POD3,
           NTL0_REGS_DEBUG1_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_DEBUG1_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_DEBUG1_CONFIG_POD3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<NTL0_REGS_DEBUG1_CONFIG_POD3,
           NTL0_REGS_DEBUG1_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_DEBUG1_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_DEBUG1_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<NTL0_REGS_DEBUG1_CONFIG_POD3,
           NTL0_REGS_DEBUG1_CONFIG_POD3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_DEBUG1_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_DEBUG1_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<NTL0_REGS_DEBUG1_CONFIG_POD4,
           NTL0_REGS_DEBUG1_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_DEBUG1_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_DEBUG1_CONFIG_POD4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<NTL0_REGS_DEBUG1_CONFIG_POD4,
           NTL0_REGS_DEBUG1_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_DEBUG1_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_DEBUG1_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<NTL0_REGS_DEBUG1_CONFIG_POD4,
           NTL0_REGS_DEBUG1_CONFIG_POD4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_DEBUG1_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_DEBUG1_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<NTL0_REGS_DEBUG1_CONFIG_POD5,
           NTL0_REGS_DEBUG1_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_DEBUG1_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_DEBUG1_CONFIG_POD5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<NTL0_REGS_DEBUG1_CONFIG_POD5,
           NTL0_REGS_DEBUG1_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_DEBUG1_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_DEBUG1_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<NTL0_REGS_DEBUG1_CONFIG_POD5,
           NTL0_REGS_DEBUG1_CONFIG_POD5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_DEBUG1_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_DEBUG1_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<NTL0_REGS_DEBUG1_CONFIG_POD6,
           NTL0_REGS_DEBUG1_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_DEBUG1_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_DEBUG1_CONFIG_POD6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<NTL0_REGS_DEBUG1_CONFIG_POD6,
           NTL0_REGS_DEBUG1_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_DEBUG1_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_DEBUG1_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<NTL0_REGS_DEBUG1_CONFIG_POD6,
           NTL0_REGS_DEBUG1_CONFIG_POD6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_DEBUG1_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_DEBUG1_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<NTL0_REGS_DEBUG1_CONFIG_POD7,
           NTL0_REGS_DEBUG1_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_DEBUG1_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_DEBUG1_CONFIG_POD7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<NTL0_REGS_DEBUG1_CONFIG_POD7,
           NTL0_REGS_DEBUG1_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_DEBUG1_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_DEBUG1_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<NTL0_REGS_DEBUG1_CONFIG_POD7,
           NTL0_REGS_DEBUG1_CONFIG_POD7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_DEBUG1_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_DEBUG1_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<NTL0_REGS_DEBUG1_CONFIG_POD8,
           NTL0_REGS_DEBUG1_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_DEBUG1_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_DEBUG1_CONFIG_POD8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<NTL0_REGS_DEBUG1_CONFIG_POD8,
           NTL0_REGS_DEBUG1_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_DEBUG1_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_DEBUG1_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<NTL0_REGS_DEBUG1_CONFIG_POD8,
           NTL0_REGS_DEBUG1_CONFIG_POD8_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_DEBUG1_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_DEBUG1_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<NTL0_REGS_DEBUG1_CONFIG_POD9,
           NTL0_REGS_DEBUG1_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_DEBUG1_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_DEBUG1_CONFIG_POD9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<NTL0_REGS_DEBUG1_CONFIG_POD9,
           NTL0_REGS_DEBUG1_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_DEBUG1_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_DEBUG1_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<NTL0_REGS_DEBUG1_CONFIG_POD9,
           NTL0_REGS_DEBUG1_CONFIG_POD9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_DEBUG1_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_DEBUG1_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<NTL0_REGS_DEBUG1_CONFIG_POD10,
           NTL0_REGS_DEBUG1_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_DEBUG1_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_DEBUG1_CONFIG_POD10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<NTL0_REGS_DEBUG1_CONFIG_POD10,
           NTL0_REGS_DEBUG1_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_DEBUG1_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_DEBUG1_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<NTL0_REGS_DEBUG1_CONFIG_POD10,
           NTL0_REGS_DEBUG1_CONFIG_POD10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_DEBUG1_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_DEBUG1_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<NTL0_REGS_DEBUG1_CONFIG_RESERVED1,
           NTL0_REGS_DEBUG1_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_DEBUG1_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_DEBUG1_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<NTL0_REGS_DEBUG1_CONFIG_RESERVED1,
           NTL0_REGS_DEBUG1_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_DEBUG1_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_DEBUG1_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<NTL0_REGS_DEBUG1_CONFIG_RESERVED1,
           NTL0_REGS_DEBUG1_CONFIG_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_DEBUG1_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<NTL0_REGS_DEBUG1_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_DEBUG1_CONFIG_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<NTL0_REGS_DEBUG1_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_DEBUG1_CONFIG));
#endif
    return o_data.setBit<NTL0_REGS_DEBUG1_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL0_REGS_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_DEBUG1_CONFIG));
#endif
    return o_data.clearBit<NTL0_REGS_DEBUG1_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<NTL0_REGS_DEBUG1_CONFIG_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL0_REGS_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_DEBUG1_CONFIG));
#endif
    return i_data.getBit<NTL0_REGS_DEBUG1_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NTL0_REGS_PRB_HA_PTR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NTL0_REGS_PRB_HA_PTR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NTL0_REGS_PRB_HA_PTR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NTL0_REGS_PRB_HA_PTR;
#endif
    return fapi2::getScom(i_target, NTL0_REGS_PRB_HA_PTR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NTL0_REGS_PRB_HA_PTR(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NTL0_REGS_PRB_HA_PTR));
#endif
    return fapi2::putScom(i_target, NTL0_REGS_PRB_HA_PTR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_PRB_HA_PTR_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_PRB_HA_PTR));
#endif
    return o_data.insertFromRight<NTL0_REGS_PRB_HA_PTR_RESERVED1,
           NTL0_REGS_PRB_HA_PTR_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_PRB_HA_PTR_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_PRB_HA_PTR_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_PRB_HA_PTR));
#endif
    return o_data.insertFromRight<NTL0_REGS_PRB_HA_PTR_RESERVED1,
           NTL0_REGS_PRB_HA_PTR_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_PRB_HA_PTR_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_PRB_HA_PTR_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_PRB_HA_PTR));
#endif
    return i_data.extractToRight<NTL0_REGS_PRB_HA_PTR_RESERVED1,
           NTL0_REGS_PRB_HA_PTR_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_PRB_HA_PTR_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_PRB_HA_PTR_START(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_PRB_HA_PTR));
#endif
    return o_data.insertFromRight<NTL0_REGS_PRB_HA_PTR_START,
           NTL0_REGS_PRB_HA_PTR_START_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_PRB_HA_PTR_START chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_PRB_HA_PTR_START(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_PRB_HA_PTR));
#endif
    return o_data.insertFromRight<NTL0_REGS_PRB_HA_PTR_START,
           NTL0_REGS_PRB_HA_PTR_START_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_PRB_HA_PTR_START chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_PRB_HA_PTR_START(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_PRB_HA_PTR));
#endif
    return i_data.extractToRight<NTL0_REGS_PRB_HA_PTR_START,
           NTL0_REGS_PRB_HA_PTR_START_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_PRB_HA_PTR_START chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_PRB_HA_PTR_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_PRB_HA_PTR));
#endif
    return o_data.insertFromRight<NTL0_REGS_PRB_HA_PTR_RESERVED2,
           NTL0_REGS_PRB_HA_PTR_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_PRB_HA_PTR_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_PRB_HA_PTR_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_PRB_HA_PTR));
#endif
    return o_data.insertFromRight<NTL0_REGS_PRB_HA_PTR_RESERVED2,
           NTL0_REGS_PRB_HA_PTR_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_PRB_HA_PTR_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_PRB_HA_PTR_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_PRB_HA_PTR));
#endif
    return i_data.extractToRight<NTL0_REGS_PRB_HA_PTR_RESERVED2,
           NTL0_REGS_PRB_HA_PTR_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_PRB_HA_PTR_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_PRB_HA_PTR_END(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_PRB_HA_PTR));
#endif
    return o_data.insertFromRight<NTL0_REGS_PRB_HA_PTR_END,
           NTL0_REGS_PRB_HA_PTR_END_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_PRB_HA_PTR_END chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL0_REGS_PRB_HA_PTR_END(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_PRB_HA_PTR));
#endif
    return o_data.insertFromRight<NTL0_REGS_PRB_HA_PTR_END,
           NTL0_REGS_PRB_HA_PTR_END_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_PRB_HA_PTR_END chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL0_REGS_PRB_HA_PTR_END(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL0_REGS_PRB_HA_PTR));
#endif
    return i_data.extractToRight<NTL0_REGS_PRB_HA_PTR_END,
           NTL0_REGS_PRB_HA_PTR_END_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL0_REGS_PRB_HA_PTR_END chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NTL1_REGS_CERR_MASK1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NTL1_REGS_CERR_MASK1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NTL1_REGS_CERR_MASK1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NTL1_REGS_CERR_MASK1;
#endif
    return fapi2::getScom(i_target, NTL1_REGS_CERR_MASK1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NTL1_REGS_CERR_MASK1(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return fapi2::putScom(i_target, NTL1_REGS_CERR_MASK1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_20(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_20(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_20(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_20,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_20(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_21(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_21(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_21(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_21,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_21(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_22(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_22(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_22(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_22,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_22(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_23,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_23(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_24(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_24(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_24(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_24,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_24(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_25(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_25(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_25(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_25,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_25(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_26(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_26(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_26(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_26,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_26(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_27(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_27(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_27(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_27,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_27(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_28(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_28(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_28(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_28,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_28(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_29(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_29(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_29(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_29,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_29(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_30(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_30(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_30(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_30,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_30(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_31(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_31(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_31(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_31,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_31(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_32(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_32(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_32(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_32,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_32(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_33(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_33(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_33(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_33,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_33(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_34(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_34(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_34(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_34,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_34(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_35(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_35(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_35(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_35,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_35(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_36(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_36(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_36(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_36,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_36(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_37(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_37(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_37(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_37,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_37(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_38(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_38(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_38(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_38,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_38(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_39(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_39(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_39(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_39,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_39(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_40(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_40(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_40(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_40,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_40(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_41(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_41(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_41(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_41,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_41(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_42(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_42(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_42(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_42,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_42(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_43(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_43(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_43(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_43,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_43(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_44(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_44(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_44(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_44,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_44(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_45(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_45(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_45(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_45,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_45(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_46(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_46(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_46(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_46,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_46(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_47(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_47(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_47(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_47,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_47(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_48(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_48(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_48(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_48,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_48(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_49(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_49(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_49(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_49,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_49(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_50(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_50(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_50(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_50,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_50(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_51(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_51(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_51(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_51,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_51(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_52(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_52(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_52(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_52,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_52(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_53(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_53(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_53(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_53,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_53(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_54(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_54,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_54(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_54,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_54(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_54(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_54(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_54,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_54(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_55(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_55,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_55(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_55,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_55(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_55(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_55(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_55,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_55(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_56(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_56,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_56(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_56,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_56(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_56(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_56(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_56,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_56(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_57(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_57,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_57(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_57,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_57(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_57(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_57(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_57,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_57(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_58(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_58,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_58(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_58,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_58(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_58(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_58(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_58,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_58(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_59(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_59,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_59(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_59,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_59(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_59(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_59(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_59,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_59(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_60(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_60,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_60(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_60,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_60(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_60(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_60(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_60,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_60(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_61(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_61,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_61(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_61,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_61(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_61(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_61(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_61,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_61(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_62(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_62,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_62(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_62,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_62(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_62(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_62(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_62,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_62(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_63(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_63,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_63(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.insertFromRight<NTL1_REGS_CERR_MASK1_63,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_CERR_MASK1_63(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.setBit<NTL1_REGS_CERR_MASK1_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NTL1_REGS_CERR_MASK1_63(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return o_data.clearBit<NTL1_REGS_CERR_MASK1_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_CERR_MASK1_63(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.extractToRight<NTL1_REGS_CERR_MASK1_63,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NTL1_REGS_CERR_MASK1_63(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_CERR_MASK1));
#endif
    return i_data.getBit<NTL1_REGS_CERR_MASK1_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_CERR_MASK1_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NTL1_REGS_RSP_DA_PTR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NTL1_REGS_RSP_DA_PTR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NTL1_REGS_RSP_DA_PTR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NTL1_REGS_RSP_DA_PTR;
#endif
    return fapi2::getScom(i_target, NTL1_REGS_RSP_DA_PTR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NTL1_REGS_RSP_DA_PTR(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NTL1_REGS_RSP_DA_PTR));
#endif
    return fapi2::putScom(i_target, NTL1_REGS_RSP_DA_PTR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_RSP_DA_PTR_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_RSP_DA_PTR));
#endif
    return o_data.insertFromRight<NTL1_REGS_RSP_DA_PTR_RESERVED1,
           NTL1_REGS_RSP_DA_PTR_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_RSP_DA_PTR_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_RSP_DA_PTR_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_RSP_DA_PTR));
#endif
    return o_data.insertFromRight<NTL1_REGS_RSP_DA_PTR_RESERVED1,
           NTL1_REGS_RSP_DA_PTR_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_RSP_DA_PTR_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_RSP_DA_PTR_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_RSP_DA_PTR));
#endif
    return i_data.extractToRight<NTL1_REGS_RSP_DA_PTR_RESERVED1,
           NTL1_REGS_RSP_DA_PTR_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_RSP_DA_PTR_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_RSP_DA_PTR_START(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_RSP_DA_PTR));
#endif
    return o_data.insertFromRight<NTL1_REGS_RSP_DA_PTR_START,
           NTL1_REGS_RSP_DA_PTR_START_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_RSP_DA_PTR_START chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_RSP_DA_PTR_START(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_RSP_DA_PTR));
#endif
    return o_data.insertFromRight<NTL1_REGS_RSP_DA_PTR_START,
           NTL1_REGS_RSP_DA_PTR_START_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_RSP_DA_PTR_START chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_RSP_DA_PTR_START(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_RSP_DA_PTR));
#endif
    return i_data.extractToRight<NTL1_REGS_RSP_DA_PTR_START,
           NTL1_REGS_RSP_DA_PTR_START_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_RSP_DA_PTR_START chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_RSP_DA_PTR_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_RSP_DA_PTR));
#endif
    return o_data.insertFromRight<NTL1_REGS_RSP_DA_PTR_RESERVED2,
           NTL1_REGS_RSP_DA_PTR_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_RSP_DA_PTR_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_RSP_DA_PTR_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_RSP_DA_PTR));
#endif
    return o_data.insertFromRight<NTL1_REGS_RSP_DA_PTR_RESERVED2,
           NTL1_REGS_RSP_DA_PTR_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_RSP_DA_PTR_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_RSP_DA_PTR_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_RSP_DA_PTR));
#endif
    return i_data.extractToRight<NTL1_REGS_RSP_DA_PTR_RESERVED2,
           NTL1_REGS_RSP_DA_PTR_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_RSP_DA_PTR_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_RSP_DA_PTR_END(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_RSP_DA_PTR));
#endif
    return o_data.insertFromRight<NTL1_REGS_RSP_DA_PTR_END,
           NTL1_REGS_RSP_DA_PTR_END_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_RSP_DA_PTR_END chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NTL1_REGS_RSP_DA_PTR_END(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_RSP_DA_PTR));
#endif
    return o_data.insertFromRight<NTL1_REGS_RSP_DA_PTR_END,
           NTL1_REGS_RSP_DA_PTR_END_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_RSP_DA_PTR_END chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NTL1_REGS_RSP_DA_PTR_END(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NTL1_REGS_RSP_DA_PTR));
#endif
    return i_data.extractToRight<NTL1_REGS_RSP_DA_PTR_END,
           NTL1_REGS_RSP_DA_PTR_END_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NTL1_REGS_RSP_DA_PTR_END chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL1_MISC_HAPPI_BAR2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_HAPPI_BAR2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL1_MISC_HAPPI_BAR2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_HAPPI_BAR2;
#endif
    return fapi2::getScom(i_target, OTL1_MISC_HAPPI_BAR2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL1_MISC_HAPPI_BAR2(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR2));
#endif
    return fapi2::putScom(i_target, OTL1_MISC_HAPPI_BAR2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_HAPPI_BAR2_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR2));
#endif
    return o_data.insertFromRight<OTL1_MISC_HAPPI_BAR2_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL1_MISC_HAPPI_BAR2_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_HAPPI_BAR2_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR2));
#endif
    return o_data.insertFromRight<OTL1_MISC_HAPPI_BAR2_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL1_MISC_HAPPI_BAR2_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_HAPPI_BAR2_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR2));
#endif
    return o_data.setBit<OTL1_MISC_HAPPI_BAR2_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL1_MISC_HAPPI_BAR2_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_HAPPI_BAR2_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR2));
#endif
    return o_data.clearBit<OTL1_MISC_HAPPI_BAR2_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL1_MISC_HAPPI_BAR2_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_HAPPI_BAR2_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR2));
#endif
    return i_data.extractToRight<OTL1_MISC_HAPPI_BAR2_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL1_MISC_HAPPI_BAR2_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_OTL1_MISC_HAPPI_BAR2_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR2));
#endif
    return i_data.getBit<OTL1_MISC_HAPPI_BAR2_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL1_MISC_HAPPI_BAR2_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_HAPPI_BAR2_ADDR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR2));
#endif
    return o_data.insertFromRight<OTL1_MISC_HAPPI_BAR2_ADDR,
           OTL1_MISC_HAPPI_BAR2_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL1_MISC_HAPPI_BAR2_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_HAPPI_BAR2_ADDR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR2));
#endif
    return o_data.insertFromRight<OTL1_MISC_HAPPI_BAR2_ADDR,
           OTL1_MISC_HAPPI_BAR2_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL1_MISC_HAPPI_BAR2_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_HAPPI_BAR2_ADDR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR2));
#endif
    return i_data.extractToRight<OTL1_MISC_HAPPI_BAR2_ADDR,
           OTL1_MISC_HAPPI_BAR2_ADDR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL1_MISC_HAPPI_BAR2_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_HAPPI_BAR2_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR2));
#endif
    return o_data.insertFromRight<OTL1_MISC_HAPPI_BAR2_MASK,
           OTL1_MISC_HAPPI_BAR2_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL1_MISC_HAPPI_BAR2_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_HAPPI_BAR2_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR2));
#endif
    return o_data.insertFromRight<OTL1_MISC_HAPPI_BAR2_MASK,
           OTL1_MISC_HAPPI_BAR2_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL1_MISC_HAPPI_BAR2_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_HAPPI_BAR2_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR2));
#endif
    return i_data.extractToRight<OTL1_MISC_HAPPI_BAR2_MASK,
           OTL1_MISC_HAPPI_BAR2_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL1_MISC_HAPPI_BAR2_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_HAPPI_BAR2_SUB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR2));
#endif
    return o_data.insertFromRight<OTL1_MISC_HAPPI_BAR2_SUB,
           OTL1_MISC_HAPPI_BAR2_SUB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL1_MISC_HAPPI_BAR2_SUB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_HAPPI_BAR2_SUB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR2));
#endif
    return o_data.insertFromRight<OTL1_MISC_HAPPI_BAR2_SUB,
           OTL1_MISC_HAPPI_BAR2_SUB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL1_MISC_HAPPI_BAR2_SUB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_HAPPI_BAR2_SUB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR2));
#endif
    return i_data.extractToRight<OTL1_MISC_HAPPI_BAR2_SUB,
           OTL1_MISC_HAPPI_BAR2_SUB_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL1_MISC_HAPPI_BAR2_SUB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL1_MISC_PMU_CONTROL1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_PMU_CONTROL1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL1_MISC_PMU_CONTROL1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_PMU_CONTROL1;
#endif
    return fapi2::getScom(i_target, OTL1_MISC_PMU_CONTROL1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL1_MISC_PMU_CONTROL1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL1));
#endif
    return fapi2::putScom(i_target, OTL1_MISC_PMU_CONTROL1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL1_C01_OPCODEA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL1));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL1_C01_OPCODEA,
           OTL1_MISC_PMU_CONTROL1_C01_OPCODEA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL1_MISC_PMU_CONTROL1_C01_OPCODEA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL1_C01_OPCODEA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL1));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL1_C01_OPCODEA,
           OTL1_MISC_PMU_CONTROL1_C01_OPCODEA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL1_MISC_PMU_CONTROL1_C01_OPCODEA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PMU_CONTROL1_C01_OPCODEA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL1));
#endif
    return i_data.extractToRight<OTL1_MISC_PMU_CONTROL1_C01_OPCODEA,
           OTL1_MISC_PMU_CONTROL1_C01_OPCODEA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL1_MISC_PMU_CONTROL1_C01_OPCODEA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL1_C01_OPCODEB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL1));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL1_C01_OPCODEB,
           OTL1_MISC_PMU_CONTROL1_C01_OPCODEB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL1_MISC_PMU_CONTROL1_C01_OPCODEB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL1_C01_OPCODEB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL1));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL1_C01_OPCODEB,
           OTL1_MISC_PMU_CONTROL1_C01_OPCODEB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL1_MISC_PMU_CONTROL1_C01_OPCODEB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PMU_CONTROL1_C01_OPCODEB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL1));
#endif
    return i_data.extractToRight<OTL1_MISC_PMU_CONTROL1_C01_OPCODEB,
           OTL1_MISC_PMU_CONTROL1_C01_OPCODEB_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL1_MISC_PMU_CONTROL1_C01_OPCODEB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL1_C23_OPCODEA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL1));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL1_C23_OPCODEA,
           OTL1_MISC_PMU_CONTROL1_C23_OPCODEA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL1_MISC_PMU_CONTROL1_C23_OPCODEA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL1_C23_OPCODEA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL1));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL1_C23_OPCODEA,
           OTL1_MISC_PMU_CONTROL1_C23_OPCODEA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL1_MISC_PMU_CONTROL1_C23_OPCODEA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PMU_CONTROL1_C23_OPCODEA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL1));
#endif
    return i_data.extractToRight<OTL1_MISC_PMU_CONTROL1_C23_OPCODEA,
           OTL1_MISC_PMU_CONTROL1_C23_OPCODEA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL1_MISC_PMU_CONTROL1_C23_OPCODEA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL1_C23_OPCODEB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL1));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL1_C23_OPCODEB,
           OTL1_MISC_PMU_CONTROL1_C23_OPCODEB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL1_MISC_PMU_CONTROL1_C23_OPCODEB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL1_C23_OPCODEB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL1));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL1_C23_OPCODEB,
           OTL1_MISC_PMU_CONTROL1_C23_OPCODEB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL1_MISC_PMU_CONTROL1_C23_OPCODEB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PMU_CONTROL1_C23_OPCODEB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL1));
#endif
    return i_data.extractToRight<OTL1_MISC_PMU_CONTROL1_C23_OPCODEB,
           OTL1_MISC_PMU_CONTROL1_C23_OPCODEB_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL1_MISC_PMU_CONTROL1_C23_OPCODEB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL1_C01_DLA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL1));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL1_C01_DLA,
           OTL1_MISC_PMU_CONTROL1_C01_DLA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL1_MISC_PMU_CONTROL1_C01_DLA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL1_C01_DLA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL1));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL1_C01_DLA,
           OTL1_MISC_PMU_CONTROL1_C01_DLA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL1_MISC_PMU_CONTROL1_C01_DLA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PMU_CONTROL1_C01_DLA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL1));
#endif
    return i_data.extractToRight<OTL1_MISC_PMU_CONTROL1_C01_DLA,
           OTL1_MISC_PMU_CONTROL1_C01_DLA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL1_MISC_PMU_CONTROL1_C01_DLA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL1_C01_DLB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL1));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL1_C01_DLB,
           OTL1_MISC_PMU_CONTROL1_C01_DLB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL1_MISC_PMU_CONTROL1_C01_DLB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL1_C01_DLB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL1));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL1_C01_DLB,
           OTL1_MISC_PMU_CONTROL1_C01_DLB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL1_MISC_PMU_CONTROL1_C01_DLB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PMU_CONTROL1_C01_DLB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL1));
#endif
    return i_data.extractToRight<OTL1_MISC_PMU_CONTROL1_C01_DLB,
           OTL1_MISC_PMU_CONTROL1_C01_DLB_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL1_MISC_PMU_CONTROL1_C01_DLB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL1_C23_DLA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL1));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL1_C23_DLA,
           OTL1_MISC_PMU_CONTROL1_C23_DLA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL1_MISC_PMU_CONTROL1_C23_DLA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL1_C23_DLA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL1));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL1_C23_DLA,
           OTL1_MISC_PMU_CONTROL1_C23_DLA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL1_MISC_PMU_CONTROL1_C23_DLA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PMU_CONTROL1_C23_DLA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL1));
#endif
    return i_data.extractToRight<OTL1_MISC_PMU_CONTROL1_C23_DLA,
           OTL1_MISC_PMU_CONTROL1_C23_DLA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL1_MISC_PMU_CONTROL1_C23_DLA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL1_C23_DLB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL1));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL1_C23_DLB,
           OTL1_MISC_PMU_CONTROL1_C23_DLB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL1_MISC_PMU_CONTROL1_C23_DLB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL1_C23_DLB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL1));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL1_C23_DLB,
           OTL1_MISC_PMU_CONTROL1_C23_DLB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL1_MISC_PMU_CONTROL1_C23_DLB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PMU_CONTROL1_C23_DLB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL1));
#endif
    return i_data.extractToRight<OTL1_MISC_PMU_CONTROL1_C23_DLB,
           OTL1_MISC_PMU_CONTROL1_C23_DLB_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL1_MISC_PMU_CONTROL1_C23_DLB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL1_OPCODE_LATENCY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL1));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL1_OPCODE_LATENCY,
           OTL1_MISC_PMU_CONTROL1_OPCODE_LATENCY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL1_MISC_PMU_CONTROL1_OPCODE_LATENCY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL1_OPCODE_LATENCY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL1));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL1_OPCODE_LATENCY,
           OTL1_MISC_PMU_CONTROL1_OPCODE_LATENCY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL1_MISC_PMU_CONTROL1_OPCODE_LATENCY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PMU_CONTROL1_OPCODE_LATENCY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL1));
#endif
    return i_data.extractToRight<OTL1_MISC_PMU_CONTROL1_OPCODE_LATENCY,
           OTL1_MISC_PMU_CONTROL1_OPCODE_LATENCY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL1_MISC_PMU_CONTROL1_OPCODE_LATENCY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL1_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL1));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL1_RESERVED1,
           OTL1_MISC_PMU_CONTROL1_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL1_MISC_PMU_CONTROL1_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL1_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL1));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL1_RESERVED1,
           OTL1_MISC_PMU_CONTROL1_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL1_MISC_PMU_CONTROL1_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PMU_CONTROL1_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL1));
#endif
    return i_data.extractToRight<OTL1_MISC_PMU_CONTROL1_RESERVED1,
           OTL1_MISC_PMU_CONTROL1_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access OTL1_MISC_PMU_CONTROL1_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}


}
}

#endif
